101180
Test: public void test0907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0907"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.yearOfCentury(); org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology0); int int3 = dateTime2.getEra(); int int4 = dateTime2.getMillisOfSecond(); org.joda.time.DateTime.Property property5 = dateTime2.year(); org.joda.time.ReadableDuration readableDuration6 = null; org.joda.time.DateTime dateTime7 = dateTime2.plus(readableDuration6); int int8 = dateTime7.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay(); int int10 = dateTime7.get(dateTimeFieldType9); org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.eras(); org.joda.time.field.UnsupportedDurationField unsupportedDurationField12 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType11); org.joda.time.field.PreciseDurationField preciseDurationField14 = new org.joda.time.field.PreciseDurationField(durationFieldType11, 0L); org.joda.time.DurationFieldType durationFieldType15 = preciseDurationField14.getType(); boolean boolean16 = preciseDurationField14.isPrecise(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField17 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType9, (org.joda.time.DurationField) preciseDurationField14); org.joda.time.chrono.GJChronology gJChronology19 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField20 = gJChronology19.yearOfCentury(); org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology19); org.joda.time.DurationField durationField22 = gJChronology19.eras(); org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology19); org.joda.time.ReadablePeriod readablePeriod24 = null; org.joda.time.LocalDate localDate26 = localDate23.withPeriodAdded(readablePeriod24, (-28800000)); org.joda.time.LocalDate.Property property27 = localDate23.dayOfMonth(); org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology30 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField31 = gJChronology30.yearOfCentury(); org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology30); int int33 = dateTime32.getEra(); int int34 = dateTime32.getYear(); boolean boolean35 = instant29.isBefore((org.joda.time.ReadableInstant) dateTime32); org.joda.time.DateTime dateTime37 = dateTime32.withMillis((long) (-25200000)); org.joda.time.ReadablePeriod readablePeriod38 = null; org.joda.time.DateTime dateTime39 = dateTime37.plus(readablePeriod38); int int40 = dateTime37.getYear(); int int41 = property27.compareTo((org.joda.time.ReadableInstant) dateTime37); org.joda.time.LocalDate localDate42 = property27.withMinimumValue(); org.joda.time.chrono.GJChronology gJChronology44 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField45 = gJChronology44.yearOfCentury(); org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology44); org.joda.time.DurationField durationField47 = gJChronology44.eras(); org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology44); org.joda.time.ReadablePeriod readablePeriod49 = null; org.joda.time.LocalDate localDate51 = localDate48.withPeriodAdded(readablePeriod49, (-28800000)); org.joda.time.IllegalFieldValueException illegalFieldValueException56 = new org.joda.time.IllegalFieldValueException("2021-07-09T17:45:56.507-07:00", (java.lang.Number) (-1), (java.lang.Number) (byte) 1, (java.lang.Number) (-1)); java.lang.String str57 = illegalFieldValueException56.getIllegalValueAsString(); boolean boolean58 = localDate48.equals((java.lang.Object) str57); int int59 = localDate42.compareTo((org.joda.time.ReadablePartial) localDate48); org.joda.time.chrono.GJChronology gJChronology60 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField61 = gJChronology60.yearOfCentury(); org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology60); int int63 = dateTime62.getEra(); org.joda.time.ReadableInstant readableInstant64 = null; boolean boolean65 = dateTime62.isBefore(readableInstant64); org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime62); int int67 = dateTime62.getMonthOfYear(); org.joda.time.Chronology chronology68 = dateTime62.getChronology(); org.joda.time.DateTime dateTime69 = localDate42.toDateTime((org.joda.time.ReadableInstant) dateTime62); java.util.Locale locale71 = null; try { java.lang.String str72 = unsupportedDateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDate42, 650, locale71); } catch (java.lang.UnsupportedOperationException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])