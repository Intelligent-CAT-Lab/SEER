64038
Test: public void test540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test540"); com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null; com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) 0.0f, true); com.fasterxml.jackson.core.JsonEncoding jsonEncoding4 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE; java.lang.String str5 = jsonEncoding4.getJavaName(); com.fasterxml.jackson.core.io.IOContext iOContext6 = iOContext3.withEncoding(jsonEncoding4); com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler8 = null; com.fasterxml.jackson.core.io.IOContext iOContext11 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler8, (java.lang.Object) 0.0f, true); com.fasterxml.jackson.core.JsonEncoding jsonEncoding12 = iOContext11.getEncoding(); java.io.InputStream inputStream13 = null; byte[] byteArray14 = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS; com.fasterxml.jackson.core.io.MergedStream mergedStream17 = new com.fasterxml.jackson.core.io.MergedStream(iOContext11, inputStream13, byteArray14, (int) '4', (-1)); boolean boolean18 = mergedStream17.markSupported(); int int19 = mergedStream17.available(); com.fasterxml.jackson.core.ObjectCodec objectCodec20 = null; com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer21 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot(); java.lang.String str22 = byteQuadsCanonicalizer21.toString(); int int23 = byteQuadsCanonicalizer21.totalCount(); int int24 = byteQuadsCanonicalizer21.bucketCount(); byte[] byteArray25 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes(); com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser29 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext6, (int) (byte) -17, (java.io.InputStream) mergedStream17, objectCodec20, byteQuadsCanonicalizer21, byteArray25, (-1695542384), 208279835, false); java.lang.String str31 = uTF8StreamJsonParser29.getValueAsString("UTF-8"); int[] intArray32 = com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(); uTF8StreamJsonParser29._quadBuffer = intArray32; com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer34 = uTF8StreamJsonParser29._symbols; }
Code: public String getValueAsString() throws IOException { if (_currToken == JsonToken.VALUE_STRING) { return getText(); } return getValueAsString(null); }
tensor([[0.0481, 0.0614, 0.0647, 0.1121, 0.0255, 0.0665, 0.1298, 0.0474, 0.0751,
         0.0295, 0.0665, 0.0532, 0.0925, 0.0210, 0.0532, 0.0327, 0.0210],
        [0.0485, 0.0566, 0.0818, 0.1308, 0.0267, 0.0682, 0.1410, 0.0505, 0.0626,
         0.0245, 0.0682, 0.0486, 0.0793, 0.0175, 0.0486, 0.0291, 0.0175],
        [0.0409, 0.0693, 0.0844, 0.1136, 0.0301, 0.0737, 0.1189, 0.0488, 0.0719,
         0.0235, 0.0737, 0.0480, 0.0897, 0.0182, 0.0480, 0.0290, 0.0182],
        [0.0326, 0.0661, 0.0655, 0.1649, 0.0196, 0.0727, 0.1454, 0.0406, 0.0518,
         0.0167, 0.0727, 0.0522, 0.0962, 0.0146, 0.0522, 0.0216, 0.0146],
        [0.0384, 0.0675, 0.0500, 0.1492, 0.0206, 0.0638, 0.1559, 0.0430, 0.0756,
         0.0206, 0.0638, 0.0544, 0.0899, 0.0139, 0.0544, 0.0252, 0.0139],
        [0.0505, 0.0760, 0.0783, 0.0901, 0.0333, 0.0773, 0.0875, 0.0446, 0.0549,
         0.0310, 0.0773, 0.0586, 0.0917, 0.0279, 0.0586, 0.0349, 0.0279],
        [0.0304, 0.0705, 0.0593, 0.1789, 0.0186, 0.0615, 0.1704, 0.0396, 0.0631,
         0.0115, 0.0615, 0.0399, 0.1143, 0.0095, 0.0399, 0.0218, 0.0095],
        [0.0444, 0.0566, 0.0662, 0.1383, 0.0234, 0.0671, 0.1492, 0.0477, 0.0584,
         0.0228, 0.0671, 0.0568, 0.0951, 0.0146, 0.0568, 0.0208, 0.0146],
        [0.0277, 0.0779, 0.0644, 0.1314, 0.0203, 0.0670, 0.1534, 0.0490, 0.0695,
         0.0143, 0.0670, 0.0454, 0.1102, 0.0139, 0.0454, 0.0292, 0.0139],
        [0.0354, 0.0699, 0.0594, 0.1283, 0.0223, 0.0635, 0.1368, 0.0486, 0.0639,
         0.0286, 0.0635, 0.0548, 0.0967, 0.0175, 0.0548, 0.0386, 0.0175],
        [0.0505, 0.0760, 0.0783, 0.0901, 0.0333, 0.0773, 0.0875, 0.0446, 0.0549,
         0.0310, 0.0773, 0.0586, 0.0917, 0.0279, 0.0586, 0.0349, 0.0279],
        [0.0333, 0.0743, 0.0715, 0.1250, 0.0258, 0.0649, 0.1375, 0.0439, 0.0645,
         0.0206, 0.0649, 0.0484, 0.1115, 0.0178, 0.0484, 0.0298, 0.0178],
        [0.0391, 0.0840, 0.0656, 0.1431, 0.0159, 0.0728, 0.1416, 0.0438, 0.0613,
         0.0174, 0.0728, 0.0506, 0.0986, 0.0080, 0.0506, 0.0269, 0.0080],
        [0.0321, 0.0589, 0.0479, 0.1357, 0.0245, 0.0761, 0.1225, 0.0377, 0.0551,
         0.0274, 0.0761, 0.0683, 0.1101, 0.0167, 0.0683, 0.0260, 0.0167],
        [0.0333, 0.0743, 0.0715, 0.1250, 0.0258, 0.0649, 0.1375, 0.0439, 0.0645,
         0.0206, 0.0649, 0.0484, 0.1115, 0.0178, 0.0484, 0.0298, 0.0178],
        [0.0395, 0.0616, 0.0706, 0.1159, 0.0213, 0.0732, 0.1706, 0.0422, 0.0679,
         0.0181, 0.0732, 0.0476, 0.0897, 0.0126, 0.0476, 0.0358, 0.0126],
        [0.0321, 0.0589, 0.0479, 0.1357, 0.0245, 0.0761, 0.1225, 0.0377, 0.0551,
         0.0274, 0.0761, 0.0683, 0.1101, 0.0167, 0.0683, 0.0260, 0.0167]])