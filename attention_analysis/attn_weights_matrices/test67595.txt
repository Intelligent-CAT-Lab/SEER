67595
Test: public void test26() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test26"); com.fasterxml.jackson.databind.JavaType javaType0 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer2 = null; com.fasterxml.jackson.databind.ser.std.SqlDateSerializer sqlDateSerializer4 = new com.fasterxml.jackson.databind.ser.std.SqlDateSerializer((java.lang.Boolean) false); com.fasterxml.jackson.databind.SerializerProvider serializerProvider5 = null; com.fasterxml.jackson.databind.BeanProperty beanProperty6 = null; com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer7 = sqlDateSerializer4.createContextual(serializerProvider5, beanProperty6); com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer objectArraySerializer8 = new com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer(javaType0, false, typeSerializer2, (com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) wildcardJsonSerializer7); com.fasterxml.jackson.databind.ObjectMapper objectMapper9 = null; com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory10 = new com.fasterxml.jackson.databind.MappingJsonFactory(objectMapper9); com.fasterxml.jackson.databind.ser.DefaultSerializerProvider defaultSerializerProvider11 = null; com.fasterxml.jackson.databind.deser.DefaultDeserializationContext defaultDeserializationContext12 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper13 = new com.fasterxml.jackson.databind.ObjectMapper((com.fasterxml.jackson.core.JsonFactory) mappingJsonFactory10, defaultSerializerProvider11, defaultDeserializationContext12); com.fasterxml.jackson.databind.MapperFeature[] mapperFeatureArray14 = new com.fasterxml.jackson.databind.MapperFeature[] {}; com.fasterxml.jackson.databind.ObjectMapper objectMapper15 = objectMapper13.enable(mapperFeatureArray14); com.fasterxml.jackson.core.JsonGenerator jsonGenerator16 = null; com.fasterxml.jackson.databind.SerializerProvider serializerProvider17 = null; objectArraySerializer8.serializeContents((java.lang.Object[]) mapperFeatureArray14, jsonGenerator16, serializerProvider17); com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap propertySerializerMap19 = com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues(); objectArraySerializer8._dynamicSerializers = propertySerializerMap19; com.fasterxml.jackson.databind.JavaType javaType21 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer23 = null; com.fasterxml.jackson.databind.ser.std.SqlDateSerializer sqlDateSerializer25 = new com.fasterxml.jackson.databind.ser.std.SqlDateSerializer((java.lang.Boolean) false); com.fasterxml.jackson.databind.SerializerProvider serializerProvider26 = null; com.fasterxml.jackson.databind.BeanProperty beanProperty27 = null; com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer28 = sqlDateSerializer25.createContextual(serializerProvider26, beanProperty27); com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer objectArraySerializer29 = new com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer(javaType21, false, typeSerializer23, (com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) wildcardJsonSerializer28); com.fasterxml.jackson.databind.ObjectMapper objectMapper30 = null; com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory31 = new com.fasterxml.jackson.databind.MappingJsonFactory(objectMapper30); com.fasterxml.jackson.databind.ser.DefaultSerializerProvider defaultSerializerProvider32 = null; com.fasterxml.jackson.databind.deser.DefaultDeserializationContext defaultDeserializationContext33 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper34 = new com.fasterxml.jackson.databind.ObjectMapper((com.fasterxml.jackson.core.JsonFactory) mappingJsonFactory31, defaultSerializerProvider32, defaultDeserializationContext33); com.fasterxml.jackson.databind.MapperFeature[] mapperFeatureArray35 = new com.fasterxml.jackson.databind.MapperFeature[] {}; com.fasterxml.jackson.databind.ObjectMapper objectMapper36 = objectMapper34.enable(mapperFeatureArray35); com.fasterxml.jackson.core.JsonGenerator jsonGenerator37 = null; com.fasterxml.jackson.databind.SerializerProvider serializerProvider38 = null; objectArraySerializer29.serializeContents((java.lang.Object[]) mapperFeatureArray35, jsonGenerator37, serializerProvider38); com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap propertySerializerMap40 = com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues(); objectArraySerializer29._dynamicSerializers = propertySerializerMap40; com.fasterxml.jackson.databind.ser.std.FileSerializer fileSerializer42 = new com.fasterxml.jackson.databind.ser.std.FileSerializer(); java.lang.Class<java.io.File> fileClass43 = fileSerializer42.handledType(); com.fasterxml.jackson.databind.SerializerProvider serializerProvider44 = null; java.io.File file45 = null; boolean boolean46 = fileSerializer42.isEmpty(serializerProvider44, file45); com.fasterxml.jackson.databind.SerializerProvider serializerProvider47 = null; com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer48 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass49 = inetSocketAddressSerializer48.handledType(); java.lang.Class<?> wildcardClass50 = com.fasterxml.jackson.databind.type.TypeFactory.rawClass((java.lang.reflect.Type) inetSocketAddressClass49); com.fasterxml.jackson.databind.JsonNode jsonNode51 = fileSerializer42.getSchema(serializerProvider47, (java.lang.reflect.Type) inetSocketAddressClass49); com.fasterxml.jackson.databind.JavaType javaType52 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer54 = null; com.fasterxml.jackson.databind.ser.std.SqlDateSerializer sqlDateSerializer56 = new com.fasterxml.jackson.databind.ser.std.SqlDateSerializer((java.lang.Boolean) false); com.fasterxml.jackson.databind.SerializerProvider serializerProvider57 = null; com.fasterxml.jackson.databind.BeanProperty beanProperty58 = null; com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer59 = sqlDateSerializer56.createContextual(serializerProvider57, beanProperty58); com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer objectArraySerializer60 = new com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer(javaType52, false, typeSerializer54, (com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) wildcardJsonSerializer59); com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap propertySerializerMap61 = propertySerializerMap40.newWith(inetSocketAddressClass49, (com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) wildcardJsonSerializer59); boolean boolean62 = com.fasterxml.jackson.databind.util.ClassUtil.isConcrete(inetSocketAddressClass49); java.lang.reflect.Method[] methodArray63 = com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredMethods(inetSocketAddressClass49); boolean boolean64 = objectArraySerializer8.hasSingleElement((java.lang.Object[]) methodArray63); }
Code: public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (false) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (false) { return this; } JsonFormat.Shape shape = format.getShape(); if (true) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportMappingProblem("Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { ; } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }
tensor([[0.0039, 0.0169, 0.0023,  ..., 0.0058, 0.0074, 0.0018],
        [0.0038, 0.0175, 0.0024,  ..., 0.0046, 0.0060, 0.0021],
        [0.0032, 0.0251, 0.0024,  ..., 0.0049, 0.0061, 0.0016],
        ...,
        [0.0041, 0.0170, 0.0031,  ..., 0.0052, 0.0071, 0.0020],
        [0.0048, 0.0137, 0.0033,  ..., 0.0062, 0.0064, 0.0022],
        [0.0028, 0.0185, 0.0027,  ..., 0.0055, 0.0079, 0.0016]])