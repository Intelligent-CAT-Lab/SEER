62045
Test: public void test1021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1021"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\t'); java.lang.String[] strArray2 = cSVFormat1.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withNullString("hi!"); cSVFormat5.validate(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withCommentStart('\037'); java.lang.String str11 = cSVFormat5.toString(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat5.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withRecordSeparator(' '); java.lang.Character char16 = cSVFormat13.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withQuoteChar((java.lang.Character) ','); boolean boolean22 = cSVFormat19.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat24.validate(); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat24.withIgnoreEmptyLines(true); java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat24.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat23.withHeader(strArray30); java.lang.String str33 = cSVFormat19.format((java.lang.Object[]) strArray30); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat13.withHeader(strArray30); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat1.withHeader(strArray30); java.lang.String[] strArray36 = cSVFormat35.getHeader(); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(true) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (true) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { ; } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (true) { ; sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0079, 0.0096, 0.0081,  ..., 0.0091, 0.0297, 0.0042],
        [0.0076, 0.0082, 0.0079,  ..., 0.0081, 0.0378, 0.0035],
        [0.0051, 0.0078, 0.0040,  ..., 0.0079, 0.0371, 0.0033],
        ...,
        [0.0051, 0.0073, 0.0038,  ..., 0.0068, 0.0398, 0.0035],
        [0.0055, 0.0089, 0.0056,  ..., 0.0094, 0.0341, 0.0034],
        [0.0052, 0.0094, 0.0088,  ..., 0.0124, 0.0336, 0.0035]])