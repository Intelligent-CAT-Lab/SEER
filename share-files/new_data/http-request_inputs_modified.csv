,method,test
0,,"  public void test0()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1,,"  public void test1()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2,,"  public void test2()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3,,"  public void test3()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4,,"  public void test4()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5,,"  public void test5()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6,,"  public void test6()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
7,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test7()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
8,,"  public void test8()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
9,,"  public void test9()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
10,,"  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
11,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
12,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test12()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
13,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
14,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
15,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
16,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
17,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
18,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
19,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test19()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
20,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
21,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
22,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
23,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test23()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
24,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test24()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
}"
25,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test25()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
}"
26,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test26()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
27,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
28,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
29,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
30,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test30()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
31,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
32,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
33,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
34,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test34()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
35,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test35()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
36,,"  public void test36()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
37,,"  public void test37()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
38,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test38()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
39,,"  public void test39()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
40,,"  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
41,,"  public void test41()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
42,,"  public void test42()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
43,,"  public void test43()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
44,,"  public void test44()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
45,,"  public void test45()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
46,,"  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
47,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test47()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
48,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
49,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test49()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
50,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test50()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
51,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test51()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
52,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test52()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
53,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test53()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
54,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test54()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
55,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test55()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
56,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test56()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
57,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test57()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
58,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test58()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
59,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test59()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
60,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test60()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
61,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test61()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
62,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test62()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
63,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test63()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
64,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test64()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
65,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test65()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
66,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test66()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
67,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test67()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
68,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test68()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
69,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test69()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
70,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test70()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
71,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test71()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
72,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test72()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
73,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test73()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
74,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test74()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
75,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test75()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
76,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test76()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
77,,"  public void test77()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
78,,"  public void test78()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
79,,"  public void test79()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
80,,"  public void test80()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
81,,"  public void test81()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
82,,"  public void test82()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
83,,"  public void test83()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
84,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test84()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
85,,"  public void test85()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
86,,"  public void test86()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
87,,"  public void test87()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
88,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test88()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
89,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test89()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
90,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test90()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
91,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test91()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
92,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test92()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
93,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test93()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
94,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test94()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
95,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test95()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
96,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test96()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
97,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test97()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
98,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test98()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
99,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test99()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
100,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
101,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
}"
102,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
}"
103,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
}"
104,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
105,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test105()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
106,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
107,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
108,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
109,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
110,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test110()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
111,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test111()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
112,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test112()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
113,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test113()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
114,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
115,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
116,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
117,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test117()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
118,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test118()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
119,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
120,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test120()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
121,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
122,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test122()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
123,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
124,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
125,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
126,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test126()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
127,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
128,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
129,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test129()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
130,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test130()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
}"
131,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test131()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
132,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test132()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
133,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test133()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
134,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
135,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
136,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
137,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
138,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
139,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
140,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
141,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
142,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
143,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test143()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
144,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test144()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
145,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
146,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test146()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
147,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test147()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
148,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
149,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test149()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
150,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test150()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
151,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test151()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
152,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test152()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
153,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test153()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
154,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test154()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
155,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test155()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
156,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test156()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
157,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
158,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
159,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test159()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
160,"  public long dateHeader(final String name) throws HttpRequestException {
    return dateHeader(name, -1L);
  }","  public void test160()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
}"
161,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test161()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
162,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test162()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
163,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test163()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
164,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test164()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
165,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test165()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
166,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test166()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
167,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test167()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
168,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test168()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
169,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test169()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
170,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test170()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
171,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test171()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Content-Type"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""*JodChI+"", ""*JodChI+"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
      long long0 = httpRequest0.dateHeader(""4) <0s]S"");
      PrintStream printStream2 = printStream1.append('K');
}"
172,,"  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
}"
173,,"  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
174,,"  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
175,,"  public void test175()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
176,,"  public void test176()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
177,,"  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
178,,"  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
179,,"  public void test179()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
180,,"  public void test180()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
181,,"  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
182,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test182()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
183,,"  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
184,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test184()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
185,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
186,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test186()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
187,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test187()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
188,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
189,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test189()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
190,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test190()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
191,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test191()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
192,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test192()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
193,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test193()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
194,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test194()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
195,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
196,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test196()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
197,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test197()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
}"
198,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
}"
199,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test199()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
}"
200,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
201,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test201()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
202,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
203,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test203()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
204,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test204()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
205,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test205()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
206,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test206()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
207,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
208,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
209,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test209()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
210,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test210()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
211,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test211()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
212,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test212()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
213,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test213()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
214,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
215,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
216,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test216()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
217,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test217()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
218,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test218()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
}"
219,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
}"
220,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test220()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
}"
221,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test221()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
222,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test222()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
223,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test223()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
224,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
225,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test225()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
226,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test226()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
227,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test227()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
228,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
229,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test229()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
230,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test230()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
231,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test231()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
232,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test232()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
233,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test233()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
234,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test234()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
235,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test235()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
236,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test236()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
237,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test237()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
238,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test238()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
239,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
240,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
241,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test241()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
242,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
243,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test243()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
244,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test244()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
245,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test245()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
246,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test246()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
247,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test247()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
248,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test248()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
249,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test249()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
250,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test250()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
251,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test251()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0, ""DELETE"");
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
252,,"  public void test252()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
}"
253,,"  public void test253()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
}"
254,,"  public void test254()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
}"
255,,"  public void test255()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
256,,"  public void test256()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
257,,"  public void test257()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
258,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test258()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
259,,"  public void test259()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
260,,"  public void test260()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
261,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test261()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
262,,"  public void test262()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
263,,"  public void test263()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
264,,"  public void test264()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
265,,"  public void test265()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
266,,"  public void test266()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
267,,"  public void test267()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
268,,"  public void test268()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
269,,"  public void test269()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
270,,"  public void test270()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
271,,"  public void test271()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
272,,"  public void test272()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
273,,"  public void test273()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
274,,"  public void test274()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
275,,"  public void test275()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
276,,"  public void test276()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
277,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test277()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
278,,"  public void test278()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
279,,"  public void test279()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
280,,"  public void test280()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
281,,"  public void test281()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
282,,"  public void test282()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
283,,"  public void test283()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
284,,"  public void test284()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
285,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test285()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
286,,"  public void test286()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
287,,"  public void test287()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
288,,"  public void test288()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
289,,"  public void test289()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
290,,"  public void test290()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
291,,"  public void test291()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
292,,"  public void test292()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
293,,"  public void test293()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
294,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test294()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
295,,"  public void test295()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
296,,"  public void test296()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
297,,"  public void test297()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
298,,"  public void test298()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
299,,"  public void test299()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
300,,"  public void test300()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
301,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test301()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
302,,"  public void test302()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
303,,"  public void test303()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
304,,"  public void test304()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
305,,"  public void test305()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
306,,"  public void test306()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
307,,"  public void test307()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
308,,"  public void test308()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
309,,"  public void test309()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
310,,"  public void test310()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
311,,"  public void test311()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
312,,"  public void test312()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
313,,"  public void test313()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
314,,"  public void test314()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
315,,"  public void test315()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
316,,"  public void test316()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
317,,"  public void test317()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
318,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test318()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
319,,"  public void test319()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
320,,"  public void test320()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
321,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test321()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
322,,"  public void test322()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
323,,"  public void test323()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
324,,"  public void test324()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
325,,"  public void test325()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
326,,"  public void test326()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
327,,"  public void test327()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
328,,"  public void test328()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
329,,"  public void test329()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
330,,"  public void test330()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
331,,"  public void test331()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
332,,"  public void test332()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
333,,"  public void test333()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
334,,"  public void test334()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
335,,"  public void test335()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
336,,"  public void test336()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
337,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test337()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
338,,"  public void test338()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
339,,"  public void test339()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
340,,"  public void test340()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
341,,"  public void test341()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
342,,"  public void test342()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
343,,"  public void test343()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
344,,"  public void test344()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
345,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test345()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
346,,"  public void test346()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
347,,"  public void test347()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
348,,"  public void test348()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
349,,"  public void test349()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
350,,"  public void test350()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
351,,"  public void test351()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
352,,"  public void test352()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
353,,"  public void test353()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
354,,"  public void test354()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
355,,"  public void test355()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
356,,"  public void test356()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
357,,"  public void test357()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
358,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test358()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
359,,"  public void test359()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
360,,"  public void test360()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
361,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test361()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
362,,"  public void test362()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
363,,"  public void test363()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
364,,"  public void test364()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
365,,"  public void test365()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
366,,"  public void test366()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
367,,"  public void test367()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
368,,"  public void test368()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
369,,"  public void test369()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
370,,"  public void test370()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
371,,"  public void test371()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
372,,"  public void test372()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
373,,"  public void test373()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
374,,"  public void test374()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
375,,"  public void test375()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
376,,"  public void test376()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
377,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test377()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
378,,"  public void test378()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
379,,"  public void test379()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
380,,"  public void test380()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
381,,"  public void test381()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
382,,"  public void test382()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
383,,"  public void test383()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
384,,"  public void test384()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
385,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test385()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
386,,"  public void test386()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
387,,"  public void test387()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
388,,"  public void test388()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
389,,"  public void test389()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
390,,"  public void test390()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
391,,"  public void test391()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
392,,"  public void test392()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
393,,"  public void test393()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
394,,"  public void test394()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
395,,"  public void test395()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
396,,"  public void test396()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
397,,"  public void test397()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
398,,"  public void test398()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
399,,"  public void test399()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
400,,"  public void test400()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
401,,"  public void test401()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
402,,"  public void test402()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
403,,"  public void test403()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
404,,"  public void test404()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
405,,"  public void test405()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
406,,"  public void test406()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
407,,"  public void test407()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
408,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test408()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
409,,"  public void test409()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
410,,"  public void test410()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
411,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test411()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
412,,"  public void test412()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
413,,"  public void test413()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
414,,"  public void test414()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
415,,"  public void test415()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
416,,"  public void test416()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
417,,"  public void test417()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
418,,"  public void test418()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
419,,"  public void test419()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
420,,"  public void test420()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
421,,"  public void test421()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
422,,"  public void test422()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
423,,"  public void test423()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
424,,"  public void test424()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
425,,"  public void test425()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
426,,"  public void test426()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
427,,"  public void test427()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
428,,"  public void test428()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
429,,"  public void test429()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
430,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test430()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
431,,"  public void test431()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
432,,"  public void test432()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
433,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test433()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
434,,"  public void test434()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
435,,"  public void test435()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
436,,"  public void test436()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
437,,"  public void test437()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
438,,"  public void test438()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
439,,"  public void test439()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
440,,"  public void test440()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
441,,"  public void test441()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
442,,"  public void test442()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
443,,"  public void test443()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
444,,"  public void test444()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
445,,"  public void test445()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
446,,"  public void test446()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
447,,"  public void test447()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
448,,"  public void test448()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
449,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test449()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
450,,"  public void test450()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
451,,"  public void test451()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
452,,"  public void test452()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
453,,"  public void test453()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
454,,"  public void test454()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
455,,"  public void test455()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
456,,"  public void test456()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
457,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test457()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
458,,"  public void test458()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
459,,"  public void test459()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
460,,"  public void test460()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
461,,"  public void test461()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
462,,"  public void test462()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
463,,"  public void test463()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
464,,"  public void test464()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
465,,"  public void test465()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
466,,"  public void test466()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
467,,"  public void test467()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
468,,"  public void test468()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
469,,"  public void test469()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
470,,"  public void test470()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
471,,"  public void test471()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
472,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test472()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
473,,"  public void test473()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
474,,"  public void test474()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
475,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test475()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
476,,"  public void test476()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
477,,"  public void test477()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
478,,"  public void test478()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
479,,"  public void test479()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
480,,"  public void test480()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
481,,"  public void test481()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
482,,"  public void test482()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
483,,"  public void test483()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
484,,"  public void test484()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
485,,"  public void test485()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
486,,"  public void test486()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
487,,"  public void test487()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
488,,"  public void test488()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
489,,"  public void test489()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
490,,"  public void test490()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
491,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test491()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
492,,"  public void test492()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
493,,"  public void test493()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
494,,"  public void test494()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
495,,"  public void test495()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
496,,"  public void test496()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
497,,"  public void test497()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
498,,"  public void test498()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
499,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test499()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
500,,"  public void test500()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
501,,"  public void test501()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
502,,"  public void test502()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
503,,"  public void test503()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
504,,"  public void test504()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
505,,"  public void test505()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
506,,"  public void test506()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
507,,"  public void test507()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
508,,"  public void test508()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
509,,"  public void test509()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
510,,"  public void test510()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
511,,"  public void test511()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
512,,"  public void test512()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
513,,"  public void test513()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
514,,"  public void test514()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
515,,"  public void test515()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
516,,"  public void test516()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
517,,"  public void test517()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
518,,"  public void test518()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
519,,"  public void test519()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
520,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test520()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
521,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test521()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
522,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test522()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
523,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test523()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
524,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test524()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
525,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test525()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
526,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test526()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
527,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test527()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
528,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test528()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
529,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test529()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
530,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test530()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
531,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test531()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
532,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test532()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
533,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test533()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
534,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test534()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
535,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test535()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
536,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test536()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
537,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test537()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
538,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test538()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
539,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test539()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
540,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test540()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
541,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test541()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
542,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test542()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
543,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test543()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
544,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test544()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
545,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test545()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
546,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test546()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
547,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test547()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
548,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test548()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
549,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test549()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
550,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test550()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
551,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test551()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
552,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test552()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
553,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test553()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
554,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test554()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
555,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test555()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
556,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test556()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
557,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test557()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
558,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test558()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
559,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test559()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
560,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test560()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
561,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test561()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
562,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test562()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
563,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test563()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
564,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test564()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
565,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test565()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
566,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test566()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
567,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test567()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
568,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test568()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
569,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test569()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
570,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test570()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
571,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test571()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
572,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test572()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
573,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test573()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
574,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test574()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
575,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test575()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
576,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test576()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
577,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test577()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
578,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test578()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
579,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test579()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
580,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test580()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
581,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test581()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
582,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test582()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
583,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test583()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
584,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test584()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
585,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test585()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
586,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test586()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
587,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test587()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
588,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test588()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
589,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test589()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
590,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test590()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
591,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test591()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
592,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test592()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
593,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test593()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
594,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test594()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
595,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test595()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
596,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test596()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
597,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test597()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
598,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test598()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
599,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test599()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
600,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test600()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
601,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test601()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
602,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test602()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
603,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test603()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
604,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test604()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
605,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test605()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
606,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test606()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
607,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test607()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
608,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test608()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
609,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test609()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
610,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test610()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
611,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test611()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
612,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test612()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
613,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test613()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
614,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test614()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
615,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test615()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
616,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test616()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
617,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test617()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
618,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test618()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
619,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test619()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
620,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test620()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
621,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test621()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
622,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test622()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
623,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test623()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
624,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test624()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
625,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test625()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
626,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test626()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
627,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test627()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
628,,"  public void test628()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
629,,"  public void test629()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
630,,"  public void test630()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
631,,"  public void test631()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
632,,"  public void test632()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
633,,"  public void test633()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
634,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test634()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
635,,"  public void test635()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
636,,"  public void test636()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
637,,"  public void test637()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
638,,"  public void test638()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
639,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test639()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
640,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test640()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
641,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test641()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
642,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test642()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
643,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test643()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
644,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test644()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
645,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test645()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
646,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test646()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
647,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test647()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
648,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test648()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
649,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test649()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
650,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test650()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
651,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test651()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
652,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test652()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
653,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test653()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
654,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test654()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
655,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test655()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
656,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test656()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
657,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test657()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
658,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test658()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
659,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test659()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
660,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test660()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
661,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test661()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
662,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test662()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
663,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test663()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
664,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test664()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
665,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test665()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
666,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test666()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
667,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test667()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
668,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test668()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
669,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test669()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
670,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test670()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
671,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test671()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
672,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test672()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
673,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test673()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
674,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test674()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
675,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test675()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
676,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test676()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
677,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test677()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
678,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test678()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
679,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test679()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
680,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test680()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
681,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test681()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
682,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test682()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
683,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test683()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
684,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test684()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
685,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test685()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
686,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test686()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
687,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test687()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
688,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test688()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
689,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test689()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
690,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test690()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
691,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test691()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
692,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test692()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
}"
693,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test693()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
}"
694,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test694()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
}"
695,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test695()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
}"
696,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test696()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
}"
697,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test697()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
}"
698,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test698()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
}"
699,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test699()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
}"
700,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test700()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
}"
701,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test701()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
}"
702,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test702()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
}"
703,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test703()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
}"
704,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test704()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
}"
705,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test705()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
}"
706,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test706()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
}"
707,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test707()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
}"
708,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test708()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
}"
709,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test709()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
710,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test710()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
711,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test711()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
712,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test712()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
713,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test713()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
714,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test714()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
715,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test715()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
716,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test716()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
717,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test717()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
718,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test718()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
719,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test719()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HashMap<SQLInvalidAuthorizationSpecException, DataTruncation> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, DataTruncation>();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""z0A,(kt;L"", ""shutdown"", 5);
      DataTruncation dataTruncation0 = new DataTruncation(5, false, false, (-2812), 5, sQLInvalidAuthorizationSpecException0);
      DataTruncation dataTruncation1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, dataTruncation0);
}"
720,,"  public void test720()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
721,,"  public void test721()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
722,,"  public void test722()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
723,,"  public void test723()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
724,,"  public void test724()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
725,,"  public void test725()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
726,,"  public void test726()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
727,,"  public void test727()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
728,,"  public void test728()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
729,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test729()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
730,,"  public void test730()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
731,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test731()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
732,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test732()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
733,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test733()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
734,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test734()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
735,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test735()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
736,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test736()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
737,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test737()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
738,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test738()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
739,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test739()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
740,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test740()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
741,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test741()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
742,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test742()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
743,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test743()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
744,,"  public void test744()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
}"
745,,"  public void test745()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
746,,"  public void test746()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
747,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test747()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
748,,"  public void test748()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
749,,"  public void test749()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
750,,"  public void test750()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
751,,"  public void test751()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
752,,"  public void test752()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
753,,"  public void test753()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
754,,"  public void test754()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
755,,"  public void test755()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
756,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test756()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
757,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test757()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
758,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test758()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
759,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test759()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
760,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test760()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
761,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test761()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
762,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test762()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
763,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test763()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
764,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test764()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
765,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test765()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
766,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test766()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
767,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test767()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
768,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test768()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
769,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test769()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
770,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test770()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
771,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test771()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
772,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test772()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
773,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test773()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
774,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test774()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
775,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test775()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
776,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test776()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
777,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test777()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
778,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test778()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
779,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test779()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
780,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test780()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
781,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test781()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
782,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test782()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
783,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test783()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
784,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test784()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
785,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test785()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
786,,"  public void test786()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
}"
787,,"  public void test787()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
}"
788,,"  public void test788()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
}"
789,,"  public void test789()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
790,,"  public void test790()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
791,,"  public void test791()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
792,,"  public void test792()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
793,,"  public void test793()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
794,,"  public void test794()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
795,,"  public void test795()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
796,,"  public void test796()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
797,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test797()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
798,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test798()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
799,,"  public void test799()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
800,,"  public void test800()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
801,,"  public void test801()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
802,,"  public void test802()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
803,,"  public void test803()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
804,,"  public void test804()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
805,,"  public void test805()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
806,,"  public void test806()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
807,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test807()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
808,,"  public void test808()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
809,,"  public void test809()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
810,,"  public void test810()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
811,,"  public void test811()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
812,,"  public void test812()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
813,,"  public void test813()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
814,,"  public void test814()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
815,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test815()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
816,,"  public void test816()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
817,,"  public void test817()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
818,,"  public void test818()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
819,,"  public void test819()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
820,,"  public void test820()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
821,,"  public void test821()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
822,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test822()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
823,,"  public void test823()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
824,,"  public void test824()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
825,,"  public void test825()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
826,,"  public void test826()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
827,,"  public void test827()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
828,,"  public void test828()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
829,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test829()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
830,,"  public void test830()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
831,,"  public void test831()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
832,,"  public void test832()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
833,,"  public void test833()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
834,,"  public void test834()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
835,,"  public void test835()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
836,,"  public void test836()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
837,,"  public void test837()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
838,,"  public void test838()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
839,,"  public void test839()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
840,,"  public void test840()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
841,,"  public void test841()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
842,,"  public void test842()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
843,,"  public void test843()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
844,,"  public void test844()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
845,,"  public void test845()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
846,,"  public void test846()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
847,,"  public void test847()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
848,,"  public void test848()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
849,,"  public void test849()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
850,,"  public void test850()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
851,,"  public void test851()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
852,,"  public void test852()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
853,,"  public void test853()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
854,,"  public void test854()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
855,,"  public void test855()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
856,,"  public void test856()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
857,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test857()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
858,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test858()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
859,,"  public void test859()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
860,,"  public void test860()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
861,,"  public void test861()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
862,,"  public void test862()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
863,,"  public void test863()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
864,,"  public void test864()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
865,,"  public void test865()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
866,,"  public void test866()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
867,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test867()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
868,,"  public void test868()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
869,,"  public void test869()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
870,,"  public void test870()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
871,,"  public void test871()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
872,,"  public void test872()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
873,,"  public void test873()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
874,,"  public void test874()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
875,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test875()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
876,,"  public void test876()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
877,,"  public void test877()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
878,,"  public void test878()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
879,,"  public void test879()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
880,,"  public void test880()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
881,,"  public void test881()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
882,,"  public void test882()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
883,,"  public void test883()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
884,,"  public void test884()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
885,,"  public void test885()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
886,,"  public void test886()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
887,,"  public void test887()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
888,,"  public void test888()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
889,,"  public void test889()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
890,,"  public void test890()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
891,,"  public void test891()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
892,,"  public void test892()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
893,,"  public void test893()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
894,,"  public void test894()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
895,,"  public void test895()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
896,,"  public void test896()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
897,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test897()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
898,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test898()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
899,,"  public void test899()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
900,,"  public void test900()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
901,,"  public void test901()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
902,,"  public void test902()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
903,,"  public void test903()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
904,,"  public void test904()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
905,,"  public void test905()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
906,,"  public void test906()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
907,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test907()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
908,,"  public void test908()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
909,,"  public void test909()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
910,,"  public void test910()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
911,,"  public void test911()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
912,,"  public void test912()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
913,,"  public void test913()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
914,,"  public void test914()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
915,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test915()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
916,,"  public void test916()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
917,,"  public void test917()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
918,,"  public void test918()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
919,,"  public void test919()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
920,,"  public void test920()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
921,,"  public void test921()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
922,,"  public void test922()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
923,,"  public void test923()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
924,,"  public void test924()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
925,,"  public void test925()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
926,,"  public void test926()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
927,,"  public void test927()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
928,,"  public void test928()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
929,,"  public void test929()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
930,,"  public void test930()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
931,,"  public void test931()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
932,,"  public void test932()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
933,,"  public void test933()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
934,,"  public void test934()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
935,,"  public void test935()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
936,,"  public void test936()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
937,,"  public void test937()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
938,,"  public void test938()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
939,,"  public void test939()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
940,,"  public void test940()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
941,,"  public void test941()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
942,,"  public void test942()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
943,,"  public void test943()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
944,,"  public void test944()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
945,,"  public void test945()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
946,,"  public void test946()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
947,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test947()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
948,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test948()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
949,,"  public void test949()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
950,,"  public void test950()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
951,,"  public void test951()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
952,,"  public void test952()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
953,,"  public void test953()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
954,,"  public void test954()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
955,,"  public void test955()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
956,,"  public void test956()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
957,,"  public void test957()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
958,,"  public void test958()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
959,,"  public void test959()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
960,,"  public void test960()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
961,,"  public void test961()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
962,,"  public void test962()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
963,,"  public void test963()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
964,,"  public void test964()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
965,,"  public void test965()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
966,,"  public void test966()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
967,,"  public void test967()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
968,,"  public void test968()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
969,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test969()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
970,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test970()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
971,,"  public void test971()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
972,,"  public void test972()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
973,,"  public void test973()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
974,,"  public void test974()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
975,,"  public void test975()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
976,,"  public void test976()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
977,,"  public void test977()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
978,,"  public void test978()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
979,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test979()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
980,,"  public void test980()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
981,,"  public void test981()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
982,,"  public void test982()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
983,,"  public void test983()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
984,,"  public void test984()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
985,,"  public void test985()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
986,,"  public void test986()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
987,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test987()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
988,,"  public void test988()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
989,,"  public void test989()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
990,,"  public void test990()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
991,,"  public void test991()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
992,,"  public void test992()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
993,,"  public void test993()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
994,,"  public void test994()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
995,,"  public void test995()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
996,,"  public void test996()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
997,,"  public void test997()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
998,,"  public void test998()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
999,,"  public void test999()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
1000,,"  public void test1000()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
1001,,"  public void test1001()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
1002,,"  public void test1002()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
1003,,"  public void test1003()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1004,,"  public void test1004()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1005,,"  public void test1005()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1006,,"  public void test1006()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1007,,"  public void test1007()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1008,,"  public void test1008()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1009,,"  public void test1009()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1010,,"  public void test1010()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1011,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1011()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1012,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1012()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1013,,"  public void test1013()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1014,,"  public void test1014()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1015,,"  public void test1015()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1016,,"  public void test1016()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1017,,"  public void test1017()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1018,,"  public void test1018()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1019,,"  public void test1019()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1020,,"  public void test1020()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1021,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1021()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1022,,"  public void test1022()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1023,,"  public void test1023()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1024,,"  public void test1024()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1025,,"  public void test1025()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1026,,"  public void test1026()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1027,,"  public void test1027()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1028,,"  public void test1028()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1029,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1029()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1030,,"  public void test1030()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1031,,"  public void test1031()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1032,,"  public void test1032()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1033,,"  public void test1033()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1034,,"  public void test1034()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1035,,"  public void test1035()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1036,,"  public void test1036()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1037,,"  public void test1037()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1038,,"  public void test1038()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1039,,"  public void test1039()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1040,,"  public void test1040()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1041,,"  public void test1041()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1042,,"  public void test1042()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1043,,"  public void test1043()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1044,,"  public void test1044()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1045,,"  public void test1045()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1046,,"  public void test1046()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1047,,"  public void test1047()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1048,,"  public void test1048()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1049,,"  public void test1049()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1050,,"  public void test1050()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1051,,"  public void test1051()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1052,,"  public void test1052()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1053,,"  public void test1053()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
1054,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1054()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1055,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1055()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1056,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1056()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1057,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1057()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1058,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1058()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1059,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1059()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1060,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1060()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1061,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1061()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1062,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1062()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1063,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1063()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1064,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1064()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1065,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1065()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1066,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1066()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1067,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1067()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1068,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1068()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1069,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1069()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1070,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1070()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1071,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1071()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1072,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1072()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1073,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1073()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1074,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1074()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1075,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1075()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1076,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1076()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1077,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1077()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1078,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1078()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1079,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1079()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1080,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1080()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1081,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1081()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1082,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1082()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1083,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1083()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1084,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1084()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1085,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1085()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1086,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1086()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1087,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1087()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1088,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1088()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1089,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1089()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1090,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1090()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1091,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1091()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1092,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1092()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1093,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1093()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1094,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1094()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1095,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1095()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1096,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1096()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1097,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1097()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1098,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1098()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1099,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1099()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1100,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1100()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1101,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1101()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1102,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1102()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1103,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1103()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1104,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1104()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1105,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1105()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1106,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test1106()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
1107,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1107()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1108,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1108()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1109,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1109()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1110,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1110()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1111,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1111()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1112,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1112()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1113,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1113()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1114,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1114()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1115,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1115()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1116,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1116()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1117,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1117()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1118,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1118()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1119,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1119()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1120,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1120()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1121,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1121()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1122,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1122()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1123,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1123()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1124,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1124()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1125,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1125()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1126,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1126()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1127,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1127()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1128,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1128()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1129,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1129()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1130,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1130()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1131,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1131()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1132,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1132()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1133,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1133()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1134,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1134()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1135,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1135()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1136,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1136()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1137,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1137()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1138,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1138()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1139,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1139()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1140,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1140()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1141,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1141()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1142,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1142()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1143,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1143()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1144,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1144()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1145,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1145()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1146,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1146()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1147,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1147()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1148,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1148()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1149,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1149()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1150,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1150()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1151,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1151()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1152,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1152()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1153,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1153()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1154,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1154()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1155,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1155()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1156,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1156()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1157,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1157()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1158,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1158()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1159,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1159()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1160,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1160()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1161,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1161()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
1162,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1162()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1163,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1163()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1164,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1164()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1165,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1165()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1166,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1166()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1167,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1167()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1168,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1168()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1169,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1169()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1170,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1170()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1171,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1171()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1172,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1172()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1173,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1173()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1174,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1174()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1175,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1175()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1176,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1176()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1177,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1177()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1178,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1178()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1179,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1179()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1180,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1180()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1181,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1181()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1182,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1182()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1183,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1183()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1184,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1184()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1185,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1185()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1186,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1186()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1187,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1187()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1188,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1188()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1189,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1189()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1190,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1190()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1191,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1191()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1192,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1192()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1193,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1193()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1194,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1194()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1195,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1195()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1196,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1196()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1197,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1197()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1198,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1198()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1199,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1199()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1200,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1200()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1201,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1201()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1202,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1202()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1203,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1203()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1204,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1204()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1205,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1205()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1206,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1206()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1207,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1207()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1208,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1208()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1209,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1209()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1210,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1210()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1211,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1211()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1212,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1212()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1213,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1213()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1214,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1214()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1215,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1215()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1216,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1216()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1217,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1217()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1218,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1218()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1219,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1219()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1220,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1220()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1221,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1221()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1222,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1222()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1223,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1223()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1224,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1224()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1225,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1225()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1226,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1226()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
}"
1227,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1227()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
      boolean boolean3 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ""Date"");
}"
1228,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1228()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
      boolean boolean3 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ""Date"");
}"
1229,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1229()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
      boolean boolean3 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ""Date"");
}"
1230,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test1230()  throws Throwable  {
      String string0 = ""G~k]W+V^gtKAN<nz"";
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      String string1 = ""9"";
      File file1 = mockFile1.getCanonicalFile();
      boolean boolean3 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ""Date"");
}"
1231,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1231()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1232,,"  public void test1232()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1233,,"  public void test1233()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1234,,"  public void test1234()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1235,,"  public void test1235()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1236,,"  public void test1236()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1237,,"  public void test1237()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1238,,"  public void test1238()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1239,,"  public void test1239()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1240,,"  public void test1240()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1241,,"  public void test1241()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1242,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1242()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1243,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1243()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1244,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1244()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1245,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1245()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1246,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1246()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1247,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1247()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1248,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1248()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1249,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1249()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1250,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1250()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1251,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1251()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1252,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1252()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1253,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1253()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1254,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1254()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
1255,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1255()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
}"
1256,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test1256()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
}"
1257,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1257()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1258,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1258()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1259,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1259()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1260,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1260()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1261,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1261()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1262,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1262()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1263,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1263()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1264,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1264()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1265,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1265()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1266,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1266()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1267,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1267()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1268,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1268()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1269,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1269()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1270,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1270()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1271,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1271()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1272,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1272()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1273,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1273()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1274,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1274()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1275,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1275()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1276,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1276()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1277,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1277()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1278,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1278()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1279,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1279()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1280,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1280()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1281,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1281()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1282,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1282()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1283,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1283()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1284,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1284()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1285,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1285()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1286,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1286()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1287,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1287()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1288,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1288()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1289,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1289()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1290,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1290()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1291,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1291()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1292,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1292()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1293,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1293()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1294,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1294()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1295,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1295()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1296,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1296()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1297,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1297()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1298,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1298()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1299,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1299()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1300,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1300()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1301,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1301()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1302,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1302()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1303,"  public HttpRequest contentType(final String contentType) {
    return contentType(contentType, null);
  }","  public void test1303()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
}"
1304,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1304()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1305,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1305()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1306,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1306()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1307,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1307()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1308,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1308()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1309,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1309()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1310,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1310()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1311,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1311()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1312,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1312()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1313,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1313()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1314,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1314()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1315,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1315()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1316,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1316()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1317,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1317()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1318,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1318()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1319,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1319()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1320,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1320()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1321,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1321()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1322,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1322()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1323,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1323()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1324,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1324()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1325,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1325()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1326,"  public HttpRequest accept(final String accept) {
    return header(HEADER_ACCEPT, accept);
  }","  public void test1326()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      HttpRequest httpRequest1 = httpRequest0.contentType(""Referer"", ""charset"");
      HttpRequest httpRequest2 = httpRequest1.accept(""Content-Length"");
}"
1327,,"  public void test1327()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1328,,"  public void test1328()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1329,,"  public void test1329()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1330,,"  public void test1330()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1331,,"  public void test1331()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1332,,"  public void test1332()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1333,,"  public void test1333()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1334,,"  public void test1334()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1335,,"  public void test1335()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1336,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1336()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1337,,"  public void test1337()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1338,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1338()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1339,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1339()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1340,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1340()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1341,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1341()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1342,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1342()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1343,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1343()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1344,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1344()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1345,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1345()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1346,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1346()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1347,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1347()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1348,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1348()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1349,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1349()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1350,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1350()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1351,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1351()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1352,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1352()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1353,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1353()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1354,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1354()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1355,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1355()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1356,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1356()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1357,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1357()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1358,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1358()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1359,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1359()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1360,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1360()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1361,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1361()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1362,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1362()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1363,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1363()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1364,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1364()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1365,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1365()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1366,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1366()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1367,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1367()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1368,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1368()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1369,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1369()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1370,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1370()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1371,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1371()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1372,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1372()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1373,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1373()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1374,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1374()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1375,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1375()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1376,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1376()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1377,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1377()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1378,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1378()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1379,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1379()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1380,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1380()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1381,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1381()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1382,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1382()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1383,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1383()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1384,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1384()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1385,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1385()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1386,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1386()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1387,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1387()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1388,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1388()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1389,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1389()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1390,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1390()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1391,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1391()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1392,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1392()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1393,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1393()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1394,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1394()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1395,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1395()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1396,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1396()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1397,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1397()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1398,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1398()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1399,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1399()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1400,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1400()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1401,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1401()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1402,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1402()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1403,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1403()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1404,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1404()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1405,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1405()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1406,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1406()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1407,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1407()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1408,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1408()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1409,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1409()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1410,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1410()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile(""charset"", """");
}"
1411,,"  public void test1411()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1412,,"  public void test1412()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1413,,"  public void test1413()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1414,,"  public void test1414()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1415,,"  public void test1415()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1416,,"  public void test1416()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1417,,"  public void test1417()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1418,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1418()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1419,,"  public void test1419()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1420,,"  public void test1420()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1421,,"  public void test1421()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1422,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1422()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1423,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1423()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1424,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1424()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1425,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1425()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1426,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1426()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1427,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1427()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1428,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1428()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1429,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1429()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1430,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1430()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1431,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1431()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1432,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1432()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1433,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1433()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1434,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1434()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
1435,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test1435()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
}"
1436,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1436()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1437,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1437()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1438,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1438()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1439,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1439()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1440,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1440()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1441,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1441()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1442,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1442()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1443,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1443()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1444,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1444()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1445,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1445()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1446,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1446()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1447,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1447()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1448,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1448()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1449,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1449()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1450,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1450()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1451,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1451()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1452,"  public HttpRequest proxyBasic(final String name, final String password) {
    return proxyAuthorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test1452()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.proxyBasic(""DELETE"", """");
}"
1453,,"  public void test1453()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1454,,"  public void test1454()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1455,,"  public void test1455()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1456,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1456()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1457,,"  public void test1457()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1458,,"  public void test1458()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1459,,"  public void test1459()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1460,,"  public void test1460()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1461,,"  public void test1461()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1462,,"  public void test1462()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1463,,"  public void test1463()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1464,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1464()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1465,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1465()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1466,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1466()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1467,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1467()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1468,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1468()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1469,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1469()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1470,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1470()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1471,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1471()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1472,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1472()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1473,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1473()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1474,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1474()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1475,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1475()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1476,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1476()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1477,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1477()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>(""jdbc:default:connection"");
}"
1478,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1478()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>(""jdbc:default:connection"");
}"
1479,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1479()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>(""jdbc:default:connection"");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
}"
1480,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1480()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>(""jdbc:default:connection"");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      String string0 = atomicReference0.getAndUpdate(unaryOperator0);
}"
1481,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1481()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>(""jdbc:default:connection"");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      String string0 = atomicReference0.getAndUpdate(unaryOperator0);
}"
1482,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1482()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>(""jdbc:default:connection"");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      String string0 = atomicReference0.getAndUpdate(unaryOperator0);
}"
1483,,"  public void test1483()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1484,,"  public void test1484()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1485,,"  public void test1485()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1486,,"  public void test1486()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1487,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1487()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1488,,"  public void test1488()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1489,,"  public void test1489()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1490,,"  public void test1490()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1491,,"  public void test1491()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1492,,"  public void test1492()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1493,,"  public void test1493()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1494,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1494()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1495,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1495()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1496,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1496()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1497,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1497()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1498,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1498()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1499,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1499()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1500,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1500()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1501,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1501()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1502,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1502()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1503,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1503()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1504,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1504()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1505,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1505()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1506,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1506()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1507,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1507()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
}"
1508,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1508()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1509,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1509()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1510,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1510()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1511,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1511()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1512,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1512()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1513,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1513()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1514,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1514()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1515,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1515()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1516,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1516()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1517,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1517()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1518,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1518()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1519,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1519()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1520,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1520()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1521,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1521()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1522,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1522()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1523,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1523()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1524,"  public HttpRequest ifNoneMatch(final String ifNoneMatch) {
    return header(HEADER_IF_NONE_MATCH, ifNoneMatch);
  }","  public void test1524()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
}"
1525,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1525()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1526,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1526()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1527,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1527()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1528,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1528()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1529,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1529()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1530,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1530()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1531,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1531()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1532,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1532()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1533,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1533()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1534,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1534()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1535,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1535()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1536,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1536()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1537,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1537()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1538,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1538()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1539,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1539()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1540,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1540()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1541,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1541()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1542,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1542()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1543,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1543()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1544,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1544()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1545,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1545()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1546,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1546()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1547,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1547()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1548,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1548()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1549,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1549()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1550,"  public URL url() {
    return getConnection().getURL();
  }","  public void test1550()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
}"
1551,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1551()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1552,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1552()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1553,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1553()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1554,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1554()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1555,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1555()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1556,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1556()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1557,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1557()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1558,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1558()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1559,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1559()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1560,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1560()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1561,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1561()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1562,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1562()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1563,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1563()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1564,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1564()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1565,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1565()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
}"
1566,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1566()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1567,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1567()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1568,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1568()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1569,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1569()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1570,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1570()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1571,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1571()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1572,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1572()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1573,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1573()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1574,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1574()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1575,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1575()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1576,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1576()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1577,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1577()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1578,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1578()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1579,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1579()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1580,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1580()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1581,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1581()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1582,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1582()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
1583,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1583()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
}"
1584,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1584()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
}"
1585,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test1585()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
}"
1586,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1586()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1587,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1587()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1588,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1588()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1589,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1589()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1590,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1590()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1591,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1591()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1592,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1592()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1593,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1593()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1594,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1594()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1595,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1595()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1596,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1596()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1597,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1597()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1598,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1598()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1599,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1599()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1600,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1600()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1601,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1601()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1602,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1602()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1603,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1603()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1604,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1604()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1605,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1605()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
}"
1606,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1606()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
}"
1607,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1607()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
}"
1608,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test1608()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
      HttpRequest httpRequest1 = httpRequest0.ifNoneMatch(""Date"");
      URL uRL1 = httpRequest0.url();
      int int0 = httpRequest0.intHeader(""x"", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest2 = httpRequest0.uncompress(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
}"
1609,,"  public void test1609()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
}"
1610,,"  public void test1610()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
}"
1611,,"  public void test1611()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1612,,"  public void test1612()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1613,,"  public void test1613()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1614,,"  public void test1614()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1615,,"  public void test1615()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1616,,"  public void test1616()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1617,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1617()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1618,,"  public void test1618()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1619,,"  public void test1619()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1620,,"  public void test1620()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1621,,"  public void test1621()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1622,,"  public void test1622()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1623,,"  public void test1623()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1624,,"  public void test1624()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1625,,"  public void test1625()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1626,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1626()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1627,,"  public void test1627()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1628,,"  public void test1628()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1629,,"  public void test1629()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1630,,"  public void test1630()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1631,,"  public void test1631()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1632,,"  public void test1632()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1633,,"  public void test1633()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1634,,"  public void test1634()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1635,,"  public void test1635()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
1636,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1636()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1637,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1637()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1638,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1638()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1639,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1639()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1640,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1640()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1641,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1641()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1642,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1642()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1643,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1643()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1644,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1644()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1645,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1645()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1646,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1646()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1647,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1647()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1648,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1648()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1649,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1649()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1650,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1650()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1651,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1651()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1652,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1652()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1653,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1653()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1654,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1654()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1655,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1655()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1656,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1656()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1657,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1657()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1658,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1658()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1659,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1659()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1660,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1660()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1661,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1661()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1662,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1662()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1663,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1663()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
}"
1664,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1664()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
}"
1665,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1665()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1666,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1666()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1667,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1667()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1668,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1668()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1669,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1669()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1670,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1670()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1671,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1671()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1672,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1672()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1673,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1673()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1674,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1674()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1675,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1675()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1676,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1676()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1677,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1677()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1678,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1678()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1679,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1679()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1680,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test1680()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1681,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1681()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1682,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1682()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1683,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1683()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1684,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1684()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1685,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1685()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1686,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1686()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1687,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1687()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1688,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1688()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1689,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1689()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1690,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1690()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1691,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1691()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1692,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1692()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1693,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1693()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1694,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1694()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1695,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test1695()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/00content0boundary00"");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
1696,,"  public void test1696()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1697,,"  public void test1697()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1698,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1698()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1699,,"  public void test1699()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1700,,"  public void test1700()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1701,,"  public void test1701()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1702,,"  public void test1702()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1703,,"  public void test1703()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1704,,"  public void test1704()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1705,,"  public void test1705()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1706,,"  public void test1706()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1707,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1707()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1708,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1708()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1709,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1709()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1710,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1710()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1711,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1711()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1712,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1712()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1713,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1713()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1714,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1714()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1715,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1715()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1716,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1716()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1717,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1717()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1718,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1718()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1719,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1719()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1720,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1720()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1721,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1721()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1722,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1722()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1723,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1723()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1724,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1724()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1725,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1725()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1726,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1726()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1727,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1727()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1728,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1728()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1729,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1729()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1730,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1730()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1731,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1731()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1732,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1732()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1733,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1733()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1734,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1734()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1735,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1735()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1736,"  public HttpRequest followRedirects(final boolean followRedirects) {
    getConnection().setInstanceFollowRedirects(followRedirects);
    return this;
  }","  public void test1736()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
}"
1737,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1737()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1738,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1738()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1739,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1739()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1740,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1740()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1741,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1741()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1742,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1742()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1743,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1743()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1744,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1744()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1745,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1745()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1746,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1746()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1747,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1747()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1748,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1748()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1749,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1749()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1750,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1750()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1751,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1751()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1752,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1752()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1753,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1753()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1754,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1754()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1755,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1755()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1756,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1756()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1757,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1757()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1758,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1758()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1759,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1759()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
}"
1760,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1760()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1761,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1761()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1762,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1762()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1763,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1763()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1764,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1764()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1765,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1765()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1766,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1766()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1767,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1767()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1768,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1768()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1769,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1769()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1770,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1770()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1771,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1771()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1772,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1772()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1773,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1773()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1774,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1774()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1775,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1775()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1776,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1776()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1777,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1777()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1778,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1778()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1779,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1779()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1780,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1780()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1781,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1781()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1782,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1782()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1783,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1783()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1784,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1784()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1785,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1785()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1786,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1786()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1787,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1787()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1788,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1788()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1789,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1789()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1790,"  public HttpRequest acceptJson() {
    return accept(CONTENT_TYPE_JSON);
  }","  public void test1790()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      HttpRequest httpRequest3 = httpRequest2.acceptJson();
}"
1791,,"  public void test1791()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1792,,"  public void test1792()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1793,,"  public void test1793()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1794,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1794()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1795,,"  public void test1795()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1796,,"  public void test1796()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1797,,"  public void test1797()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1798,,"  public void test1798()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1799,,"  public void test1799()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1800,,"  public void test1800()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1801,,"  public void test1801()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1802,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1802()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1803,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1803()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1804,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1804()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1805,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1805()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1806,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1806()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1807,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1807()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1808,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1808()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1809,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1809()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1810,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1810()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1811,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1811()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1812,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1812()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1813,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1813()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1814,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1814()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1815,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1815()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
}"
1816,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1816()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
}"
1817,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1817()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1818,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1818()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1819,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1819()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1820,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1820()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1821,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1821()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1822,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1822()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1823,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1823()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1824,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1824()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1825,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1825()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1826,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1826()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1827,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1827()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1828,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1828()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1829,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1829()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1830,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1830()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1831,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1831()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1832,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1832()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1833,"  public HttpRequest trustAllHosts() {
    final HttpURLConnection connection = getConnection();
    if (connection instanceof HttpsURLConnection)
      ((HttpsURLConnection) connection)
          .setHostnameVerifier(getTrustedVerifier());
    return this;
  }","  public void test1833()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
}"
1834,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1834()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1835,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1835()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1836,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1836()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1837,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1837()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1838,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1838()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1839,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1839()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1840,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1840()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1841,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1841()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1842,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1842()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1843,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1843()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1844,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1844()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1845,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1845()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1846,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1846()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1847,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1847()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1848,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1848()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1849,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1849()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1850,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1850()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1851,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1851()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1852,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1852()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1853,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1853()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1854,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1854()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1855,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1855()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1856,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1856()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1857,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1857()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1858,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1858()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1859,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1859()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1860,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1860()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1861,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1861()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1862,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1862()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1863,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1863()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1864,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1864()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest1 = httpRequest0.trustAllHosts();
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1865,,"  public void test1865()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1866,,"  public void test1866()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1867,,"  public void test1867()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1868,,"  public void test1868()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1869,,"  public void test1869()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1870,,"  public void test1870()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1871,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1871()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1872,,"  public void test1872()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1873,,"  public void test1873()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1874,,"  public void test1874()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1875,,"  public void test1875()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1876,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1876()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1877,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1877()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1878,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1878()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1879,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1879()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1880,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1880()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1881,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1881()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1882,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1882()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1883,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1883()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1884,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1884()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1885,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1885()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1886,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1886()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1887,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1887()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1888,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test1888()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
1889,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1889()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1890,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1890()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1891,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1891()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1892,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1892()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1893,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1893()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1894,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1894()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1895,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1895()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1896,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1896()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1897,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1897()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1898,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1898()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1899,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1899()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1900,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1900()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1901,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test1901()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
}"
1902,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1902()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1903,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1903()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1904,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1904()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1905,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1905()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1906,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1906()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1907,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1907()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1908,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1908()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1909,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1909()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1910,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1910()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1911,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1911()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1912,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1912()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1913,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1913()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1914,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1914()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1915,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1915()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1916,"  public Map<String, String> parameters(final String headerName) {
    return getParams(header(headerName));
  }","  public void test1916()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
}"
1917,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1917()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1918,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1918()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1919,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1919()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1920,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1920()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1921,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1921()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1922,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1922()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1923,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1923()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1924,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1924()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1925,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1925()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1926,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1926()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1927,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1927()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1928,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1928()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1929,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1929()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1930,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1930()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1931,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1931()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1932,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1932()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1933,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1933()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1934,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1934()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1935,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test1935()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
}"
1936,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1936()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1937,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1937()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1938,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1938()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1939,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1939()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1940,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1940()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1941,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1941()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1942,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1942()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1943,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1943()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1944,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1944()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1945,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1945()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1946,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1946()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1947,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1947()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1948,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1948()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1949,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1949()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1950,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1950()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1951,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1951()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1952,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1952()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1953,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1953()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1954,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1954()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1955,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1955()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1956,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1956()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1957,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1957()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1958,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1958()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1959,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1959()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1960,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1960()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1961,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1961()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1962,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1962()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1963,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1963()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1964,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1964()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1965,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1965()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1966,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test1966()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      String string0 = httpRequest0.header((String) null);
      Map<String, String> map0 = httpRequest0.parameters(""get_column_name"");
      HttpRequest httpRequest1 = httpRequest0.headers(map0);
      HttpURLConnection httpURLConnection0 = httpRequest0.getConnection();
}"
1967,,"  public void test1967()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1968,,"  public void test1968()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1969,,"  public void test1969()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1970,,"  public void test1970()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1971,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1971()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1972,,"  public void test1972()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1973,,"  public void test1973()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1974,,"  public void test1974()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1975,,"  public void test1975()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1976,,"  public void test1976()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1977,,"  public void test1977()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
1978,,"  public void test1978()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
}"
1979,,"  public void test1979()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
}"
1980,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1980()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1981,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1981()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1982,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1982()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1983,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1983()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1984,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test1984()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1985,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1985()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1986,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1986()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1987,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1987()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1988,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1988()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1989,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1989()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1990,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test1990()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1991,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test1991()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1992,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test1992()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = HttpRequest.CONTENT_TYPE_FORM;
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
1993,,"  public void test1993()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
1994,,"  public void test1994()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
1995,,"  public void test1995()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
}"
1996,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test1996()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
1997,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test1997()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
1998,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test1998()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
1999,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test1999()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
}"
2000,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2000()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
}"
2001,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2001()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
}"
2002,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2002()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
}"
2003,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2003()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
}"
2004,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2004()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
}"
2005,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2005()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2006,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2006()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2007,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2007()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2008,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2008()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2009,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2009()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2010,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2010()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2011,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2011()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2012,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2012()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2013,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2013()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2014,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2014()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2015,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2015()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2016,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2016()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2017,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2017()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2018,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2018()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2019,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2019()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2020,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2020()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2021,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2021()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2022,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2022()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2023,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2023()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2024,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2024()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2025,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2025()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2026,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2026()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2027,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2027()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2028,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2028()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2029,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2029()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2030,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2030()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2031,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2031()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2032,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2032()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2033,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2033()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2034,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2034()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2035,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2035()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2036,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2036()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2037,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2037()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2038,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2038()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2039,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2039()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2040,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2040()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2041,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2041()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2042,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2042()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2043,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2043()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2044,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2044()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2045,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2045()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2046,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2046()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2047,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2047()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2048,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2048()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2049,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2049()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2050,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2050()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2051,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2051()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2052,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2052()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2053,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2053()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2054,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2054()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2055,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2055()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2056,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2056()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2057,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2057()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2058,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2058()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      boolean boolean0 = true;
      int int0 = 4363;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@1fd0147c=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      int int1 = (-20);
      boolean boolean1 = true;
      boolean boolean2 = true;
      int int2 = 1928;
      MockPrintStream mockPrintStream0 = new MockPrintStream(""boundary"");
}"
2059,,"  public void test2059()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2060,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2060()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2061,,"  public void test2061()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2062,,"  public void test2062()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2063,,"  public void test2063()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2064,,"  public void test2064()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2065,,"  public void test2065()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2066,,"  public void test2066()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2067,,"  public void test2067()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2068,,"  public void test2068()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2069,,"  public void test2069()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2070,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2070()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2071,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2071()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2072,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2072()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2073,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2073()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2074,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2074()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2075,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2075()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2076,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2076()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2077,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2077()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2078,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2078()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2079,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2079()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2080,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2080()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2081,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2081()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2082,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2082()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
2083,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2083()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2084,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2084()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2085,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2085()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2086,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2086()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2087,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2087()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2088,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2088()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2089,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2089()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2090,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2090()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2091,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2091()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2092,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2092()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2093,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2093()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2094,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2094()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2095,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2095()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2096,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2096()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2097,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2097()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2098,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2098()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2099,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2099()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
      boolean boolean0 = true;
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
2100,,"  public void test2100()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2101,,"  public void test2101()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2102,,"  public void test2102()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2103,,"  public void test2103()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2104,,"  public void test2104()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2105,,"  public void test2105()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2106,,"  public void test2106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2107,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2108,,"  public void test2108()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2109,,"  public void test2109()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2110,,"  public void test2110()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2111,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2111()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2112,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2112()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2113,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2113()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2114,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2115,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2116,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2117,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2117()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2118,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2118()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2119,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2119()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2120,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2120()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2121,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2121()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2122,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2122()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2123,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2123()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2124,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2124()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
}"
2125,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2125()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
}"
2126,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2126()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2127,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2128,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2129,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2129()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2130,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test2130()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2131,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2131()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2132,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2132()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2133,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2133()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2134,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2135,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2136,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2136()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2137,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2137()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2138,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2138()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2139,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2139()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2140,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2140()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2141,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2141()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2142,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      File file0 = MockFile.createTempFile(""ETag"", ""Cache-Control"");
}"
2143,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2143()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
2144,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2144()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
2145,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2145()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
2146,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2146()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
}"
2147,,"  public void test2147()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2148,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2148()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2149,,"  public void test2149()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2150,,"  public void test2150()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2151,,"  public void test2151()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2152,,"  public void test2152()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2153,,"  public void test2153()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2154,,"  public void test2154()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2155,,"  public void test2155()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2156,,"  public void test2156()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2157,,"  public void test2157()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2158,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2158()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2159,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2159()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2160,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2160()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2161,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2161()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2162,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2162()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2163,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2163()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2164,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2164()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2165,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2165()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2166,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2166()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2167,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2167()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2168,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2168()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2169,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2169()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2170,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2170()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Yx?m+A .X.y`HI"");
}"
2171,,"  public void test2171()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
2172,,"  public void test2172()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
2173,,"  public void test2173()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
}"
2174,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2174()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
}"
2175,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2175()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
}"
2176,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2176()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
}"
2177,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2177()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
}"
2178,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2178()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
}"
2179,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2179()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
}"
2180,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2180()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
}"
2181,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2181()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
}"
2182,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2182()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
}"
2183,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2183()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
}"
2184,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2184()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
}"
2185,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2185()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2186,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2186()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2187,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2187()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2188,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2188()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2189,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2189()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2190,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2190()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2191,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2191()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2192,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2192()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2193,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2193()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
}"
2194,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2194()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2195,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2195()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2196,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2196()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2197,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2197()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2198,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2198()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2199,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2199()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2200,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2200()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2201,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2201()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2202,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2202()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2203,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2203()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2204,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2204()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2205,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2205()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2206,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2206()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
}"
2207,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2207()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2208,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2208()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2209,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2209()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2210,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2210()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2211,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2211()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2212,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2212()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2213,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2213()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2214,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2214()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2215,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2215()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2216,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2216()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2217,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2217()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2218,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2218()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2219,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2219()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2220,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2220()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2221,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2221()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2222,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2222()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2223,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2223()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
}"
2224,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2224()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2225,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2225()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2226,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2226()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2227,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2227()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2228,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2228()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2229,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2229()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2230,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2230()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2231,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2231()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2232,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2232()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2233,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2233()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2234,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2234()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2235,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2235()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2236,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2236()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2237,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2237()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2238,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2238()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2239,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2239()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2240,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2240()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2241,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2241()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2242,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2242()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2243,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2243()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2244,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2244()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2245,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2245()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
}"
2246,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2246()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
}"
2247,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2247()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
}"
2248,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2248()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
}"
2249,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2249()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
}"
2250,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test2250()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
}"
2251,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2251()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2252,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2252()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2253,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2253()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2254,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2254()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2255,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2255()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2256,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2256()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2257,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2257()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2258,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2258()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2259,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2259()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2260,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2260()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2261,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2261()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2262,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2262()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2263,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2263()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2264,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2264()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2265,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2265()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2266,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2266()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2267,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2267()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2268,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2268()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2269,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2269()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2270,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2270()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2271,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2271()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2272,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2272()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2273,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2273()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2274,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2274()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2275,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2275()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2276,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2276()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2277,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2277()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2278,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2278()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2279,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2279()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2280,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2280()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2281,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2281()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", (Object[]) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("",;]VGh=`T0Z)Xrf["", ""gzip"", (-2780));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      DataTruncation dataTruncation1 = hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
}"
2282,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2282()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
2283,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2283()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
2284,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2284()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
2285,,"  public void test2285()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2286,,"  public void test2286()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2287,,"  public void test2287()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2288,,"  public void test2288()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2289,,"  public void test2289()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2290,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2290()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2291,,"  public void test2291()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2292,,"  public void test2292()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2293,,"  public void test2293()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2294,,"  public void test2294()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2295,,"  public void test2295()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
2296,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2296()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2297,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2297()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2298,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2298()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2299,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2299()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2300,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2300()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2301,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2301()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2302,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2302()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2303,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2303()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2304,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2304()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2305,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2305()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2306,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2306()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2307,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2307()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2308,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2308()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2309,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2309()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
}"
2310,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2310()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
}"
2311,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2311()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
}"
2312,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2312()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
2313,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2313()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
2314,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2314()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
2315,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2315()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
2316,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2316()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
2317,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2317()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
2318,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2318()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
2319,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2319()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
2320,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2320()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
2321,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2321()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
2322,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2322()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
2323,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2323()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
2324,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2324()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
2325,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2325()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
2326,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test2326()  throws Throwable  {
      HttpRequest.proxyHost((String) null);
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
}"
2327,,"  public void test2327()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2328,,"  public void test2328()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2329,,"  public void test2329()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2330,,"  public void test2330()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2331,,"  public void test2331()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2332,,"  public void test2332()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2333,,"  public void test2333()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2334,,"  public void test2334()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2335,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2335()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2336,,"  public void test2336()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2337,,"  public void test2337()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2338,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2338()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2339,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2339()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2340,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2340()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2341,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2341()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2342,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2342()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2343,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2343()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2344,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2344()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2345,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2345()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2346,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2346()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2347,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2347()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2348,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2348()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2349,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2349()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2350,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2350()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
2351,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2351()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
}"
2352,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2352()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
}"
2353,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2353()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2354,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2354()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2355,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2355()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2356,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2356()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2357,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2357()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2358,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2358()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2359,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2359()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2360,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2360()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2361,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2361()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2362,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2362()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2363,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2363()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2364,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2364()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2365,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2365()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2366,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2366()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2367,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2367()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2368,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2368()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2369,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2369()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
}"
2370,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2370()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator3 = Map.Entry.comparingByValue();
}"
2371,"  protected HttpRequest closeOutputQuietly() throws HttpRequestException {
    try {
      return closeOutput();
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }
  }","  public void test2371()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator2 = Map.Entry.comparingByValue();
      HttpRequest httpRequest1 = httpRequest0.closeOutputQuietly();
      Comparator<Map.Entry<SQLInvalidAuthorizationSpecException, Integer>> comparator3 = Map.Entry.comparingByValue();
}"
2372,,"  public void test2372()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
}"
2373,,"  public void test2373()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2374,,"  public void test2374()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2375,,"  public void test2375()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2376,,"  public void test2376()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2377,,"  public void test2377()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2378,,"  public void test2378()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2379,,"  public void test2379()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2380,,"  public void test2380()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2381,,"  public void test2381()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2382,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2382()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2383,,"  public void test2383()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2384,,"  public void test2384()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2385,,"  public void test2385()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2386,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test2386()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2387,,"  public void test2387()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2388,,"  public void test2388()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2389,,"  public void test2389()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2390,,"  public void test2390()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2391,,"  public void test2391()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2392,,"  public void test2392()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2393,,"  public void test2393()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2394,,"  public void test2394()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2395,,"  public void test2395()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2396,,"  public void test2396()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2397,,"  public void test2397()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
2398,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2398()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2399,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2399()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2400,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2400()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2401,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2401()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2402,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2402()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2403,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2403()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2404,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2404()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2405,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2405()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2406,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2406()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2407,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2407()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2408,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2408()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2409,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2409()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2410,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2410()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2411,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test2411()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2412,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2412()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2413,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2413()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2414,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2414()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2415,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2415()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2416,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2416()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2417,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2417()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2418,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2418()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2419,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2419()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2420,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2420()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2421,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2421()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2422,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2422()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2423,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2423()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2424,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2424()  throws Throwable  {
      String string0 = """";
      String string1 = ""00content0boundary00"";
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2425,,"  public void test2425()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
}"
2426,,"  public void test2426()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2427,,"  public void test2427()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2428,,"  public void test2428()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2429,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test2429()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2430,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2430()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2431,,"  public void test2431()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2432,,"  public void test2432()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2433,,"  public void test2433()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2434,,"  public void test2434()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2435,,"  public void test2435()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2436,,"  public void test2436()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2437,,"  public void test2437()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2438,,"  public void test2438()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2439,,"  public void test2439()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2440,,"  public void test2440()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2441,,"  public void test2441()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2442,,"  public void test2442()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2443,,"  public void test2443()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2444,,"  public void test2444()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2445,,"  public void test2445()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2446,,"  public void test2446()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2447,,"  public void test2447()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2448,,"  public void test2448()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2449,,"  public void test2449()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2450,,"  public void test2450()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
2451,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2451()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2452,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2452()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2453,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2453()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2454,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test2454()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2455,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2455()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2456,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2456()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2457,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2457()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2458,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2458()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2459,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2459()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2460,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2460()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2461,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2461()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2462,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2462()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2463,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2463()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2464,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2464()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2465,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2465()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2466,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2466()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2467,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2467()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2468,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2468()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2469,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2469()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2470,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2470()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2471,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2471()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2472,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2472()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2473,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2473()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2474,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2474()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2475,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2475()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2476,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2476()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2477,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2477()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
2478,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2478()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2479,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2479()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2480,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2480()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2481,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test2481()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2482,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2482()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2483,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2483()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2484,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2484()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2485,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2485()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2486,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2486()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2487,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2487()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2488,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2488()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2489,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2489()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2490,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2490()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2491,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2491()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2492,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2492()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2493,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2493()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2494,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2494()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2495,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2495()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2496,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2496()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2497,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2497()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2498,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2498()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2499,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2499()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2500,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2500()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2501,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2501()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2502,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2502()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2503,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2503()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2504,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2504()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2505,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2505()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2506,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2506()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.trace(uRL0);
}"
2507,,"  public void test2507()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
}"
2508,,"  public void test2508()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2509,,"  public void test2509()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2510,,"  public void test2510()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2511,,"  public void test2511()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2512,,"  public void test2512()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2513,,"  public void test2513()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2514,,"  public void test2514()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2515,,"  public void test2515()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2516,,"  public void test2516()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2517,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2517()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2518,,"  public void test2518()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
}"
2519,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2519()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2520,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2520()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2521,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2521()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2522,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2522()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2523,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2523()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2524,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2524()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2525,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2525()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2526,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2526()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2527,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2527()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2528,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2528()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2529,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2529()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2530,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2530()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2531,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2531()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2532,,"  public void test2532()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2533,,"  public void test2533()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2534,,"  public void test2534()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2535,,"  public void test2535()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2536,,"  public void test2536()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2537,,"  public void test2537()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2538,,"  public void test2538()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2539,,"  public void test2539()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2540,,"  public void test2540()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2541,,"  public void test2541()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2542,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2542()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2543,,"  public void test2543()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
2544,,"  public void test2544()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2545,,"  public void test2545()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2546,,"  public void test2546()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2547,,"  public void test2547()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2548,,"  public void test2548()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2549,,"  public void test2549()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2550,,"  public void test2550()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2551,,"  public void test2551()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2552,,"  public void test2552()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2553,,"  public void test2553()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2554,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2554()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2555,,"  public void test2555()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2556,,"  public void test2556()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2557,,"  public void test2557()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2558,,"  public void test2558()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2559,,"  public void test2559()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2560,,"  public void test2560()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2561,,"  public void test2561()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2562,,"  public void test2562()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2563,,"  public void test2563()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2564,,"  public void test2564()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2565,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2565()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2566,,"  public void test2566()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2567,,"  public void test2567()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
2568,,"  public void test2568()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
}"
2569,,"  public void test2569()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
}"
2570,,"  public void test2570()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
}"
2571,,"  public void test2571()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2572,,"  public void test2572()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2573,,"  public void test2573()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2574,,"  public void test2574()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2575,,"  public void test2575()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2576,,"  public void test2576()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2577,,"  public void test2577()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2578,,"  public void test2578()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2579,,"  public void test2579()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2580,,"  public void test2580()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2581,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2581()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2582,,"  public void test2582()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2583,,"  public void test2583()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2584,,"  public void test2584()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2585,,"  public void test2585()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2586,,"  public void test2586()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2587,,"  public void test2587()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2588,,"  public void test2588()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2589,,"  public void test2589()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2590,,"  public void test2590()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2591,,"  public void test2591()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2592,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2592()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2593,,"  public void test2593()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2594,,"  public void test2594()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2595,,"  public void test2595()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2596,,"  public void test2596()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2597,,"  public void test2597()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2598,,"  public void test2598()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2599,,"  public void test2599()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2600,,"  public void test2600()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2601,,"  public void test2601()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2602,,"  public void test2602()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2603,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2603()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2604,,"  public void test2604()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2605,,"  public void test2605()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2606,,"  public void test2606()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2607,,"  public void test2607()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2608,,"  public void test2608()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2609,,"  public void test2609()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
2610,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2610()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2611,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2611()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2612,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2612()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2613,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2613()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2614,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2614()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2615,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2615()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2616,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2616()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2617,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2617()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2618,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2618()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2619,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2619()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2620,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2620()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2621,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2621()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2622,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2622()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2623,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2623()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2624,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2624()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2625,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2625()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2626,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2626()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2627,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2627()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2628,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2628()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2629,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2629()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2630,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2630()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2631,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2631()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2632,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2632()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2633,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2633()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2634,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2634()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2635,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2635()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2636,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2636()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2637,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2637()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2638,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2638()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2639,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2639()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2640,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2640()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2641,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2641()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2642,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2642()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2643,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2643()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2644,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2644()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2645,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2645()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2646,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2646()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2647,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2647()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2648,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2648()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2649,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test2649()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""charset"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL1, ""boundary"");
}"
2650,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2650()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
}"
2651,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2651()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
}"
2652,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2652()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
}"
2653,,"  public void test2653()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2654,,"  public void test2654()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2655,,"  public void test2655()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2656,,"  public void test2656()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2657,,"  public void test2657()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2658,,"  public void test2658()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2659,,"  public void test2659()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2660,,"  public void test2660()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2661,,"  public void test2661()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2662,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2662()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2663,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2663()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2664,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2664()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2665,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2665()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2666,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2666()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2667,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2667()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2668,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2668()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2669,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2669()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2670,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2670()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2671,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2671()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2672,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2672()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2673,,"  public void test2673()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
2674,,"  public void test2674()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
2675,,"  public void test2675()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
}"
2676,,"  public void test2676()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2677,,"  public void test2677()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2678,,"  public void test2678()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2679,,"  public void test2679()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2680,,"  public void test2680()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2681,,"  public void test2681()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2682,,"  public void test2682()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2683,,"  public void test2683()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2684,,"  public void test2684()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2685,,"  public void test2685()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2686,,"  public void test2686()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2687,,"  public void test2687()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2688,,"  public void test2688()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2689,,"  public void test2689()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2690,,"  public void test2690()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2691,,"  public void test2691()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2692,,"  public void test2692()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2693,,"  public void test2693()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2694,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2694()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2695,,"  public void test2695()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2696,,"  public void test2696()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2697,,"  public void test2697()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2698,,"  public void test2698()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2699,,"  public void test2699()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2700,,"  public void test2700()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2701,,"  public void test2701()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2702,,"  public void test2702()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2703,,"  public void test2703()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2704,,"  public void test2704()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2705,,"  public void test2705()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2706,,"  public void test2706()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
}"
2707,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2707()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2708,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2708()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2709,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2709()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2710,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2710()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2711,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2711()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2712,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2712()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2713,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2713()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2714,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2714()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2715,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2715()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2716,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2716()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2717,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2717()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2718,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2718()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2719,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2719()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2720,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2720()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2721,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2721()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2722,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2722()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2723,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2723()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2724,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2724()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2725,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2725()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2726,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2726()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2727,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2727()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2728,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2728()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2729,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2729()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2730,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2730()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2731,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test2731()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
2732,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2732()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2733,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2733()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2734,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2734()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2735,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2735()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2736,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2736()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2737,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2737()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2738,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2738()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2739,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2739()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2740,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2740()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2741,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2741()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2742,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2742()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2743,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2743()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2744,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2744()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2745,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2745()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2746,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2746()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2747,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2747()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2748,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2748()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2749,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2749()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2750,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2750()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2751,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2751()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2752,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2752()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2753,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2753()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2754,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2754()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2755,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2755()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2756,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2756()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2757,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2757()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2758,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2758()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2759,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2759()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2760,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2760()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
2761,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2761()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
}"
2762,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2762()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
}"
2763,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test2763()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
}"
2764,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2764()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2765,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2765()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2766,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2766()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2767,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2767()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2768,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2768()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2769,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2769()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2770,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2770()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2771,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2771()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2772,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2772()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2773,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2773()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2774,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2774()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2775,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2775()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2776,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2776()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2777,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2777()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2778,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2778()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2779,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2779()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2780,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2780()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2781,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2781()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2782,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2782()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2783,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2783()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2784,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2784()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2785,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2785()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2786,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2786()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2787,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2787()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2788,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2788()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2789,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2789()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2790,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2790()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2791,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2791()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2792,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2792()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2793,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2793()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2794,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2794()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2795,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2795()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2796,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2796()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2797,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2797()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2798,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2798()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2799,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2799()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2800,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2800()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
}"
2801,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2801()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""Accept-Charset"", ""Date"");
}"
2802,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test2802()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpRequest httpRequest2 = httpRequest1.headers((Map<String, String>) hashMap0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""Accept-Charset"", ""Date"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
}"
2803,,"  public void test2803()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2804,,"  public void test2804()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2805,,"  public void test2805()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2806,,"  public void test2806()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2807,,"  public void test2807()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2808,,"  public void test2808()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2809,,"  public void test2809()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2810,,"  public void test2810()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2811,,"  public void test2811()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2812,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2812()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2813,,"  public void test2813()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2814,,"  public void test2814()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2815,,"  public void test2815()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
}"
2816,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2816()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2817,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2817()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2818,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2818()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2819,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2819()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2820,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2820()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2821,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2821()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2822,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2822()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2823,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2823()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2824,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2824()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2825,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2825()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2826,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2826()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2827,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2827()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2828,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2828()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2829,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2829()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2830,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2830()  throws Throwable  {
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""HtA|hYI@t"", (String) null, (-1), ""NE_qPre"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2831,,"  public void test2831()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2832,,"  public void test2832()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2833,,"  public void test2833()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2834,,"  public void test2834()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2835,,"  public void test2835()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2836,,"  public void test2836()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2837,,"  public void test2837()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2838,,"  public void test2838()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2839,,"  public void test2839()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2840,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2840()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2841,,"  public void test2841()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2842,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2842()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2843,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2843()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2844,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2844()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2845,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2845()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2846,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2846()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2847,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2847()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2848,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2848()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2849,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2849()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2850,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2850()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2851,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2851()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2852,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2852()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2853,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2853()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2854,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2854()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
2855,,"  public void test2855()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2856,,"  public void test2856()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2857,,"  public void test2857()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2858,,"  public void test2858()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2859,,"  public void test2859()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2860,,"  public void test2860()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2861,,"  public void test2861()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2862,,"  public void test2862()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2863,,"  public void test2863()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2864,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2864()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2865,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2865()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2866,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2866()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2867,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2867()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2868,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2868()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2869,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2869()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2870,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2870()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2871,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2871()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2872,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2872()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2873,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2873()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2874,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2874()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
2875,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2875()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.HEADER_SERVER;
}"
2876,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test2876()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String string0 = HttpRequest.HEADER_SERVER;
}"
2877,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2877()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
}"
2878,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2878()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
}"
2879,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test2879()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
}"
2880,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2880()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      int int0 = 0;
      HttpRequest httpRequest1 = httpRequest0.useProxy(""v<FSSS=L.}F*@T"", 0);
}"
2881,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2881()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      int int0 = 0;
      HttpRequest httpRequest1 = httpRequest0.useProxy(""v<FSSS=L.}F*@T"", 0);
}"
2882,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2882()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      int int0 = 0;
      HttpRequest httpRequest1 = httpRequest0.useProxy(""v<FSSS=L.}F*@T"", 0);
}"
2883,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2883()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      int int0 = 0;
      HttpRequest httpRequest1 = httpRequest0.useProxy(""v<FSSS=L.}F*@T"", 0);
}"
2884,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test2884()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      int int0 = 0;
      HttpRequest httpRequest1 = httpRequest0.useProxy(""v<FSSS=L.}F*@T"", 0);
}"
2885,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test2885()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      int int0 = 0;
      HttpRequest httpRequest1 = httpRequest0.useProxy(""v<FSSS=L.}F*@T"", 0);
}"
2886,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test2886()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.delete((URL) null);
      int int0 = 0;
      HttpRequest httpRequest1 = httpRequest0.useProxy(""v<FSSS=L.}F*@T"", 0);
}"
2887,,"  public void test2887()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2888,,"  public void test2888()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2889,,"  public void test2889()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2890,,"  public void test2890()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2891,,"  public void test2891()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2892,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2892()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2893,,"  public void test2893()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2894,,"  public void test2894()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2895,,"  public void test2895()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2896,,"  public void test2896()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2897,,"  public void test2897()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2898,,"  public void test2898()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2899,,"  public void test2899()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
}"
2900,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2900()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2901,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2901()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2902,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2902()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2903,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2903()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2904,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2904()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2905,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2905()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2906,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2906()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2907,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2907()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2908,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2908()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2909,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2909()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2910,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2910()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2911,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2911()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2912,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2912()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2913,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2913()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2914,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test2914()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""ETag"", ""Security exception configuring SSL context"", 0, ""TYaA=4>NV?0/3hC<[N"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
2915,,"  public void test2915()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2916,,"  public void test2916()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2917,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2917()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2918,,"  public void test2918()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2919,,"  public void test2919()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2920,,"  public void test2920()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2921,,"  public void test2921()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2922,,"  public void test2922()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2923,,"  public void test2923()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2924,,"  public void test2924()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2925,,"  public void test2925()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
2926,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2926()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2927,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2927()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2928,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test2928()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2929,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2929()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2930,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2930()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2931,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2931()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2932,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2932()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2933,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2933()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2934,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2934()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2935,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2935()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2936,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2936()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2937,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2937()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2938,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test2938()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
2939,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2939()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
}"
2940,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2940()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
}"
2941,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2941()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
}"
2942,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2942()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      float float0 = 2288.3752F;
      Float float1 = new Float(2288.3752F);
}"
2943,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2943()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      float float0 = 2288.3752F;
      Float float1 = new Float(2288.3752F);
}"
2944,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test2944()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
      float float0 = 2288.3752F;
      Float float1 = new Float(2288.3752F);
}"
2945,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2945()  throws Throwable  {
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try {
        HttpRequest.put((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
2946,,"  public void test2946()  throws Throwable  {
      String string0 = HttpRequest.METHOD_HEAD;
}"
2947,,"  public void test2947()  throws Throwable  {
      String string0 = HttpRequest.METHOD_HEAD;
}"
2948,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2948()  throws Throwable  {
      // Undeclared exception!
      try {
        HttpRequest.put((CharSequence) """", true, (Object[]) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol:
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
2949,,"  public void test2949()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
}"
2950,,"  public void test2950()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
}"
2951,,"  public void test2951()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) ""Content-Type"";
      objectArray0[1] = (Object) ""Content-Type"";
      Object object0 = new Object();
}"
2952,,"  public void test2952()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
}"
2953,,"  public void test2953()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
}"
2954,,"  public void test2954()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
}"
2955,,"  public void test2955()  throws Throwable  {
      String string0 = HttpRequest.HEADER_IF_NONE_MATCH;
}"
2956,,"  public void test2956()  throws Throwable  {
      String string0 = HttpRequest.HEADER_IF_NONE_MATCH;
}"
2957,,"  public void test2957()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2958,,"  public void test2958()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2959,,"  public void test2959()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2960,,"  public void test2960()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2961,,"  public void test2961()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2962,,"  public void test2962()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2963,,"  public void test2963()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2964,,"  public void test2964()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2965,,"  public void test2965()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2966,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2966()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2967,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2967()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2968,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2968()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2969,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2969()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2970,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2970()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2971,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2971()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2972,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2972()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2973,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2973()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2974,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test2974()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2975,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test2975()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2976,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2976()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
2977,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2977()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      PipedWriter pipedWriter0 = new PipedWriter();
}"
2978,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test2978()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
}"
2979,,"  public void test2979()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2980,,"  public void test2980()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2981,,"  public void test2981()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2982,,"  public void test2982()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2983,,"  public void test2983()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2984,,"  public void test2984()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2985,,"  public void test2985()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2986,,"  public void test2986()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2987,,"  public void test2987()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
2988,,"  public void test2988()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2989,,"  public void test2989()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2990,,"  public void test2990()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2991,,"  public void test2991()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2992,,"  public void test2992()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2993,,"  public void test2993()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2994,,"  public void test2994()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2995,,"  public void test2995()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2996,,"  public void test2996()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2997,,"  public void test2997()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2998,,"  public void test2998()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
2999,,"  public void test2999()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
3000,,"  public void test3000()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
3001,,"  public void test3001()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
3002,,"  public void test3002()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
3003,,"  public void test3003()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
3004,,"  public void test3004()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
3005,,"  public void test3005()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
3006,,"  public void test3006()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
3007,,"  public void test3007()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
3008,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3008()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3009,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3009()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3010,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3010()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3011,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3011()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3012,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3012()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3013,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3013()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3014,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3014()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3015,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3015()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3016,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3016()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3017,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3017()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3018,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3018()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3019,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3019()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3020,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3020()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3021,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3021()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3022,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3022()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3023,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3023()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3024,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3024()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3025,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3025()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3026,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3026()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3027,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3027()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3028,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3028()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3029,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3029()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3030,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3030()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3031,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3031()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3032,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3032()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3033,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3033()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3034,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3034()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3035,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3035()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3036,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3036()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3037,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3037()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3038,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3038()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3039,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3039()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3040,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3040()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3041,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3041()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3042,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3042()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3043,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3043()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3044,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3044()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3045,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3045()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3046,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3046()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3047,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3047()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3048,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3048()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3049,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3049()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3050,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3050()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3051,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3051()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3052,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3052()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3053,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3053()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3054,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3054()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3055,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3055()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3056,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3056()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3057,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3057()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
      HttpRequest httpRequest1 = httpRequest0.ignoreCloseExceptions(true);
}"
3058,,"  public void test3058()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3059,,"  public void test3059()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3060,,"  public void test3060()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3061,,"  public void test3061()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3062,,"  public void test3062()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3063,,"  public void test3063()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3064,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3064()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3065,,"  public void test3065()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3066,,"  public void test3066()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3067,,"  public void test3067()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3068,,"  public void test3068()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
3069,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3069()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3070,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3070()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3071,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3071()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3072,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3072()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3073,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3073()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3074,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3074()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3075,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3075()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3076,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3076()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3077,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3077()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3078,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3078()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3079,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3079()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3080,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3080()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3081,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3081()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3082,,"  public void test3082()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3083,,"  public void test3083()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3084,,"  public void test3084()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3085,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3085()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3086,,"  public void test3086()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3087,,"  public void test3087()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3088,,"  public void test3088()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3089,,"  public void test3089()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3090,,"  public void test3090()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3091,,"  public void test3091()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3092,,"  public void test3092()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3093,,"  public void test3093()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
}"
3094,,"  public void test3094()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
}"
3095,,"  public void test3095()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3096,,"  public void test3096()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3097,,"  public void test3097()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3098,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3098()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3099,,"  public void test3099()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3100,,"  public void test3100()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3101,,"  public void test3101()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3102,,"  public void test3102()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3103,,"  public void test3103()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3104,,"  public void test3104()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3105,,"  public void test3105()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3106,,"  public void test3106()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3107,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3107()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3108,,"  public void test3108()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3109,,"  public void test3109()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3110,,"  public void test3110()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3111,,"  public void test3111()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3112,,"  public void test3112()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3113,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3113()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3114,,"  public void test3114()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3115,,"  public void test3115()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3116,,"  public void test3116()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3117,,"  public void test3117()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3118,,"  public void test3118()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3119,,"  public void test3119()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3120,,"  public void test3120()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3121,,"  public void test3121()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3122,,"  public void test3122()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3123,,"  public void test3123()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3124,,"  public void test3124()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3125,,"  public void test3125()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3126,,"  public void test3126()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3127,,"  public void test3127()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3128,,"  public void test3128()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3129,,"  public void test3129()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3130,,"  public void test3130()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
}"
3131,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3131()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3132,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3132()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3133,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3133()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3134,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3134()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3135,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3135()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3136,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3136()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3137,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3137()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3138,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3138()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3139,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3139()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3140,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3140()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3141,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3141()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3142,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3142()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3143,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3143()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3144,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3144()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3145,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3145()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3146,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3146()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3147,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3147()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3148,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3148()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3149,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3149()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3150,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3150()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3151,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3151()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3152,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3152()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3153,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3153()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3154,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3154()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3155,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3155()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3156,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3156()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3157,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3157()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3158,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3158()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
}"
3159,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3159()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3160,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3160()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3161,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3161()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3162,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3162()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3163,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3163()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3164,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3164()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3165,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3165()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3166,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3166()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3167,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3167()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3168,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3168()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3169,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3169()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3170,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3170()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3171,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3171()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3172,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3172()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3173,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3173()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3174,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3174()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3175,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3175()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3176,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3176()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3177,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3177()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3178,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3178()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3179,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3179()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3180,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3180()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3181,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3181()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3182,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3182()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3183,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3183()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3184,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3184()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3185,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3185()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3186,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3186()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3187,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3187()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3188,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3188()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3189,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3189()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3190,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3190()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3191,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3191()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3192,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3192()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3193,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3193()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3194,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3194()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3195,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3195()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3196,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3196()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3197,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3197()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3198,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3198()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3199,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3199()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3200,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3200()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3201,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3201()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3202,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3202()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3203,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3203()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3204,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3204()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3205,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3205()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3206,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3206()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3207,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test3207()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
}"
3208,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3208()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3209,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3209()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3210,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3210()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3211,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3211()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3212,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3212()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3213,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3213()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3214,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3214()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3215,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3215()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3216,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3216()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3217,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3217()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3218,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3218()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3219,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3219()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3220,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3220()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3221,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3221()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3222,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3222()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3223,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3223()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3224,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3224()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3225,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3225()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3226,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3226()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3227,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3227()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3228,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3228()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3229,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3229()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3230,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3230()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3231,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3231()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3232,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3232()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3233,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3233()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3234,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3234()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3235,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3235()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3236,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3236()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3237,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3237()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3238,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3238()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3239,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3239()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3240,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3240()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3241,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3241()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3242,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3242()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3243,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3243()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3244,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3244()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3245,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3245()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3246,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3246()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3247,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3247()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3248,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3248()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3249,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3249()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3250,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3250()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3251,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3251()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3252,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3252()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3253,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3253()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3254,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3254()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3255,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3255()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3256,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3256()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3257,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3257()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3258,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3258()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3259,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test3259()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = mockFile0.delete();
      URL uRL1 = MockURL.URL(uRL0, ""com.github.kevinsawicki.http.HttpRequest$UploadProgress$1"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
3260,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test3260()  throws Throwable  {
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException((IOException) null);
}"
3261,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test3261()  throws Throwable  {
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException((IOException) null);
      String string0 = httpRequest_HttpRequestException0.getMessage();
}"
3262,,"  public void test3262()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""SzHu(}}c,USR!"", (Throwable) null);
}"
3263,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test3263()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""SzHu(}}c,USR!"", (Throwable) null);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
}"
3264,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test3264()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""SzHu(}}c,USR!"", (Throwable) null);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
}"
3265,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test3265()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""SzHu(}}c,USR!"", (Throwable) null);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
}"
3266,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test3266()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""SzHu(}}c,USR!"", (Throwable) null);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
      HashMap<SQLTransientConnectionException, BatchUpdateException> hashMap0 = new HashMap<SQLTransientConnectionException, BatchUpdateException>();
}"
3267,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test3267()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""SzHu(}}c,USR!"", (Throwable) null);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
      HashMap<SQLTransientConnectionException, BatchUpdateException> hashMap0 = new HashMap<SQLTransientConnectionException, BatchUpdateException>();
}"
3268,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test3268()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""SzHu(}}c,USR!"", (Throwable) null);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
      HashMap<SQLTransientConnectionException, BatchUpdateException> hashMap0 = new HashMap<SQLTransientConnectionException, BatchUpdateException>();
}"
3269,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3269()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
}"
3270,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3270()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
}"
3271,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3271()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
}"
3272,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3272()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
3273,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3273()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
3274,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3274()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
3275,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3275()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
3276,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3276()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
3277,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3277()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
3278,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3278()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
3279,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3279()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
3280,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3280()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
3281,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3281()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
3282,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3282()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
3283,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3283()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
3284,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3284()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
3285,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test3285()  throws Throwable  {
      HttpRequest.proxyHost(""qC?yeP}"");
      HashMap<BatchUpdateException, InputStream> hashMap0 = new HashMap<BatchUpdateException, InputStream>();
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLWarning0);
}"
3286,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test3286()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode(""t{Cb"");
}"
3287,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test3287()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode(""t{Cb"");
}"
3288,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test3288()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode(""t{Cb"");
      HashMap<SQLNonTransientConnectionException, SQLTransientException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransientException>();
}"
3289,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test3289()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode(""t{Cb"");
      HashMap<SQLNonTransientConnectionException, SQLTransientException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransientException>();
}"
3290,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test3290()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode(""t{Cb"");
      HashMap<SQLNonTransientConnectionException, SQLTransientException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLTransientException>();
}"
3291,,"  public void test3291()  throws Throwable  {
      String string0 = HttpRequest.HEADER_IF_NONE_MATCH;
}"
3292,,"  public void test3292()  throws Throwable  {
      String string0 = HttpRequest.HEADER_IF_NONE_MATCH;
}"
3293,,"  public void test3293()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
}"
3294,,"  public void test3294()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
}"
3295,,"  public void test3295()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
}"
3296,,"  public void test3296()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
}"
3297,,"  public void test3297()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
}"
3298,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3298()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      String string1 = HttpRequest.append((CharSequence) ""Content-Type"", (Map<?, ?>) hashMap0);
}"
3299,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3299()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      String string1 = HttpRequest.append((CharSequence) ""Content-Type"", (Map<?, ?>) hashMap0);
}"
3300,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3300()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      String string1 = HttpRequest.append((CharSequence) ""Content-Type"", (Map<?, ?>) hashMap0);
}"
3301,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3301()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      String string1 = HttpRequest.append((CharSequence) ""Content-Type"", (Map<?, ?>) hashMap0);
}"
3302,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3302()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_TYPE;
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
      String string1 = HttpRequest.append((CharSequence) ""Content-Type"", (Map<?, ?>) hashMap0);
}"
3303,,"  public void test3303()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
}"
3304,,"  public void test3304()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
}"
3305,,"  public void test3305()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
}"
3306,,"  public void test3306()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
}"
3307,,"  public void test3307()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
}"
3308,,"  public void test3308()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
}"
3309,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3309()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
}"
3310,,"  public void test3310()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
}"
3311,,"  public void test3311()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
}"
3312,,"  public void test3312()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
}"
3313,,"  public void test3313()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3314,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3314()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3315,,"  public void test3315()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3316,,"  public void test3316()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3317,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3317()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3318,,"  public void test3318()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3319,,"  public void test3319()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3320,,"  public void test3320()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3321,,"  public void test3321()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3322,,"  public void test3322()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3323,,"  public void test3323()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
}"
3324,,"  public void test3324()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3325,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3325()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3326,,"  public void test3326()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3327,,"  public void test3327()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3328,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3328()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3329,,"  public void test3329()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3330,,"  public void test3330()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3331,,"  public void test3331()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3332,,"  public void test3332()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3333,,"  public void test3333()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3334,,"  public void test3334()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
}"
3335,,"  public void test3335()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
}"
3336,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3336()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
}"
3337,,"  public void test3337()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
}"
3338,,"  public void test3338()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
}"
3339,,"  public void test3339()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
}"
3340,,"  public void test3340()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
}"
3341,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3341()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
}"
3342,,"  public void test3342()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
}"
3343,,"  public void test3343()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
}"
3344,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3344()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3345,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3345()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3346,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3346()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3347,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3347()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3348,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3348()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3349,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3349()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3350,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3350()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3351,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3351()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3352,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3352()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3353,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3353()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3354,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3354()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CACHE_CONTROL;
      HashMap<SQLException, SQLNonTransientConnectionException> hashMap0 = new HashMap<SQLException, SQLNonTransientConnectionException>();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 15;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", 15, longArray0, sQLTransientConnectionException0);
      SQLException sQLException0 = batchUpdateException0.getNextException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = hashMap0.put((SQLException) null, sQLNonTransientConnectionException0);
}"
3355,,"  public void test3355()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3356,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3356()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3357,,"  public void test3357()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3358,,"  public void test3358()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3359,,"  public void test3359()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3360,,"  public void test3360()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3361,,"  public void test3361()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3362,,"  public void test3362()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3363,,"  public void test3363()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3364,,"  public void test3364()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3365,,"  public void test3365()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3366,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3366()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3367,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3367()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3368,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3368()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3369,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3369()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3370,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3370()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3371,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3371()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3372,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3372()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3373,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3373()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3374,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3374()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3375,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3375()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3376,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3376()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3377,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3377()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3378,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test3378()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
3379,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3379()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3380,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3380()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3381,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3381()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3382,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3382()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3383,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3383()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3384,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3384()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3385,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3385()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3386,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3386()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3387,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3387()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3388,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3388()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3389,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3389()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3390,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3390()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3391,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3391()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3392,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3392()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
}"
3393,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3393()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3394,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3394()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3395,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3395()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3396,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3396()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3397,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3397()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3398,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3398()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3399,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3399()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3400,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3400()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3401,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3401()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3402,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3402()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3403,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3403()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3404,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3404()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3405,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3405()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3406,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3406()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3407,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3407()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3408,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test3408()  throws Throwable  {
      int int0 = 0;
      HttpRequest.maxConnections(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'u';
      charArray0[3] = 'j';
      charArray0[4] = 'z';
      charArray0[5] = 'q';
      charArray0[6] = 'j';
      charArray0[7] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'z';
      objectArray0[3] = (Object) 'z';
      String string0 = HttpRequest.append((CharSequence) charBuffer0, objectArray0);
}"
3409,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3409()  throws Throwable  {
      HttpRequest.maxConnections(0);
      String string0 = HttpRequest.PARAM_CHARSET;
}"
3410,"  public static void maxConnections(final int maxConnections) {
    setProperty(""http.maxConnections"", Integer.toString(maxConnections));
  }","  public void test3410()  throws Throwable  {
      HttpRequest.maxConnections(0);
      String string0 = HttpRequest.PARAM_CHARSET;
}"
3411,,"  public void test3411()  throws Throwable  {
      String string0 = ""Location"";
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Location"");
}"
3412,,"  public void test3412()  throws Throwable  {
      String string0 = ""Location"";
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Location"");
      mockPrintStream0.println((Object) ""Location"");
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = 'H';
      charArray0[2] = '}';
      mockPrintStream0.println((Object) ""Location"");
      charArray0[3] = 'U';
      charArray0[4] = '$';
      mockPrintStream0.print(charArray0);
}"
3413,,"  public void test3413()  throws Throwable  {
      String string0 = ""Location"";
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Location"");
      mockPrintStream0.println((Object) ""Location"");
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = 'H';
      charArray0[2] = '}';
      mockPrintStream0.println((Object) ""Location"");
      charArray0[3] = 'U';
      charArray0[4] = '$';
      mockPrintStream0.print(charArray0);
}"
3414,,"  public void test3414()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
3415,,"  public void test3415()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
3416,,"  public void test3416()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
3417,,"  public void test3417()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
3418,,"  public void test3418()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
3419,,"  public void test3419()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
3420,,"  public void test3420()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
3421,,"  public void test3421()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
3422,,"  public void test3422()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
3423,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test3423()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3424,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test3424()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3425,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test3425()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3426,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test3426()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3427,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test3427()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3428,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test3428()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3429,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test3429()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3430,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test3430()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3431,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3431()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3432,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3432()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3433,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test3433()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
3434,,"  public void test3434()  throws Throwable  {
      String string0 = HttpRequest.HEADER_PROXY_AUTHORIZATION;
}"
3435,,"  public void test3435()  throws Throwable  {
      String string0 = HttpRequest.HEADER_PROXY_AUTHORIZATION;
}"
3436,,"  public void test3436()  throws Throwable  {
      String string0 = HttpRequest.HEADER_PROXY_AUTHORIZATION;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
}"
3437,,"  public void test3437()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
}"
3438,,"  public void test3438()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
}"
3439,,"  public void test3439()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
}"
3440,,"  public void test3440()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3441,,"  public void test3441()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3442,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3442()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3443,,"  public void test3443()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3444,,"  public void test3444()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3445,,"  public void test3445()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3446,,"  public void test3446()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3447,,"  public void test3447()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3448,,"  public void test3448()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3449,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3449()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3450,,"  public void test3450()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3451,,"  public void test3451()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3452,,"  public void test3452()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3453,,"  public void test3453()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3454,,"  public void test3454()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3455,,"  public void test3455()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3456,,"  public void test3456()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3457,,"  public void test3457()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3458,,"  public void test3458()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3459,,"  public void test3459()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3460,,"  public void test3460()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3461,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3461()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3462,,"  public void test3462()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3463,,"  public void test3463()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3464,,"  public void test3464()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3465,,"  public void test3465()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3466,,"  public void test3466()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3467,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3467()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3468,,"  public void test3468()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3469,,"  public void test3469()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3470,,"  public void test3470()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3471,,"  public void test3471()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3472,,"  public void test3472()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3473,,"  public void test3473()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3474,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3474()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3475,,"  public void test3475()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3476,,"  public void test3476()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3477,,"  public void test3477()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3478,,"  public void test3478()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3479,,"  public void test3479()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3480,,"  public void test3480()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3481,,"  public void test3481()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3482,,"  public void test3482()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3483,,"  public void test3483()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3484,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3484()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3485,,"  public void test3485()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3486,,"  public void test3486()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3487,,"  public void test3487()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3488,,"  public void test3488()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3489,,"  public void test3489()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3490,,"  public void test3490()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3491,,"  public void test3491()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3492,,"  public void test3492()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3493,,"  public void test3493()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3494,,"  public void test3494()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3495,,"  public void test3495()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3496,,"  public void test3496()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3497,,"  public void test3497()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3498,,"  public void test3498()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
}"
3499,,"  public void test3499()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3500,,"  public void test3500()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3501,,"  public void test3501()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3502,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3502()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3503,,"  public void test3503()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3504,,"  public void test3504()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3505,,"  public void test3505()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3506,,"  public void test3506()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3507,,"  public void test3507()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3508,,"  public void test3508()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3509,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3509()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3510,,"  public void test3510()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3511,,"  public void test3511()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3512,,"  public void test3512()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3513,,"  public void test3513()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3514,,"  public void test3514()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3515,,"  public void test3515()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3516,,"  public void test3516()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3517,,"  public void test3517()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3518,,"  public void test3518()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3519,,"  public void test3519()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3520,,"  public void test3520()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3521,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3521()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3522,,"  public void test3522()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3523,,"  public void test3523()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3524,,"  public void test3524()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3525,,"  public void test3525()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3526,,"  public void test3526()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3527,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3527()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3528,,"  public void test3528()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3529,,"  public void test3529()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3530,,"  public void test3530()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3531,,"  public void test3531()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3532,,"  public void test3532()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3533,,"  public void test3533()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3534,,"  public void test3534()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3535,,"  public void test3535()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3536,,"  public void test3536()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3537,,"  public void test3537()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3538,,"  public void test3538()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3539,,"  public void test3539()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
}"
3540,,"  public void test3540()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3541,,"  public void test3541()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3542,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3542()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3543,,"  public void test3543()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3544,,"  public void test3544()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3545,,"  public void test3545()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3546,,"  public void test3546()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3547,,"  public void test3547()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3548,,"  public void test3548()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3549,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3549()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3550,,"  public void test3550()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3551,,"  public void test3551()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3552,,"  public void test3552()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3553,,"  public void test3553()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3554,,"  public void test3554()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3555,,"  public void test3555()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3556,,"  public void test3556()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3557,,"  public void test3557()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3558,,"  public void test3558()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3559,,"  public void test3559()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3560,,"  public void test3560()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3561,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3561()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3562,,"  public void test3562()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3563,,"  public void test3563()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3564,,"  public void test3564()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3565,,"  public void test3565()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3566,,"  public void test3566()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3567,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3567()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3568,,"  public void test3568()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3569,,"  public void test3569()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3570,,"  public void test3570()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3571,,"  public void test3571()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3572,,"  public void test3572()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3573,,"  public void test3573()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3574,,"  public void test3574()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3575,,"  public void test3575()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3576,,"  public void test3576()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3577,,"  public void test3577()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3578,,"  public void test3578()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3579,,"  public void test3579()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3580,,"  public void test3580()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3581,,"  public void test3581()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3582,,"  public void test3582()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3583,,"  public void test3583()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3584,,"  public void test3584()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3585,,"  public void test3585()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3586,,"  public void test3586()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3587,,"  public void test3587()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3588,,"  public void test3588()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
}"
3589,,"  public void test3589()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3590,,"  public void test3590()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3591,,"  public void test3591()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3592,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3592()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3593,,"  public void test3593()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3594,,"  public void test3594()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3595,,"  public void test3595()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3596,,"  public void test3596()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3597,,"  public void test3597()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3598,,"  public void test3598()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3599,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3599()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3600,,"  public void test3600()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3601,,"  public void test3601()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3602,,"  public void test3602()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3603,,"  public void test3603()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3604,,"  public void test3604()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3605,,"  public void test3605()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3606,,"  public void test3606()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3607,,"  public void test3607()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3608,,"  public void test3608()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3609,,"  public void test3609()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3610,,"  public void test3610()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
}"
3611,,"  public void test3611()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3612,,"  public void test3612()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3613,,"  public void test3613()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3614,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3614()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3615,,"  public void test3615()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3616,,"  public void test3616()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3617,,"  public void test3617()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3618,,"  public void test3618()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3619,,"  public void test3619()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3620,,"  public void test3620()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3621,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3621()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3622,,"  public void test3622()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3623,,"  public void test3623()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3624,,"  public void test3624()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3625,,"  public void test3625()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3626,,"  public void test3626()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3627,,"  public void test3627()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3628,,"  public void test3628()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3629,,"  public void test3629()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3630,,"  public void test3630()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3631,,"  public void test3631()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3632,,"  public void test3632()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3633,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3633()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3634,,"  public void test3634()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3635,,"  public void test3635()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3636,,"  public void test3636()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3637,,"  public void test3637()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3638,,"  public void test3638()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3639,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3639()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3640,,"  public void test3640()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3641,,"  public void test3641()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3642,,"  public void test3642()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3643,,"  public void test3643()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3644,,"  public void test3644()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3645,,"  public void test3645()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3646,,"  public void test3646()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3647,,"  public void test3647()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3648,,"  public void test3648()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3649,,"  public void test3649()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3650,,"  public void test3650()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3651,,"  public void test3651()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3652,,"  public void test3652()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3653,,"  public void test3653()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
}"
3654,,"  public void test3654()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3655,,"  public void test3655()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3656,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3656()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3657,,"  public void test3657()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3658,,"  public void test3658()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3659,,"  public void test3659()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3660,,"  public void test3660()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3661,,"  public void test3661()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3662,,"  public void test3662()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3663,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3663()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3664,,"  public void test3664()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3665,,"  public void test3665()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3666,,"  public void test3666()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3667,,"  public void test3667()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3668,,"  public void test3668()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3669,,"  public void test3669()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3670,,"  public void test3670()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3671,,"  public void test3671()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3672,,"  public void test3672()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3673,,"  public void test3673()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3674,,"  public void test3674()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3675,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3675()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3676,,"  public void test3676()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3677,,"  public void test3677()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3678,,"  public void test3678()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3679,,"  public void test3679()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3680,,"  public void test3680()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3681,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3681()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3682,,"  public void test3682()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3683,,"  public void test3683()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3684,,"  public void test3684()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3685,,"  public void test3685()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3686,,"  public void test3686()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3687,,"  public void test3687()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3688,,"  public void test3688()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3689,,"  public void test3689()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3690,,"  public void test3690()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3691,,"  public void test3691()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3692,,"  public void test3692()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3693,,"  public void test3693()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3694,,"  public void test3694()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3695,,"  public void test3695()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3696,,"  public void test3696()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3697,,"  public void test3697()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3698,,"  public void test3698()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3699,,"  public void test3699()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3700,,"  public void test3700()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3701,,"  public void test3701()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3702,,"  public void test3702()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3703,,"  public void test3703()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3704,,"  public void test3704()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
}"
3705,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3705()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3706,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3706()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3707,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3707()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3708,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3708()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3709,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3709()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3710,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3710()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3711,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3711()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3712,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3712()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3713,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3713()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3714,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3714()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3715,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3715()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3716,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3716()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3717,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3717()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3718,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3718()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3719,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3719()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3720,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3720()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3721,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3721()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3722,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3722()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3723,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3723()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3724,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3724()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3725,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3725()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3726,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3726()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3727,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3727()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3728,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3728()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3729,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3729()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3730,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3730()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3731,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3731()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3732,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3732()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3733,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3733()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3734,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3734()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3735,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3735()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3736,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3736()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3737,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3737()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3738,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3738()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3739,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3739()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3740,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3740()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3741,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3741()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3742,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3742()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3743,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3743()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3744,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3744()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3745,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3745()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3746,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3746()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3747,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3747()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3748,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3748()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3749,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3749()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3750,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3750()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3751,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3751()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3752,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3752()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3753,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3753()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3754,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3754()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3755,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3755()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3756,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3756()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3757,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test3757()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
3758,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3758()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3759,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3759()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3760,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3760()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3761,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3761()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3762,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3762()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3763,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3763()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3764,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3764()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3765,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3765()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3766,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3766()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3767,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3767()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3768,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3768()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3769,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3769()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3770,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3770()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3771,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3771()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3772,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3772()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3773,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3773()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3774,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3774()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3775,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3775()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3776,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3776()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3777,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3777()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3778,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3778()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3779,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3779()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3780,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3780()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3781,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3781()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3782,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3782()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3783,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3783()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3784,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3784()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3785,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3785()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3786,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3786()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3787,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3787()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3788,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3788()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3789,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3789()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3790,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3790()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3791,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3791()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3792,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3792()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3793,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3793()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3794,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3794()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3795,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3795()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3796,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3796()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3797,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3797()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3798,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3798()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3799,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3799()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3800,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3800()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3801,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3801()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3802,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3802()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3803,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3803()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3804,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3804()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3805,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3805()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3806,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3806()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3807,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3807()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3808,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3808()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3809,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3809()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3810,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3810()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3811,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3811()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3812,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3812()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
}"
3813,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3813()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3814,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3814()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3815,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3815()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3816,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3816()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3817,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3817()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3818,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3818()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3819,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3819()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3820,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3820()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3821,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3821()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3822,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3822()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3823,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3823()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3824,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3824()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3825,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3825()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3826,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3826()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3827,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3827()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3828,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3828()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3829,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3829()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3830,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3830()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3831,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3831()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3832,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3832()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3833,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3833()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3834,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3834()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3835,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3835()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3836,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3836()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3837,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3837()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3838,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3838()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3839,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3839()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3840,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3840()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3841,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3841()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3842,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3842()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3843,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3843()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3844,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3844()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3845,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3845()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3846,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3846()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3847,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3847()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3848,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3848()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3849,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3849()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3850,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3850()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3851,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3851()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3852,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3852()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3853,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3853()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3854,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3854()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3855,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3855()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3856,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3856()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3857,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3857()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3858,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3858()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3859,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3859()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3860,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3860()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3861,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3861()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3862,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3862()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3863,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3863()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3864,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3864()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3865,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3865()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3866,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3866()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3867,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3867()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3868,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3868()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3869,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3869()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3870,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3870()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3871,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3871()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3872,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3872()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3873,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3873()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3874,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3874()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3875,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3875()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3876,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3876()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3877,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test3877()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
}"
3878,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3878()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3879,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3879()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3880,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3880()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3881,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3881()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3882,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3882()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3883,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3883()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3884,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3884()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3885,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3885()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3886,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3886()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3887,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3887()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3888,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3888()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3889,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3889()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3890,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3890()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3891,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3891()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3892,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3892()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3893,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3893()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3894,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3894()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3895,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3895()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3896,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3896()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3897,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3897()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3898,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3898()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3899,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3899()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3900,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3900()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3901,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3901()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3902,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3902()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3903,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3903()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3904,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3904()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3905,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test3905()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3906,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3906()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3907,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3907()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3908,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3908()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3909,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3909()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3910,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3910()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3911,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3911()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3912,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3912()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3913,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3913()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3914,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3914()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3915,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3915()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3916,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3916()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3917,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3917()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3918,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3918()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3919,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3919()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3920,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3920()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3921,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3921()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3922,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3922()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3923,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3923()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3924,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3924()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3925,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3925()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3926,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3926()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3927,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3927()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3928,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3928()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3929,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3929()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3930,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3930()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3931,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3931()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3932,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3932()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3933,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3933()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3934,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3934()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""G~k]W+V^gtKAN<nz"");
      MockFile mockFile1 = new MockFile(mockFile0, ""G~k]W+V^gtKAN<nz"");
      File file0 = mockFile1.getAbsoluteFile();
      boolean boolean0 = mockFile1.setReadable(false);
      URL uRL0 = mockFile1.toURL();
      boolean boolean1 = mockFile0.setReadOnly();
      boolean boolean2 = mockFile1.setReadOnly();
      URL uRL1 = mockFile1.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      Map<String, String> map0 = httpRequest0.getParams(""If-None-Match"");
      File file1 = mockFile1.getCanonicalFile();
      String string0 = httpRequest0.getParam(""G~k]W+V^gtKAN<nz"", ""9"");
}"
3935,,"  public void test3935()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
}"
3936,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3936()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
}"
3937,,"  public void test3937()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
}"
3938,"  public static void keepAlive(final boolean keepAlive) {
    setProperty(""http.keepAlive"", Boolean.toString(keepAlive));
  }","  public void test3938()  throws Throwable  {
      HttpRequest.keepAlive(false);
      HttpRequest.keepAlive(false);
      String string0 = ""0C M7"";
      try {
        MockURI.URI(""0C M7"", ""0C M7"", ""0C M7"");
        fail(""Expecting exception: URISyntaxException"");
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 0C M7:0C%20M7#0C%20M7
         //
         verifyException(""java.net.URI$Parser"", e);
      }
  }"
3939,,"  public void test3939()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3940,,"  public void test3940()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3941,,"  public void test3941()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3942,,"  public void test3942()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3943,,"  public void test3943()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3944,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3944()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3945,,"  public void test3945()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3946,,"  public void test3946()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3947,,"  public void test3947()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3948,,"  public void test3948()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3949,,"  public void test3949()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
3950,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3950()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3951,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3951()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3952,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3952()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3953,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3953()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3954,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3954()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3955,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3955()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3956,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3956()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3957,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3957()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3958,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3958()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3959,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3959()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3960,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3960()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3961,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3961()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3962,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test3962()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
3963,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3963()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3964,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3964()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3965,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3965()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3966,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3966()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3967,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3967()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3968,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3968()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3969,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3969()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3970,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3970()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3971,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3971()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3972,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3972()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3973,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3973()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3974,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3974()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3975,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3975()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3976,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3976()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3977,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3977()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3978,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3978()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3979,"  public HttpRequest readTimeout(final int timeout) {
    getConnection().setReadTimeout(timeout);
    return this;
  }","  public void test3979()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
}"
3980,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3980()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3981,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3981()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3982,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3982()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3983,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3983()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3984,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3984()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3985,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test3985()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3986,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3986()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3987,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3987()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3988,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3988()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3989,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3989()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3990,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3990()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3991,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3991()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3992,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test3992()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3993,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test3993()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3994,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3994()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3995,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3995()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3996,"  protected String getParam(final String value, final String paramName) {
    if (value == null || value.length() == 0)
      return null;

    final int length = value.length();
    int start = value.indexOf(';') + 1;
    if (start == 0 || start == length)
      return null;

    int end = value.indexOf(';', start);
    if (end == -1)
      end = length;

    while (start < end) {
      int nameEnd = value.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end
          && paramName.equals(value.substring(start, nameEnd).trim())) {
        String paramValue = value.substring(nameEnd + 1, end).trim();
        int valueLength = paramValue.length();
        if (valueLength != 0)
          if (valueLength > 2 && '""' == paramValue.charAt(0)
              && '""' == paramValue.charAt(valueLength - 1))
            return paramValue.substring(1, valueLength - 1);
          else
            return paramValue;
      }

      start = end + 1;
      end = value.indexOf(';', start);
      if (end == -1)
        end = length;
    }

    return null;
  }","  public void test3996()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
}"
3997,"  public URL url() {
    return getConnection().getURL();
  }","  public void test3997()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
3998,"  public URL url() {
    return getConnection().getURL();
  }","  public void test3998()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
3999,"  public URL url() {
    return getConnection().getURL();
  }","  public void test3999()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4000,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4000()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4001,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4001()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4002,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4002()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4003,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4003()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4004,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4004()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4005,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4005()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4006,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4006()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4007,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4007()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4008,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4008()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4009,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4009()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4010,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4010()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4011,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4011()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4012,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4012()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4013,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4013()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4014,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4014()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4015,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4015()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4016,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4016()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4017,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4017()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4018,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4018()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4019,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4019()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4020,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4020()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4021,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4021()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4022,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4022()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4023,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4023()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4024,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4024()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4025,"  public URL url() {
    return getConnection().getURL();
  }","  public void test4025()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      HttpRequest httpRequest1 = httpRequest0.readTimeout(1);
      String string0 = httpRequest1.getParam(""Accept-Encoding"", """");
      URL uRL1 = httpRequest1.url();
}"
4026,,"  public void test4026()  throws Throwable  {
      boolean boolean0 = false;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
}"
4027,,"  public void test4027()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
}"
4028,,"  public void test4028()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
}"
4029,,"  public void test4029()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
}"
4030,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4030()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
}"
4031,,"  public void test4031()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
}"
4032,,"  public void test4032()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
}"
4033,,"  public void test4033()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
}"
4034,,"  public void test4034()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
}"
4035,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4035()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
}"
4036,,"  public void test4036()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
}"
4037,,"  public void test4037()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
}"
4038,,"  public void test4038()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
}"
4039,,"  public void test4039()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
}"
4040,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4040()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
}"
4041,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4041()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
}"
4042,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4042()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
}"
4043,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4043()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
}"
4044,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4044()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
}"
4045,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4045()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
}"
4046,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4046()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
}"
4047,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4047()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
}"
4048,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4048()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
}"
4049,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4049()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
}"
4050,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4050()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
}"
4051,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4051()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
}"
4052,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4052()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
}"
4053,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4053()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
}"
4054,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4054()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
}"
4055,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4055()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
}"
4056,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4056()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
}"
4057,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4057()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
}"
4058,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4058()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = hashMap0.remove((Object) sQLTimeoutException0, (Object) sQLTimeoutException0);
}"
4059,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4059()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = hashMap0.remove((Object) sQLTimeoutException0, (Object) sQLTimeoutException0);
}"
4060,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4060()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = hashMap0.remove((Object) sQLTimeoutException0, (Object) sQLTimeoutException0);
}"
4061,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4061()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = hashMap0.remove((Object) sQLTimeoutException0, (Object) sQLTimeoutException0);
}"
4062,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4062()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = hashMap0.remove((Object) sQLTimeoutException0, (Object) sQLTimeoutException0);
}"
4063,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4063()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = hashMap0.remove((Object) sQLTimeoutException0, (Object) sQLTimeoutException0);
}"
4064,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4064()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""ETag"", ""ETag"");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientConnectionException sQLTransientConnectionException0 = hashMap0.put(sQLRecoverableException0, (SQLTransientConnectionException) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      String string0 = sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = hashMap0.remove((Object) sQLTimeoutException0, (Object) sQLTimeoutException0);
}"
4065,,"  public void test4065()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_LENGTH;
}"
4066,,"  public void test4066()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_LENGTH;
}"
4067,,"  public void test4067()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_LENGTH;
      HashMap<DataTruncation, Integer> hashMap0 = new HashMap<DataTruncation, Integer>();
}"
4068,,"  public void test4068()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_LENGTH;
      HashMap<DataTruncation, Integer> hashMap0 = new HashMap<DataTruncation, Integer>();
}"
4069,,"  public void test4069()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_LENGTH;
      HashMap<DataTruncation, Integer> hashMap0 = new HashMap<DataTruncation, Integer>();
}"
4070,,"  public void test4070()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4071,,"  public void test4071()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4072,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4072()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4073,,"  public void test4073()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4074,,"  public void test4074()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4075,,"  public void test4075()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4076,,"  public void test4076()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4077,,"  public void test4077()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4078,,"  public void test4078()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4079,,"  public void test4079()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4080,,"  public void test4080()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4081,,"  public void test4081()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4082,,"  public void test4082()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
}"
4083,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4083()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4084,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4084()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4085,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4085()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4086,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4086()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4087,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4087()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4088,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4088()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4089,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4089()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4090,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4090()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4091,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4091()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4092,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4092()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4093,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4093()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4094,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4094()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4095,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4095()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4096,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4096()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4097,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4097()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4098,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4098()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
}"
4099,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4099()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4100,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4100()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4101,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4101()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4102,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4102()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4103,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4103()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4104,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4104()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4105,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4105()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4106,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4106()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4107,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4107()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4108,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4108()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4109,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4109()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4110,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4110()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4111,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4111()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4112,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4112()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4113,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4113()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4114,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4114()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4115,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4115()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4116,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4116()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4117,"  public HttpRequest progress(final UploadProgress callback) {
    if (callback == null)
      progress = UploadProgress.DEFAULT;
    else
      progress = callback;
    return this;
  }","  public void test4117()  throws Throwable  {
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("""", """", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      HttpRequest httpRequest1 = httpRequest0.progress(httpRequest_UploadProgress0);
}"
4118,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4118()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
}"
4119,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4119()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
}"
4120,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4120()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
}"
4121,,"  public void test4121()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4122,,"  public void test4122()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4123,,"  public void test4123()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4124,,"  public void test4124()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4125,,"  public void test4125()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4126,,"  public void test4126()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4127,,"  public void test4127()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4128,,"  public void test4128()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4129,,"  public void test4129()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4130,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4130()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4131,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4131()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4132,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4132()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4133,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4133()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4134,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4134()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4135,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4135()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4136,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4136()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4137,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4137()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4138,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4138()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4139,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4139()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4140,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4140()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4141,,"  public void test4141()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
}"
4142,,"  public void test4142()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4143,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4143()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4144,,"  public void test4144()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4145,,"  public void test4145()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4146,,"  public void test4146()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4147,,"  public void test4147()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4148,,"  public void test4148()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4149,,"  public void test4149()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4150,,"  public void test4150()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4151,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4151()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4152,,"  public void test4152()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4153,,"  public void test4153()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4154,,"  public void test4154()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4155,,"  public void test4155()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4156,,"  public void test4156()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4157,,"  public void test4157()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4158,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4158()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4159,,"  public void test4159()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4160,,"  public void test4160()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4161,,"  public void test4161()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4162,,"  public void test4162()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4163,,"  public void test4163()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4164,,"  public void test4164()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4165,,"  public void test4165()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4166,,"  public void test4166()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4167,,"  public void test4167()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4168,,"  public void test4168()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4169,,"  public void test4169()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
}"
4170,,"  public void test4170()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4171,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4171()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4172,,"  public void test4172()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4173,,"  public void test4173()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4174,,"  public void test4174()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4175,,"  public void test4175()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4176,,"  public void test4176()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4177,,"  public void test4177()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4178,,"  public void test4178()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4179,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4179()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4180,,"  public void test4180()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4181,,"  public void test4181()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4182,,"  public void test4182()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4183,,"  public void test4183()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4184,,"  public void test4184()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4185,,"  public void test4185()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4186,,"  public void test4186()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4187,,"  public void test4187()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4188,,"  public void test4188()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4189,,"  public void test4189()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4190,,"  public void test4190()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4191,,"  public void test4191()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4192,,"  public void test4192()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4193,,"  public void test4193()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4194,,"  public void test4194()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
}"
4195,,"  public void test4195()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4196,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4196()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4197,,"  public void test4197()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4198,,"  public void test4198()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4199,,"  public void test4199()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4200,,"  public void test4200()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4201,,"  public void test4201()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4202,,"  public void test4202()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4203,,"  public void test4203()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4204,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4204()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4205,,"  public void test4205()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4206,,"  public void test4206()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4207,,"  public void test4207()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4208,,"  public void test4208()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4209,,"  public void test4209()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4210,,"  public void test4210()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4211,,"  public void test4211()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4212,,"  public void test4212()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4213,,"  public void test4213()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4214,,"  public void test4214()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4215,,"  public void test4215()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4216,,"  public void test4216()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4217,,"  public void test4217()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4218,,"  public void test4218()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4219,,"  public void test4219()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4220,,"  public void test4220()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4221,,"  public void test4221()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4222,,"  public void test4222()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4223,,"  public void test4223()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4224,,"  public void test4224()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4225,,"  public void test4225()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4226,,"  public void test4226()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4227,,"  public void test4227()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4228,,"  public void test4228()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4229,,"  public void test4229()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4230,,"  public void test4230()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
}"
4231,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4231()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4232,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4232()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4233,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4233()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4234,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4234()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4235,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4235()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4236,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4236()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4237,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4237()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4238,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4238()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4239,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4239()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4240,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4240()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4241,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4241()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4242,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4242()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4243,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4243()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4244,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4244()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4245,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4245()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4246,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4246()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4247,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4247()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4248,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4248()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4249,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4249()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4250,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4250()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4251,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4251()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4252,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4252()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4253,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4253()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4254,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4254()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4255,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4255()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4256,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4256()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4257,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4257()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4258,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4258()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4259,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4259()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4260,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4260()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4261,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4261()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4262,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4262()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4263,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4263()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4264,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4264()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4265,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4265()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4266,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4266()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4267,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4267()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4268,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4268()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4269,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4269()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
}"
4270,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4270()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
}"
4271,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4271()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
}"
4272,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4272()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
}"
4273,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4273()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4274,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4274()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4275,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4275()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4276,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4276()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4277,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4277()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4278,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4278()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4279,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4279()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4280,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4280()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4281,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4281()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4282,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4282()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4283,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4283()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4284,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4284()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4285,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4285()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4286,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4286()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4287,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4287()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4288,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4288()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4289,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4289()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4290,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4290()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4291,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4291()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4292,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4292()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4293,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4293()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4294,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4294()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4295,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4295()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4296,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4296()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4297,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4297()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4298,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4298()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4299,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4299()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4300,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4300()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4301,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4301()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4302,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4302()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4303,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4303()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4304,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4304()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4305,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4305()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4306,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4306()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4307,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4307()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4308,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4308()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4309,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4309()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4310,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4310()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4311,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4311()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4312,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4312()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4313,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4313()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4314,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4314()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4315,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4315()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4316,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4316()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4317,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test4317()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5<\""%hBTmI)"", ""charset"");
      URI uRI0 = mockFile0.toURI();
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, ""5<\""%hBTmI)"");
      HttpRequest httpRequest0 = HttpRequest.put(uRL1);
      HashMap<BatchUpdateException, SQLRecoverableException> hashMap0 = new HashMap<BatchUpdateException, SQLRecoverableException>();
      HttpRequest httpRequest1 = httpRequest0.form((Map<?, ?>) hashMap0);
}"
4318,,"  public void test4318()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
}"
4319,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4319()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
}"
4320,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4320()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getMessage();
}"
4321,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4321()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getMessage();
}"
4322,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4322()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getMessage();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ""org.evosuite.runtime.mock.java.lang.MockThrowable"";
      objectArray0[1] = (Object) ""org.evosuite.runtime.mock.java.lang.MockThrowable"";
      Object object0 = new Object();
}"
4323,,"  public void test4323()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
}"
4324,,"  public void test4324()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
}"
4325,,"  public void test4325()  throws Throwable  {
      String string0 = HttpRequest.HEADER_EXPIRES;
}"
4326,,"  public void test4326()  throws Throwable  {
      String string0 = HttpRequest.HEADER_EXPIRES;
}"
4327,,"  public void test4327()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
4328,,"  public void test4328()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
4329,,"  public void test4329()  throws Throwable  {
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
}"
4330,,"  public void test4330()  throws Throwable  {
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
}"
4331,,"  public void test4331()  throws Throwable  {
      HashMap<BatchUpdateException, String> hashMap0 = new HashMap<BatchUpdateException, String>();
}"
4332,,"  public void test4332()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
}"
4333,,"  public void test4333()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
}"
4334,,"  public void test4334()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4335,,"  public void test4335()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4336,,"  public void test4336()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4337,,"  public void test4337()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4338,,"  public void test4338()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4339,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4339()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4340,,"  public void test4340()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4341,,"  public void test4341()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4342,,"  public void test4342()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4343,,"  public void test4343()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4344,,"  public void test4344()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
}"
4345,,"  public void test4345()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Accept"");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charBuffer0;
      Object object0 = new Object();
}"
4346,,"  public void test4346()  throws Throwable  {
      String string0 = HttpRequest.HEADER_DATE;
}"
4347,,"  public void test4347()  throws Throwable  {
      String string0 = HttpRequest.HEADER_DATE;
}"
4348,,"  public void test4348()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4349,,"  public void test4349()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4350,,"  public void test4350()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4351,,"  public void test4351()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4352,,"  public void test4352()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4353,,"  public void test4353()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4354,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4354()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4355,,"  public void test4355()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4356,,"  public void test4356()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4357,,"  public void test4357()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4358,,"  public void test4358()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4359,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4359()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4360,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4360()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4361,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4361()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4362,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4362()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4363,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4363()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4364,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4364()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4365,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4365()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4366,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4366()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4367,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4367()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4368,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4368()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4369,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4369()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4370,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4370()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4371,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4371()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4372,,"  public void test4372()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4373,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4373()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4374,,"  public void test4374()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4375,,"  public void test4375()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4376,,"  public void test4376()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4377,,"  public void test4377()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4378,,"  public void test4378()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4379,,"  public void test4379()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4380,,"  public void test4380()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4381,,"  public void test4381()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4382,,"  public void test4382()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4383,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4383()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4384,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4384()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4385,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4385()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4386,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4386()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4387,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4387()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4388,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4388()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4389,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4389()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4390,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4390()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4391,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4391()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4392,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4392()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4393,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4393()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4394,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4394()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4395,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4395()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4396,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4396()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
}"
4397,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4397()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
}"
4398,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test4398()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
}"
4399,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4399()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
}"
4400,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4400()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
}"
4401,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4401()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
}"
4402,,"  public void test4402()  throws Throwable  {
      String string0 = HttpRequest.METHOD_OPTIONS;
}"
4403,,"  public void test4403()  throws Throwable  {
      String string0 = HttpRequest.METHOD_OPTIONS;
}"
4404,,"  public void test4404()  throws Throwable  {
      String string0 = HttpRequest.METHOD_OPTIONS;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ""OPTIONS"";
      objectArray0[1] = (Object) ""OPTIONS"";
      objectArray0[2] = (Object) ""OPTIONS"";
      objectArray0[3] = (Object) ""OPTIONS"";
      objectArray0[4] = (Object) ""OPTIONS"";
      objectArray0[5] = (Object) ""OPTIONS"";
      objectArray0[6] = (Object) ""OPTIONS"";
      Object object0 = new Object();
}"
4405,,"  public void test4405()  throws Throwable  {
      String string0 = HttpRequest.PARAM_CHARSET;
}"
4406,,"  public void test4406()  throws Throwable  {
      String string0 = HttpRequest.PARAM_CHARSET;
}"
4407,,"  public void test4407()  throws Throwable  {
      String string0 = HttpRequest.PARAM_CHARSET;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ""charset"";
      objectArray0[1] = (Object) ""charset"";
      objectArray0[2] = (Object) ""charset"";
      objectArray0[3] = (Object) ""charset"";
      objectArray0[4] = (Object) ""charset"";
      objectArray0[5] = (Object) ""charset"";
      Object object0 = new Object();
}"
4408,,"  public void test4408()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
}"
4409,,"  public void test4409()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4410,,"  public void test4410()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4411,,"  public void test4411()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4412,,"  public void test4412()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4413,,"  public void test4413()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4414,,"  public void test4414()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4415,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4415()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4416,,"  public void test4416()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4417,,"  public void test4417()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4418,,"  public void test4418()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4419,,"  public void test4419()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4420,,"  public void test4420()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4421,,"  public void test4421()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4422,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4422()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4423,,"  public void test4423()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4424,,"  public void test4424()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4425,,"  public void test4425()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4426,,"  public void test4426()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4427,,"  public void test4427()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4428,,"  public void test4428()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4429,,"  public void test4429()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4430,,"  public void test4430()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4431,,"  public void test4431()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4432,,"  public void test4432()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4433,,"  public void test4433()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
}"
4434,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4434()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4435,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4435()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4436,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4436()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4437,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4437()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4438,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4438()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4439,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4439()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4440,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4440()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4441,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4441()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4442,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4442()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4443,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4443()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4444,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4444()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4445,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4445()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4446,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4446()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4447,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4447()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4448,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4448()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4449,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4449()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4450,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4450()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4451,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4451()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4452,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4452()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4453,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4453()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4454,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4454()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4455,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4455()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4456,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4456()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4457,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4457()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4458,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4458()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4459,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4459()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4460,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4460()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""5=C$xp{NM6TPRX1OUo"", """");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
4461,,"  public void test4461()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
}"
4462,,"  public void test4462()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4463,,"  public void test4463()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4464,,"  public void test4464()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4465,,"  public void test4465()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4466,,"  public void test4466()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4467,,"  public void test4467()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4468,,"  public void test4468()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4469,,"  public void test4469()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4470,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4470()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4471,,"  public void test4471()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4472,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4472()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4473,,"  public void test4473()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4474,,"  public void test4474()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4475,,"  public void test4475()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4476,,"  public void test4476()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4477,,"  public void test4477()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4478,,"  public void test4478()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4479,,"  public void test4479()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4480,,"  public void test4480()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4481,,"  public void test4481()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4482,,"  public void test4482()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4483,,"  public void test4483()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4484,,"  public void test4484()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4485,,"  public void test4485()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4486,,"  public void test4486()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
}"
4487,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4487()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4488,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4488()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4489,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4489()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4490,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4490()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4491,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4491()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4492,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4492()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4493,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4493()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4494,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4494()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4495,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4495()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4496,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4496()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4497,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4497()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4498,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4498()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4499,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4499()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4500,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4500()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4501,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4501()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4502,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4502()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4503,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4503()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4504,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4504()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4505,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4505()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4506,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4506()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4507,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4507()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4508,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4508()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4509,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4509()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4510,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4510()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4511,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4511()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4512,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4512()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4513,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4513()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4514,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4514()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
}"
4515,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4515()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""00content0boundary00"");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
}"
4516,,"  public void test4516()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4517,,"  public void test4517()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4518,,"  public void test4518()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4519,,"  public void test4519()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4520,,"  public void test4520()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4521,,"  public void test4521()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4522,,"  public void test4522()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4523,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4523()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4524,,"  public void test4524()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4525,,"  public void test4525()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4526,,"  public void test4526()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4527,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4527()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4528,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4528()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4529,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4529()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4530,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4530()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4531,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4531()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4532,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4532()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4533,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4533()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4534,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4534()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4535,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4535()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4536,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4536()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4537,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4537()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4538,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4538()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4539,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4539()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4540,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4540()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
}"
4541,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4541()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
}"
4542,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4542()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
}"
4543,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4543()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4544,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4544()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4545,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4545()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4546,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4546()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4547,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4547()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4548,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4548()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4549,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4549()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4550,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4550()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4551,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4551()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4552,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4552()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4553,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4553()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4554,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4554()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4555,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4555()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4556,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4556()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4557,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4557()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4558,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4558()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4559,"  public HttpRequest header(final String name, final String value) {
    getConnection().setRequestProperty(name, value);
    return this;
  }","  public void test4559()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""xq>)zzR|T)}"", ""Referer"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      HttpRequest httpRequest1 = httpRequest0.header((Map.Entry<String, String>) abstractMap_SimpleImmutableEntry1);
}"
4560,,"  public void test4560()  throws Throwable  {
      String string0 = HttpRequest.HEADER_DATE;
}"
4561,,"  public void test4561()  throws Throwable  {
      String string0 = HttpRequest.HEADER_DATE;
}"
4562,,"  public void test4562()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4563,,"  public void test4563()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4564,,"  public void test4564()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4565,,"  public void test4565()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4566,,"  public void test4566()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4567,,"  public void test4567()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4568,,"  public void test4568()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4569,,"  public void test4569()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4570,,"  public void test4570()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4571,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4571()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4572,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4572()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4573,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4573()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4574,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4574()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4575,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4575()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4576,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4576()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4577,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4577()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4578,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4578()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4579,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4579()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4580,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4580()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4581,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4581()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4582,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4582()  throws Throwable  {
      // Undeclared exception!
      try {
        HttpRequest.trace((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
4583,,"  public void test4583()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4584,,"  public void test4584()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4585,,"  public void test4585()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4586,,"  public void test4586()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4587,,"  public void test4587()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4588,,"  public void test4588()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4589,,"  public void test4589()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4590,,"  public void test4590()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4591,,"  public void test4591()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
4592,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4592()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4593,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4593()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4594,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4594()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4595,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4595()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4596,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4596()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4597,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4597()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4598,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4598()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4599,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4599()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4600,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4600()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4601,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4601()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4602,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4602()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
4603,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test4603()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      MockFile mockFile0 = new MockFile(""Content-Encoding"", ""application/json"");
}"
4604,,"  public void test4604()  throws Throwable  {
      String string0 = HttpRequest.METHOD_PUT;
}"
4605,,"  public void test4605()  throws Throwable  {
      String string0 = HttpRequest.METHOD_PUT;
}"
4606,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4606()  throws Throwable  {
      IOException iOException0 = null;
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException((IOException) null);
}"
4607,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4607()  throws Throwable  {
      IOException iOException0 = null;
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException((IOException) null);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
}"
4608,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4608()  throws Throwable  {
      IOException iOException0 = null;
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException((IOException) null);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
}"
4609,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4609()  throws Throwable  {
      IOException iOException0 = null;
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException((IOException) null);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) httpRequest_HttpRequestException0;
      objectArray0[4] = (Object) null;
      String string1 = httpRequest_HttpRequestException0.getMessage();
}"
4610,,"  public void test4610()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4611,,"  public void test4611()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4612,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4612()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4613,,"  public void test4613()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4614,,"  public void test4614()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4615,,"  public void test4615()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4616,,"  public void test4616()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4617,,"  public void test4617()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4618,,"  public void test4618()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4619,,"  public void test4619()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4620,,"  public void test4620()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4621,,"  public void test4621()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4622,,"  public void test4622()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
}"
4623,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4623()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4624,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4624()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4625,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4625()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4626,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4626()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4627,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4627()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4628,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4628()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4629,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4629()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4630,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4630()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4631,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4631()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4632,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4632()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4633,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4633()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4634,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4634()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4635,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4635()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4636,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4636()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4637,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4637()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
4638,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test4638()  throws Throwable  {
      String string0 = ""Last-Modified"";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Last-Modified"", ""Last-Modified"", 0, """", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      PipedWriter pipedWriter0 = new PipedWriter();
}"
4639,,"  public void test4639()  throws Throwable  {
      String string0 = HttpRequest.HEADER_EXPIRES;
}"
4640,,"  public void test4640()  throws Throwable  {
      String string0 = HttpRequest.HEADER_EXPIRES;
}"
4641,,"  public void test4641()  throws Throwable  {
      String string0 = HttpRequest.HEADER_EXPIRES;
      HashMap<InputStream, SQLNonTransientException> hashMap0 = new HashMap<InputStream, SQLNonTransientException>();
}"
4642,,"  public void test4642()  throws Throwable  {
      String string0 = HttpRequest.HEADER_EXPIRES;
      HashMap<InputStream, SQLNonTransientException> hashMap0 = new HashMap<InputStream, SQLNonTransientException>();
}"
4643,,"  public void test4643()  throws Throwable  {
      String string0 = HttpRequest.HEADER_EXPIRES;
      HashMap<InputStream, SQLNonTransientException> hashMap0 = new HashMap<InputStream, SQLNonTransientException>();
}"
4644,,"  public void test4644()  throws Throwable  {
      String string0 = HttpRequest.HEADER_IF_NONE_MATCH;
}"
4645,,"  public void test4645()  throws Throwable  {
      String string0 = HttpRequest.HEADER_IF_NONE_MATCH;
}"
4646,,"  public void test4646()  throws Throwable  {
      String string0 = HttpRequest.HEADER_IF_NONE_MATCH;
      HashMap<SQLInvalidAuthorizationSpecException, String> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, String>();
}"
4647,,"  public void test4647()  throws Throwable  {
      String string0 = HttpRequest.HEADER_IF_NONE_MATCH;
      HashMap<SQLInvalidAuthorizationSpecException, String> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, String>();
}"
4648,,"  public void test4648()  throws Throwable  {
      String string0 = HttpRequest.HEADER_IF_NONE_MATCH;
      HashMap<SQLInvalidAuthorizationSpecException, String> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, String>();
}"
4649,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4649()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4650,,"  public void test4650()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4651,,"  public void test4651()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4652,,"  public void test4652()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4653,,"  public void test4653()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4654,,"  public void test4654()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4655,,"  public void test4655()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4656,,"  public void test4656()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4657,,"  public void test4657()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4658,,"  public void test4658()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4659,,"  public void test4659()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4660,,"  public void test4660()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
4661,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4661()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4662,,"  public void test4662()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4663,,"  public void test4663()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4664,,"  public void test4664()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4665,,"  public void test4665()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4666,,"  public void test4666()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4667,,"  public void test4667()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4668,,"  public void test4668()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4669,,"  public void test4669()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4670,,"  public void test4670()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4671,,"  public void test4671()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4672,,"  public void test4672()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4673,,"  public void test4673()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4674,,"  public void test4674()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4675,,"  public void test4675()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4676,,"  public void test4676()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4677,,"  public void test4677()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4678,,"  public void test4678()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4679,,"  public void test4679()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4680,,"  public void test4680()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4681,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4681()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4682,,"  public void test4682()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4683,,"  public void test4683()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4684,,"  public void test4684()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
4685,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4685()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4686,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4686()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4687,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4687()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4688,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4688()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4689,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4689()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4690,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4690()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4691,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4691()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4692,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4692()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4693,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4693()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4694,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4694()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4695,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4695()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4696,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4696()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4697,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4697()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4698,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4698()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4699,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4699()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4700,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4700()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4701,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4701()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4702,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4702()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4703,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4703()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4704,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4704()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4705,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4705()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4706,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4706()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4707,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4707()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4708,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4708()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4709,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4709()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4710,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test4710()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
4711,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4711()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = new HttpRequest((URL) null, ""E8)3."");
}"
4712,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4712()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = new HttpRequest((URL) null, ""E8)3."");
}"
4713,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4713()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = new HttpRequest((URL) null, ""E8)3."");
}"
4714,,"  public void test4714()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4715,,"  public void test4715()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4716,,"  public void test4716()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4717,,"  public void test4717()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4718,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4718()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4719,,"  public void test4719()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4720,,"  public void test4720()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4721,,"  public void test4721()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4722,,"  public void test4722()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4723,,"  public void test4723()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4724,,"  public void test4724()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
4725,,"  public void test4725()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4726,,"  public void test4726()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4727,,"  public void test4727()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4728,,"  public void test4728()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4729,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4729()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4730,,"  public void test4730()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4731,,"  public void test4731()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4732,,"  public void test4732()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4733,,"  public void test4733()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4734,,"  public void test4734()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4735,,"  public void test4735()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4736,,"  public void test4736()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4737,,"  public void test4737()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4738,,"  public void test4738()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4739,,"  public void test4739()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4740,,"  public void test4740()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4741,,"  public void test4741()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4742,,"  public void test4742()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4743,,"  public void test4743()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4744,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4744()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4745,,"  public void test4745()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4746,,"  public void test4746()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4747,,"  public void test4747()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4748,,"  public void test4748()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
}"
4749,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4749()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4750,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4750()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4751,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4751()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4752,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4752()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4753,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4753()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4754,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4754()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4755,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4755()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4756,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4756()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4757,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4757()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4758,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4758()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4759,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4759()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4760,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4760()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4761,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4761()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4762,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4762()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4763,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4763()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4764,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4764()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4765,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4765()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4766,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4766()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4767,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4767()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4768,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4768()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4769,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4769()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4770,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4770()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4771,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4771()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4772,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4772()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4773,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4773()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4774,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4774()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4775,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test4775()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""2]Q0OXd[m8|7!o"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL1);
}"
4776,,"  public void test4776()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
}"
4777,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4777()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4778,,"  public void test4778()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4779,,"  public void test4779()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4780,,"  public void test4780()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4781,,"  public void test4781()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4782,,"  public void test4782()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4783,,"  public void test4783()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4784,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4784()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4785,,"  public void test4785()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4786,,"  public void test4786()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4787,,"  public void test4787()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4788,,"  public void test4788()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4789,,"  public void test4789()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4790,,"  public void test4790()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4791,,"  public void test4791()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4792,,"  public void test4792()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4793,,"  public void test4793()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4794,,"  public void test4794()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4795,,"  public void test4795()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4796,,"  public void test4796()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4797,,"  public void test4797()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4798,,"  public void test4798()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4799,,"  public void test4799()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4800,,"  public void test4800()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4801,,"  public void test4801()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
4802,,"  public void test4802()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4803,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4803()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4804,,"  public void test4804()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4805,,"  public void test4805()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4806,,"  public void test4806()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4807,,"  public void test4807()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4808,,"  public void test4808()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4809,,"  public void test4809()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4810,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4810()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4811,,"  public void test4811()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4812,,"  public void test4812()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4813,,"  public void test4813()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4814,,"  public void test4814()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4815,,"  public void test4815()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4816,,"  public void test4816()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4817,,"  public void test4817()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4818,,"  public void test4818()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
}"
4819,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4819()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4820,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4820()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4821,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4821()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4822,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4822()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4823,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4823()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4824,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4824()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4825,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4825()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4826,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4826()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4827,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4827()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4828,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4828()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4829,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4829()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4830,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4830()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4831,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4831()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4832,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4832()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4833,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4833()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4834,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4834()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4835,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4835()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4836,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4836()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4837,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4837()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4838,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4838()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4839,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4839()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4840,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4840()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4841,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4841()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4842,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4842()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4843,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4843()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4844,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4844()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4845,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test4845()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
4846,"  public static void nonProxyHosts(final String... hosts) {
    if (hosts != null && hosts.length > 0) {
      StringBuilder separated = new StringBuilder();
      int last = hosts.length - 1;
      for (int i = 0; i < last; i++)
        separated.append(hosts[i]).append('|');
      separated.append(hosts[last]);
      setProperty(""http.nonProxyHosts"", separated.toString());
    } else
      setProperty(""http.nonProxyHosts"", null);
  }","  public void test4846()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
}"
4847,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4847()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4848,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4848()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4849,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4849()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4850,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4850()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4851,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4851()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4852,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4852()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4853,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4853()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4854,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test4854()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4855,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4855()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4856,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4856()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4857,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4857()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4858,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4858()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4859,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4859()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4860,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4860()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4861,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4861()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4862,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4862()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4863,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4863()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4864,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4864()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4865,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4865()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4866,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4866()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4867,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4867()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4868,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4868()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4869,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4869()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4870,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4870()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4871,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4871()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4872,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4872()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4873,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4873()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4874,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4874()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4875,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4875()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4876,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4876()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4877,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test4877()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = mockFile0.createNewFile();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""application/json"";
      stringArray0[1] = ""application/x-www-form-urlencoded"";
      stringArray0[2] = ""Referer"";
      stringArray0[3] = ""PUT"";
      stringArray0[4] = """";
      stringArray0[5] = ""Accept-Encoding"";
      stringArray0[6] = ""charset"";
      stringArray0[7] = ""Date"";
      HttpRequest.nonProxyHosts(stringArray0);
      int int0 = (-841);
      HttpRequest httpRequest1 = httpRequest0.useProxy(""5.`CVjVH^*C"", (-841));
}"
4878,,"  public void test4878()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4879,,"  public void test4879()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4880,,"  public void test4880()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4881,,"  public void test4881()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4882,,"  public void test4882()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4883,,"  public void test4883()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4884,,"  public void test4884()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4885,,"  public void test4885()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4886,,"  public void test4886()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4887,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4887()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4888,,"  public void test4888()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
4889,,"  public void test4889()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4890,,"  public void test4890()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4891,,"  public void test4891()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4892,,"  public void test4892()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4893,,"  public void test4893()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4894,,"  public void test4894()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4895,,"  public void test4895()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4896,,"  public void test4896()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4897,,"  public void test4897()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4898,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4898()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4899,,"  public void test4899()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4900,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4900()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4901,,"  public void test4901()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4902,,"  public void test4902()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4903,,"  public void test4903()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4904,,"  public void test4904()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4905,,"  public void test4905()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4906,,"  public void test4906()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4907,,"  public void test4907()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4908,,"  public void test4908()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4909,,"  public void test4909()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4910,,"  public void test4910()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4911,,"  public void test4911()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4912,,"  public void test4912()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
}"
4913,,"  public void test4913()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4914,,"  public void test4914()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4915,,"  public void test4915()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4916,,"  public void test4916()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4917,,"  public void test4917()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4918,,"  public void test4918()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4919,,"  public void test4919()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4920,,"  public void test4920()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4921,,"  public void test4921()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4922,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4922()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4923,,"  public void test4923()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4924,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4924()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4925,,"  public void test4925()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4926,,"  public void test4926()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4927,,"  public void test4927()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4928,,"  public void test4928()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4929,,"  public void test4929()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4930,,"  public void test4930()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4931,,"  public void test4931()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4932,,"  public void test4932()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4933,,"  public void test4933()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4934,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4934()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4935,,"  public void test4935()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4936,,"  public void test4936()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4937,,"  public void test4937()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4938,,"  public void test4938()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4939,,"  public void test4939()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4940,,"  public void test4940()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4941,,"  public void test4941()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4942,,"  public void test4942()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4943,,"  public void test4943()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4944,,"  public void test4944()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4945,,"  public void test4945()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4946,,"  public void test4946()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4947,,"  public void test4947()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4948,,"  public void test4948()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4949,,"  public void test4949()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4950,,"  public void test4950()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4951,,"  public void test4951()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4952,,"  public void test4952()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4953,,"  public void test4953()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
}"
4954,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4954()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4955,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4955()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4956,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4956()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4957,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4957()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4958,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4958()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4959,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4959()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4960,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4960()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4961,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4961()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4962,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4962()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4963,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4963()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4964,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4964()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4965,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4965()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4966,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4966()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4967,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4967()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4968,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4968()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4969,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4969()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4970,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4970()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4971,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4971()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4972,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4972()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4973,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4973()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4974,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4974()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4975,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4975()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4976,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4976()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4977,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4977()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4978,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4978()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4979,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4979()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4980,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4980()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4981,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4981()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4982,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4982()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4983,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4983()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4984,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test4984()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4985,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test4985()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4986,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4986()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4987,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4987()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4988,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4988()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4989,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4989()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4990,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4990()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4991,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4991()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4992,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4992()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, ""MW]%?#"");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, ""MW]%?#"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL2, """");
}"
4993,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test4993()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
}"
4994,,"  public void test4994()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
}"
4995,,"  public void test4995()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
}"
4996,,"  public void test4996()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
}"
4997,,"  public void test4997()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
}"
4998,,"  public void test4998()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("""", batchUpdateException0);
}"
4999,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test4999()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("""", batchUpdateException0);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
}"
5000,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5000()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("""", batchUpdateException0);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      IOException iOException0 = httpRequest_HttpRequestException0.getCause();
}"
5001,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5001()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("""", batchUpdateException0);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      IOException iOException0 = httpRequest_HttpRequestException0.getCause();
}"
5002,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5002()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("""", batchUpdateException0);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      IOException iOException0 = httpRequest_HttpRequestException0.getCause();
}"
5003,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5003()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("""", batchUpdateException0);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      IOException iOException0 = httpRequest_HttpRequestException0.getCause();
}"
5004,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5004()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("""", batchUpdateException0);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      IOException iOException0 = httpRequest_HttpRequestException0.getCause();
}"
5005,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5005()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("""", batchUpdateException0);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      IOException iOException0 = httpRequest_HttpRequestException0.getCause();
}"
5006,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5006()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("""", batchUpdateException0);
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      IOException iOException0 = httpRequest_HttpRequestException0.getCause();
}"
5007,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5007()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
}"
5008,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5008()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
}"
5009,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5009()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.options((URL) null);
}"
5010,,"  public void test5010()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5011,,"  public void test5011()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5012,,"  public void test5012()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5013,,"  public void test5013()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5014,,"  public void test5014()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5015,,"  public void test5015()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5016,,"  public void test5016()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5017,,"  public void test5017()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5018,,"  public void test5018()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5019,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5019()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5020,,"  public void test5020()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5021,,"  public void test5021()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5022,,"  public void test5022()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5023,,"  public void test5023()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5024,,"  public void test5024()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5025,,"  public void test5025()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5026,,"  public void test5026()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5027,,"  public void test5027()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5028,,"  public void test5028()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5029,,"  public void test5029()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5030,,"  public void test5030()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5031,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5031()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5032,,"  public void test5032()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5033,,"  public void test5033()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5034,,"  public void test5034()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5035,,"  public void test5035()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5036,,"  public void test5036()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5037,,"  public void test5037()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5038,,"  public void test5038()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5039,,"  public void test5039()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5040,,"  public void test5040()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5041,,"  public void test5041()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5042,,"  public void test5042()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5043,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5043()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5044,,"  public void test5044()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5045,,"  public void test5045()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5046,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5046()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5047,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5047()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5048,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5048()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5049,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5049()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5050,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5050()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5051,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5051()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5052,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5052()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5053,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5053()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5054,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5054()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5055,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5055()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5056,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5056()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5057,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5057()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5058,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5058()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5059,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5059()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5060,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5060()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5061,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5061()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5062,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5062()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5063,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5063()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5064,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5064()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5065,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5065()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5066,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5066()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5067,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5067()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5068,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5068()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5069,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5069()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5070,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5070()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5071,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5071()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5072,,"  public void test5072()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
5073,,"  public void test5073()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
5074,,"  public void test5074()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
}"
5075,,"  public void test5075()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
}"
5076,,"  public void test5076()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
}"
5077,,"  public void test5077()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5078,,"  public void test5078()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5079,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5079()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5080,,"  public void test5080()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5081,,"  public void test5081()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5082,,"  public void test5082()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5083,,"  public void test5083()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5084,,"  public void test5084()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5085,,"  public void test5085()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5086,,"  public void test5086()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5087,,"  public void test5087()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5088,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5088()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5089,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5089()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5090,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5090()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5091,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5091()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5092,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5092()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5093,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5093()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5094,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5094()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5095,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5095()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5096,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5096()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5097,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5097()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5098,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5098()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5099,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5099()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5100,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5100()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5101,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5101()  throws Throwable  {
      // Undeclared exception!
      try {
        HttpRequest.encode((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
5102,"  public static void proxyPort(final int port) {
    final String portValue = Integer.toString(port);
    setProperty(""http.proxyPort"", portValue);
    setProperty(""https.proxyPort"", portValue);
  }","  public void test5102()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HashMap<Object, SQLNonTransientConnectionException> hashMap0 = new HashMap<Object, SQLNonTransientConnectionException>();
}"
5103,"  public static void proxyPort(final int port) {
    final String portValue = Integer.toString(port);
    setProperty(""http.proxyPort"", portValue);
    setProperty(""https.proxyPort"", portValue);
  }","  public void test5103()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HashMap<Object, SQLNonTransientConnectionException> hashMap0 = new HashMap<Object, SQLNonTransientConnectionException>();
}"
5104,"  public static void proxyPort(final int port) {
    final String portValue = Integer.toString(port);
    setProperty(""http.proxyPort"", portValue);
    setProperty(""https.proxyPort"", portValue);
  }","  public void test5104()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HashMap<Object, SQLNonTransientConnectionException> hashMap0 = new HashMap<Object, SQLNonTransientConnectionException>();
}"
5105,,"  public void test5105()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5106,,"  public void test5106()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5107,,"  public void test5107()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5108,,"  public void test5108()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5109,,"  public void test5109()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5110,,"  public void test5110()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5111,,"  public void test5111()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5112,,"  public void test5112()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5113,,"  public void test5113()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5114,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5114()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5115,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5115()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5116,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5116()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5117,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5117()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5118,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5118()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5119,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5119()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5120,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5120()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5121,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5121()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5122,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5122()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5123,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5123()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5124,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5124()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
}"
5125,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5125()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""Hd*"");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>((String) null, "";"");
}"
5126,,"  public void test5126()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5127,,"  public void test5127()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5128,,"  public void test5128()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5129,,"  public void test5129()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5130,,"  public void test5130()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5131,,"  public void test5131()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5132,,"  public void test5132()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5133,,"  public void test5133()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5134,,"  public void test5134()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5135,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5135()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5136,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5136()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5137,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5137()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5138,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5138()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5139,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5139()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5140,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5140()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5141,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5141()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5142,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5142()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5143,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5143()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5144,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5144()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5145,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5145()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5146,,"  public void test5146()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LAST_MODIFIED;
}"
5147,,"  public void test5147()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LAST_MODIFIED;
}"
5148,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5148()  throws Throwable  {
      String string0 = """";
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest((CharSequence) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
5149,,"  public void test5149()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5150,,"  public void test5150()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5151,,"  public void test5151()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5152,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5152()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5153,,"  public void test5153()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5154,,"  public void test5154()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5155,,"  public void test5155()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5156,,"  public void test5156()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5157,,"  public void test5157()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5158,,"  public void test5158()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5159,,"  public void test5159()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5160,,"  public void test5160()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
}"
5161,,"  public void test5161()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5162,,"  public void test5162()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5163,,"  public void test5163()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5164,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5164()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5165,,"  public void test5165()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5166,,"  public void test5166()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5167,,"  public void test5167()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5168,,"  public void test5168()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5169,,"  public void test5169()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5170,,"  public void test5170()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5171,,"  public void test5171()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5172,,"  public void test5172()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5173,,"  public void test5173()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5174,,"  public void test5174()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5175,,"  public void test5175()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5176,,"  public void test5176()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5177,,"  public void test5177()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5178,,"  public void test5178()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5179,,"  public void test5179()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5180,,"  public void test5180()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5181,,"  public void test5181()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5182,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5182()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5183,,"  public void test5183()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5184,,"  public void test5184()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5185,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5185()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5186,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5186()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5187,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5187()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5188,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5188()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5189,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5189()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5190,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5190()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5191,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5191()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5192,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5192()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5193,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5193()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5194,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5194()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5195,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5195()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5196,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5196()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5197,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5197()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5198,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5198()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5199,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5199()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5200,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5200()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5201,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5201()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5202,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5202()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5203,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5203()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5204,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5204()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5205,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5205()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5206,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5206()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5207,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5207()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5208,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5208()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5209,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5209()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5210,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5210()  throws Throwable  {
      URI uRI0 = MockURI.aFTPURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5211,,"  public void test5211()  throws Throwable  {
      String string0 = HttpRequest.HEADER_SERVER;
}"
5212,,"  public void test5212()  throws Throwable  {
      String string0 = HttpRequest.HEADER_SERVER;
}"
5213,,"  public void test5213()  throws Throwable  {
      String string0 = HttpRequest.HEADER_SERVER;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ""Server"";
      objectArray0[1] = (Object) ""Server"";
      objectArray0[2] = (Object) ""Server"";
      objectArray0[3] = (Object) ""Server"";
      Object object0 = new Object();
}"
5214,,"  public void test5214()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LOCATION;
}"
5215,,"  public void test5215()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LOCATION;
}"
5216,,"  public void test5216()  throws Throwable  {
      String string0 = HttpRequest.HEADER_DATE;
}"
5217,,"  public void test5217()  throws Throwable  {
      String string0 = HttpRequest.HEADER_DATE;
}"
5218,,"  public void test5218()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5219,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5219()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5220,,"  public void test5220()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5221,,"  public void test5221()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5222,,"  public void test5222()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5223,,"  public void test5223()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5224,,"  public void test5224()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5225,,"  public void test5225()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5226,,"  public void test5226()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5227,,"  public void test5227()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5228,,"  public void test5228()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5229,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5229()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5230,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5230()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5231,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5231()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5232,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5232()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5233,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5233()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5234,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5234()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5235,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5235()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5236,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5236()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5237,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5237()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5238,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5238()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5239,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5239()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5240,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5240()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5241,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5241()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5242,,"  public void test5242()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)1, (byte)0);
}"
5243,,"  public void test5243()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)1, (byte)0);
}"
5244,,"  public void test5244()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)1, (byte)0);
}"
5245,,"  public void test5245()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)1, (byte)0);
}"
5246,,"  public void test5246()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)1, (byte)0);
}"
5247,,"  public void test5247()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)1, (byte)0);
}"
5248,,"  public void test5248()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)1, (byte)0);
}"
5249,,"  public void test5249()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)1, (byte)0);
}"
5250,,"  public void test5250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = HttpRequest.Base64.encodeBytesToBytes(byteArray0, (byte)1, (byte)0);
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
}"
5251,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5251()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        HttpRequest.get((CharSequence) null, (Map<?, ?>) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
5252,,"  public void test5252()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LOCATION;
}"
5253,,"  public void test5253()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LOCATION;
}"
5254,,"  public void test5254()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
5255,,"  public void test5255()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
5256,,"  public void test5256()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
}"
5257,,"  public void test5257()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
}"
5258,,"  public void test5258()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
}"
5259,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5259()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
5260,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5260()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
5261,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5261()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
5262,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5262()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5263,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5263()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5264,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5264()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5265,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5265()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5266,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5266()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5267,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5267()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5268,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5268()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5269,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5269()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5270,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5270()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5271,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5271()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5272,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5272()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
5273,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5273()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5274,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5274()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5275,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5275()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5276,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5276()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5277,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5277()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5278,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5278()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5279,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5279()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5280,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5280()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5281,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5281()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5282,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5282()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5283,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5283()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5284,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5284()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5285,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5285()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@43b47bee&java.lang.Object@65bc0b24=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
5286,,"  public void test5286()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
}"
5287,,"  public void test5287()  throws Throwable  {
      String string0 = HttpRequest.PARAM_CHARSET;
}"
5288,,"  public void test5288()  throws Throwable  {
      String string0 = HttpRequest.PARAM_CHARSET;
}"
5289,,"  public void test5289()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5290,,"  public void test5290()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5291,,"  public void test5291()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5292,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5292()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5293,,"  public void test5293()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5294,,"  public void test5294()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5295,,"  public void test5295()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5296,,"  public void test5296()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5297,,"  public void test5297()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5298,,"  public void test5298()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5299,,"  public void test5299()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5300,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5300()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5301,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5301()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5302,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5302()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5303,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5303()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5304,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5304()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5305,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5305()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5306,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5306()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5307,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5307()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5308,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5308()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5309,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5309()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5310,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5310()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5311,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5311()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5312,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5312()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5313,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5313()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
}"
5314,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5314()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
}"
5315,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5315()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.get((URL) null);
}"
5316,,"  public void test5316()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
}"
5317,,"  public void test5317()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
}"
5318,,"  public void test5318()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
}"
5319,,"  public void test5319()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
}"
5320,,"  public void test5320()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
}"
5321,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5321()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
}"
5322,,"  public void test5322()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
}"
5323,,"  public void test5323()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
}"
5324,,"  public void test5324()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
}"
5325,,"  public void test5325()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
}"
5326,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5326()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
}"
5327,,"  public void test5327()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
}"
5328,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5328()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
}"
5329,,"  public void test5329()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
}"
5330,,"  public void test5330()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
}"
5331,,"  public void test5331()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
}"
5332,,"  public void test5332()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
}"
5333,,"  public void test5333()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
}"
5334,,"  public void test5334()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5335,,"  public void test5335()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5336,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5336()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5337,,"  public void test5337()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5338,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5338()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5339,,"  public void test5339()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5340,,"  public void test5340()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5341,,"  public void test5341()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5342,,"  public void test5342()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5343,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5343()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5344,,"  public void test5344()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5345,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5345()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5346,,"  public void test5346()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5347,,"  public void test5347()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5348,,"  public void test5348()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5349,,"  public void test5349()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5350,,"  public void test5350()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
}"
5351,,"  public void test5351()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5352,,"  public void test5352()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5353,,"  public void test5353()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5354,,"  public void test5354()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5355,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5355()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5356,,"  public void test5356()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5357,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5357()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5358,,"  public void test5358()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5359,,"  public void test5359()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5360,,"  public void test5360()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5361,,"  public void test5361()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5362,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5362()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5363,,"  public void test5363()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5364,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5364()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5365,,"  public void test5365()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5366,,"  public void test5366()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5367,,"  public void test5367()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5368,,"  public void test5368()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5369,,"  public void test5369()  throws Throwable  {
      HashMap<BatchUpdateException, SQLClientInfoException> hashMap0 = new HashMap<BatchUpdateException, SQLClientInfoException>();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      Throwable throwable0 = null;
      DataTruncation dataTruncation0 = new DataTruncation(1165, true, true, 0, 0, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(dataTruncation0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("">v4[)"", "">v4[)"", 0, intArray0, mockThrowable0);
      Function<BatchUpdateException, SQLClientInfoException> function0 = (Function<BatchUpdateException, SQLClientInfoException>) mock(Function.class, new ViolatedAssumptionAnswer());
     // doReturn((Object) null).when(function0).apply(anyIterable());
      SQLClientInfoException sQLClientInfoException0 = hashMap0.computeIfAbsent(batchUpdateException0, function0);
}"
5370,,"  public void test5370()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
}"
5371,,"  public void test5371()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5372,,"  public void test5372()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5373,,"  public void test5373()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5374,,"  public void test5374()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5375,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5375()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5376,,"  public void test5376()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5377,,"  public void test5377()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5378,,"  public void test5378()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5379,,"  public void test5379()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5380,,"  public void test5380()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5381,,"  public void test5381()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5382,,"  public void test5382()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5383,,"  public void test5383()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5384,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test5384()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5385,,"  public void test5385()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5386,,"  public void test5386()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5387,,"  public void test5387()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5388,,"  public void test5388()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5389,,"  public void test5389()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5390,,"  public void test5390()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5391,,"  public void test5391()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5392,,"  public void test5392()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5393,,"  public void test5393()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5394,,"  public void test5394()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5395,,"  public void test5395()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
}"
5396,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5396()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5397,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5397()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5398,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5398()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5399,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5399()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5400,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5400()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5401,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5401()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5402,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5402()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5403,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5403()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5404,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5404()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5405,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5405()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5406,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5406()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5407,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5407()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5408,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5408()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5409,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test5409()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5410,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5410()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5411,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5411()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5412,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5412()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5413,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5413()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5414,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5414()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5415,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5415()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5416,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5416()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5417,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5417()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5418,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5418()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5419,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5419()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5420,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5420()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5421,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5421()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5422,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5422()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5423,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5423()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>(""Last-Modified"");
}"
5424,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5424()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      AtomicReference<String> atomicReference0 = new AtomicReference<String>(""Last-Modified"");
}"
5425,,"  public void test5425()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)0, 0);
}"
5426,,"  public void test5426()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)0, 0);
}"
5427,,"  public void test5427()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)0, 0);
}"
5428,,"  public void test5428()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)0, 0);
}"
5429,,"  public void test5429()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)0, 0);
      HashMap<DataTruncation, BatchUpdateException> hashMap0 = new HashMap<DataTruncation, BatchUpdateException>();
}"
5430,,"  public void test5430()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)0, 0);
      HashMap<DataTruncation, BatchUpdateException> hashMap0 = new HashMap<DataTruncation, BatchUpdateException>();
}"
5431,,"  public void test5431()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)0, 0);
      HashMap<DataTruncation, BatchUpdateException> hashMap0 = new HashMap<DataTruncation, BatchUpdateException>();
}"
5432,,"  public void test5432()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)0, 0);
      HashMap<DataTruncation, BatchUpdateException> hashMap0 = new HashMap<DataTruncation, BatchUpdateException>();
      char[] charArray0 = new char[0];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
}"
5433,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5433()  throws Throwable  {
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try {
        HttpRequest.get((CharSequence) null, true, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
5434,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5434()  throws Throwable  {
      HttpRequest.proxyPort((-10));
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
5435,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5435()  throws Throwable  {
      HttpRequest.proxyPort((-10));
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
5436,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5436()  throws Throwable  {
      HttpRequest.proxyPort((-10));
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
5437,,"  public void test5437()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = ""com.github.kevinsawicki.http.HttpRequest$4"";
      String string1 = """";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)1;
      // Undeclared exception!
      try {
        HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte)0, (int) (byte) (-20));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot have length offset: -20
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest$Base64"", e);
      }
  }"
5438,,"  public void test5438()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5439,,"  public void test5439()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5440,,"  public void test5440()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5441,,"  public void test5441()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5442,,"  public void test5442()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5443,,"  public void test5443()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5444,,"  public void test5444()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5445,,"  public void test5445()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5446,,"  public void test5446()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5447,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5447()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5448,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5448()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5449,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5449()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5450,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5450()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5451,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5451()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5452,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5452()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5453,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5453()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5454,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5454()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5455,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5455()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5456,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5456()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5457,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5457()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
5458,,"  public void test5458()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
}"
5459,,"  public void test5459()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
}"
5460,,"  public void test5460()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
}"
5461,,"  public void test5461()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
}"
5462,,"  public void test5462()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
}"
5463,,"  public void test5463()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
}"
5464,,"  public void test5464()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
}"
5465,,"  public void test5465()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
}"
5466,,"  public void test5466()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
}"
5467,,"  public void test5467()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
}"
5468,,"  public void test5468()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
}"
5469,,"  public void test5469()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5470,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5470()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5471,,"  public void test5471()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5472,,"  public void test5472()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5473,,"  public void test5473()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5474,,"  public void test5474()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5475,,"  public void test5475()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5476,,"  public void test5476()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5477,,"  public void test5477()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5478,,"  public void test5478()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5479,,"  public void test5479()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
}"
5480,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5480()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5481,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5481()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5482,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5482()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5483,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5483()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5484,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5484()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5485,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5485()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5486,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5486()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5487,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5487()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5488,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5488()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5489,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5489()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5490,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5490()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5491,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5491()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5492,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5492()  throws Throwable  {
      String string0 = HttpRequest.HEADER_CONTENT_ENCODING;
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap0 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>();
      HashMap<Integer, SQLInvalidAuthorizationSpecException> hashMap1 = new HashMap<Integer, SQLInvalidAuthorizationSpecException>(hashMap0);
      int int0 = (-1086);
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5493,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5493()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
}"
5494,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5494()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
}"
5495,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5495()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.head((URL) null);
}"
5496,,"  public void test5496()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-8);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
5497,,"  public void test5497()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-8);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
5498,,"  public void test5498()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-8);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
5499,,"  public void test5499()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-8);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
5500,,"  public void test5500()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-8);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
}"
5501,,"  public void test5501()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-8);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
}"
5502,,"  public void test5502()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-8);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
}"
5503,,"  public void test5503()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5504,,"  public void test5504()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5505,,"  public void test5505()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5506,,"  public void test5506()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5507,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5507()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5508,,"  public void test5508()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5509,,"  public void test5509()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5510,,"  public void test5510()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5511,,"  public void test5511()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5512,,"  public void test5512()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5513,,"  public void test5513()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5514,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5514()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5515,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5515()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5516,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5516()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5517,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5517()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5518,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5518()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5519,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5519()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5520,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5520()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5521,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5521()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5522,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5522()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5523,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5523()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5524,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5524()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5525,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5525()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5526,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test5526()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
5527,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5527()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5528,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5528()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5529,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5529()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5530,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5530()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5531,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5531()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5532,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5532()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5533,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5533()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5534,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5534()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5535,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5535()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5536,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5536()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5537,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5537()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5538,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5538()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5539,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5539()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5540,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5540()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5541,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5541()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5542,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5542()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5543,"  public HttpRequest connectTimeout(final int timeout) {
    getConnection().setConnectTimeout(timeout);
    return this;
  }","  public void test5543()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      byte[] byteArray0 = new byte[0];
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.connectTimeout(18);
}"
5544,,"  public void test5544()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5545,,"  public void test5545()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5546,,"  public void test5546()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5547,,"  public void test5547()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5548,,"  public void test5548()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5549,,"  public void test5549()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5550,,"  public void test5550()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5551,,"  public void test5551()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5552,,"  public void test5552()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5553,,"  public void test5553()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5554,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5554()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5555,,"  public void test5555()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
5556,,"  public void test5556()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5557,,"  public void test5557()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5558,,"  public void test5558()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5559,,"  public void test5559()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5560,,"  public void test5560()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5561,,"  public void test5561()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5562,,"  public void test5562()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5563,,"  public void test5563()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5564,,"  public void test5564()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5565,,"  public void test5565()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5566,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5566()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5567,,"  public void test5567()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5568,,"  public void test5568()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5569,,"  public void test5569()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5570,,"  public void test5570()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5571,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5571()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5572,,"  public void test5572()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5573,,"  public void test5573()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5574,,"  public void test5574()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5575,,"  public void test5575()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5576,,"  public void test5576()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5577,,"  public void test5577()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5578,,"  public void test5578()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5579,,"  public void test5579()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
5580,,"  public void test5580()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5581,,"  public void test5581()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5582,,"  public void test5582()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5583,,"  public void test5583()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5584,,"  public void test5584()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5585,,"  public void test5585()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5586,,"  public void test5586()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5587,,"  public void test5587()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5588,,"  public void test5588()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5589,,"  public void test5589()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5590,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5590()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5591,,"  public void test5591()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5592,,"  public void test5592()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5593,,"  public void test5593()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5594,,"  public void test5594()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5595,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5595()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5596,,"  public void test5596()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5597,,"  public void test5597()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5598,,"  public void test5598()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5599,,"  public void test5599()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5600,,"  public void test5600()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5601,,"  public void test5601()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5602,,"  public void test5602()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5603,,"  public void test5603()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5604,,"  public void test5604()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5605,,"  public void test5605()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5606,,"  public void test5606()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5607,,"  public void test5607()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5608,,"  public void test5608()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5609,,"  public void test5609()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5610,,"  public void test5610()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5611,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5611()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5612,,"  public void test5612()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5613,,"  public void test5613()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5614,,"  public void test5614()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5615,,"  public void test5615()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5616,,"  public void test5616()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5617,,"  public void test5617()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5618,,"  public void test5618()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
}"
5619,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5619()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5620,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5620()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5621,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5621()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5622,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5622()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5623,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5623()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5624,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5624()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5625,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5625()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5626,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5626()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5627,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5627()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5628,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5628()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5629,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5629()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5630,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5630()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5631,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5631()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5632,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5632()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5633,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5633()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5634,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5634()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5635,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5635()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5636,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5636()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5637,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5637()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5638,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5638()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5639,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5639()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5640,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5640()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5641,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5641()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5642,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5642()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5643,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5643()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5644,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5644()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5645,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5645()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5646,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5646()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5647,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5647()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5648,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5648()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5649,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5649()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5650,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5650()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5651,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5651()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5652,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5652()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5653,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5653()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5654,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5654()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5655,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5655()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5656,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5656()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5657,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5657()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5658,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5658()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5659,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5659()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5660,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test5660()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      String string0 = ""boundary"";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ""boundary"", uRLStreamHandler0);
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
5661,,"  public void test5661()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5662,,"  public void test5662()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5663,,"  public void test5663()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5664,,"  public void test5664()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5665,,"  public void test5665()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5666,,"  public void test5666()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5667,,"  public void test5667()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5668,,"  public void test5668()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5669,,"  public void test5669()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5670,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5670()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5671,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5671()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5672,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5672()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5673,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5673()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5674,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5674()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5675,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5675()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5676,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5676()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5677,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5677()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5678,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5678()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5679,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5679()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5680,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5680()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5681,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5681()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
}"
5682,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5682()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
}"
5683,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5683()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5684,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5684()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5685,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5685()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5686,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5686()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5687,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5687()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5688,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5688()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5689,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5689()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5690,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5690()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5691,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5691()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5692,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5692()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5693,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test5693()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
5694,,"  public void test5694()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
5695,,"  public void test5695()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
5696,,"  public void test5696()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
}"
5697,,"  public void test5697()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
}"
5698,,"  public void test5698()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
}"
5699,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5699()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
5700,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5700()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
5701,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5701()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
5702,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test5702()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[22];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      Object[] objectArray1 = new Object[0];
}"
5703,,"  public void test5703()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5704,,"  public void test5704()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5705,,"  public void test5705()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5706,,"  public void test5706()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5707,,"  public void test5707()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5708,,"  public void test5708()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5709,,"  public void test5709()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5710,,"  public void test5710()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5711,,"  public void test5711()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5712,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5712()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5713,,"  public void test5713()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5714,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5714()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5715,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5715()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5716,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5716()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5717,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5717()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5718,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5718()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5719,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5719()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5720,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5720()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5721,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5721()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5722,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5722()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5723,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5723()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5724,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5724()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5725,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5725()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5726,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5726()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
5727,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5727()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5728,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5728()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5729,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5729()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5730,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5730()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5731,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5731()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5732,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5732()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5733,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5733()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5734,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5734()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5735,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5735()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5736,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5736()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5737,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5737()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5738,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5738()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5739,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5739()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
5740,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5740()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5741,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5741()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5742,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5742()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5743,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test5743()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5744,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5744()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5745,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5745()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5746,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5746()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5747,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5747()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5748,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5748()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5749,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5749()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5750,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5750()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5751,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5751()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5752,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5752()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5753,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5753()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5754,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5754()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5755,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5755()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5756,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5756()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
5757,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5757()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
}"
5758,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5758()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
}"
5759,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5759()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
}"
5760,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5760()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5761,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5761()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5762,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5762()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5763,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5763()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5764,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5764()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5765,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5765()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5766,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5766()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5767,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5767()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5768,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5768()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5769,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5769()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5770,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5770()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5771,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5771()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5772,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5772()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5773,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5773()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5774,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5774()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5775,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5775()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5776,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5776()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
}"
5777,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5777()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
}"
5778,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5778()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
}"
5779,"  public HttpRequest uncompress(final boolean uncompress) {
    this.uncompress = uncompress;
    return this;
  }","  public void test5779()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      HttpRequest httpRequest1 = httpRequest0.uncompress(false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
}"
5780,,"  public void test5780()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5781,,"  public void test5781()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5782,,"  public void test5782()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5783,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5783()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5784,,"  public void test5784()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5785,,"  public void test5785()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5786,,"  public void test5786()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5787,,"  public void test5787()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5788,,"  public void test5788()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5789,,"  public void test5789()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5790,,"  public void test5790()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
5791,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5791()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5792,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5792()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5793,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5793()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5794,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5794()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5795,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5795()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5796,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5796()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5797,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5797()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5798,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5798()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5799,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5799()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5800,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5800()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5801,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5801()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5802,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5802()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5803,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test5803()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
}"
5804,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5804()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5805,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5805()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5806,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5806()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5807,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5807()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5808,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5808()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5809,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5809()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5810,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5810()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5811,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5811()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5812,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5812()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5813,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5813()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5814,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5814()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5815,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5815()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5816,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5816()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5817,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5817()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5818,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test5818()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
}"
5819,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5819()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5820,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5820()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5821,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5821()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5822,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5822()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5823,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5823()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5824,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5824()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5825,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5825()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5826,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5826()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5827,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5827()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5828,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5828()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5829,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5829()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5830,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5830()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5831,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5831()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5832,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5832()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5833,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5833()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5834,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5834()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5835,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test5835()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
}"
5836,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5836()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5837,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5837()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5838,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5838()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5839,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5839()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5840,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5840()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5841,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5841()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5842,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5842()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5843,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5843()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5844,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5844()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5845,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5845()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5846,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5846()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5847,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5847()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5848,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5848()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5849,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5849()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5850,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5850()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5851,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5851()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5852,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5852()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5853,"  public HttpRequest headers(final Map<String, String> headers) {
    if (!headers.isEmpty())
      for (Entry<String, String> header : headers.entrySet())
        header(header);
    return this;
  }","  public void test5853()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
}"
5854,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5854()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5855,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5855()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5856,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5856()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5857,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5857()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5858,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5858()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5859,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5859()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5860,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5860()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5861,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5861()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5862,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5862()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5863,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5863()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5864,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5864()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5865,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5865()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5866,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5866()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5867,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5867()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5868,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5868()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5869,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5869()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5870,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test5870()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      HttpRequest httpRequest1 = HttpRequest.options(uRL0);
      HttpRequest httpRequest2 = HttpRequest.post(uRL0);
      String[] stringArray0 = httpRequest0.headers("""");
      int int0 = httpRequest2.intHeader("""", 0);
}"
5871,,"  public void test5871()  throws Throwable  {
      String string0 = HttpRequest.METHOD_OPTIONS;
}"
5872,,"  public void test5872()  throws Throwable  {
      String string0 = HttpRequest.METHOD_OPTIONS;
}"
5873,,"  public void test5873()  throws Throwable  {
      String string0 = HttpRequest.CONTENT_TYPE_JSON;
}"
5874,,"  public void test5874()  throws Throwable  {
      String string0 = HttpRequest.CONTENT_TYPE_JSON;
}"
5875,,"  public void test5875()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5876,,"  public void test5876()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5877,,"  public void test5877()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5878,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5878()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5879,,"  public void test5879()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5880,,"  public void test5880()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5881,,"  public void test5881()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5882,,"  public void test5882()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5883,,"  public void test5883()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5884,,"  public void test5884()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5885,,"  public void test5885()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
5886,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5886()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5887,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5887()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5888,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5888()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5889,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5889()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5890,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5890()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5891,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5891()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5892,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5892()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5893,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5893()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5894,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5894()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5895,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5895()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5896,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5896()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5897,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5897()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5898,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5898()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
5899,,"  public void test5899()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try {
        HttpRequest.Base64.encodeBytesToBytes(byteArray0, 0, (byte)16);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot have offset of 0 and length of 16 with array of length 4
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest$Base64"", e);
      }
  }"
5900,,"  public void test5900()  throws Throwable  {
      // Undeclared exception!
      try {
        HttpRequest.Base64.encodeBytesToBytes((byte[]) null, 0, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Cannot serialize a null array.
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest$Base64"", e);
      }
  }"
5901,,"  public void test5901()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
}"
5902,,"  public void test5902()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
}"
5903,,"  public void test5903()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
}"
5904,,"  public void test5904()  throws Throwable  {
      HashMap<SQLRecoverableException, SQLTransientConnectionException> hashMap0 = new HashMap<SQLRecoverableException, SQLTransientConnectionException>();
      PipedWriter pipedWriter0 = new PipedWriter();
}"
5905,,"  public void test5905()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try {
        HttpRequest.Base64.encodeBytes(byteArray0, (int) (byte) (-95), (int) (byte)51);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative offset: -95
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest$Base64"", e);
      }
  }"
5906,,"  public void test5906()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("""");
}"
5907,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5907()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("""");
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
}"
5908,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5908()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("""");
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
}"
5909,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test5909()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("""");
      HttpRequest.HttpRequestException httpRequest_HttpRequestException0 = new HttpRequest.HttpRequestException(mockIOException0);
      String string0 = httpRequest_HttpRequestException0.getLocalizedMessage();
}"
5910,,"  public void test5910()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5911,,"  public void test5911()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5912,,"  public void test5912()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5913,,"  public void test5913()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5914,,"  public void test5914()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5915,,"  public void test5915()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5916,,"  public void test5916()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5917,,"  public void test5917()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5918,,"  public void test5918()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5919,,"  public void test5919()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5920,,"  public void test5920()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5921,,"  public void test5921()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5922,,"  public void test5922()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5923,,"  public void test5923()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5924,,"  public void test5924()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5925,,"  public void test5925()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5926,,"  public void test5926()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5927,,"  public void test5927()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5928,,"  public void test5928()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5929,,"  public void test5929()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5930,,"  public void test5930()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5931,,"  public void test5931()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5932,,"  public void test5932()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5933,,"  public void test5933()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5934,,"  public void test5934()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5935,,"  public void test5935()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5936,,"  public void test5936()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5937,,"  public void test5937()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5938,,"  public void test5938()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
}"
5939,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5939()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5940,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5940()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5941,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5941()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5942,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5942()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5943,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5943()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5944,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5944()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5945,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5945()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5946,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5946()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5947,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5947()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5948,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5948()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5949,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5949()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5950,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5950()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5951,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5951()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5952,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5952()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5953,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5953()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5954,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5954()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5955,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5955()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5956,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5956()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5957,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5957()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5958,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5958()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5959,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5959()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5960,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5960()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5961,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test5961()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""Ww#UbM5"");
      HttpRequest httpRequest0 = HttpRequest.trace(uRL1);
}"
5962,,"  public void test5962()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5963,,"  public void test5963()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5964,,"  public void test5964()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5965,,"  public void test5965()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5966,,"  public void test5966()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5967,,"  public void test5967()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5968,,"  public void test5968()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5969,,"  public void test5969()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5970,,"  public void test5970()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
5971,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5971()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5972,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5972()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5973,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5973()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5974,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5974()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5975,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5975()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5976,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5976()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5977,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5977()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5978,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5978()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5979,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test5979()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5980,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test5980()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5981,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5981()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
5982,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5982()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
}"
5983,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5983()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
}"
5984,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5984()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
}"
5985,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5985()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
}"
5986,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5986()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
}"
5987,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5987()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
}"
5988,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5988()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
}"
5989,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5989()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
}"
5990,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5990()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
}"
5991,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5991()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      SQLException sQLException0 = new SQLException((String) null);
}"
5992,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test5992()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      SQLException sQLException0 = new SQLException((String) null);
}"
5993,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5993()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      SQLException sQLException0 = new SQLException((String) null);
}"
5994,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5994()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      SQLException sQLException0 = new SQLException((String) null);
}"
5995,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5995()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      SQLException sQLException0 = new SQLException((String) null);
}"
5996,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5996()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      SQLException sQLException0 = new SQLException((String) null);
      Integer integer0 = new Integer(3257);
}"
5997,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test5997()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      SQLException sQLException0 = new SQLException((String) null);
      Integer integer0 = new Integer(3257);
}"
5998,,"  public void test5998()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
}"
5999,,"  public void test5999()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6000,,"  public void test6000()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6001,,"  public void test6001()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6002,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6003,,"  public void test6003()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6004,,"  public void test6004()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6005,,"  public void test6005()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6006,,"  public void test6006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6007,,"  public void test6007()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6008,,"  public void test6008()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6009,,"  public void test6009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
}"
6010,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6011,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6011()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6012,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6012()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6013,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6013()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6014,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6014()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6015,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6016,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6016()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6017,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6018,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6019,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6019()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6020,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6020()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6021,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6022,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6022()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6023,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6023()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6024,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6025,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6026,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6026()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6027,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6027()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6028,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6029,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6029()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6030,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6031,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6032,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6033,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6034,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6034()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6035,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6036,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6036()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6037,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6037()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6038,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6039,"  public HttpRequest acceptCharset(final String acceptCharset) {
    return header(HEADER_ACCEPT_CHARSET, acceptCharset);
  }","  public void test6039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
      HttpRequest httpRequest1 = httpRequest0.acceptCharset(""charset"");
}"
6040,,"  public void test6040()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6041,,"  public void test6041()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6042,,"  public void test6042()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6043,,"  public void test6043()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6044,,"  public void test6044()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6045,,"  public void test6045()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6046,,"  public void test6046()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6047,,"  public void test6047()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6048,,"  public void test6048()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6049,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6049()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6050,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6050()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6051,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6051()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6052,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6052()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6053,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6053()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6054,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6054()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6055,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6055()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6056,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6056()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6057,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6057()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6058,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6058()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6059,"  public static HttpRequest head(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_HEAD);
  }","  public void test6059()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.head(uRL0);
}"
6060,,"  public void test6060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
}"
6061,,"  public void test6061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6062,,"  public void test6062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6063,,"  public void test6063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6064,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6065,,"  public void test6065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6066,,"  public void test6066()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6067,,"  public void test6067()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6068,,"  public void test6068()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6069,,"  public void test6069()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6070,,"  public void test6070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6071,,"  public void test6071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
}"
6072,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6072()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6073,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6074,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6075,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6076,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6077,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6078,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6079,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6080,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6081,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6082,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6083,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6084,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6084()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6085,,"  public void test6085()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6086,,"  public void test6086()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6087,,"  public void test6087()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6088,,"  public void test6088()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6089,,"  public void test6089()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6090,,"  public void test6090()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6091,,"  public void test6091()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6092,,"  public void test6092()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6093,,"  public void test6093()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6094,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6094()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6095,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6095()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6096,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6096()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6097,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6097()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6098,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6098()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6099,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6099()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6100,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6100()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6101,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6101()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6102,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6102()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6103,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6103()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6104,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6104()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6105,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6105()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6106,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6106()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6107,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6107()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6108,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6108()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6109,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6109()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6110,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6110()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
}"
6111,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6111()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
}"
6112,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6112()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
}"
6113,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6113()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
}"
6114,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6114()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
}"
6115,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6115()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException0.spliterator();
}"
6116,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6116()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException0.spliterator();
}"
6117,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6117()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException0.spliterator();
}"
6118,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6118()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException0.spliterator();
}"
6119,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6119()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = ""Hd*"";
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      String string1 = ""'\\e\""}1Ri"";
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""charset"");
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException0.spliterator();
}"
6120,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6120()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
}"
6121,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6121()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
}"
6122,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6122()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
}"
6123,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6123()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""Location"", ""Referer"", (-1163), (Throwable) null);
}"
6124,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6124()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""Location"", ""Referer"", (-1163), (Throwable) null);
}"
6125,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6125()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""Location"", ""Referer"", (-1163), (Throwable) null);
}"
6126,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6126()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""Location"", ""Referer"", (-1163), (Throwable) null);
}"
6127,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6127()  throws Throwable  {
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
      Throwable throwable0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""Location"", ""Referer"", (-1163), (Throwable) null);
}"
6128,,"  public void test6128()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6129,,"  public void test6129()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6130,,"  public void test6130()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6131,,"  public void test6131()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6132,,"  public void test6132()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6133,,"  public void test6133()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6134,,"  public void test6134()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6135,,"  public void test6135()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6136,,"  public void test6136()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6137,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6137()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6138,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6138()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6139,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6139()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6140,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6140()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6141,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6141()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6142,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6142()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6143,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6143()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6144,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6144()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6145,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6145()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6146,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6146()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6147,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6147()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6148,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6148()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6149,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6149()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6150,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6150()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6151,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6151()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6152,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6152()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
}"
6153,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6153()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6154,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6154()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6155,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6155()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6156,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6156()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6157,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6157()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6158,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6158()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6159,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6159()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6160,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6160()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6161,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6161()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""https.proxyHost"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6162,,"  public void test6162()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6163,,"  public void test6163()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6164,,"  public void test6164()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6165,,"  public void test6165()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6166,,"  public void test6166()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6167,,"  public void test6167()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6168,,"  public void test6168()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6169,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6169()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6170,,"  public void test6170()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6171,,"  public void test6171()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6172,,"  public void test6172()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6173,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6173()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6174,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6174()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6175,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6175()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6176,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6176()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6177,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6177()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6178,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6178()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6179,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6179()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6180,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6180()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6181,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6181()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6182,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6182()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6183,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6183()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6184,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6184()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6185,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6185()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6186,,"  public void test6186()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6187,,"  public void test6187()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6188,,"  public void test6188()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6189,,"  public void test6189()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6190,,"  public void test6190()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6191,,"  public void test6191()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6192,,"  public void test6192()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6193,,"  public void test6193()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6194,,"  public void test6194()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6195,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6195()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6196,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6196()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6197,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6197()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6198,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6198()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6199,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6199()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6200,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6200()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6201,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6201()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6202,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6202()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6203,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6203()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6204,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6204()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6205,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6205()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6206,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6206()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
}"
6207,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6207()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
}"
6208,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6208()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
6209,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6209()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
6210,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6210()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
6211,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6211()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
6212,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6212()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6213,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6213()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6214,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6214()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6215,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6215()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6216,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6216()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6217,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6217()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6218,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6218()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
}"
6219,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6219()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6220,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6220()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6221,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6221()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6222,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6222()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6223,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6223()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6224,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6224()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6225,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6225()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6226,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6226()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6227,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6227()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6228,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6228()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6229,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6229()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6230,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6230()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6231,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6231()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6232,,"  public void test6232()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
6233,,"  public void test6233()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
6234,,"  public void test6234()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
}"
6235,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6235()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
6236,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6236()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
6237,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6237()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
6238,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6238()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6239,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6239()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6240,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6240()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6241,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6241()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6242,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6242()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6243,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6243()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6244,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6244()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6245,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6245()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6246,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6246()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6247,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6247()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6248,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6248()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
}"
6249,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6249()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6250,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6250()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6251,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6251()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6252,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6252()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6253,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6253()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6254,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6254()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6255,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6255()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6256,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6256()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6257,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6257()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6258,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6258()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6259,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6259()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6260,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6260()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6261,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6261()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
}"
6262,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6262()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6263,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6263()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6264,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6264()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6265,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6265()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6266,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6266()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6267,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6267()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6268,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6268()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6269,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6269()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6270,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6270()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6271,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6271()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6272,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6272()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6273,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6273()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6274,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6274()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6275,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6275()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      objectArray0[3] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=gzip&java.lang.Object@498a5b75=gzip"", 1250, ""}pw;Nob1XOCkee,Z"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""}pw;Nob1XOCkee,Z"");
      HttpRequest httpRequest1 = new HttpRequest(uRL0, ""application/x-www-form-urlencoded"");
}"
6276,,"  public void test6276()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6277,,"  public void test6277()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6278,,"  public void test6278()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6279,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6279()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6280,,"  public void test6280()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6281,,"  public void test6281()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6282,,"  public void test6282()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6283,,"  public void test6283()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6284,,"  public void test6284()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6285,,"  public void test6285()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6286,,"  public void test6286()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6287,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6287()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6288,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6288()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6289,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6289()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6290,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6290()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6291,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6291()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6292,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6292()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6293,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6293()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6294,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6294()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6295,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6295()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6296,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6296()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6297,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6297()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6298,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6298()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6299,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6299()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6300,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6300()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6301,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6301()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6302,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6302()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6303,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6303()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6304,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6304()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6305,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6305()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6306,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6306()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6307,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6307()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6308,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6308()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6309,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6309()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6310,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6310()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6311,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6311()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6312,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6312()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
}"
6313,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6313()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6314,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6314()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6315,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6315()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6316,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6316()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6317,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6317()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6318,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6318()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6319,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6319()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6320,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6320()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6321,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6321()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6322,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6322()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6323,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6323()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6324,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6324()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6325,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6325()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6326,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6326()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6327,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6327()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6328,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6328()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6329,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6329()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
}"
6330,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6330()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
}"
6331,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6331()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
}"
6332,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6332()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
}"
6333,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6333()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
}"
6334,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6334()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
}"
6335,"  public int intHeader(final String name) throws HttpRequestException {
    return intHeader(name, -1);
  }","  public void test6335()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      int int0 = httpRequest0.intHeader("""", 0);
      File file0 = MockFile.createTempFile(""--H]#eP="", ""application/x-www-form-urlencoded"");
      HashMap<DataTruncation, SQLWarning> hashMap0 = new HashMap<DataTruncation, SQLWarning>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
}"
6336,,"  public void test6336()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
6337,,"  public void test6337()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
6338,,"  public void test6338()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
}"
6339,,"  public void test6339()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
}"
6340,,"  public void test6340()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
}"
6341,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6341()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
6342,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6342()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
6343,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6343()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
6344,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6344()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6345,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6345()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6346,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6346()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6347,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6347()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6348,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6348()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6349,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6349()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6350,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6350()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6351,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6351()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6352,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6352()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6353,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6353()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6354,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6354()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6355,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6355()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6356,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6356()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6357,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6357()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6358,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6358()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6359,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6359()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6360,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6360()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6361,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6361()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6362,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6362()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6363,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6363()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6364,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6364()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6365,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6365()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6366,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6366()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6367,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6367()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      String string2 = ""Location"";
      int int0 = 1250;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=&java.lang.Object@404a0b94=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""JzMxe!DRh&0D!UwNv"");
}"
6368,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6368()  throws Throwable  {
      // Undeclared exception!
      try {
        HttpRequest.options((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
6369,,"  public void test6369()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
6370,,"  public void test6370()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
}"
6371,,"  public void test6371()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
}"
6372,,"  public void test6372()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
}"
6373,,"  public void test6373()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
}"
6374,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6374()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
6375,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6375()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
6376,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6376()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
}"
6377,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6377()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6378,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6378()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6379,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6379()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6380,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6380()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6381,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6381()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6382,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6382()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6383,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6383()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6384,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6384()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6385,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6385()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6386,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6386()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6387,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6387()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
}"
6388,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6388()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6389,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6389()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6390,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6390()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6391,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6391()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6392,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6392()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6393,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6393()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6394,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6394()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6395,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6395()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6396,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6396()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6397,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6397()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6398,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6398()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6399,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6399()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6400,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6400()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[1] = (Object) ""gzip"";
      objectArray0[2] = (Object) ""gzip"";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) ""gzip"";
      String string1 = HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(""Location"", ""gzip?gzip=gzip&gzip=java.lang.Object@13f7c269&java.lang.Object@51bc3947=gzip"", 1250, ""gzip"", uRLStreamHandler0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""gzip"");
}"
6401,,"  public void test6401()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6402,,"  public void test6402()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6403,,"  public void test6403()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6404,,"  public void test6404()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6405,,"  public void test6405()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6406,,"  public void test6406()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6407,,"  public void test6407()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6408,,"  public void test6408()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6409,,"  public void test6409()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6410,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6410()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6411,,"  public void test6411()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6412,,"  public void test6412()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
}"
6413,,"  public void test6413()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6414,,"  public void test6414()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6415,,"  public void test6415()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6416,,"  public void test6416()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6417,,"  public void test6417()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6418,,"  public void test6418()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6419,,"  public void test6419()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6420,,"  public void test6420()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6421,,"  public void test6421()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6422,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6422()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6423,,"  public void test6423()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6424,,"  public void test6424()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6425,,"  public void test6425()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6426,,"  public void test6426()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6427,,"  public void test6427()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6428,,"  public void test6428()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6429,,"  public void test6429()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6430,,"  public void test6430()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6431,,"  public void test6431()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6432,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6432()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6433,,"  public void test6433()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6434,,"  public void test6434()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6435,,"  public void test6435()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6436,,"  public void test6436()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
}"
6437,,"  public void test6437()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6438,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6438()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6439,,"  public void test6439()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6440,,"  public void test6440()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6441,,"  public void test6441()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6442,,"  public void test6442()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6443,,"  public void test6443()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6444,,"  public void test6444()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6445,,"  public void test6445()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6446,,"  public void test6446()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6447,,"  public void test6447()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6448,,"  public void test6448()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6449,,"  public void test6449()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
}"
6450,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6450()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6451,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6451()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6452,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6452()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6453,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6453()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6454,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6454()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6455,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6455()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6456,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6456()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6457,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6457()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6458,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6458()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6459,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6459()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6460,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6460()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6461,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6461()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6462,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6462()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6463,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6463()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6464,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6464()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
}"
6465,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6465()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6466,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6466()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6467,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6467()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6468,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6468()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6469,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6469()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6470,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6470()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6471,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6471()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6472,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6472()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6473,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6473()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6474,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6474()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6475,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6475()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6476,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6476()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6477,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6477()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6478,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6478()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6479,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6479()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
}"
6480,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6480()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
}"
6481,"  public long lastModified() {
    return dateHeader(HEADER_LAST_MODIFIED);
  }","  public void test6481()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
}"
6482,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6482()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6483,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6483()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6484,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6484()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6485,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6485()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6486,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6486()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6487,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6487()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6488,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6488()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6489,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6489()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6490,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6490()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6491,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6491()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6492,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6492()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6493,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6493()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6494,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6494()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6495,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6495()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6496,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6496()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6497,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6497()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6498,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6498()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6499,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6499()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6500,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6500()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
}"
6501,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6501()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6502,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6502()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6503,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6503()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6504,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6504()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6505,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6505()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6506,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6506()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6507,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6507()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6508,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6508()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6509,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6509()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6510,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6510()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6511,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6511()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6512,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6512()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6513,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6513()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6514,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6514()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6515,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6515()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6516,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6516()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6517,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6517()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6518,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6518()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6519,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6519()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6520,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6520()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6521,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6521()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6522,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6522()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6523,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6523()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6524,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6524()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6525,"  public HttpRequest userAgent(final String userAgent) {
    return header(HEADER_USER_AGENT, userAgent);
  }","  public void test6525()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL1);
      long long0 = httpRequest0.lastModified();
      HttpRequest.UploadProgress httpRequest_UploadProgress0 = HttpRequest.UploadProgress.DEFAULT;
      httpRequest_UploadProgress0.onUpload(1209L, (-1L));
      int int0 = 3527;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""boundary"");
      HttpRequest httpRequest1 = httpRequest0.bufferSize(3527);
      HttpRequest httpRequest2 = httpRequest1.userAgent(""application/x-www-form-urlencoded"");
}"
6526,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6526()  throws Throwable  {
      int int0 = 11;
      HttpRequest.proxyPort(11);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
}"
6527,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6527()  throws Throwable  {
      int int0 = 11;
      HttpRequest.proxyPort(11);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
}"
6528,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6528()  throws Throwable  {
      int int0 = 11;
      HttpRequest.proxyPort(11);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
}"
6529,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6529()  throws Throwable  {
      int int0 = 11;
      HttpRequest.proxyPort(11);
      HttpRequest httpRequest0 = HttpRequest.trace((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
}"
6530,,"  public void test6530()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
}"
6531,,"  public void test6531()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
}"
6532,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6532()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6533,,"  public void test6533()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6534,,"  public void test6534()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6535,,"  public void test6535()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6536,,"  public void test6536()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6537,,"  public void test6537()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6538,,"  public void test6538()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6539,,"  public void test6539()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6540,,"  public void test6540()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6541,,"  public void test6541()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6542,,"  public void test6542()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ETAG;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""ETag"");
}"
6543,,"  public void test6543()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6544,,"  public void test6544()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6545,,"  public void test6545()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6546,,"  public void test6546()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6547,,"  public void test6547()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6548,,"  public void test6548()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6549,,"  public void test6549()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6550,,"  public void test6550()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6551,,"  public void test6551()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6552,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6552()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6553,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6553()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6554,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6554()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6555,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6555()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6556,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6556()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6557,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6557()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6558,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6558()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6559,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6559()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6560,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6560()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6561,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6561()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6562,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6562()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
}"
6563,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6563()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
}"
6564,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6564()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
}"
6565,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6565()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
}"
6566,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6566()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
}"
6567,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6567()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
}"
6568,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6568()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6569,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6569()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6570,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6570()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6571,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6571()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6572,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6572()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6573,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6573()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6574,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6574()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6575,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6575()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6576,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6576()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.put(uRL0);
      int int0 = 3276;
      SQLWarning sQLWarning0 = new SQLWarning(""application/json"", ""Content-Encoding"");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Location"", ""'e\""}1Ri"", sQLWarning0);
}"
6577,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6577()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
}"
6578,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6578()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
}"
6579,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6579()  throws Throwable  {
      HttpRequest httpRequest0 = HttpRequest.put((URL) null);
}"
6580,,"  public void test6580()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6581,,"  public void test6581()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6582,,"  public void test6582()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6583,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6583()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6584,,"  public void test6584()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6585,,"  public void test6585()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6586,,"  public void test6586()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6587,,"  public void test6587()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6588,,"  public void test6588()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6589,,"  public void test6589()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6590,,"  public void test6590()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6591,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6591()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6592,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6592()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6593,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6593()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6594,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6594()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6595,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6595()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6596,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6596()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6597,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6597()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6598,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6598()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6599,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6599()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6600,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6600()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6601,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6601()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6602,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6602()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6603,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6603()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6604,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6604()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6605,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6605()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6606,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6606()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6607,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6607()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6608,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6608()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6609,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6609()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6610,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6610()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6611,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6611()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6612,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6612()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6613,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6613()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6614,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6614()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6615,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6615()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6616,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6616()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6617,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6617()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6618,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6618()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6619,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6619()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6620,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6620()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
}"
6621,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6621()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
}"
6622,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6622()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
}"
6623,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test6623()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
}"
6624,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6624()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
}"
6625,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6625()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
}"
6626,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6626()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
}"
6627,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6627()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
}"
6628,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6628()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
}"
6629,"  public HttpRequest basic(final String name, final String password) {
    return authorization(""Basic "" + Base64.encode(name + ':' + password));
  }","  public void test6629()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
}"
6630,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6630()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6631,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6631()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6632,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6632()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6633,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6633()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6634,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6634()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6635,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6635()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6636,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6636()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6637,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6637()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6638,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6638()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6639,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6639()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6640,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6640()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6641,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6641()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6642,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6642()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6643,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6643()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6644,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6644()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6645,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6645()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6646,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6646()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6647,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6647()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6648,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6648()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6649,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6649()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6650,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6650()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6651,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6651()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6652,"  public HttpRequest authorization(final String authorization) {
    return header(HEADER_AUTHORIZATION, authorization);
  }","  public void test6652()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      HttpRequest httpRequest1 = httpRequest0.basic(""=nOFSU!_*,[pB<xl?"", ""Z_v7.bM;zfGq"");
      AtomicInteger atomicInteger0 = new AtomicInteger(0);
      HttpRequest httpRequest2 = httpRequest1.authorization(""POST"");
}"
6653,,"  public void test6653()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
6654,,"  public void test6654()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
6655,,"  public void test6655()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
6656,,"  public void test6656()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6657,,"  public void test6657()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6658,,"  public void test6658()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6659,,"  public void test6659()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6660,,"  public void test6660()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6661,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6661()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6662,,"  public void test6662()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6663,,"  public void test6663()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6664,,"  public void test6664()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6665,,"  public void test6665()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6666,,"  public void test6666()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6667,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6667()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6668,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6668()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6669,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6669()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6670,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6670()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6671,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6671()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6672,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6672()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6673,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6673()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6674,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6674()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6675,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6675()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6676,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6676()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6677,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6677()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6678,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6678()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6679,"  public HttpRequest(final CharSequence url, final String method)
      throws HttpRequestException {
    try {
      this.url = new URL(url.toString());
    } catch (MalformedURLException e) {
      throw new HttpRequestException(e);
    }
    this.requestMethod = method;
  }","  public void test6679()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ""e{"";
      HttpRequest httpRequest0 = new HttpRequest(uRL0, ""e{"");
}"
6680,,"  public void test6680()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
6681,,"  public void test6681()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
6682,,"  public void test6682()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
6683,,"  public void test6683()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
}"
6684,,"  public void test6684()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
}"
6685,,"  public void test6685()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
}"
6686,,"  public void test6686()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
}"
6687,,"  public void test6687()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
}"
6688,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6688()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
}"
6689,,"  public void test6689()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
}"
6690,,"  public void test6690()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
}"
6691,,"  public void test6691()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
}"
6692,,"  public void test6692()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6693,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6693()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6694,,"  public void test6694()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6695,,"  public void test6695()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6696,,"  public void test6696()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6697,,"  public void test6697()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6698,,"  public void test6698()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6699,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6699()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6700,,"  public void test6700()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6701,,"  public void test6701()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
}"
6702,,"  public void test6702()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6703,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6703()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6704,,"  public void test6704()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6705,,"  public void test6705()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6706,,"  public void test6706()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6707,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6707()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6708,,"  public void test6708()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6709,,"  public void test6709()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6710,,"  public void test6710()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6711,,"  public void test6711()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
}"
6712,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6712()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6713,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6713()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6714,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6714()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6715,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6715()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6716,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6716()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6717,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6717()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6718,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6718()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6719,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6719()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6720,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6720()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6721,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6721()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6722,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6722()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6723,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6723()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6724,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6724()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6725,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6725()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6726,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6726()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6727,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6727()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6728,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6728()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6729,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6729()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6730,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6730()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      String string0 = HttpRequest.Base64.encodeBytes(byteArray0);
      HashMap<SQLTimeoutException, SQLDataException> hashMap0 = new HashMap<SQLTimeoutException, SQLDataException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(""charset"", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      SQLDataException sQLDataException1 = hashMap0.put(sQLTimeoutException1, sQLDataException0);
}"
6731,,"  public void test6731()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6732,,"  public void test6732()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6733,,"  public void test6733()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6734,,"  public void test6734()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6735,,"  public void test6735()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6736,,"  public void test6736()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6737,,"  public void test6737()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6738,,"  public void test6738()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6739,,"  public void test6739()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6740,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6740()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6741,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6741()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6742,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6742()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6743,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6743()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6744,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6744()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6745,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6745()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6746,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6746()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6747,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6747()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6748,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6748()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6749,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6749()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6750,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6750()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
6751,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6751()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
}"
6752,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6752()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
}"
6753,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6753()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
6754,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6754()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
6755,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6755()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
6756,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6756()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
6757,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6757()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6758,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6758()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6759,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6759()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6760,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6760()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6761,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6761()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6762,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6762()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
6763,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test6763()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
}"
6764,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6764()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6765,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6765()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6766,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6766()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6767,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6767()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6768,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6768()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6769,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6769()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6770,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6770()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6771,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6771()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6772,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6772()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6773,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6773()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6774,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6774()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6775,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6775()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6776,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test6776()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      String string0 = ""*JodChI+"";
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Content-Encoding"");
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
6777,,"  public void test6777()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6778,,"  public void test6778()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6779,,"  public void test6779()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6780,,"  public void test6780()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6781,,"  public void test6781()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6782,,"  public void test6782()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6783,,"  public void test6783()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6784,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6784()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6785,,"  public void test6785()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6786,,"  public void test6786()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6787,,"  public void test6787()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6788,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6788()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6789,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6789()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6790,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6790()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6791,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6791()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6792,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6792()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6793,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6793()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6794,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6794()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6795,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6795()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6796,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6796()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6797,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6797()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6798,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6798()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6799,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6799()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6800,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6800()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6801,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6801()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      String string0 = """";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""gzip"");
}"
6802,,"  public void test6802()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6803,,"  public void test6803()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6804,,"  public void test6804()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6805,,"  public void test6805()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6806,,"  public void test6806()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6807,,"  public void test6807()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6808,,"  public void test6808()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6809,,"  public void test6809()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6810,,"  public void test6810()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
}"
6811,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6811()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6812,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6812()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6813,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6813()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6814,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6814()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6815,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6815()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6816,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6816()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6817,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6817()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6818,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6818()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6819,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6819()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6820,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6820()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6821,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6821()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
}"
6822,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6822()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      StringWriter stringWriter0 = new StringWriter(0);
}"
6823,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6823()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.delete(uRL0);
      StringWriter stringWriter0 = new StringWriter(0);
}"
6824,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6824()  throws Throwable  {
      HttpRequest.proxyPort(0);
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
6825,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6825()  throws Throwable  {
      HttpRequest.proxyPort(0);
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
6826,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6826()  throws Throwable  {
      HttpRequest.proxyPort(0);
      URL uRL0 = null;
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
6827,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6827()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
6828,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6828()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
6829,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6829()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
}"
6830,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6830()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
}"
6831,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6831()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
}"
6832,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6832()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6833,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6833()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6834,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6834()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6835,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6835()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6836,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6836()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6837,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6837()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6838,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6838()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6839,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6839()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6840,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6840()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6841,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6841()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6842,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6842()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
}"
6843,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6843()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
      HashMap<SQLTransactionRollbackException, Object> hashMap0 = new HashMap<SQLTransactionRollbackException, Object>();
}"
6844,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6844()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
      HashMap<SQLTransactionRollbackException, Object> hashMap0 = new HashMap<SQLTransactionRollbackException, Object>();
}"
6845,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6845()  throws Throwable  {
      HttpRequest.proxyPort(0);
      String string0 = HttpRequest.Base64.encode(""S"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""Uw=="");
      HashMap<SQLTransactionRollbackException, Object> hashMap0 = new HashMap<SQLTransactionRollbackException, Object>();
}"
6846,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test6846()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
}"
6847,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test6847()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
}"
6848,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test6848()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
}"
6849,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test6849()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
}"
6850,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test6850()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
}"
6851,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test6851()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
}"
6852,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test6852()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
}"
6853,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test6853()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
}"
6854,"  public static void proxyHost(final String host) {
    setProperty(""http.proxyHost"", host);
    setProperty(""https.proxyHost"", host);
  }","  public void test6854()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
}"
6855,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6855()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6856,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6856()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6857,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6857()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6858,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6858()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6859,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6859()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6860,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6860()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6861,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6861()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6862,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6862()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6863,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6863()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6864,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6864()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6865,"  public static HttpRequest options(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_OPTIONS);
  }","  public void test6865()  throws Throwable  {
      HttpRequest.proxyHost(""U=-ASC(I"");
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = HttpRequest.options(uRL0);
}"
6866,,"  public void test6866()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
}"
6867,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6867()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6868,,"  public void test6868()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6869,,"  public void test6869()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6870,,"  public void test6870()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6871,,"  public void test6871()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6872,,"  public void test6872()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6873,,"  public void test6873()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6874,,"  public void test6874()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6875,,"  public void test6875()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6876,,"  public void test6876()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6877,,"  public void test6877()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
}"
6878,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6878()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6879,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6879()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6880,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6880()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6881,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6881()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6882,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6882()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6883,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6883()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6884,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6884()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6885,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6885()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6886,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6886()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6887,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6887()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6888,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6888()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6889,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6889()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6890,"  public static HttpRequest post(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_POST);
  }","  public void test6890()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
}"
6891,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6891()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6892,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6892()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6893,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6893()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6894,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6894()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6895,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6895()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6896,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6896()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6897,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6897()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6898,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6898()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6899,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6899()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6900,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6900()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6901,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6901()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6902,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6902()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6903,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6903()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6904,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6904()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6905,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6905()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6906,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6906()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6907,"  protected HttpRequest closeOutput() throws IOException {
    progress(null);
    if (output == null)
      return this;
    if (multipart)
      output.write(CRLF + ""--"" + BOUNDARY + ""--"" + CRLF);
    if (ignoreCloseExceptions)
      try {
        output.close();
      } catch (IOException ignored) {
        // Ignored
      }
    else
      output.close();
    output = null;
    return this;
  }","  public void test6907()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
}"
6908,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6908()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6909,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6909()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6910,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6910()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6911,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6911()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6912,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6912()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6913,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6913()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6914,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6914()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6915,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6915()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6916,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6916()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6917,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6917()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6918,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6918()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6919,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6919()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6920,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test6920()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6921,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test6921()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6922,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6922()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6923,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6923()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6924,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6924()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6925,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6925()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6926,"  public HttpRequest useProxy(final String proxyHost, final int proxyPort) {
    if (connection != null)
      throw new IllegalStateException(""The connection has already been created. This method must be called before reading or writing to the request."");

    this.httpProxyHost = proxyHost;
    this.httpProxyPort = proxyPort;
    return this;
  }","  public void test6926()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
}"
6927,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6927()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
      Object[] objectArray0 = new Object[0];
      String string0 = HttpRequest.append((CharSequence) ""Content-Length"", objectArray0);
}"
6928,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6928()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
      Object[] objectArray0 = new Object[0];
      String string0 = HttpRequest.append((CharSequence) ""Content-Length"", objectArray0);
}"
6929,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6929()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      HttpRequest httpRequest2 = httpRequest0.useProxy("" r<gwI"", 28);
      Object[] objectArray0 = new Object[0];
      String string0 = HttpRequest.append((CharSequence) ""Content-Length"", objectArray0);
}"
6930,,"  public void test6930()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LAST_MODIFIED;
}"
6931,,"  public void test6931()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LAST_MODIFIED;
}"
6932,,"  public void test6932()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LAST_MODIFIED;
      HashMap<SQLNonTransientConnectionException, SQLClientInfoException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLClientInfoException>();
}"
6933,,"  public void test6933()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LAST_MODIFIED;
      HashMap<SQLNonTransientConnectionException, SQLClientInfoException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLClientInfoException>();
}"
6934,,"  public void test6934()  throws Throwable  {
      String string0 = HttpRequest.HEADER_LAST_MODIFIED;
      HashMap<SQLNonTransientConnectionException, SQLClientInfoException> hashMap0 = new HashMap<SQLNonTransientConnectionException, SQLClientInfoException>();
}"
6935,"  public static HttpRequest delete(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_DELETE);
  }","  public void test6935()  throws Throwable  {
      // Undeclared exception!
      try {
        HttpRequest.delete((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
6936,,"  public void test6936()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
}"
6937,,"  public void test6937()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
}"
6938,,"  public void test6938()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
}"
6939,,"  public void test6939()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
}"
6940,,"  public void test6940()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
}"
6941,,"  public void test6941()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
6942,,"  public void test6942()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
6943,,"  public void test6943()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
6944,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6944()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
6945,,"  public void test6945()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
}"
6946,,"  public void test6946()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
}"
6947,,"  public void test6947()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
}"
6948,,"  public void test6948()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
}"
6949,,"  public void test6949()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
}"
6950,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6950()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
}"
6951,,"  public void test6951()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
}"
6952,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6952()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
}"
6953,,"  public void test6953()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
}"
6954,,"  public void test6954()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
}"
6955,,"  public void test6955()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
}"
6956,,"  public void test6956()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6957,,"  public void test6957()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6958,,"  public void test6958()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6959,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6959()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6960,,"  public void test6960()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6961,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6961()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6962,,"  public void test6962()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6963,,"  public void test6963()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6964,,"  public void test6964()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6965,,"  public void test6965()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6966,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6966()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6967,,"  public void test6967()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6968,,"  public void test6968()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
}"
6969,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6969()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6970,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6970()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6971,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6971()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6972,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6972()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6973,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6973()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6974,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6974()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6975,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6975()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6976,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6976()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6977,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6977()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6978,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6978()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6979,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6979()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6980,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6980()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6981,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6981()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6982,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6982()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6983,"  public static HttpRequest put(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_PUT);
  }","  public void test6983()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
}"
6984,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6984()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
      String string1 = HttpRequest.append((CharSequence) ""Accept-Encoding"", (Map<?, ?>) hashMap0);
}"
6985,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6985()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
      String string1 = HttpRequest.append((CharSequence) ""Accept-Encoding"", (Map<?, ?>) hashMap0);
}"
6986,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6986()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
      String string1 = HttpRequest.append((CharSequence) ""Accept-Encoding"", (Map<?, ?>) hashMap0);
}"
6987,"  public static String append(final CharSequence url, final Map<?, ?> params) {
    final String baseUrl = url.toString();
    if (params == null || params.isEmpty())
      return baseUrl;

    final StringBuilder result = new StringBuilder(baseUrl);

    addPathSeparator(baseUrl, result);
    addParamPrefix(baseUrl, result);

    Entry<?, ?> entry;
    Iterator<?> iterator = params.entrySet().iterator();
    entry = (Entry<?, ?>) iterator.next();
    addParam(entry.getKey().toString(), entry.getValue(), result);

    while (iterator.hasNext()) {
      result.append('&');
      entry = (Entry<?, ?>) iterator.next();
      addParam(entry.getKey().toString(), entry.getValue(), result);
    }

    return result.toString();
  }","  public void test6987()  throws Throwable  {
      String string0 = HttpRequest.HEADER_ACCEPT_ENCODING;
      HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException> hashMap0 = new HashMap<SQLInvalidAuthorizationSpecException, SQLClientInfoException>();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""Accept-Encoding"", mockIOException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""Accept-Encoding"", ""Accept-Encoding"", 0, (Map<String, ClientInfoStatus>) null, sQLInvalidAuthorizationSpecException0);
      SQLClientInfoException sQLClientInfoException1 = hashMap0.put(sQLInvalidAuthorizationSpecException0, sQLClientInfoException0);
      String string1 = HttpRequest.append((CharSequence) ""Accept-Encoding"", (Map<?, ?>) hashMap0);
}"
6988,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6988()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode(""jkfIYDxRQ"");
}"
6989,"  public static String encode(final CharSequence url)
      throws HttpRequestException {
    URL parsed;
    try {
      parsed = new URL(url.toString());
    } catch (IOException e) {
      throw new HttpRequestException(e);
    }

    String host = parsed.getHost();
    int port = parsed.getPort();
    if (port != -1)
      host = host + ':' + Integer.toString(port);

    try {
      String encoded = new URI(parsed.getProtocol(), host, parsed.getPath(),
          parsed.getQuery(), null).toASCIIString();
      int paramsStart = encoded.indexOf('?');
      if (paramsStart > 0 && paramsStart + 1 < encoded.length())
        encoded = encoded.substring(0, paramsStart + 1)
                  + encoded.substring(paramsStart + 1).replace(""+"", ""%2B"");
      return encoded;
    } catch (URISyntaxException e) {
      IOException io = new IOException(""Parsing URI failed"");
      io.initCause(e);
      throw new HttpRequestException(io);
    }
  }","  public void test6989()  throws Throwable  {
      String string0 = HttpRequest.Base64.encode(""jkfIYDxRQ"");
}"
6990,,"  public void test6990()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6991,,"  public void test6991()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6992,,"  public void test6992()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6993,,"  public void test6993()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6994,,"  public void test6994()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6995,,"  public void test6995()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6996,,"  public void test6996()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6997,,"  public void test6997()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6998,,"  public void test6998()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
6999,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test6999()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
7000,,"  public void test7000()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
}"
7001,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7001()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7002,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7002()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7003,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7003()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7004,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7004()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7005,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7005()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7006,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7006()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7007,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7007()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7008,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7008()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7009,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7009()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7010,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test7010()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7011,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test7011()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7012,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test7012()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7013,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7013()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7014,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7014()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
}"
7015,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7015()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
}"
7016,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7016()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
7017,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7017()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
7018,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7018()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
7019,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7019()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
}"
7020,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7020()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
7021,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7021()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
7022,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7022()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
7023,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7023()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
7024,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7024()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
7025,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7025()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
}"
7026,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7027,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7027()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7028,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7028()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7029,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7029()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7030,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7030()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7031,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7031()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7032,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7032()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7033,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7033()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7034,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7034()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7035,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test7035()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7036,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test7036()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7037,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test7037()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7038,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7038()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7039,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7039()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7040,"  protected Map<String, String> getParams(final String header) {
    if (header == null || header.length() == 0)
      return Collections.emptyMap();

    final int headerLength = header.length();
    int start = header.indexOf(';') + 1;
    if (start == 0 || start == headerLength)
      return Collections.emptyMap();

    int end = header.indexOf(';', start);
    if (end == -1)
      end = headerLength;

    Map<String, String> params = new LinkedHashMap<String, String>();
    while (start < end) {
      int nameEnd = header.indexOf('=', start);
      if (nameEnd != -1 && nameEnd < end) {
        String name = header.substring(start, nameEnd).trim();
        if (name.length() > 0) {
          String value = header.substring(nameEnd + 1, end).trim();
          int length = value.length();
          if (length != 0)
            if (length > 2 && '""' == value.charAt(0)
                && '""' == value.charAt(length - 1))
              params.put(name, value.substring(1, length - 1));
            else
              params.put(name, value);
        }
      }

      start = end + 1;
      end = header.indexOf(';', start);
      if (end == -1)
        end = headerLength;
    }

    return params;
  }","  public void test7040()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(""*JodChI+"", objectArray0);
      PrintStream printStream1 = mockPrintStream0.format(""TRACE"", objectArray0);
      Map<String, String> map0 = httpRequest0.getParams(""boundary"");
}"
7041,,"  public void test7041()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7042,,"  public void test7042()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7043,,"  public void test7043()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7044,,"  public void test7044()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7045,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test7045()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7046,,"  public void test7046()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7047,,"  public void test7047()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7048,,"  public void test7048()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7049,,"  public void test7049()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7050,,"  public void test7050()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7051,,"  public void test7051()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
}"
7052,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7052()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7053,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7053()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7054,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7054()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7055,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7055()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7056,"  public String toString() {
    return method() + ' ' + url();
  }","  public void test7056()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7057,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7057()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7058,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7058()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7059,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7059()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7060,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7060()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7061,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7061()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7062,"  public HttpRequest ignoreCloseExceptions(final boolean ignore) {
    ignoreCloseExceptions = ignore;
    return this;
  }","  public void test7062()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7063,"  public HttpRequest bufferSize(final int size) {
    if (size < 1)
      throw new IllegalArgumentException(""Size must be greater than zero"");
    bufferSize = size;
    return this;
  }","  public void test7063()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7064,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7064()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
}"
7065,"  public static HttpRequest trace(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_TRACE);
  }","  public void test7065()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
}"
7066,"  public HttpURLConnection getConnection() {
    if (connection == null)
      connection = createConnection();
    return connection;
  }","  public void test7066()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""boundary"");
      URL uRL0 = MockURL.getFtpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      HttpRequest httpRequest1 = httpRequest0.closeOutput();
      httpRequest0.useProxy("" r<gwI"", 28);
      Object[] objectArray0 = new Object[0];
      HttpRequest.append((CharSequence) ""Content-Length"", objectArray0);
      // Undeclared exception!
      try {
        httpRequest1.getConnection();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
7067,"  public static HttpRequest get(final CharSequence url)
      throws HttpRequestException {
    return new HttpRequest(url, METHOD_GET);
  }","  public void test7067()  throws Throwable  {
      String string0 = HttpRequest.ENCODING_GZIP;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ""gzip"";
      objectArray0[2] = objectArray0[2];
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) ""gzip"";
      HttpRequest.append((CharSequence) ""gzip"", objectArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HashMap<SQLException, DataTruncation> hashMap0 = new HashMap<SQLException, DataTruncation>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(""gzip?gzip=&null=&java.lang.Object@192e4256=gzip"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""gzip"", ""q#Kse"", (-2780), sQLIntegrityConstraintViolationException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(""q#Kse"", ""@me4*K'rI(_"", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""q#Kse"", ""Location"", 4363, sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(""@me4*K'rI(_"", sQLFeatureNotSupportedException0);
      DataTruncation dataTruncation0 = new DataTruncation((-20), true, true, 1928, 4363);
      hashMap0.put(sQLNonTransientConnectionException1, dataTruncation0);
      // Undeclared exception!
      try {
        HttpRequest.get((CharSequence) ""gzip?gzip=&null=&java.lang.Object@192e4256=gzip"", (Map<?, ?>) hashMap0, true);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.net.MalformedURLException: no protocol: gzip?gzip=&null=&java.lang.Object@192e4256=gzip&java.sql.SQLNonTransientConnectionException@0000000001[]=java.sql.DataTruncation: Data truncation
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
7068,"  protected HttpRequest startPart() throws IOException {
    if (!multipart) {
      multipart = true;
      contentType(CONTENT_TYPE_MULTIPART).openOutput();
      output.write(""--"" + BOUNDARY + CRLF);
    } else
      output.write(CRLF + ""--"" + BOUNDARY + CRLF);
    return this;
  }","  public void test7068()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      httpRequest0.header((String) null);
      httpRequest0.getConnection();
      try {
        httpRequest0.startPart();
        fail(""Expecting exception: UnknownServiceException"");
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
      }
  }"
7069,"  public HttpRequest part(final String name, final String part) {
    return part(name, null, part);
  }","  public void test7069()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)113;
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""zG>0L_#O"");
      HttpRequest httpRequest0 = HttpRequest.head(uRL1);
      File file0 = MockFile.createTempFile(""UTF-8"", ""If-None-Match"");
      // Undeclared exception!
      try {
        httpRequest0.part(""7L57L1ll"", file0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
7070,"  public HttpRequest receive(final File file) throws HttpRequestException {
    final OutputStream output;
    try {
      output = new BufferedOutputStream(new FileOutputStream(file), bufferSize);
    } catch (FileNotFoundException e) {
      throw new HttpRequestException(e);
    }
    return new CloseOperation<HttpRequest>(output, ignoreCloseExceptions) {

      @Override
      protected HttpRequest run() throws HttpRequestException, IOException {
        return receive(output);
      }
    }.call();
  }","  public void test7070()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.post(uRL0);
      String string0 = ""*\""3a<"";
      MockFileWriter mockFileWriter0 = new MockFileWriter(""POST"");
      try {
        httpRequest0.receive((Writer) mockFileWriter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
7071,"  public HttpRequest part(final String name, final String part) {
    return part(name, null, part);
  }","  public void test7071()  throws Throwable  {
      HttpRequest.proxyPort(0);
      HttpRequest httpRequest0 = HttpRequest.post((URL) null);
      // Undeclared exception!
      try {
        httpRequest0.part(""Server"", ""Content-Type"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
7072,"  public HttpRequest form(final Map<?, ?> values) throws HttpRequestException {
    return form(values, CHARSET_UTF8);
  }","  public void test7072()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.get(uRL0);
      boolean boolean0 = false;
      HttpRequest httpRequest1 = httpRequest0.followRedirects(false);
      String string0 = ""charset"";
      HttpRequest httpRequest2 = httpRequest1.header(""Content-Encoding"", ""charset"");
      httpRequest2.acceptJson();
      boolean boolean1 = true;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ""e{"";
      objectArray0[1] = (Object) httpRequest0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", ""Location"");
      SQLDataException sQLDataException0 = new SQLDataException(""gzip"", ""Cannot serialize a null array."");
      AbstractMap.SimpleEntry<SQLNonTransientConnectionException, SQLDataException> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<SQLNonTransientConnectionException, SQLDataException>(sQLNonTransientConnectionException0, sQLDataException0);
      try {
        httpRequest1.form((Map.Entry<?, ?>) abstractMap_SimpleEntry0, ""b"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.net.UnknownServiceException: protocol doesn't support output
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
7073,"  public HttpRequest receive(final File file) throws HttpRequestException {
    final OutputStream output;
    try {
      output = new BufferedOutputStream(new FileOutputStream(file), bufferSize);
    } catch (FileNotFoundException e) {
      throw new HttpRequestException(e);
    }
    return new CloseOperation<HttpRequest>(output, ignoreCloseExceptions) {

      @Override
      protected HttpRequest run() throws HttpRequestException, IOException {
        return receive(output);
      }
    }.call();
  }","  public void test7073()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = HttpRequest.trace(uRL0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Content-Type"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      MockPrintStream mockPrintStream1 = new MockPrintStream(""Content-Length"");
      PrintStream printStream0 = mockPrintStream0.format(""TRACE"", objectArray0);
      httpRequest0.getParams(""GET"");
      try {
        httpRequest0.receive(printStream0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException(""com.github.kevinsawicki.http.HttpRequest"", e);
      }
  }"
