17946
Test: public void testFor() { test("for(a = 0; a < 2 ; a++) foo();", "a = 0; for(; a < 2 ; a++) foo()"); test("for(var a = 0; c < b ; c++) foo()", "var a = 0; for(; c < b ; c++) foo()"); test("a:for(var a = 0; c < b ; c++) foo()", "var a = 0; a:for(; c < b ; c++) foo()"); test("a:b:for(var a = 0; c < b ; c++) foo()", "var a = 0; a:b:for(; c < b ; c++) foo()"); test("if(x) for(var a = 0; c < b ; c++) foo()", "if(x){var a = 0; for(; c < b ; c++) foo()}"); test("for(init(); a < 2 ; a++) foo();", "init(); for(; a < 2 ; a++) foo()"); }
Code: public void init(JSSourceFile[] externs, JSModule[] modules, CompilerOptions options) { initOptions(options); checkFirstModule(modules); fillEmptyModules(modules); this.externs = makeCompilerInput(externs, true); this.modules = modules; try { this.moduleGraph = new JSModuleGraph(modules); } catch (JSModuleGraph.ModuleDependenceException e) { report(JSError.make(MODULE_DEPENDENCY_ERROR, e.getModule().getName(), e.getDependentModule().getName())); return; } this.inputs = getAllInputsFromModules(); initBasedOnOptions(); initInputsByNameMap(); }
tensor([[0.0232, 0.0188, 0.0527,  ..., 0.0373, 0.0272, 0.0100],
        [0.0200, 0.0167, 0.0574,  ..., 0.0433, 0.0325, 0.0096],
        [0.0187, 0.0153, 0.0509,  ..., 0.0396, 0.0291, 0.0074],
        ...,
        [0.0235, 0.0170, 0.0611,  ..., 0.0364, 0.0289, 0.0078],
        [0.0175, 0.0130, 0.0666,  ..., 0.0331, 0.0354, 0.0078],
        [0.0181, 0.0162, 0.0626,  ..., 0.0417, 0.0273, 0.0091]])