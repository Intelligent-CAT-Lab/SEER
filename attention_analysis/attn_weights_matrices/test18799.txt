18799
Test: public void test085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test085"); com.google.javascript.jscomp.CheckLevel checkLevel6 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType9 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError17 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel6, diagnosticType9, strArray16); com.google.javascript.rhino.Node node18 = jSError17.node; boolean boolean20 = jSError17.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel21 = jSError17.level; java.lang.String str22 = jSError17.description; com.google.javascript.jscomp.DiagnosticType diagnosticType25 = com.google.javascript.jscomp.DiagnosticType.error(": hi!", "WARNING"); com.google.javascript.jscomp.CheckLevel checkLevel26 = diagnosticType25.defaultLevel; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter27 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel31 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType34 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError42 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel31, diagnosticType34, strArray41); com.google.javascript.rhino.Node node43 = jSError42.node; boolean boolean45 = jSError42.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel46 = jSError42.level; java.lang.String str47 = lightweightMessageFormatter27.getLevelName(checkLevel46); com.google.javascript.jscomp.CheckLevel checkLevel51 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType54 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError62 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel51, diagnosticType54, strArray61); com.google.javascript.rhino.Node node63 = jSError62.node; java.lang.String str64 = lightweightMessageFormatter27.formatError(jSError62); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider65 = lightweightMessageFormatter27.getSource(); java.lang.String str66 = jSError17.format(checkLevel26, (com.google.javascript.jscomp.MessageFormatter) lightweightMessageFormatter27); com.google.javascript.jscomp.DiagnosticType diagnosticType69 = com.google.javascript.jscomp.DiagnosticType.warning(": hi!", "ERROR - hi!\n"); com.google.javascript.jscomp.CheckLevel checkLevel73 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean74 = checkLevel73.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType77 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray78 = null; java.lang.String str79 = diagnosticType77.format(objArray78); java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError83 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel73, diagnosticType77, strArray82); com.google.javascript.jscomp.JSError jSError84 = com.google.javascript.jscomp.JSError.make("", (int) ' ', 100, checkLevel26, diagnosticType69, strArray82); java.text.MessageFormat messageFormat85 = diagnosticType69.format; }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0101, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0080, 0.0071, 0.0050,  ..., 0.0066, 0.0127, 0.0027],
        [0.0087, 0.0070, 0.0034,  ..., 0.0057, 0.0145, 0.0021],
        ...,
        [0.0090, 0.0075, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0094, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0085, 0.0043,  ..., 0.0104, 0.0169, 0.0027]])