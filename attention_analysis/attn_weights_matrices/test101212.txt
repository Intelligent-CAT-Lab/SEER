101212
Test: public void test0304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0304"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean2 = iSOChronology0.equals((java.lang.Object) iSOChronology1); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay(); org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfHalfday(); org.joda.time.Chronology chronology5 = iSOChronology0.withUTC(); org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfHour(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField8 = new org.joda.time.field.OffsetDateTimeField(dateTimeField6, 818); int int9 = offsetDateTimeField8.getMinimumValue(); long long11 = offsetDateTimeField8.roundHalfCeiling(0L); long long14 = offsetDateTimeField8.add((long) 2765586, 17); org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); long long17 = julianChronology15.calculateFirstDayOfYearMillis(7); long long20 = julianChronology15.getYearDifference(0L, (long) 870); int int22 = julianChronology15.getWeekOfWeekyear((long) (short) 100); long long23 = julianChronology15.getAverageMillisPerYear(); org.joda.time.chrono.GJYearOfEraDateTimeField gJYearOfEraDateTimeField24 = new org.joda.time.chrono.GJYearOfEraDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField8, (org.joda.time.chrono.BasicChronology) julianChronology15); org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean27 = iSOChronology25.equals((java.lang.Object) iSOChronology26); org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField30 = gJChronology29.yearOfCentury(); org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology29); org.joda.time.DurationField durationField32 = gJChronology29.eras(); org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology29); int[] intArray35 = iSOChronology26.get((org.joda.time.ReadablePartial) localDate33, (-1123200000L)); org.joda.time.LocalDate localDate37 = localDate33.minusDays(100); java.util.Locale locale38 = null; try { java.lang.String str39 = offsetDateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDate37, locale38); } catch (java.lang.IllegalArgumentException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])