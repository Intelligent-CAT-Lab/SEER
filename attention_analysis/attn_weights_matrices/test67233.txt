67233
Test: public void test45() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test45"); com.fasterxml.jackson.core.ObjectCodec objectCodec0 = null; com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer2 = new com.fasterxml.jackson.databind.util.TokenBuffer(objectCodec0, false); boolean boolean3 = tokenBuffer2._hasNativeTypeIds; com.fasterxml.jackson.databind.node.NullNode nullNode4 = com.fasterxml.jackson.databind.node.NullNode.instance; com.fasterxml.jackson.core.JsonToken jsonToken5 = nullNode4.asToken(); com.fasterxml.jackson.databind.node.ShortNode shortNode7 = com.fasterxml.jackson.databind.node.ShortNode.valueOf((short) (byte) 100); tokenBuffer2._append(jsonToken5, (java.lang.Object) shortNode7); java.math.BigDecimal bigDecimal9 = null; tokenBuffer2.writeNumber(bigDecimal9); tokenBuffer2.writeEndObject(); com.fasterxml.jackson.core.ObjectCodec objectCodec12 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator13 = tokenBuffer2.setCodec(objectCodec12); }
Code: public TokenBuffer(JsonParser p, DeserializationContext ctxt) { _objectCodec = p.getCodec(); _generatorFeatures = DEFAULT_GENERATOR_FEATURES; _writeContext = JsonWriteContext.createRootContext(null); _first = _last = new Segment(); _appendAt = 0; _hasNativeTypeIds = p.canReadTypeId(); _hasNativeObjectIds = p.canReadObjectId(); _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds; _forceBigDecimal = (ctxt == null) ? false : ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS); }
tensor([[0.0176, 0.0161, 0.0241,  ..., 0.0174, 0.0288, 0.0081],
        [0.0146, 0.0169, 0.0301,  ..., 0.0126, 0.0370, 0.0068],
        [0.0135, 0.0170, 0.0232,  ..., 0.0136, 0.0307, 0.0076],
        ...,
        [0.0178, 0.0153, 0.0274,  ..., 0.0124, 0.0242, 0.0096],
        [0.0145, 0.0150, 0.0304,  ..., 0.0101, 0.0276, 0.0075],
        [0.0125, 0.0143, 0.0270,  ..., 0.0118, 0.0256, 0.0070]])