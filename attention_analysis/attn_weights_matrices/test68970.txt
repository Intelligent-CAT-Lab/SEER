68970
Test: public void test569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test569"); org.jsoup.select.Evaluator.IsOnlyChild isOnlyChild0 = new org.jsoup.select.Evaluator.IsOnlyChild(); org.jsoup.select.StructuralEvaluator.PreviousSibling previousSibling1 = new org.jsoup.select.StructuralEvaluator.PreviousSibling((org.jsoup.select.Evaluator) isOnlyChild0); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan3 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) '4'); org.jsoup.nodes.Document document5 = org.jsoup.nodes.Document.createShell("hi!"); java.util.List<org.jsoup.nodes.TextNode> textNodeList6 = document5.textNodes(); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell("hi!"); boolean boolean9 = indexGreaterThan3.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document8); org.jsoup.select.CombiningEvaluator.Or or10 = new org.jsoup.select.CombiningEvaluator.Or(); java.lang.String str11 = or10.toString(); java.util.ArrayList<org.jsoup.select.Evaluator> evaluatorList12 = or10.evaluators; org.jsoup.select.CombiningEvaluator.And and13 = new org.jsoup.select.CombiningEvaluator.And((java.util.Collection<org.jsoup.select.Evaluator>) evaluatorList12); org.jsoup.nodes.Element element14 = null; org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan16 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) '4'); org.jsoup.nodes.Document document18 = org.jsoup.nodes.Document.createShell("hi!"); java.util.List<org.jsoup.nodes.TextNode> textNodeList19 = document18.textNodes(); org.jsoup.nodes.Document document21 = org.jsoup.nodes.Document.createShell("hi!"); boolean boolean22 = indexGreaterThan16.matches((org.jsoup.nodes.Element) document18, (org.jsoup.nodes.Element) document21); boolean boolean23 = and13.matches(element14, (org.jsoup.nodes.Element) document18); boolean boolean24 = previousSibling1.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document18); org.jsoup.nodes.Element element26 = document5.addClass("\n<!--:lt(100)-->"); }
Code: public String toString() { return String.format(":matchesOwn(%s)", pattern); }
tensor([[0.1304, 0.1684, 0.1750, 0.1676, 0.1428, 0.0834, 0.0782, 0.0542],
        [0.1319, 0.1535, 0.1868, 0.1891, 0.1327, 0.0858, 0.0719, 0.0484],
        [0.0944, 0.2417, 0.1621, 0.1688, 0.1422, 0.0882, 0.0581, 0.0444],
        [0.1210, 0.1809, 0.1282, 0.1870, 0.1402, 0.0831, 0.0924, 0.0671],
        [0.0990, 0.2299, 0.1480, 0.1851, 0.1452, 0.0652, 0.0763, 0.0512],
        [0.0853, 0.1450, 0.1688, 0.2071, 0.1744, 0.1074, 0.0666, 0.0453],
        [0.0988, 0.1765, 0.1691, 0.2085, 0.1507, 0.0720, 0.0724, 0.0519],
        [0.0875, 0.1604, 0.1813, 0.2032, 0.1848, 0.0888, 0.0493, 0.0448]])