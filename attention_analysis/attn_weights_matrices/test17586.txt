17586
Test: public void testComplexNamespace() throws Exception { String js = "var goog = {};" + "goog.foo = {};" + "goog.foo.bar = 5;"; TypeCheckResult p = parseAndTypeCheckWithScope(js); JSType googScopeType = p.scope.getVar("goog").getType(); Node varNode = p.root.getFirstChild(); JSType googNodeType = varNode.getFirstChild().getJSType(); Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild(); JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType(); JSType googFooType = ((ObjectType) googScopeType).getPropertyType("foo"); Node getpropFoo2 = varNode.getNext().getNext() .getFirstChild().getFirstChild().getFirstChild(); JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType(); JSType googFooGetprop2Type = getpropFoo2.getJSType(); ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type; }
Code: public JSType getPropertyType(String name) { if ("prototype".equals(name)) { return getPrototype(); } else { if (!hasOwnProperty(name)) { if ("call".equals(name)) { Node params = getParametersNode(); if (params == null) { defineDeclaredProperty(name, new FunctionType(registry, null, null, null, getReturnType()), false); } else { params = params.cloneTree(); Node thisTypeNode = Node.newString(Token.NAME, "thisType"); thisTypeNode.setJSType( registry.createOptionalNullableType(getTypeOfThis())); params.addChildToFront(thisTypeNode); thisTypeNode.setOptionalArg(true); defineDeclaredProperty(name, new FunctionType(registry, null, null, params, getReturnType()), false); } } else if ("apply".equals(name)) { FunctionParamBuilder builder = new FunctionParamBuilder(registry); builder.addOptionalParams( registry.createNullableType(getTypeOfThis()), registry.createNullableType( registry.getNativeType(JSTypeNative.OBJECT_TYPE))); defineDeclaredProperty(name, new FunctionType(registry, null, null, builder.build(), getReturnType()), false); } } return super.getPropertyType(name); } }
tensor([[0.0066, 0.0167, 0.0063,  ..., 0.0091, 0.0028, 0.0028],
        [0.0045, 0.0206, 0.0075,  ..., 0.0067, 0.0023, 0.0023],
        [0.0061, 0.0171, 0.0083,  ..., 0.0089, 0.0028, 0.0028],
        ...,
        [0.0068, 0.0138, 0.0066,  ..., 0.0093, 0.0035, 0.0035],
        [0.0049, 0.0176, 0.0068,  ..., 0.0078, 0.0024, 0.0024],
        [0.0049, 0.0176, 0.0068,  ..., 0.0078, 0.0024, 0.0024]])