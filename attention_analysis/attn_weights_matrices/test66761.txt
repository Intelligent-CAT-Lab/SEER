66761
Test: public void testMapperFailOnTrailing() throws Exception { ObjectMapper strict = newObjectMapper() .enable(DeserializationFeature.FAIL_ON_TRAILING_TOKENS); _verifyArray(strict.readTree(JSON_OK_ARRAY)); _verifyCollection(strict.readValue(JSON_OK_ARRAY, List.class)); try { strict.readTree(JSON_FAIL_ARRAY); fail("Should not have passed"); } catch (MismatchedInputException e) { verifyException(e, "Trailing token (of type START_ARRAY)"); verifyException(e, "value (bound as `com.fasterxml.jackson.databind.JsonNode`)"); } try { strict.readValue(JSON_FAIL_ARRAY, List.class); fail("Should not have passed"); } catch (MismatchedInputException e) { verifyException(e, "Trailing token (of type START_ARRAY)"); verifyException(e, "value (bound as `java.util.List`)"); } try { strict.readValue(JSON_OK_ARRAY_WITH_COMMENT, List.class); fail("Should not have passed"); } catch (JsonParseException e) { verifyException(e, "Unexpected character"); verifyException(e, "maybe a (non-standard) comment"); } try { strict.readTree(JSON_OK_ARRAY_WITH_COMMENT); fail("Should not have passed"); } catch (JsonParseException e) { verifyException(e, "Unexpected character"); verifyException(e, "maybe a (non-standard) comment"); } ObjectReader strictWithComments = strict.reader() .with(JsonReadFeature.ALLOW_JAVA_COMMENTS); _verifyArray(strictWithComments.readTree(JSON_OK_ARRAY_WITH_COMMENT)); _verifyCollection((List<?>) strictWithComments.forType(List.class) .readValue(JSON_OK_ARRAY_WITH_COMMENT)); }
Code: public <T extends TreeNode> T readTree(JsonParser p) throws IOException { return (T) _bindAsTree(p); }
[[0.0657052  0.06326991 0.04600329 0.12247596 0.04287294 0.06815942
 0.08605979 0.15464774 0.03432636 0.08901055 0.07248406 0.07040844
 0.05627497 0.02830139]
[0.04935908 0.07694592 0.04871291 0.14523175 0.02890295 0.07210292
 0.06750189 0.17429687 0.02447622 0.08039548 0.06924251 0.06164753
 0.08242475 0.01875928]
[0.06462383 0.05429569 0.04610927 0.11761858 0.04148915 0.06625139
 0.08063719 0.1386392  0.03436109 0.10687226 0.08044161 0.06940652
 0.06826786 0.03098645]
[0.05324153 0.06485912 0.05081689 0.12871969 0.03218694 0.06833979
 0.06839573 0.16717485 0.03352749 0.10258687 0.06878582 0.05982304
 0.06841976 0.03312252]
[0.0546498  0.0616701  0.04511215 0.12595123 0.03153499 0.07844723
 0.07597806 0.17423332 0.04146171 0.08531453 0.06353036 0.06510023
 0.07299303 0.02402331]
[0.07324719 0.0527567  0.04582642 0.12480462 0.04205101 0.07388555
 0.08170433 0.1405938  0.03677713 0.08072214 0.08382551 0.06764029
 0.06927537 0.02688987]
[0.04742459 0.05415558 0.04908317 0.1384713  0.02411222 0.05831309
 0.06954858 0.2037776  0.03386492 0.09347968 0.07642042 0.05706642
 0.06950201 0.02478039]
[0.04465221 0.05437167 0.04150128 0.12249415 0.02163755 0.06201964
 0.07328968 0.22319308 0.02738979 0.10236992 0.07200477 0.06073224
 0.07399049 0.02035353]
[0.05071855 0.05108058 0.04913776 0.14030643 0.03026714 0.07501448
 0.0672849  0.19666845 0.02751032 0.08565476 0.07216659 0.06397288
 0.071627   0.01859021]
[0.06562865 0.06002455 0.05393786 0.10313921 0.03544048 0.06956621
 0.07461201 0.11718757 0.04319027 0.10016962 0.07622853 0.08559011
 0.07911244 0.03617252]
[0.04624622 0.07487787 0.06018979 0.12489657 0.02616184 0.06455514
 0.08574995 0.17860496 0.03456511 0.08638072 0.06783421 0.06188642
 0.06417404 0.02387716]
[0.06744394 0.06171813 0.0531951  0.11681321 0.03457564 0.06391101
 0.07883528 0.16216049 0.03701521 0.09630128 0.06860786 0.06583907
 0.06559528 0.02798856]
[0.05720697 0.0503151  0.05409867 0.12543386 0.03551327 0.07709395
 0.0874535  0.15361217 0.03708997 0.09343852 0.07107298 0.05993494
 0.07263486 0.02510118]
[0.04167374 0.0580147  0.04871842 0.12476945 0.02927439 0.07232609
 0.06156489 0.1756956  0.03293478 0.10463583 0.09030476 0.06562505
 0.07182644 0.02263582]]