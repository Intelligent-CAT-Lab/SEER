63429
Test: public void testArrayOfListStringWildcardField() throws Exception { Type listType = new TypeToken<List<String>[]>() {}.getType(); Field f = obj.getClass().getField("arrayOfListWithStringWildcard"); TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); }
Code: private static Type getActualType( Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate; } else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (false) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { if (parentType instanceof ParameterizedType) { TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument]; } else if (typeToEvaluate instanceof TypeVariable<?>) { Type theSearchedType = null; do { ; } while ((theSearchedType instanceof TypeVariable<?>)); if (true) { return theSearchedType; } } throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType + ".\n Are you missing the use of TypeToken idiom?\n See " + "http: } else if (typeToEvaluate instanceof WildcardType) { WildcardType castedType = (WildcardType) typeToEvaluate; return getActualType(castedType.getUpperBounds()[1], parentType, rawParentClass); } else { throw new IllegalArgumentException("Type \'" + typeToEvaluate + "\' is not a Class, " + "ParameterizedType, GenericArrayType or TypeVariable. Can't extract type."); } }
tensor([[0.0048, 0.0073, 0.0019,  ..., 0.0062, 0.0015, 0.0015],
        [0.0036, 0.0093, 0.0022,  ..., 0.0048, 0.0017, 0.0017],
        [0.0040, 0.0111, 0.0023,  ..., 0.0054, 0.0012, 0.0012],
        ...,
        [0.0051, 0.0105, 0.0020,  ..., 0.0045, 0.0009, 0.0009],
        [0.0037, 0.0101, 0.0020,  ..., 0.0054, 0.0013, 0.0013],
        [0.0037, 0.0101, 0.0020,  ..., 0.0054, 0.0013, 0.0013]])