101243
Test: public void test216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test216"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.minuteOfHour(); org.joda.time.chrono.GJChronology gJChronology2 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField3 = gJChronology2.yearOfEra(); int int5 = dateTimeField3.getMinimumValue(0L); org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyearOfCentury(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField8 = new org.joda.time.field.OffsetDateTimeField(dateTimeField3, dateTimeFieldType6, (int) (short) 10); org.joda.time.DurationField durationField9 = offsetDateTimeField8.getRangeDurationField(); long long12 = offsetDateTimeField8.add((-31535999990L), (long) (byte) 0); org.joda.time.field.SkipDateTimeField skipDateTimeField13 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) gJChronology0, (org.joda.time.DateTimeField) offsetDateTimeField8); long long16 = skipDateTimeField13.getDifferenceAsLong((long) 7, (long) '4'); java.util.Locale locale18 = null; java.lang.String str19 = skipDateTimeField13.getAsText((int) (byte) 0, locale18); org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime21 = localDate20.toDateTimeAtCurrentTime(); org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDate20.getFields(); org.joda.time.LocalDate.Property property23 = localDate20.centuryOfEra(); org.joda.time.chrono.GJChronology gJChronology24 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField25 = gJChronology24.minuteOfHour(); org.joda.time.DateTimeField dateTimeField26 = gJChronology24.hourOfDay(); org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) gJChronology24); org.joda.time.DateTimeField dateTimeField28 = gJChronology24.hourOfHalfday(); org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.dayOfMonth(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField31 = new org.joda.time.field.OffsetDateTimeField(dateTimeField28, dateTimeFieldType29, 100); int int32 = localDate20.get(dateTimeFieldType29); int[] intArray34 = null; int[] intArray36 = skipDateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) localDate20, (int) (short) 10, intArray34, (int) (short) 0); org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime38 = localDate37.toDateTimeAtCurrentTime(); org.joda.time.LocalDate localDate40 = localDate37.withCenturyOfEra(9700); boolean boolean41 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate40); }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])