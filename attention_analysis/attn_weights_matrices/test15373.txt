15373
Test: public void test725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test725"); org.apache.commons.cli.Option option3 = new org.apache.commons.cli.Option("", true, "[ option: [ARG] :: hi! :: class java.lang.String ]"); org.apache.commons.cli.DefaultParser defaultParser4 = new org.apache.commons.cli.DefaultParser(); org.apache.commons.cli.Options options5 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Options options10 = options5.addOption("", "hi!", false, ""); boolean boolean12 = options5.hasLongOption(""); org.apache.commons.cli.Options options16 = options5.addOption("", false, "[ Options: [ short {=[ option: :: :: class java.lang.String ]} ] [ long {} ]"); java.lang.String[] strArray17 = null; org.apache.commons.cli.CommandLine commandLine19 = defaultParser4.parse(options16, strArray17, true); org.apache.commons.cli.Option option23 = new org.apache.commons.cli.Option("", true, "hi!"); java.lang.Object obj24 = option23.getType(); java.lang.Object obj25 = option23.getType(); defaultParser4.currentOption = option23; boolean boolean27 = option3.equals((java.lang.Object) defaultParser4); java.lang.String str28 = defaultParser4.currentToken; org.apache.commons.cli.Options options29 = defaultParser4.options; java.util.List<java.lang.String> strList31 = options29.getMatchingOptions(""); try { org.apache.commons.cli.Options options35 = options29.addOption("org.apache.commons.cli.MissingArgumentException: Missing argument for option: ", true, "[ option: [ Options: [ short {=[ option: hi! :: :: class java.lang.String ]} ] [ long {hi!=[ option: hi! :: :: class java.lang.String ]} ] [ARG] :: hi! :: class org.apache.commons.cli.Option ]"); } catch (java.lang.IllegalArgumentException e) { } }
Code: public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if(longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); } } return matchingOpts; }
tensor([[0.0302, 0.0267, 0.0587,  ..., 0.0331, 0.0092, 0.0127],
        [0.0289, 0.0257, 0.0480,  ..., 0.0371, 0.0114, 0.0121],
        [0.0200, 0.0204, 0.0555,  ..., 0.0387, 0.0091, 0.0095],
        ...,
        [0.0215, 0.0215, 0.0775,  ..., 0.0316, 0.0063, 0.0111],
        [0.0238, 0.0212, 0.0612,  ..., 0.0370, 0.0075, 0.0101],
        [0.0222, 0.0208, 0.0467,  ..., 0.0462, 0.0107, 0.0110]])