101161
Test: public void test0226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0226"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean2 = iSOChronology0.equals((java.lang.Object) iSOChronology1); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay(); long long6 = dateTimeField3.add((long) 197, (long) 870); org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay(); org.joda.time.Chronology chronology8 = null; boolean boolean9 = dateTimeFieldType7.isSupported(chronology8); org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField3, dateTimeFieldType7, 197); org.joda.time.field.RemainderDateTimeField remainderDateTimeField12 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11); org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField15 = gJChronology14.yearOfCentury(); org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology14); org.joda.time.DurationField durationField17 = gJChronology14.eras(); org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology14); org.joda.time.ReadablePeriod readablePeriod19 = null; org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (-28800000)); org.joda.time.LocalDate.Property property22 = localDate18.dayOfMonth(); org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField26 = gJChronology25.yearOfCentury(); org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology25); int int28 = dateTime27.getEra(); int int29 = dateTime27.getYear(); boolean boolean30 = instant24.isBefore((org.joda.time.ReadableInstant) dateTime27); org.joda.time.DateTime dateTime32 = dateTime27.withMillis((long) (-25200000)); org.joda.time.ReadablePeriod readablePeriod33 = null; org.joda.time.DateTime dateTime34 = dateTime32.plus(readablePeriod33); int int35 = dateTime32.getYear(); int int36 = property22.compareTo((org.joda.time.ReadableInstant) dateTime32); org.joda.time.chrono.GJChronology gJChronology37 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField38 = gJChronology37.yearOfCentury(); org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology37); org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField41 = gJChronology40.yearOfCentury(); org.joda.time.DateTime dateTime42 = dateTime39.withChronology((org.joda.time.Chronology) gJChronology40); long long44 = gJChronology40.gregorianToJulianByYear((long) 266); boolean boolean45 = property22.equals((java.lang.Object) gJChronology40); org.joda.time.LocalDate localDate47 = property22.addToCopy(622191604); org.joda.time.chrono.BasicChronology basicChronology49 = null; org.joda.time.chrono.GJEraDateTimeField gJEraDateTimeField50 = new org.joda.time.chrono.GJEraDateTimeField(basicChronology49); java.util.Locale locale51 = null; int int52 = gJEraDateTimeField50.getMaximumTextLength(locale51); org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology55 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField56 = gJChronology55.yearOfCentury(); org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology55); int int58 = dateTime57.getEra(); int int59 = dateTime57.getYear(); boolean boolean60 = instant54.isBefore((org.joda.time.ReadableInstant) dateTime57); org.joda.time.LocalDate localDate61 = dateTime57.toLocalDate(); org.joda.time.LocalDate localDate63 = localDate61.plusDays(2757764); int int64 = localDate63.getDayOfMonth(); org.joda.time.chrono.GJChronology gJChronology67 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField68 = gJChronology67.yearOfCentury(); org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology67); org.joda.time.DurationField durationField70 = gJChronology67.eras(); org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology67); org.joda.time.ReadablePeriod readablePeriod72 = null; org.joda.time.LocalDate localDate74 = localDate71.withPeriodAdded(readablePeriod72, (-28800000)); org.joda.time.LocalDate.Property property75 = localDate71.dayOfMonth(); int[] intArray76 = localDate71.getValues(); int[] intArray78 = gJEraDateTimeField50.addWrapField((org.joda.time.ReadablePartial) localDate63, 0, intArray76, 899); try { int[] intArray80 = dividedDateTimeField11.set((org.joda.time.ReadablePartial) localDate47, 436, intArray78, 197); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public long add(long instant, int value) { if (instant >= iCutover) { instant = iGregorianField.add(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { if (iConvertByWeekyear) { int wyear = iGregorianChronology.weekyear().get(instant); if (wyear <= 0) { instant = iGregorianChronology.weekyear().add(instant, -1); } } else { int year = iGregorianChronology.year().get(instant); if (year <= 0) { instant = iGregorianChronology.year().add(instant, -1); } } instant = gregorianToJulian(instant); } } } else { instant = iJulianField.add(instant, value); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; }
tensor([[0.0080, 0.0131, 0.0097,  ..., 0.0089, 0.0082, 0.0035],
        [0.0049, 0.0098, 0.0121,  ..., 0.0073, 0.0071, 0.0030],
        [0.0060, 0.0097, 0.0092,  ..., 0.0098, 0.0072, 0.0023],
        ...,
        [0.0051, 0.0137, 0.0110,  ..., 0.0074, 0.0088, 0.0029],
        [0.0065, 0.0110, 0.0090,  ..., 0.0095, 0.0086, 0.0023],
        [0.0057, 0.0092, 0.0083,  ..., 0.0123, 0.0088, 0.0031]])