28253
Test: public void test2() throws Throwable { Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X; Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer()); doReturn(false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble()); Line line0 = mock(Line.class, new ViolatedAssumptionAnswer()); doReturn(precision_DoubleEquivalence0).when(line0).getPrecision(); Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0); Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision(); Line line1 = new Line(vector2D_Unit0, (-11.9), precision_DoubleEquivalence1); AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createScale((-4147.236968782993), 877.080733214); Line line2 = line1.transform(affineTransformMatrix2D0); Line line3 = line2.reverse(); Segment segment1 = line3.segment((Vector2D) vector2D_Unit0, (Vector2D) vector2D_Unit0); double double0 = segment1.getSubspaceStart(); }
Code: public double getSubspaceStart() { return getLine().abscissa(startPoint); }
[[0.12138198 0.21067072 0.16837692 0.14996013 0.13211727 0.16837692
 0.04911605]
[0.09638105 0.21385449 0.17573197 0.15400177 0.1425685  0.17573196
 0.0417302 ]
[0.10521905 0.1977453  0.17666146 0.16101982 0.12755397 0.17666146
 0.05513891]
[0.12052633 0.16450168 0.162176   0.18418273 0.13996387 0.162176
 0.06647336]
[0.08993015 0.1981554  0.18714294 0.15971428 0.1333277  0.18714294
 0.04458664]
[0.10521905 0.1977453  0.17666146 0.16101982 0.12755397 0.17666146
 0.05513891]
[0.08478323 0.18134877 0.16373265 0.18798338 0.17652494 0.16373263
 0.04189442]]