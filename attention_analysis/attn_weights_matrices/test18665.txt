18665
Test: public void test161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test161"); com.google.javascript.jscomp.CheckLevel checkLevel3 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType6 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError14 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel3, diagnosticType6, strArray13); com.google.javascript.rhino.Node node15 = jSError14.node; boolean boolean17 = jSError14.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel18 = jSError14.level; java.lang.String str19 = jSError14.description; int int20 = jSError14.lineNumber; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter21 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel25 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType28 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError36 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel25, diagnosticType28, strArray35); com.google.javascript.rhino.Node node37 = jSError36.node; boolean boolean39 = jSError36.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel40 = jSError36.level; java.lang.String str41 = lightweightMessageFormatter21.getLevelName(checkLevel40); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider42 = lightweightMessageFormatter21.getSource(); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider43 = lightweightMessageFormatter21.getSource(); com.google.javascript.jscomp.DiagnosticType diagnosticType46 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); boolean boolean48 = diagnosticType46.equals((java.lang.Object) (byte) -1); java.lang.String str49 = diagnosticType46.key; com.google.javascript.jscomp.CheckLevel checkLevel50 = diagnosticType46.defaultLevel; java.lang.String str51 = lightweightMessageFormatter21.getLevelName(checkLevel50); com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter52 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider53 = lightweightMessageFormatter52.getSource(); java.lang.String str54 = jSError14.format(checkLevel50, (com.google.javascript.jscomp.MessageFormatter) lightweightMessageFormatter52); com.google.javascript.jscomp.DiagnosticType diagnosticType60 = com.google.javascript.jscomp.DiagnosticType.error("", "WARNING"); com.google.javascript.jscomp.CheckLevel checkLevel61 = diagnosticType60.defaultLevel; com.google.javascript.jscomp.CheckLevel checkLevel62 = diagnosticType60.defaultLevel; java.lang.String[] strArray63 = null; com.google.javascript.jscomp.JSError jSError64 = com.google.javascript.jscomp.JSError.make(". hi! at hi! line 1 : 100", 17, 0, diagnosticType60, strArray63); java.lang.String str65 = lightweightMessageFormatter52.formatError(jSError64); }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0103, 0.0080, 0.0055,  ..., 0.0071, 0.0176, 0.0033],
        [0.0082, 0.0074, 0.0052,  ..., 0.0069, 0.0131, 0.0028],
        [0.0089, 0.0073, 0.0036,  ..., 0.0059, 0.0149, 0.0021],
        ...,
        [0.0092, 0.0079, 0.0037,  ..., 0.0060, 0.0163, 0.0026],
        [0.0096, 0.0086, 0.0035,  ..., 0.0068, 0.0144, 0.0020],
        [0.0077, 0.0088, 0.0045,  ..., 0.0107, 0.0174, 0.0028]])