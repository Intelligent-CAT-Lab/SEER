,method,test
0,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("""");
      String string0 = CollectionExtractor.convertToString((Collection) linkedList0, ""Qz5Q])J(\"""", """");
}"
1,"    public static String extractToString(final Collection collection, final String propertyName,
                                         final String separator) {
        List list = extractToList(collection, propertyName);
        return StringUtils.join(list, separator);
    }","  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = CollectionExtractor.extractToString(linkedList0, ""hJ"", """");
}"
2,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("""");
      String string0 = CollectionExtractor.convertToString((Collection) linkedList0, """");
}"
3,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = CollectionExtractor.convertToString((Collection) linkedList0, ""s7uleJlM-8$]FeY"");
}"
4,"    public static String extractToString(final Collection collection, final String propertyName,
                                         final String separator) {
        List list = extractToList(collection, propertyName);
        return StringUtils.join(list, separator);
    }","  public void test4()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      List<Object> list0 = linkedList0.subList(1, 1);
      linkedList0.pop();
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToString(list0, ""org.springside.modules.web.CollectionExtractor"", ""hCT/%s6{>cQQhRRU$z8"");
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
5,"    public static String extractToString(final Collection collection, final String propertyName,
                                         final String separator) {
        List list = extractToList(collection, propertyName);
        return StringUtils.join(list, separator);
    }","  public void test5()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add((Object) linkedList1);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToString(linkedList1, "":\""Bl=_w_Cs#pf22"", (String) null);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
6,"    public static String extractToString(final Collection collection, final String propertyName,
                                         final String separator) {
        List list = extractToList(collection, propertyName);
        return StringUtils.join(list, separator);
    }","  public void test6()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToString(linkedList0, (String) null, ""set"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
7,"    public static Map extractToMap(final Collection collection, final String keyPropertyName,
                                   final String valuePropertyName) {
        Map map = new HashMap(collection.size());

        try {
            for (Object obj : collection) {
                map.put(ReflectionUtil.getProperty(obj, keyPropertyName),
                        ReflectionUtil.getProperty(obj, valuePropertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return map;
    }","  public void test7()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) ""Y:9~( Q%d,VEYN7JTN"");
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.retainAll(list0);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToMap(list0, ""org.springside.modules.web.CollectionExtractor"", ""org.springside.modules.web.CollectionExtractor"");
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
8,"    public static Map extractToMap(final Collection collection, final String keyPropertyName,
                                   final String valuePropertyName) {
        Map map = new HashMap(collection.size());

        try {
            for (Object obj : collection) {
                map.put(ReflectionUtil.getProperty(obj, keyPropertyName),
                        ReflectionUtil.getProperty(obj, valuePropertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return map;
    }","  public void test8()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.add((Object) list0);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToMap(linkedList0, ""j6"", ""j6"");
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
9,"    public static Map extractToMap(final Collection collection, final String keyPropertyName,
                                   final String valuePropertyName) {
        Map map = new HashMap(collection.size());

        try {
            for (Object obj : collection) {
                map.put(ReflectionUtil.getProperty(obj, keyPropertyName),
                        ReflectionUtil.getProperty(obj, valuePropertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return map;
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToMap((Collection) null, ""u?&i/|v8y"", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.web.CollectionExtractor"", e);
      }
  }"
10,"    public static Map extractToMap(final Collection collection, final String keyPropertyName,
                                   final String valuePropertyName) {
        Map map = new HashMap(collection.size());

        try {
            for (Object obj : collection) {
                map.put(ReflectionUtil.getProperty(obj, keyPropertyName),
                        ReflectionUtil.getProperty(obj, valuePropertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return map;
    }","  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToMap(linkedList0, ""nullnullnull"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
11,"    public static List extractToList(final Collection collection, final String propertyName) {
        List list = new ArrayList(collection.size());

        try {
            for (Object obj : collection) {
                list.add(ReflectionUtil.getProperty(obj, propertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return list;
    }","  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = linkedList0.subList(0, 0);
      linkedList0.add(""f<\"":I3N@t'{c^"");
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToList(list0, """");
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
12,"    public static List extractToList(final Collection collection, final String propertyName) {
        List list = new ArrayList(collection.size());

        try {
            for (Object obj : collection) {
                list.add(ReflectionUtil.getProperty(obj, propertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return list;
    }","  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.add((Object) list0);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToList(linkedList0, ""s7uleJlM-8$]FeY"");
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
13,"    public static List extractToList(final Collection collection, final String propertyName) {
        List list = new ArrayList(collection.size());

        try {
            for (Object obj : collection) {
                list.add(ReflectionUtil.getProperty(obj, propertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return list;
    }","  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add((Object) linkedList1);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToList(linkedList0, "", '"");
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
14,"    public static List extractToList(final Collection collection, final String propertyName) {
        List list = new ArrayList(collection.size());

        try {
            for (Object obj : collection) {
                list.add(ReflectionUtil.getProperty(obj, propertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return list;
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToList((Collection) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.web.CollectionExtractor"", e);
      }
  }"
15,"    public static List extractToList(final Collection collection, final String propertyName) {
        List list = new ArrayList(collection.size());

        try {
            for (Object obj : collection) {
                list.add(ReflectionUtil.getProperty(obj, propertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return list;
    }","  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToList(linkedList0, ""K$&72$zDIE4pI7zy"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
16,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = linkedList0.subList(0, 0);
      linkedList0.add("""");
      // Undeclared exception!
      try { 
        CollectionExtractor.convertToString((Collection) list0, (String) null, ""rI"");
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
17,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add((Object) linkedList1);
      // Undeclared exception!
      try { 
        CollectionExtractor.convertToString((Collection) linkedList0, ""n"", "":\""Bl=_w_Cs#pf22"");
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
18,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionExtractor.convertToString((Collection) null, (String) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.web.CollectionExtractor"", e);
      }
  }"
19,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<Integer> list0 = linkedList0.subList(0, 0);
      Integer integer0 = new Integer((-2286));
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        CollectionExtractor.convertToString((Collection) list0, "".uC{u=nJ;EZ6\""^k"");
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
20,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList0.add((Object) linkedList1);
      // Undeclared exception!
      try { 
        CollectionExtractor.convertToString((Collection) linkedList0, """");
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
21,"    public static List extractToList(final Collection collection, final String propertyName) {
        List list = new ArrayList(collection.size());

        try {
            for (Object obj : collection) {
                list.add(ReflectionUtil.getProperty(obj, propertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return list;
    }","  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("""");
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToList(linkedList0, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fieldName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
22,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = CollectionExtractor.convertToString((Collection) linkedList0, ""V.K)Y*"", "":\""Bl=_w_Cs#pf22"");
}"
23,"    public static String extractToString(final Collection collection, final String propertyName,
                                         final String separator) {
        List list = extractToList(collection, propertyName);
        return StringUtils.join(list, separator);
    }","  public void test23()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToString(linkedList0, "":\""Bl=_w_Cs#pf22"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [:\""Bl=_w_Cs#pf22] on target [[(this Collection)]]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
24,"    public static List extractToList(final Collection collection, final String propertyName) {
        List list = new ArrayList(collection.size());

        try {
            for (Object obj : collection) {
                list.add(ReflectionUtil.getProperty(obj, propertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return list;
    }","  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<Object> list0 = CollectionExtractor.extractToList(linkedList0, ""-<Ks6gt*xI"");
}"
25,"    public static Map extractToMap(final Collection collection, final String keyPropertyName,
                                   final String valuePropertyName) {
        Map map = new HashMap(collection.size());

        try {
            for (Object obj : collection) {
                map.put(ReflectionUtil.getProperty(obj, keyPropertyName),
                        ReflectionUtil.getProperty(obj, valuePropertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return map;
    }","  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""^wbX>@8\""q"");
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToMap(linkedList0, """", ""B6QF}^JQqpul"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fieldName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
26,"    public static Map extractToMap(final Collection collection, final String keyPropertyName,
                                   final String valuePropertyName) {
        Map map = new HashMap(collection.size());

        try {
            for (Object obj : collection) {
                map.put(ReflectionUtil.getProperty(obj, keyPropertyName),
                        ReflectionUtil.getProperty(obj, valuePropertyName));
            }
        } catch (Exception e) {
            throw ReflectionUtil.convertReflectionExceptionToUnchecked(e);
        }

        return map;
    }","  public void test26()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Map<Object, Object> map0 = CollectionExtractor.extractToMap(linkedList0, ""{}"", ""org.springside.modules.web.CollectionExtractor"");
}"
27,,"  public void test27()  throws Throwable  {
      CollectionExtractor collectionExtractor0 = new CollectionExtractor();
  }"
28,"    public static String convertToString(final Collection collection, final String separator) {
        return StringUtils.join(collection, separator);
    }","  public void test28()  throws Throwable  {
      String string0 = CollectionExtractor.convertToString((Collection) null, """");
}"
29,"    public static String extractToString(final Collection collection, final String propertyName,
                                         final String separator) {
        List list = extractToList(collection, propertyName);
        return StringUtils.join(list, separator);
    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionExtractor.extractToString((Collection) null, ""I2x,2HF-BPa&/"", ""I2x,2HF-BPa&/"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.web.CollectionExtractor"", e);
      }
  }"
30,"    public static Sampler sampler(double selectPercent) {
        return Sampler.create(selectPercent);
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentTools.sampler((-1.0));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid selectPercent value: -1.0
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
31,"    public static RateLimiter rateLimiter(int permitsPerSecond) {
        return RateLimiter.create(permitsPerSecond);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentTools.rateLimiter(0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // rate must be positive
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
32,"    public static CyclicBarrier cyclicBarrier(int count) {
        return new CyclicBarrier(count);
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentTools.cyclicBarrier(0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.CyclicBarrier"", e);
      }
  }"
33,"    public static CountDownLatch countDownLatch(int count) {
        return new CountDownLatch(count);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConcurrentTools.countDownLatch((-3099));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // count < 0
         //
         verifyException(""java.util.concurrent.CountDownLatch"", e);
      }
  }"
34,,"  public void test4()  throws Throwable  {
      ConcurrentTools concurrentTools0 = new ConcurrentTools();
  }"
35,"    public static CyclicBarrier cyclicBarrier(int count) {
        return new CyclicBarrier(count);
    }","  public void test5()  throws Throwable  {
      CyclicBarrier cyclicBarrier0 = ConcurrentTools.cyclicBarrier(17);
}"
36,"    public static Sampler sampler(double selectPercent) {
        return Sampler.create(selectPercent);
    }","  public void test6()  throws Throwable  {
      Sampler sampler0 = ConcurrentTools.sampler(17);
}"
37,"    public static CountDownLatch countDownLatch(int count) {
        return new CountDownLatch(count);
    }","  public void test7()  throws Throwable  {
      CountDownLatch countDownLatch0 = ConcurrentTools.countDownLatch(1006);
}"
38,"    public static LongAdder longAdder() {
        return new LongAdder();
    }","  public void test8()  throws Throwable  {
      LongAdder longAdder0 = ConcurrentTools.longAdder();
}"
39,"    public static RateLimiter rateLimiter(int permitsPerSecond) {
        return RateLimiter.create(permitsPerSecond);
    }","  public void test9()  throws Throwable  {
      RateLimiter rateLimiter0 = ConcurrentTools.rateLimiter(17);
}"
40,"    public static void sleep(long durationMillis) {
        try {
            Thread.sleep(durationMillis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }","  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThreadUtil.sleep(3210L, timeUnit0);
  }"
41,"    public static void sleep(long durationMillis) {
        try {
            Thread.sleep(durationMillis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtil.sleep(0L, (TimeUnit) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.concurrent.ThreadUtil"", e);
      }
  }"
42,"    public static void sleep(long durationMillis) {
        try {
            Thread.sleep(durationMillis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtil.sleep((-626L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException(""java.lang.Thread"", e);
      }
  }"
43,"    public static String getCallerClass() {
        StackTraceElement[] stacktrace = Thread.currentThread().getStackTrace();
        if (stacktrace.length >= 4) {
            StackTraceElement element = stacktrace[3];
            return element.getClassName();
        } else {
            return StringUtils.EMPTY;
        }
    }","  public void test3()  throws Throwable  {
      String string0 = ThreadUtil.getCallerClass();
}"
44,"    public static void sleep(long durationMillis) {
        try {
            Thread.sleep(durationMillis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }","  public void test4()  throws Throwable  {
      ThreadUtil.sleep(0L);
  }"
45,"    public static void handleInterruptedException() {
        Thread.currentThread().interrupt();
    }","  public void test5()  throws Throwable  {
      ThreadUtil.handleInterruptedException();
  }"
46,,"  public void test6()  throws Throwable  {
      ThreadUtil threadUtil0 = new ThreadUtil();
  }"
47,"    public static void sleep(long durationMillis) {
        try {
            Thread.sleep(durationMillis);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }","  public void test7()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      // Undeclared exception!
      try { 
        ThreadUtil.sleep((-1L), timeUnit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException(""java.lang.Thread"", e);
      }
  }"
48,"    public void threadDumpIfNeed() {
        threadDumpIfNeed(null);
    }","  public void test0()  throws Throwable  {
      ThreadDumpper threadDumpper0 = new ThreadDumpper((-1335L), (-1057));
      threadDumpper0.threadDumpIfNeed((String) null);
  }"
49,"    public void threadDumpIfNeed() {
        threadDumpIfNeed(null);
    }","  public void test1()  throws Throwable  {
      ThreadDumpper threadDumpper0 = new ThreadDumpper(29001L, 2);
      threadDumpper0.threadDumpIfNeed(""\t?tr$s"");
      threadDumpper0.threadDumpIfNeed(""\t?tr$s"");
  }"
50,"    public void threadDumpIfNeed() {
        threadDumpIfNeed(null);
    }","  public void test2()  throws Throwable  {
      ThreadDumpper threadDumpper0 = new ThreadDumpper(29001L, 2);
      threadDumpper0.setEnable(false);
      threadDumpper0.threadDumpIfNeed(""\t?tr$s"");
  }"
51,"    public void setLeastInterval(int leastIntervalSeconds) {
        synchronized (this) {
            this.leastIntervalMills = TimeUnit.SECONDS.toMillis(leastIntervalSeconds);
        }
    }","  public void test3()  throws Throwable  {
      ThreadDumpper threadDumpper0 = new ThreadDumpper();
      threadDumpper0.setLeastInterval(114);
  }"
52,"    public void setMaxStackLevel(int maxStackLevel) {
        this.maxStackLevel = maxStackLevel;
    }","  public void test4()  throws Throwable  {
      ThreadDumpper threadDumpper0 = new ThreadDumpper(29001L, 2);
      threadDumpper0.setMaxStackLevel(2);
  }"
53,"    public void threadDumpIfNeed() {
        threadDumpIfNeed(null);
    }","  public void test5()  throws Throwable  {
      ThreadDumpper threadDumpper0 = new ThreadDumpper();
      threadDumpper0.threadDumpIfNeed();
      threadDumpper0.threadDumpIfNeed("""");
  }"
54,"    public static <T> T get(String key) {
        return (T) (contextMap.get().get(key));
    }","  public void test0()  throws Throwable  {
      Object object0 = ThreadLocalContext.get(""pS9M!}9meRP]"");
}"
55,"    public static void reset() {
        contextMap.get().clear();
    }","  public void test1()  throws Throwable  {
      ThreadLocalContext.reset();
  }"
56,"    public static <T> T get(String key) {
        return (T) (contextMap.get().get(key));
    }","  public void test2()  throws Throwable  {
      Integer integer0 = ThreadLocalContext.get("""");
}"
57,"    public static void put(String key, Object value) {
        contextMap.get().put(key, value);
    }","  public void test3()  throws Throwable  {
      ThreadLocalContext threadLocalContext0 = new ThreadLocalContext();
      ThreadLocalContext.put(""pS9M!}9meRP]"", threadLocalContext0);
  }"
58,"    public static Sampler create(Double selectPercent) {
        if (selectPercent.equals(ALWAYS)) {
            return new AlwaysSampler();
        } else if (selectPercent.equals(NEVER)) {
            return new NeverSampler();
        } else {
            return new Sampler(selectPercent);
        }
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sampler.create((Double) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.concurrent.throttle.Sampler"", e);
      }
  }"
59,"    public boolean select() {
        return RandomUtil.threadLocalRandom().nextDouble() < threshold;
    }","  public void test1()  throws Throwable  {
      Sampler.NeverSampler sampler_NeverSampler0 = new Sampler.NeverSampler();
}"
60,"    public boolean select() {
        return RandomUtil.threadLocalRandom().nextDouble() < threshold;
    }","  public void test2()  throws Throwable  {
      Sampler.AlwaysSampler sampler_AlwaysSampler0 = new Sampler.AlwaysSampler();
      boolean boolean0 = sampler_AlwaysSampler0.select();
}"
61,"    public boolean select() {
        return RandomUtil.threadLocalRandom().nextDouble() < threshold;
    }","  public void test3()  throws Throwable  {
      Sampler sampler0 = new Sampler();
      boolean boolean0 = sampler0.select();
}"
62,"    public static Sampler create(Double selectPercent) {
        if (selectPercent.equals(ALWAYS)) {
            return new AlwaysSampler();
        } else if (selectPercent.equals(NEVER)) {
            return new NeverSampler();
        } else {
            return new Sampler(selectPercent);
        }
    }","  public void test4()  throws Throwable  {
      Double double0 = new Double(5189.187);
      // Undeclared exception!
      try { 
        Sampler.create(double0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid selectPercent value: 5189.187
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
63,"    public boolean select() {
        return RandomUtil.threadLocalRandom().nextDouble() < threshold;
    }","  public void test5()  throws Throwable  {
      Sampler sampler0 = new Sampler(100.0);
      boolean boolean0 = sampler0.select();
}"
64,"    protected Sampler() {
    }","  public void test6()  throws Throwable  {
      Sampler sampler0 = null;
      try {
        sampler0 = new Sampler((-11.016937692107309));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid selectPercent value: -11.016937692107309
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
65,"    public boolean select() {
        return RandomUtil.threadLocalRandom().nextDouble() < threshold;
    }","  public void test7()  throws Throwable  {
      Double double0 = new Double(100.0);
      Sampler sampler0 = Sampler.create(double0);
      boolean boolean0 = sampler0.select();
}"
66,"    public boolean select() {
        return RandomUtil.threadLocalRandom().nextDouble() < threshold;
    }","  public void test8()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      Sampler sampler0 = Sampler.create(double0);
      boolean boolean0 = sampler0.select();
}"
67,"    public static QueuableCachedThreadPoolBuilder queuableCachedPool() {
        return new QueuableCachedThreadPoolBuilder();
    }","  public void test0()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = ThreadPoolBuilder.queuableCachedPool();
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setQueueSize((-2998));
}"
68,"    public static FixedThreadPoolBuilder fixedPool() {
        return new FixedThreadPoolBuilder();
    }","  public void test1()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = ThreadPoolBuilder.fixedPool();
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder1 = threadPoolBuilder_FixedThreadPoolBuilder0.setThreadNamePrefix("""");
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_FixedThreadPoolBuilder1.build();
}"
69,"    public static ScheduledThreadPoolBuilder scheduledPool() {
        return new ScheduledThreadPoolBuilder();
    }","  public void test2()  throws Throwable  {
      ThreadPoolBuilder.scheduledPool();
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = new ThreadPoolBuilder.CachedThreadPoolBuilder();
  }"
70,"    public static FixedThreadPoolBuilder fixedPool() {
        return new FixedThreadPoolBuilder();
    }","  public void test3()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = new ThreadPoolBuilder.QueuableCachedThreadPoolBuilder();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setRejectHanlder(threadPoolExecutor_AbortPolicy0);
      threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setKeepAliveSecs(1335);
      Boolean boolean0 = Boolean.FALSE;
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setDaemon(boolean0);
      threadPoolBuilder_QueuableCachedThreadPoolBuilder1.build();
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = ThreadPoolBuilder.fixedPool();
}"
71,,"  public void test4()  throws Throwable  {
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = new ThreadPoolBuilder.FixedThreadPoolBuilder();
      int int0 = (-1378);
      // Undeclared exception!
      try { 
        threadPoolBuilder_FixedThreadPoolBuilder0.setPoolSize((-1378));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The validated expression is false
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
72,,"  public void test5()  throws Throwable  {
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder0 = new ThreadPoolBuilder.ScheduledThreadPoolBuilder();
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder1 = threadPoolBuilder_ScheduledThreadPoolBuilder0.setPoolSize(16);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder2 = threadPoolBuilder_ScheduledThreadPoolBuilder1.setThreadFactory(threadFactory0);
}"
73,,"  public void test6()  throws Throwable  {
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder0 = new ThreadPoolBuilder.ScheduledThreadPoolBuilder();
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder1 = threadPoolBuilder_ScheduledThreadPoolBuilder0.setThreadNamePrefix("""");
}"
74,,"  public void test7()  throws Throwable  {
      ThreadPoolBuilder.ScheduledThreadPoolBuilder threadPoolBuilder_ScheduledThreadPoolBuilder0 = new ThreadPoolBuilder.ScheduledThreadPoolBuilder();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = threadPoolBuilder_ScheduledThreadPoolBuilder0.build();
}"
75,,"  public void test8()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = new ThreadPoolBuilder.QueuableCachedThreadPoolBuilder();
      threadPoolBuilder_QueuableCachedThreadPoolBuilder0.build();
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setThreadNamePrefix("""");
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder2 = threadPoolBuilder_QueuableCachedThreadPoolBuilder1.setMaxSize(16);
}"
76,"    public static QueuableCachedThreadPoolBuilder queuableCachedPool() {
        return new QueuableCachedThreadPoolBuilder();
    }","  public void test9()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = ThreadPoolBuilder.queuableCachedPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder1 = threadPoolBuilder_QueuableCachedThreadPoolBuilder0.setThreadFactory(threadFactory0);
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder2 = threadPoolBuilder_QueuableCachedThreadPoolBuilder1.setMinSize((-2998));
}"
77,"    public static CachedThreadPoolBuilder cachedPool() {
        return new CachedThreadPoolBuilder();
    }","  public void test10()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = ThreadPoolBuilder.cachedPool();
      Boolean boolean0 = Boolean.TRUE;
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setThreadNamePrefix("""");
      threadPoolBuilder_CachedThreadPoolBuilder0.setDaemon(boolean0);
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_CachedThreadPoolBuilder1.build();
}"
78,"    public static CachedThreadPoolBuilder cachedPool() {
        return new CachedThreadPoolBuilder();
    }","  public void test11()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = ThreadPoolBuilder.cachedPool();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      threadPoolBuilder_CachedThreadPoolBuilder0.setMinSize(16);
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_CachedThreadPoolBuilder0.build();
}"
79,"    public static CachedThreadPoolBuilder cachedPool() {
        return new CachedThreadPoolBuilder();
    }","  public void test12()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = ThreadPoolBuilder.cachedPool();
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_CachedThreadPoolBuilder0.build();
      threadPoolBuilder_CachedThreadPoolBuilder0.setMaxSize(16);
      ThreadPoolExecutor threadPoolExecutor1 = threadPoolBuilder_CachedThreadPoolBuilder0.build();
}"
80,"    public static CachedThreadPoolBuilder cachedPool() {
        return new CachedThreadPoolBuilder();
    }","  public void test13()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = ThreadPoolBuilder.cachedPool();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setRejectHanlder(threadPoolExecutor_DiscardPolicy0);
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_CachedThreadPoolBuilder1.build();
}"
81,"    public static CachedThreadPoolBuilder cachedPool() {
        return new CachedThreadPoolBuilder();
    }","  public void test14()  throws Throwable  {
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder0 = ThreadPoolBuilder.cachedPool();
      threadPoolBuilder_CachedThreadPoolBuilder0.setKeepAliveSecs(16);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.CachedThreadPoolBuilder threadPoolBuilder_CachedThreadPoolBuilder1 = threadPoolBuilder_CachedThreadPoolBuilder0.setThreadFactory(threadFactory0);
}"
82,,"  public void test15()  throws Throwable  {
      ThreadPoolBuilder.QueuableCachedThreadPoolBuilder threadPoolBuilder_QueuableCachedThreadPoolBuilder0 = new ThreadPoolBuilder.QueuableCachedThreadPoolBuilder();
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ThreadPoolBuilder threadPoolBuilder0 = new ThreadPoolBuilder();
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = new ThreadPoolBuilder.FixedThreadPoolBuilder();
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder1 = threadPoolBuilder_FixedThreadPoolBuilder0.setQueueSize(1335);
      threadPoolBuilder_FixedThreadPoolBuilder1.setRejectHanlder(threadPoolExecutor_AbortPolicy0);
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_FixedThreadPoolBuilder0.build();
}"
83,,"  public void test16()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = new ThreadPoolBuilder.FixedThreadPoolBuilder();
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder1 = threadPoolBuilder_FixedThreadPoolBuilder0.setDaemon(boolean0);
      ThreadPoolExecutor threadPoolExecutor0 = threadPoolBuilder_FixedThreadPoolBuilder1.build();
}"
84,"    public static FixedThreadPoolBuilder fixedPool() {
        return new FixedThreadPoolBuilder();
    }","  public void test17()  throws Throwable  {
      ThreadPoolBuilder threadPoolBuilder0 = new ThreadPoolBuilder();
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder0 = new ThreadPoolBuilder.FixedThreadPoolBuilder();
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder1 = threadPoolBuilder_FixedThreadPoolBuilder0.setPoolSize(1335);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder2 = threadPoolBuilder_FixedThreadPoolBuilder1.setThreadFactory(threadFactory0);
      threadPoolBuilder_FixedThreadPoolBuilder2.setQueueSize(1335);
      ThreadPoolBuilder.FixedThreadPoolBuilder threadPoolBuilder_FixedThreadPoolBuilder3 = ThreadPoolBuilder.fixedPool();
}"
85,,"  public void test0()  throws Throwable  {
      SSLSocketReceiver sSLSocketReceiver0 = new SSLSocketReceiver();
      ThreadPoolUtil.SafeRunnable threadPoolUtil_SafeRunnable0 = new ThreadPoolUtil.SafeRunnable(sSLSocketReceiver0);
      threadPoolUtil_SafeRunnable0.run();
  }"
86,"    public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int shutdownTimeoutMills) {
        return threadPool != null
                ? MoreExecutors.shutdownAndAwaitTermination(threadPool, shutdownTimeoutMills, TimeUnit.MILLISECONDS)
                : true;
    }","  public void test1()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown((ExecutorService) forkJoinPool0, (-224), timeUnit0);
}"
87,"    public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int shutdownTimeoutMills) {
        return threadPool != null
                ? MoreExecutors.shutdownAndAwaitTermination(threadPool, shutdownTimeoutMills, TimeUnit.MILLISECONDS)
                : true;
    }","  public void test2()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown((ExecutorService) forkJoinPool0, (-954));
}"
88,"    public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix) {
        return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + ""-%d"").build();
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory(""@[M|%`[%"", false);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '`'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
89,"    public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix) {
        return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + ""-%d"").build();
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory(""a54o&I\r%"", true);
        fail(""Expecting exception: MissingFormatWidthException"");
      } catch(MissingFormatWidthException e) {
         //
         // %-%
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
90,"    public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix) {
        return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + ""-%d"").build();
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory(""-%d"", true);
        fail(""Expecting exception: MissingFormatArgumentException"");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
91,"    public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix) {
        return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + ""-%d"").build();
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory(""WY!@mg4%a*"", true);
        fail(""Expecting exception: IllegalFormatConversionException"");
      } catch(IllegalFormatConversionException e) {
         //
         // a != java.lang.Integer
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
92,"    public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix) {
        return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + ""-%d"").build();
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory(""aB[+%vK>d6\""az]5556Q"");
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'v'
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
93,"    public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix) {
        return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + ""-%d"").build();
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.buildThreadFactory(""-%d"");
        fail(""Expecting exception: MissingFormatArgumentException"");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
94,"    public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int shutdownTimeoutMills) {
        return threadPool != null
                ? MoreExecutors.shutdownAndAwaitTermination(threadPool, shutdownTimeoutMills, TimeUnit.MILLISECONDS)
                : true;
    }","  public void test9()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown((ExecutorService) forkJoinPool0, 0, timeUnit0);
}"
95,"    public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int shutdownTimeoutMills) {
        return threadPool != null
                ? MoreExecutors.shutdownAndAwaitTermination(threadPool, shutdownTimeoutMills, TimeUnit.MILLISECONDS)
                : true;
    }","  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown((ExecutorService) null, 0, timeUnit0);
}"
96,"    public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int shutdownTimeoutMills) {
        return threadPool != null
                ? MoreExecutors.shutdownAndAwaitTermination(threadPool, shutdownTimeoutMills, TimeUnit.MILLISECONDS)
                : true;
    }","  public void test11()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown((ExecutorService) forkJoinPool0, 1);
}"
97,"    public static boolean gracefulShutdown(@Nullable ExecutorService threadPool, int shutdownTimeoutMills) {
        return threadPool != null
                ? MoreExecutors.shutdownAndAwaitTermination(threadPool, shutdownTimeoutMills, TimeUnit.MILLISECONDS)
                : true;
    }","  public void test12()  throws Throwable  {
      boolean boolean0 = ThreadPoolUtil.gracefulShutdown((ExecutorService) null, (-2622));
}"
98,"    public static Runnable safeRunnable(@NotNull Runnable runnable) {
        return new SafeRunnable(runnable);
    }","  public void test13()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      Runnable runnable0 = ThreadPoolUtil.safeRunnable(mockThread0);
      runnable0.run();
  }"
99,"    public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix) {
        return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + ""-%d"").build();
    }","  public void test14()  throws Throwable  {
      ThreadFactory threadFactory0 = ThreadPoolUtil.buildThreadFactory(""org.apache.commons.lang3.concurrent.BasicThreadFactory"", false);
}"
100,"    public static Runnable safeRunnable(@NotNull Runnable runnable) {
        return new SafeRunnable(runnable);
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadPoolUtil.safeRunnable((Runnable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
101,"    public static ThreadFactory buildThreadFactory(@NotNull String threadNamePrefix) {
        return new ThreadFactoryBuilder().setNameFormat(threadNamePrefix + ""-%d"").build();
    }","  public void test16()  throws Throwable  {
      ThreadFactory threadFactory0 = ThreadPoolUtil.buildThreadFactory("""");
}"
102,,"  public void test17()  throws Throwable  {
      ThreadPoolUtil threadPoolUtil0 = new ThreadPoolUtil();
  }"
103,"    public void execute(Runnable command) {
        execute(command, 0, TimeUnit.MILLISECONDS);
    }","  public void test0()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1847);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1847, 1847, 3736L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      queuableCachedThreadPool0.afterExecute(mockThread0, mockThrowable0);
      queuableCachedThreadPool0.execute((Runnable) mockThread0, 3736L, timeUnit0);
}"
104,"    public int getSubmittedCount() {
        return submittedCount.get();
    }","  public void test1()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1, 1, 1684L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      SocketReceiver socketReceiver0 = new SocketReceiver();
      queuableCachedThreadPool0.execute((Runnable) socketReceiver0);
      int int0 = queuableCachedThreadPool0.getSubmittedCount();
}"
105,"    public int getSubmittedCount() {
        return submittedCount.get();
    }","  public void test2()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1157);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1157, 1157, 2778L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      MockThread mockThread0 = new MockThread((Runnable) null);
      MockException mockException0 = new MockException((Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable("""", mockException0);
      queuableCachedThreadPool0.afterExecute(mockThread0, mockThrowable0);
      int int0 = queuableCachedThreadPool0.getSubmittedCount();
}"
106,"    public void execute(Runnable command) {
        execute(command, 0, TimeUnit.MILLISECONDS);
    }","  public void test3()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(669);
      MockThread mockThread0 = new MockThread(""McK_q_Y7"");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(669, 669, 1L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      queuableCachedThreadPool0.shutdownNow();
      // Undeclared exception!
      try { 
        queuableCachedThreadPool0.execute((Runnable) mockThread0, 1L, timeUnit0);
        fail(""Expecting exception: RejectedExecutionException"");
      } catch(RejectedExecutionException e) {
         //
         // Executor not running, can't force a command into the queue
         //
         verifyException(""org.springside.modules.utils.concurrent.threadpool.QueuableCachedThreadPool$ControllableQueue"", e);
      }
  }"
107,"    public void execute(Runnable command) {
        execute(command, 0, TimeUnit.MILLISECONDS);
    }","  public void test4()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1165);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1165, 1165, 2778L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      // Undeclared exception!
      try { 
        queuableCachedThreadPool0.execute((Runnable) null, (-415L), timeUnit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ThreadPoolExecutor"", e);
      }
  }"
108,"    public void execute(Runnable command) {
        execute(command, 0, TimeUnit.MILLISECONDS);
    }","  public void test5()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1847);
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, ""Hyu~C{R"");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(thread0).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1847, 1847, 3736L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      // Undeclared exception!
      try { 
        queuableCachedThreadPool0.execute((Runnable) mockThread0, 3736L, timeUnit0);
        fail(""Expecting exception: IllegalThreadStateException"");
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ThreadPoolExecutor"", e);
      }
  }"
109,"    public void execute(Runnable command) {
        execute(command, 0, TimeUnit.MILLISECONDS);
    }","  public void test6()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1, 279, 2194L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      // Undeclared exception!
      try { 
        queuableCachedThreadPool0.execute((Runnable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ThreadPoolExecutor"", e);
      }
  }"
110,"    public void execute(Runnable command) {
        execute(command, 0, TimeUnit.MILLISECONDS);
    }","  public void test7()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(3544);
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(thread0).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1, 1, 1, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      // Undeclared exception!
      try { 
        queuableCachedThreadPool0.execute((Runnable) mockThread0);
        fail(""Expecting exception: IllegalThreadStateException"");
      } catch(IllegalThreadStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ThreadPoolExecutor"", e);
      }
  }"
111,"    public QueuableCachedThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                                    ControllableQueue workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
        workQueue.setParent(this);
    }","  public void test8()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = null;
      try {
        queuableCachedThreadPool0 = new QueuableCachedThreadPool(0, 1671, 1671, timeUnit0, (QueuableCachedThreadPool.ControllableQueue) null, threadFactory0, threadPoolExecutor_AbortPolicy0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ThreadPoolExecutor"", e);
      }
  }"
112,"    public QueuableCachedThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                                    ControllableQueue workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
        workQueue.setParent(this);
    }","  public void test9()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1105);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = null;
      try {
        queuableCachedThreadPool0 = new QueuableCachedThreadPool((-296), (-296), (-296), timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ThreadPoolExecutor"", e);
      }
  }"
113,"    public QueuableCachedThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                                    ControllableQueue workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
        workQueue.setParent(this);
    }","  public void test10()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1);
      MockThread mockThread0 = new MockThread();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1, 1, 1684L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      boolean boolean0 = queuableCachedThreadPool_ControllableQueue0.force((Runnable) mockThread0, (-341L), timeUnit0);
}"
114,"    public void execute(Runnable command) {
        execute(command, 0, TimeUnit.MILLISECONDS);
    }","  public void test11()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(669);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(669, 669, 1L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, ""org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder"", (-2504L));
      queuableCachedThreadPool0.execute((Runnable) mockThread0, 1L, timeUnit0);
}"
115,"    public int getSubmittedCount() {
        return submittedCount.get();
    }","  public void test12()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(627);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1, 181, 1, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      queuableCachedThreadPool_ControllableQueue0.setParent(queuableCachedThreadPool0);
}"
116,"    public int getSubmittedCount() {
        return submittedCount.get();
    }","  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1, 1, 1684L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      int int0 = queuableCachedThreadPool0.getSubmittedCount();
}"
117,"    public void execute(Runnable command) {
        execute(command, 0, TimeUnit.MILLISECONDS);
    }","  public void test14()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1);
      MockThread mockThread0 = new MockThread();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn(mockThread0).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1, 1, 1684L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      SocketReceiver socketReceiver0 = new SocketReceiver();
      queuableCachedThreadPool0.execute((Runnable) socketReceiver0);
      boolean boolean0 = queuableCachedThreadPool_ControllableQueue0.offer((Runnable) socketReceiver0);
}"
118,"    public QueuableCachedThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                                    ControllableQueue workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
        workQueue.setParent(this);
    }","  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1);
      MockThread mockThread0 = new MockThread();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1, 1, 1684L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      queuableCachedThreadPool0.shutdownNow();
      // Undeclared exception!
      try { 
        queuableCachedThreadPool_ControllableQueue0.force((Runnable) mockThread0, (-341L), timeUnit0);
        fail(""Expecting exception: RejectedExecutionException"");
      } catch(RejectedExecutionException e) {
         //
         // Executor not running, can't force a command into the queue
         //
         verifyException(""org.springside.modules.utils.concurrent.threadpool.QueuableCachedThreadPool$ControllableQueue"", e);
      }
  }"
119,"    public QueuableCachedThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                                    ControllableQueue workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
        workQueue.setParent(this);
    }","  public void test16()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1157);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1157, 1157, 2778L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      queuableCachedThreadPool0.shutdown();
      MockThread mockThread0 = new MockThread((Runnable) null);
      // Undeclared exception!
      try { 
        queuableCachedThreadPool_ControllableQueue0.force((Runnable) mockThread0);
        fail(""Expecting exception: RejectedExecutionException"");
      } catch(RejectedExecutionException e) {
         //
         // Executor not running, can't force a command into the queue
         //
         verifyException(""org.springside.modules.utils.concurrent.threadpool.QueuableCachedThreadPool$ControllableQueue"", e);
      }
  }"
120,"    protected void afterExecute(Runnable r, Throwable t) {
        submittedCount.decrementAndGet();
    }","  public void test17()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(1847);
      MockThread mockThread0 = new MockThread((Runnable) null);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(1847, 1847, 3736L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      queuableCachedThreadPool0.afterExecute(mockThread0, mockThrowable0);
      boolean boolean0 = queuableCachedThreadPool_ControllableQueue0.add(mockThread0);
}"
121,"    public QueuableCachedThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
                                    ControllableQueue workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);
        workQueue.setParent(this);
    }","  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      QueuableCachedThreadPool.ControllableQueue queuableCachedThreadPool_ControllableQueue0 = new QueuableCachedThreadPool.ControllableQueue(669);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      QueuableCachedThreadPool queuableCachedThreadPool0 = new QueuableCachedThreadPool(669, 669, 1L, timeUnit0, queuableCachedThreadPool_ControllableQueue0, threadFactory0, threadPoolExecutor_AbortPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, ""org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder"", (-2504L));
      boolean boolean0 = queuableCachedThreadPool_ControllableQueue0.force((Runnable) mockThread0);
}"
122,"    final boolean casBase(long cmp, long val) {
        return UNSAFE.compareAndSwapLong(this, baseOffset, cmp, val);
    }","  public void test0()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.sumThenReset();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      longAdder0.casBase((-1113L), 0);
      intArray0[1] = (-1);
      longAdder0.retryUpdate(3707L, intArray0, true);
      longAdder0.reset();
      longAdder0.floatValue();
      longAdder0.retryUpdate((-1), intArray0, false);
      longAdder0.busy = (-1);
      longAdder0.casBase(514L, 0L);
      longAdder0.decrement();
  }"
123,"    Striped64() {
    }","  public void test1()  throws Throwable  {
      Striped64.Cell striped64_Cell0 = new Striped64.Cell((-1L));
      striped64_Cell0.cas(1L, 1L);
  }"
124,"    final void internalReset(long initialValue) {
        Cell[] as = cells;
        base = initialValue;
        if (as != null) {
            int n = as.length;
            for (int i = 0; i < n; ++i) {
                Cell a = as[i];
                if (a != null)
                    a.value = initialValue;
            }
        }
    }","  public void test2()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.internalReset((-1L));
  }"
125,"    final boolean casBusy() {
        return UNSAFE.compareAndSwapInt(this, busyOffset, 0, 1);
    }","  public void test3()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.busy = 1;
      longAdder0.casBusy();
  }"
126,"    final boolean casBase(long cmp, long val) {
        return UNSAFE.compareAndSwapLong(this, baseOffset, cmp, val);
    }","  public void test4()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.casBase(0L, 0L);
  }"
127,"    final boolean casBase(long cmp, long val) {
        return UNSAFE.compareAndSwapLong(this, baseOffset, cmp, val);
    }","  public void test5()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.casBase((-1452L), (-1452L));
  }"
128,"    final void retryUpdate(long x, int[] hc, boolean wasUncontended) {
        int h;
        if (hc == null) {
            threadHashCode.set(hc = new int[1]); // Initialize randomly
            int r = rng.nextInt(); // Avoid zero to allow xorShift rehash
            h = hc[0] = (r == 0) ? 1 : r;
        } else
            h = hc[0];
        boolean collide = false;                // True if last slot nonempty
        for (; ; ) {
            Cell[] as;
            Cell a;
            int n;
            long v;
            if ((as = cells) != null && (n = as.length) > 0) {
                if ((a = as[(n - 1) & h]) == null) {
                    if (busy == 0) {            // Try to attach new Cell
                        Cell r = new Cell(x);   // Optimistically create
                        if (busy == 0 && casBusy()) {
                            boolean created = false;
                            try {               // Recheck under lock
                                Cell[] rs;
                                int m, j;
                                if ((rs = cells) != null &&
                                        (m = rs.length) > 0 &&
                                        rs[j = (m - 1) & h] == null) {
                                    rs[j] = r;
                                    created = true;
                                }
                            } finally {
                                busy = 0;
                            }
                            if (created)
                                break;
                            continue;           // Slot is now non-empty
                        }
                    }
                    collide = false;
                } else if (!wasUncontended)       // CAS already known to fail
                    wasUncontended = true;      // Continue after rehash
                else if (a.cas(v = a.value, fn(v, x)))
                    break;
                else if (n >= NCPU || cells != as)
                    collide = false;            // At max size or stale
                else if (!collide)
                    collide = true;
                else if (busy == 0 && casBusy()) {
                    try {
                        if (cells == as) {      // Expand table unless stale
                            Cell[] rs = new Cell[n << 1];
                            for (int i = 0; i < n; ++i)
                                rs[i] = as[i];
                            cells = rs;
                        }
                    } finally {
                        busy = 0;
                    }
                    collide = false;
                    continue;                   // Retry with expanded table
                }
                h ^= h << 13;                   // Rehash
                h ^= h >>> 17;
                h ^= h << 5;
                hc[0] = h;                      // Record index for next time
            } else if (busy == 0 && cells == as && casBusy()) {
                boolean init = false;
                try {                           // Initialize table
                    if (cells == as) {
                        Cell[] rs = new Cell[2];
                        rs[h & 1] = new Cell(x);
                        cells = rs;
                        init = true;
                    }
                } finally {
                    busy = 0;
                }
                if (init)
                    break;
            } else if (casBase(v = base, fn(v, x)))
                break;                          // Fall back on using base
        }
    }","  public void test6()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.retryUpdate(194L, (int[]) null, true);
      longAdder0.casBusy();
      int[] intArray0 = new int[4];
      // Undeclared exception!
      longAdder0.retryUpdate(388L, intArray0, true);
  }"
129,"    final void retryUpdate(long x, int[] hc, boolean wasUncontended) {
        int h;
        if (hc == null) {
            threadHashCode.set(hc = new int[1]); // Initialize randomly
            int r = rng.nextInt(); // Avoid zero to allow xorShift rehash
            h = hc[0] = (r == 0) ? 1 : r;
        } else
            h = hc[0];
        boolean collide = false;                // True if last slot nonempty
        for (; ; ) {
            Cell[] as;
            Cell a;
            int n;
            long v;
            if ((as = cells) != null && (n = as.length) > 0) {
                if ((a = as[(n - 1) & h]) == null) {
                    if (busy == 0) {            // Try to attach new Cell
                        Cell r = new Cell(x);   // Optimistically create
                        if (busy == 0 && casBusy()) {
                            boolean created = false;
                            try {               // Recheck under lock
                                Cell[] rs;
                                int m, j;
                                if ((rs = cells) != null &&
                                        (m = rs.length) > 0 &&
                                        rs[j = (m - 1) & h] == null) {
                                    rs[j] = r;
                                    created = true;
                                }
                            } finally {
                                busy = 0;
                            }
                            if (created)
                                break;
                            continue;           // Slot is now non-empty
                        }
                    }
                    collide = false;
                } else if (!wasUncontended)       // CAS already known to fail
                    wasUncontended = true;      // Continue after rehash
                else if (a.cas(v = a.value, fn(v, x)))
                    break;
                else if (n >= NCPU || cells != as)
                    collide = false;            // At max size or stale
                else if (!collide)
                    collide = true;
                else if (busy == 0 && casBusy()) {
                    try {
                        if (cells == as) {      // Expand table unless stale
                            Cell[] rs = new Cell[n << 1];
                            for (int i = 0; i < n; ++i)
                                rs[i] = as[i];
                            cells = rs;
                        }
                    } finally {
                        busy = 0;
                    }
                    collide = false;
                    continue;                   // Retry with expanded table
                }
                h ^= h << 13;                   // Rehash
                h ^= h >>> 17;
                h ^= h << 5;
                hc[0] = h;                      // Record index for next time
            } else if (busy == 0 && cells == as && casBusy()) {
                boolean init = false;
                try {                           // Initialize table
                    if (cells == as) {
                        Cell[] rs = new Cell[2];
                        rs[h & 1] = new Cell(x);
                        cells = rs;
                        init = true;
                    }
                } finally {
                    busy = 0;
                }
                if (init)
                    break;
            } else if (casBase(v = base, fn(v, x)))
                break;                          // Fall back on using base
        }
    }","  public void test7()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        longAdder0.retryUpdate(2700L, intArray0, false);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
130,"    final void retryUpdate(long x, int[] hc, boolean wasUncontended) {
        int h;
        if (hc == null) {
            threadHashCode.set(hc = new int[1]); // Initialize randomly
            int r = rng.nextInt(); // Avoid zero to allow xorShift rehash
            h = hc[0] = (r == 0) ? 1 : r;
        } else
            h = hc[0];
        boolean collide = false;                // True if last slot nonempty
        for (; ; ) {
            Cell[] as;
            Cell a;
            int n;
            long v;
            if ((as = cells) != null && (n = as.length) > 0) {
                if ((a = as[(n - 1) & h]) == null) {
                    if (busy == 0) {            // Try to attach new Cell
                        Cell r = new Cell(x);   // Optimistically create
                        if (busy == 0 && casBusy()) {
                            boolean created = false;
                            try {               // Recheck under lock
                                Cell[] rs;
                                int m, j;
                                if ((rs = cells) != null &&
                                        (m = rs.length) > 0 &&
                                        rs[j = (m - 1) & h] == null) {
                                    rs[j] = r;
                                    created = true;
                                }
                            } finally {
                                busy = 0;
                            }
                            if (created)
                                break;
                            continue;           // Slot is now non-empty
                        }
                    }
                    collide = false;
                } else if (!wasUncontended)       // CAS already known to fail
                    wasUncontended = true;      // Continue after rehash
                else if (a.cas(v = a.value, fn(v, x)))
                    break;
                else if (n >= NCPU || cells != as)
                    collide = false;            // At max size or stale
                else if (!collide)
                    collide = true;
                else if (busy == 0 && casBusy()) {
                    try {
                        if (cells == as) {      // Expand table unless stale
                            Cell[] rs = new Cell[n << 1];
                            for (int i = 0; i < n; ++i)
                                rs[i] = as[i];
                            cells = rs;
                        }
                    } finally {
                        busy = 0;
                    }
                    collide = false;
                    continue;                   // Retry with expanded table
                }
                h ^= h << 13;                   // Rehash
                h ^= h >>> 17;
                h ^= h << 5;
                hc[0] = h;                      // Record index for next time
            } else if (busy == 0 && cells == as && casBusy()) {
                boolean init = false;
                try {                           // Initialize table
                    if (cells == as) {
                        Cell[] rs = new Cell[2];
                        rs[h & 1] = new Cell(x);
                        cells = rs;
                        init = true;
                    }
                } finally {
                    busy = 0;
                }
                if (init)
                    break;
            } else if (casBase(v = base, fn(v, x)))
                break;                          // Fall back on using base
        }
    }","  public void test8()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[4];
      longAdder0.casBusy();
      longAdder0.retryUpdate((-2814L), intArray0, true);
  }"
131,"    final void retryUpdate(long x, int[] hc, boolean wasUncontended) {
        int h;
        if (hc == null) {
            threadHashCode.set(hc = new int[1]); // Initialize randomly
            int r = rng.nextInt(); // Avoid zero to allow xorShift rehash
            h = hc[0] = (r == 0) ? 1 : r;
        } else
            h = hc[0];
        boolean collide = false;                // True if last slot nonempty
        for (; ; ) {
            Cell[] as;
            Cell a;
            int n;
            long v;
            if ((as = cells) != null && (n = as.length) > 0) {
                if ((a = as[(n - 1) & h]) == null) {
                    if (busy == 0) {            // Try to attach new Cell
                        Cell r = new Cell(x);   // Optimistically create
                        if (busy == 0 && casBusy()) {
                            boolean created = false;
                            try {               // Recheck under lock
                                Cell[] rs;
                                int m, j;
                                if ((rs = cells) != null &&
                                        (m = rs.length) > 0 &&
                                        rs[j = (m - 1) & h] == null) {
                                    rs[j] = r;
                                    created = true;
                                }
                            } finally {
                                busy = 0;
                            }
                            if (created)
                                break;
                            continue;           // Slot is now non-empty
                        }
                    }
                    collide = false;
                } else if (!wasUncontended)       // CAS already known to fail
                    wasUncontended = true;      // Continue after rehash
                else if (a.cas(v = a.value, fn(v, x)))
                    break;
                else if (n >= NCPU || cells != as)
                    collide = false;            // At max size or stale
                else if (!collide)
                    collide = true;
                else if (busy == 0 && casBusy()) {
                    try {
                        if (cells == as) {      // Expand table unless stale
                            Cell[] rs = new Cell[n << 1];
                            for (int i = 0; i < n; ++i)
                                rs[i] = as[i];
                            cells = rs;
                        }
                    } finally {
                        busy = 0;
                    }
                    collide = false;
                    continue;                   // Retry with expanded table
                }
                h ^= h << 13;                   // Rehash
                h ^= h >>> 17;
                h ^= h << 5;
                hc[0] = h;                      // Record index for next time
            } else if (busy == 0 && cells == as && casBusy()) {
                boolean init = false;
                try {                           // Initialize table
                    if (cells == as) {
                        Cell[] rs = new Cell[2];
                        rs[h & 1] = new Cell(x);
                        cells = rs;
                        init = true;
                    }
                } finally {
                    busy = 0;
                }
                if (init)
                    break;
            } else if (casBase(v = base, fn(v, x)))
                break;                          // Fall back on using base
        }
    }","  public void test9()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.retryUpdate(194L, (int[]) null, true);
      longAdder0.casBusy();
      longAdder0.retryUpdate(0L, (int[]) null, true);
      longAdder0.retryUpdate(0L, (int[]) null, true);
}"
132,"    final void retryUpdate(long x, int[] hc, boolean wasUncontended) {
        int h;
        if (hc == null) {
            threadHashCode.set(hc = new int[1]); // Initialize randomly
            int r = rng.nextInt(); // Avoid zero to allow xorShift rehash
            h = hc[0] = (r == 0) ? 1 : r;
        } else
            h = hc[0];
        boolean collide = false;                // True if last slot nonempty
        for (; ; ) {
            Cell[] as;
            Cell a;
            int n;
            long v;
            if ((as = cells) != null && (n = as.length) > 0) {
                if ((a = as[(n - 1) & h]) == null) {
                    if (busy == 0) {            // Try to attach new Cell
                        Cell r = new Cell(x);   // Optimistically create
                        if (busy == 0 && casBusy()) {
                            boolean created = false;
                            try {               // Recheck under lock
                                Cell[] rs;
                                int m, j;
                                if ((rs = cells) != null &&
                                        (m = rs.length) > 0 &&
                                        rs[j = (m - 1) & h] == null) {
                                    rs[j] = r;
                                    created = true;
                                }
                            } finally {
                                busy = 0;
                            }
                            if (created)
                                break;
                            continue;           // Slot is now non-empty
                        }
                    }
                    collide = false;
                } else if (!wasUncontended)       // CAS already known to fail
                    wasUncontended = true;      // Continue after rehash
                else if (a.cas(v = a.value, fn(v, x)))
                    break;
                else if (n >= NCPU || cells != as)
                    collide = false;            // At max size or stale
                else if (!collide)
                    collide = true;
                else if (busy == 0 && casBusy()) {
                    try {
                        if (cells == as) {      // Expand table unless stale
                            Cell[] rs = new Cell[n << 1];
                            for (int i = 0; i < n; ++i)
                                rs[i] = as[i];
                            cells = rs;
                        }
                    } finally {
                        busy = 0;
                    }
                    collide = false;
                    continue;                   // Retry with expanded table
                }
                h ^= h << 13;                   // Rehash
                h ^= h >>> 17;
                h ^= h << 5;
                hc[0] = h;                      // Record index for next time
            } else if (busy == 0 && cells == as && casBusy()) {
                boolean init = false;
                try {                           // Initialize table
                    if (cells == as) {
                        Cell[] rs = new Cell[2];
                        rs[h & 1] = new Cell(x);
                        cells = rs;
                        init = true;
                    }
                } finally {
                    busy = 0;
                }
                if (init)
                    break;
            } else if (casBase(v = base, fn(v, x)))
                break;                          // Fall back on using base
        }
    }","  public void test10()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.decrement();
      int[] intArray0 = new int[8];
      longAdder0.reset();
      longAdder0.retryUpdate(10L, intArray0, false);
}"
133,"    protected void onTermination(Throwable exception) {
    }","  public void test0()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.common;
      ForkJoinWorkerThread forkJoinWorkerThread0 = new ForkJoinWorkerThread(forkJoinPool0);
      MockException mockException0 = new MockException(""]RtQ+0kT%e"");
      MockThrowable mockThrowable0 = new MockThrowable(""]RtQ+0kT%e"", mockException0);
      forkJoinWorkerThread0.onTermination(mockThrowable0);
}"
134,"    protected void onStart() {
    }","  public void test1()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.common;
      ForkJoinWorkerThread forkJoinWorkerThread0 = new ForkJoinWorkerThread(forkJoinPool0);
      forkJoinWorkerThread0.onStart();
}"
135,"    public int getPoolIndex() {
        return workQueue.poolIndex >>> 1; // ignore odd/even tag bit
    }","  public void test2()  throws Throwable  {
      ForkJoinPool.DefaultForkJoinWorkerThreadFactory forkJoinPool_DefaultForkJoinWorkerThreadFactory0 = new ForkJoinPool.DefaultForkJoinWorkerThreadFactory();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      ForkJoinWorkerThread forkJoinWorkerThread0 = forkJoinPool_DefaultForkJoinWorkerThreadFactory0.newThread(forkJoinPool0);
      int int0 = forkJoinWorkerThread0.getPoolIndex();
}"
136,"    public ForkJoinPool getPool() {
        return pool;
    }","  public void test3()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      ForkJoinWorkerThread forkJoinWorkerThread0 = new ForkJoinWorkerThread(forkJoinPool0);
      ForkJoinPool forkJoinPool1 = forkJoinWorkerThread0.getPool();
}"
137,"    public void run() {
        Throwable exception = null;
        try {
            onStart();
            pool.runWorker(workQueue);
        } catch (Throwable ex) {
            exception = ex;
        } finally {
            try {
                onTermination(exception);
            } catch (Throwable ex) {
                if (exception == null)
                    exception = ex;
            } finally {
                pool.deregisterWorker(this, exception);
            }
        }
    }","  public void test4()  throws Throwable  {
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      ForkJoinWorkerThread forkJoinWorkerThread0 = new ForkJoinWorkerThread(forkJoinPool0);
      // Undeclared exception!
      forkJoinWorkerThread0.run();
  }"
138,"    public long sum() {
        long sum = base;
        Cell[] as = cells;
        if (as != null) {
            int n = as.length;
            for (int i = 0; i < n; ++i) {
                Cell a = as[i];
                if (a != null)
                    sum += a.value;
            }
        }
        return sum;
    }","  public void test0()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      long long0 = longAdder0.sumThenReset();
}"
139,"    public long sumThenReset() {
        long sum = base;
        Cell[] as = cells;
        base = 0L;
        if (as != null) {
            int n = as.length;
            for (int i = 0; i < n; ++i) {
                Cell a = as[i];
                if (a != null) {
                    sum += a.value;
                    a.value = 0L;
                }
            }
        }
        return sum;
    }","  public void test1()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      long long0 = longAdder0.sumThenReset();
}"
140,"    public int intValue() {
        return (int) sum();
    }","  public void test2()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[1];
      longAdder0.retryUpdate(1945L, intArray0, true);
      longAdder0.increment();
      int int0 = longAdder0.intValue();
}"
141,"    public double doubleValue() {
        return (double) sum();
    }","  public void test3()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
}"
142,"    public long sumThenReset() {
        long sum = base;
        Cell[] as = cells;
        base = 0L;
        if (as != null) {
            int n = as.length;
            for (int i = 0; i < n; ++i) {
                Cell a = as[i];
                if (a != null) {
                    sum += a.value;
                    a.value = 0L;
                }
            }
        }
        return sum;
    }","  public void test4()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      long long0 = longAdder0.sumThenReset();
}"
143,"    public float floatValue() {
        return (float) sum();
    }","  public void test5()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.base = 1L;
      long long0 = longAdder0.sum();
}"
144,"    public long sum() {
        long sum = base;
        Cell[] as = cells;
        if (as != null) {
            int n = as.length;
            for (int i = 0; i < n; ++i) {
                Cell a = as[i];
                if (a != null)
                    sum += a.value;
            }
        }
        return sum;
    }","  public void test6()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.base = 1L;
      long long0 = longAdder0.sum();
}"
145,"    public int intValue() {
        return (int) sum();
    }","  public void test7()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.add((-4161L));
      long long0 = longAdder0.longValue();
}"
146,"    public long longValue() {
        return sum();
    }","  public void test8()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.add((-4161L));
      long long0 = longAdder0.longValue();
}"
147,"    public String toString() {
        return Long.toString(sum());
    }","  public void test9()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[1];
      longAdder0.retryUpdate(1945L, intArray0, true);
      int int0 = longAdder0.intValue();
}"
148,"    public int intValue() {
        return (int) sum();
    }","  public void test10()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[1];
      longAdder0.retryUpdate(1945L, intArray0, true);
      int int0 = longAdder0.intValue();
}"
149,"    public int intValue() {
        return (int) sum();
    }","  public void test11()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      Striped64.Cell striped64_Cell0 = new Striped64.Cell((-2527L));
      striped64_CellArray0[0] = striped64_Cell0;
      longAdder0.cells = striped64_CellArray0;
      int int0 = longAdder0.intValue();
}"
150,"    public int intValue() {
        return (int) sum();
    }","  public void test12()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      Striped64.Cell striped64_Cell0 = new Striped64.Cell((-2527L));
      striped64_CellArray0[0] = striped64_Cell0;
      longAdder0.cells = striped64_CellArray0;
      int int0 = longAdder0.intValue();
}"
151,"    final long fn(long v, long x) {
        return v + x;
    }","  public void test13()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.fn(0L, 0L);
}"
152,"    final long fn(long v, long x) {
        return v + x;
    }","  public void test14()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.fn(1674L, 1674L);
}"
153,"    final long fn(long v, long x) {
        return v + x;
    }","  public void test15()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      long long0 = longAdder0.fn((-4), (-4));
}"
154,"    public float floatValue() {
        return (float) sum();
    }","  public void test16()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.add(1L);
      float float0 = longAdder0.floatValue();
}"
155,"    public float floatValue() {
        return (float) sum();
    }","  public void test17()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.add(1L);
      float float0 = longAdder0.floatValue();
}"
156,"    public float floatValue() {
        return (float) sum();
    }","  public void test18()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      Striped64.Cell striped64_Cell0 = new Striped64.Cell((-2527L));
      striped64_CellArray0[0] = striped64_Cell0;
      longAdder0.cells = striped64_CellArray0;
      float float0 = longAdder0.floatValue();
}"
157,"    public float floatValue() {
        return (float) sum();
    }","  public void test19()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      Striped64.Cell striped64_Cell0 = new Striped64.Cell((-2527L));
      striped64_CellArray0[0] = striped64_Cell0;
      longAdder0.cells = striped64_CellArray0;
      float float0 = longAdder0.floatValue();
}"
158,"    public double doubleValue() {
        return (double) sum();
    }","  public void test20()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.base = 3149L;
      double double0 = longAdder0.doubleValue();
}"
159,"    public double doubleValue() {
        return (double) sum();
    }","  public void test21()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.base = 3149L;
      double double0 = longAdder0.doubleValue();
}"
160,"    public void increment() {
        add(1L);
    }","  public void test22()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      longAdder0.casBusy();
      longAdder0.cells = striped64_CellArray0;
      // Undeclared exception!
      longAdder0.increment();
  }"
161,"    public void decrement() {
        add(-1L);
    }","  public void test23()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      longAdder0.busy = (-466);
      longAdder0.cells = striped64_CellArray0;
      // Undeclared exception!
      longAdder0.decrement();
  }"
162,"    public void add(long x) {
        Cell[] as;
        long b, v;
        int[] hc;
        Cell a;
        int n;
        if ((as = cells) != null || !casBase(b = base, b + x)) {
            boolean uncontended = true;
            if ((hc = threadHashCode.get()) == null ||
                    as == null || (n = as.length) < 1 ||
                    (a = as[(n - 1) & hc[0]]) == null ||
                    !(uncontended = a.cas(v = a.value, v + x)))
                retryUpdate(x, hc, uncontended);
        }
    }","  public void test24()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[10];
      longAdder0.busy = 2919;
      longAdder0.cells = striped64_CellArray0;
      // Undeclared exception!
      longAdder0.add(2919);
  }"
163,"    public long sum() {
        long sum = base;
        Cell[] as = cells;
        if (as != null) {
            int n = as.length;
            for (int i = 0; i < n; ++i) {
                Cell a = as[i];
                if (a != null)
                    sum += a.value;
            }
        }
        return sum;
    }","  public void test25()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      Striped64.Cell striped64_Cell0 = new Striped64.Cell((-2527L));
      striped64_CellArray0[0] = striped64_Cell0;
      longAdder0.cells = striped64_CellArray0;
      long long0 = longAdder0.sum();
}"
164,"    public long sum() {
        long sum = base;
        Cell[] as = cells;
        if (as != null) {
            int n = as.length;
            for (int i = 0; i < n; ++i) {
                Cell a = as[i];
                if (a != null)
                    sum += a.value;
            }
        }
        return sum;
    }","  public void test26()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[1];
      longAdder0.cells = striped64_CellArray0;
      long long0 = longAdder0.sum();
}"
165,"    public long sum() {
        long sum = base;
        Cell[] as = cells;
        if (as != null) {
            int n = as.length;
            for (int i = 0; i < n; ++i) {
                Cell a = as[i];
                if (a != null)
                    sum += a.value;
            }
        }
        return sum;
    }","  public void test27()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
}"
166,"    public long sumThenReset() {
        long sum = base;
        Cell[] as = cells;
        base = 0L;
        if (as != null) {
            int n = as.length;
            for (int i = 0; i < n; ++i) {
                Cell a = as[i];
                if (a != null) {
                    sum += a.value;
                    a.value = 0L;
                }
            }
        }
        return sum;
    }","  public void test28()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      long long0 = longAdder0.sumThenReset();
}"
167,"    public int intValue() {
        return (int) sum();
    }","  public void test29()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      long long0 = longAdder0.longValue();
}"
168,"    public long longValue() {
        return sum();
    }","  public void test30()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      long long0 = longAdder0.longValue();
}"
169,"    public long longValue() {
        return sum();
    }","  public void test31()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      long long0 = longAdder0.longValue();
}"
170,"    public float floatValue() {
        return (float) sum();
    }","  public void test32()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.increment();
      longAdder0.add((-4));
}"
171,"    public void add(long x) {
        Cell[] as;
        long b, v;
        int[] hc;
        Cell a;
        int n;
        if ((as = cells) != null || !casBase(b = base, b + x)) {
            boolean uncontended = true;
            if ((hc = threadHashCode.get()) == null ||
                    as == null || (n = as.length) < 1 ||
                    (a = as[(n - 1) & hc[0]]) == null ||
                    !(uncontended = a.cas(v = a.value, v + x)))
                retryUpdate(x, hc, uncontended);
        }
    }","  public void test33()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      Striped64.Cell[] striped64_CellArray0 = new Striped64.Cell[0];
      longAdder0.cells = striped64_CellArray0;
      longAdder0.add(0L);
}"
172,"    public float floatValue() {
        return (float) sum();
    }","  public void test34()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      float float0 = longAdder0.floatValue();
}"
173,"    public int intValue() {
        return (int) sum();
    }","  public void test35()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int int0 = longAdder0.intValue();
}"
174,"    public String toString() {
        return Long.toString(sum());
    }","  public void test36()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      String string0 = longAdder0.toString();
}"
175,"    public String toString() {
        return Long.toString(sum());
    }","  public void test37()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.reset();
}"
176,"    public String toString() {
        return Long.toString(sum());
    }","  public void test38()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      double double0 = longAdder0.doubleValue();
}"
177,"    public double doubleValue() {
        return (double) sum();
    }","  public void test39()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      longAdder0.decrement();
      double double0 = longAdder0.doubleValue();
}"
178,"    public double doubleValue() {
        return (double) sum();
    }","  public void test40()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      double double0 = longAdder0.doubleValue();
}"
179,"    public float floatValue() {
        return (float) sum();
    }","  public void test41()  throws Throwable  {
      LongAdder longAdder0 = new LongAdder();
      int[] intArray0 = new int[9];
      longAdder0.busy = 2919;
      longAdder0.retryUpdate(2919, intArray0, false);
}"
180,"    public static boolean toBoolean(String str) {
        return Boolean.parseBoolean(str);
    }","  public void test0()  throws Throwable  {
      boolean boolean0 = BooleanUtil.toBoolean(""true"");
}"
181,"    public static Boolean parseGeneralString(String str) {
        return BooleanUtils.toBooleanObject(str);
    }","  public void test1()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject(""true"");
      Boolean boolean1 = BooleanUtil.parseGeneralString(""true"", boolean0);
}"
182,"    public static Boolean parseGeneralString(String str) {
        return BooleanUtils.toBooleanObject(str);
    }","  public void test2()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.parseGeneralString(""true"");
}"
183,"    public static Boolean parseGeneralString(String str) {
        return BooleanUtils.toBooleanObject(str);
    }","  public void test3()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.parseGeneralString(""false"");
}"
184,"    public static boolean or(final boolean... array) {
        return BooleanUtils.or(array);
    }","  public void test4()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = BooleanUtil.or(booleanArray0);
}"
185,"    public static Boolean toBooleanObject(String str) {
        return str != null ? Boolean.valueOf(str) : null;
    }","  public void test5()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("""");
      Boolean boolean1 = BooleanUtil.negate(boolean0);
      Boolean boolean2 = BooleanUtil.toBooleanObject((String) null, boolean1);
}"
186,"    public static boolean negate(final boolean bool) {
        return !bool;
    }","  public void test6()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = BooleanUtil.negate(boolean0);
}"
187,"    public static boolean and(final boolean... array) {
        return BooleanUtils.and(array);
    }","  public void test7()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = BooleanUtil.and(booleanArray0);
}"
188,"    public static Boolean parseGeneralString(String str) {
        return BooleanUtils.toBooleanObject(str);
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtil.parseGeneralString((String) null, (Boolean) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.BooleanUtil"", e);
      }
  }"
189,"    public static boolean or(final boolean... array) {
        return BooleanUtils.or(array);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtil.or((boolean[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException(""org.apache.commons.lang3.BooleanUtils"", e);
      }
  }"
190,"    public static boolean and(final boolean... array) {
        return BooleanUtils.and(array);
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        BooleanUtil.and((boolean[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException(""org.apache.commons.lang3.BooleanUtils"", e);
      }
  }"
191,"    public static boolean negate(final boolean bool) {
        return !bool;
    }","  public void test11()  throws Throwable  {
      boolean boolean0 = BooleanUtil.negate(false);
}"
192,"    public static boolean negate(final boolean bool) {
        return !bool;
    }","  public void test12()  throws Throwable  {
      boolean boolean0 = BooleanUtil.negate(true);
}"
193,"    public static Boolean toBooleanObject(String str) {
        return str != null ? Boolean.valueOf(str) : null;
    }","  public void test13()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject(""T2"", (Boolean) null);
}"
194,"    public static Boolean toBooleanObject(String str) {
        return str != null ? Boolean.valueOf(str) : null;
    }","  public void test14()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject((String) null, (Boolean) null);
}"
195,"    public static Boolean toBooleanObject(String str) {
        return str != null ? Boolean.valueOf(str) : null;
    }","  public void test15()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject(""T2"");
}"
196,"    public static Boolean toBooleanObject(String str) {
        return str != null ? Boolean.valueOf(str) : null;
    }","  public void test16()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.toBooleanObject((String) null);
}"
197,"    public static boolean and(final boolean... array) {
        return BooleanUtils.and(array);
    }","  public void test17()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      boolean boolean0 = BooleanUtil.and(booleanArray0);
}"
198,"    public static boolean or(final boolean... array) {
        return BooleanUtils.or(array);
    }","  public void test18()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[13];
      boolean boolean0 = BooleanUtil.or(booleanArray0);
}"
199,"    public static Boolean parseGeneralString(String str) {
        return BooleanUtils.toBooleanObject(str);
    }","  public void test19()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.parseGeneralString((String) null);
}"
200,,"  public void test20()  throws Throwable  {
      BooleanUtil booleanUtil0 = new BooleanUtil();
  }"
201,"    public static boolean toBoolean(String str) {
        return Boolean.parseBoolean(str);
    }","  public void test21()  throws Throwable  {
      boolean boolean0 = BooleanUtil.toBoolean(""\"""");
}"
202,"    public static boolean negate(final boolean bool) {
        return !bool;
    }","  public void test22()  throws Throwable  {
      Boolean boolean0 = BooleanUtil.negate((Boolean) null);
}"
203,"    public static Boolean parseGeneralString(String str) {
        return BooleanUtils.toBooleanObject(str);
    }","  public void test23()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean boolean1 = BooleanUtil.parseGeneralString((String) null, boolean0);
}"
204,"    public static Properties loadFromString(String content) {
        Properties p = new Properties();
        Reader reader = new StringReader(content);
        try {
            p.load(reader);
        } catch (IOException ignored) {
        } finally {
            IOUtil.closeQuietly(reader);
        }

        return p;
    }","  public void test0()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString("""");
}"
205,"    public static Properties loadFromFile(String generalPath) {
        Properties p = new Properties();
        InputStream is = null;
        try {
            is = URLResourceUtil.asStream(generalPath);
            p.load(is);
        } catch (IOException e) {
            logger.warn(""Load property from "" + generalPath + "" fail "", e);
        } finally {
            IOUtil.closeQuietly(is);
        }
        return p;
    }","  public void test1()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("".2+)*{6W1rJ)uRav"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ""%c0zm3p_WY%~jecS[NF"");
      Properties properties0 = PropertiesUtil.loadFromFile("".2+)*{6W1rJ)uRav"");
}"
206,"    public static String getString(Properties p, String name, String defaultValue) {
        return p.getProperty(name, defaultValue);
    }","  public void test2()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString(""ikx`t3n,C3"");
      String string0 = PropertiesUtil.getString(properties0, ""com.google.common.io.PatternFilenameFilter"", (String) null);
}"
207,"    public static String getString(Properties p, String name, String defaultValue) {
        return p.getProperty(name, defaultValue);
    }","  public void test3()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString(""org.sp1ingside.modules.Dtils.io.IOUtil"");
      String string0 = PropertiesUtil.getString(properties0, ""org.sp1ingside.modules.Dtils.io.IOUtil"", ""org.sp1ingside.modules.Dtils.io.IOUtil"");
}"
208,"    public static Long getLong(Properties p, String name, Long defaultValue) {
        return NumberUtil.toLongObject(p.getProperty(name), defaultValue);
    }","  public void test4()  throws Throwable  {
      Properties properties0 = new Properties();
      Long long0 = PropertiesUtil.getLong(properties0, ""?8a8wO(aA)<&k~;CY"", (Long) null);
}"
209,"    public static Long getLong(Properties p, String name, Long defaultValue) {
        return NumberUtil.toLongObject(p.getProperty(name), defaultValue);
    }","  public void test5()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile(""JDwOl8YtsOBY+N*PY"");
      Long long0 = new Long(0L);
      Long long1 = PropertiesUtil.getLong(properties0, ""JDwOl8YtsOBY+N*PY"", long0);
}"
210,"    public static Long getLong(Properties p, String name, Long defaultValue) {
        return NumberUtil.toLongObject(p.getProperty(name), defaultValue);
    }","  public void test6()  throws Throwable  {
      Properties properties0 = new Properties();
      Long long0 = new Long(1L);
      Long long1 = PropertiesUtil.getLong(properties0, "" fail "", long0);
}"
211,"    public static Integer getInt(Properties p, String name, Integer defaultValue) {
        return NumberUtil.toIntObject(p.getProperty(name), defaultValue);
    }","  public void test7()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile(""com.google.common.io.PatternFilenameFilter"");
      Integer integer0 = PropertiesUtil.getInt(properties0, ""com.google.common.io.PatternFilenameFilter"", (Integer) null);
}"
212,"    public static Integer getInt(Properties p, String name, Integer defaultValue) {
        return NumberUtil.toIntObject(p.getProperty(name), defaultValue);
    }","  public void test8()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString(""org.springside.modules.utils.base.PropertiesUtil"");
      Integer integer0 = new Integer(0);
      Integer integer1 = PropertiesUtil.getInt(properties0, ""org.springside.modules.utils.base.PropertiesUtil"", integer0);
}"
213,"    public static Integer getInt(Properties p, String name, Integer defaultValue) {
        return NumberUtil.toIntObject(p.getProperty(name), defaultValue);
    }","  public void test9()  throws Throwable  {
      Properties properties0 = new Properties();
      Integer integer0 = Integer.valueOf(313);
      Integer integer1 = PropertiesUtil.getInt(properties0, ""Q3jd$s"", integer0);
}"
214,"    public static Integer getInt(Properties p, String name, Integer defaultValue) {
        return NumberUtil.toIntObject(p.getProperty(name), defaultValue);
    }","  public void test10()  throws Throwable  {
      Properties properties0 = new Properties();
      Integer integer0 = new Integer((-1));
      Integer integer1 = PropertiesUtil.getInt(properties0, """", integer0);
}"
215,"    public static Double getDouble(Properties p, String name, Double defaultValue) {
        return NumberUtil.toDoubleObject(p.getProperty(name), defaultValue);
    }","  public void test11()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile(""com.google.common.io.PatternFilenameFilter"");
      Double double0 = PropertiesUtil.getDouble(properties0, ""com.google.common.io.PatternFilenameFilter"", (Double) null);
}"
216,"    public static Double getDouble(Properties p, String name, Double defaultValue) {
        return NumberUtil.toDoubleObject(p.getProperty(name), defaultValue);
    }","  public void test12()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString(""Load property from "");
      Double double0 = new Double(0.0);
      Double double1 = PropertiesUtil.getDouble(properties0, ""Load property from "", double0);
}"
217,"    public static Double getDouble(Properties p, String name, Double defaultValue) {
        return NumberUtil.toDoubleObject(p.getProperty(name), defaultValue);
    }","  public void test13()  throws Throwable  {
      Properties properties0 = new Properties();
      Double double0 = new Double(3080.15342399);
      Double double1 = PropertiesUtil.getDouble(properties0, """", double0);
}"
218,"    public static Boolean getBoolean(Properties p, String name, Boolean defaultValue) {
        return BooleanUtil.toBooleanObject(p.getProperty(name), defaultValue);
    }","  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      Boolean boolean0 = PropertiesUtil.getBoolean(properties0, ""sB,vy\""h[%#izD_*[4"", (Boolean) null);
}"
219,"    public static Boolean getBoolean(Properties p, String name, Boolean defaultValue) {
        return BooleanUtil.toBooleanObject(p.getProperty(name), defaultValue);
    }","  public void test15()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString(""Load property from "");
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = PropertiesUtil.getBoolean(properties0, ""Load property from "", boolean0);
}"
220,"    public static Properties loadFromString(String content) {
        Properties p = new Properties();
        Reader reader = new StringReader(content);
        try {
            p.load(reader);
        } catch (IOException ignored) {
        } finally {
            IOUtil.closeQuietly(reader);
        }

        return p;
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromString((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
221,"    public static Properties loadFromString(String content) {
        Properties p = new Properties();
        Reader reader = new StringReader(content);
        try {
            p.load(reader);
        } catch (IOException ignored) {
        } finally {
            IOUtil.closeQuietly(reader);
        }

        return p;
    }","  public void test17()  throws Throwable  {
      String string0 = ""S\\u^^V^d]"";
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromString(string0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed \\uxxxx encoding.
         //
         verifyException(""java.util.Properties"", e);
      }
  }"
222,"    public static Properties loadFromFile(String generalPath) {
        Properties p = new Properties();
        InputStream is = null;
        try {
            is = URLResourceUtil.asStream(generalPath);
            p.load(is);
        } catch (IOException e) {
            logger.warn(""Load property from "" + generalPath + "" fail "", e);
        } finally {
            IOUtil.closeQuietly(is);
        }
        return p;
    }","  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""Q"");
      String string0 = ""r^:\\u+y8>;ej?r_"";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromFile(""Q"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed \\uxxxx encoding.
         //
         verifyException(""java.util.Properties"", e);
      }
  }"
223,"    public static String getString(Properties p, String name, String defaultValue) {
        return p.getProperty(name, defaultValue);
    }","  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesUtil.getString((Properties) null, ""J)#"", ""org.springside.modules.utils.base.PropertiesUtil"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.PropertiesUtil"", e);
      }
  }"
224,"    public static Long getLong(Properties p, String name, Long defaultValue) {
        return NumberUtil.toLongObject(p.getProperty(name), defaultValue);
    }","  public void test20()  throws Throwable  {
      Long long0 = new Long(763L);
      // Undeclared exception!
      try { 
        PropertiesUtil.getLong((Properties) null, "" fail "", long0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.PropertiesUtil"", e);
      }
  }"
225,"    public static Double getDouble(Properties p, String name, Double defaultValue) {
        return NumberUtil.toDoubleObject(p.getProperty(name), defaultValue);
    }","  public void test21()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromFile("" fail "");
      Double double0 = new Double((-730.6777606374488));
      // Undeclared exception!
      try { 
        PropertiesUtil.getDouble(properties0, (String) null, double0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
226,"    public static Boolean getBoolean(Properties p, String name, Boolean defaultValue) {
        return BooleanUtil.toBooleanObject(p.getProperty(name), defaultValue);
    }","  public void test22()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        PropertiesUtil.getBoolean((Properties) null, """", boolean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.PropertiesUtil"", e);
      }
  }"
227,"    public static Boolean getBoolean(Properties p, String name, Boolean defaultValue) {
        return BooleanUtil.toBooleanObject(p.getProperty(name), defaultValue);
    }","  public void test23()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString(""org.sp1ingside.modules.Dtils.io.IOUtil"");
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = PropertiesUtil.getBoolean(properties0, ""org.sp1ingside.modules.Dtils.io.IOUtil"", boolean0);
}"
228,"    public static Double getDouble(Properties p, String name, Double defaultValue) {
        return NumberUtil.toDoubleObject(p.getProperty(name), defaultValue);
    }","  public void test24()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString(""org.sp1ingside.modules.Dtils.io.IOUtil"");
      Double double0 = new Double((-14L));
      Double double1 = PropertiesUtil.getDouble(properties0, ""org.sp1ingside.modules.Dtils.io.IOUtil"", double0);
}"
229,,"  public void test25()  throws Throwable  {
      PropertiesUtil propertiesUtil0 = new PropertiesUtil();
  }"
230,"    public static Long getLong(Properties p, String name, Long defaultValue) {
        return NumberUtil.toLongObject(p.getProperty(name), defaultValue);
    }","  public void test26()  throws Throwable  {
      Properties properties0 = PropertiesUtil.loadFromString(""org.sp1ingside.modules.Dtils.io.IOUtil"");
      Long long0 = new Long((-14L));
      Long long1 = PropertiesUtil.getLong(properties0, ""org.sp1ingside.modules.Dtils.io.IOUtil"", long0);
}"
231,"    public static String getString(Properties p, String name, String defaultValue) {
        return p.getProperty(name, defaultValue);
    }","  public void test27()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = PropertiesUtil.getString(properties0, """", ""?8a8wO(aA)<&k~;CY"");
}"
232,"    public static Properties loadFromFile(String generalPath) {
        Properties p = new Properties();
        InputStream is = null;
        try {
            is = URLResourceUtil.asStream(generalPath);
            p.load(is);
        } catch (IOException e) {
            logger.warn(""Load property from "" + generalPath + "" fail "", e);
        } finally {
            IOUtil.closeQuietly(is);
        }
        return p;
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertiesUtil.loadFromFile("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
233,"    public static Integer getInt(Properties p, String name, Integer defaultValue) {
        return NumberUtil.toIntObject(p.getProperty(name), defaultValue);
    }","  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        PropertiesUtil.getInt((Properties) null, (String) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.PropertiesUtil"", e);
      }
  }"
234,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.positive("""", (-1135.042));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         //  (-1135.042) must be >= 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
235,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test1()  throws Throwable  {
      Long long0 = new Long((-2008L));
      // Undeclared exception!
      try { 
        MoreValidate.positive(""<zw~Y2td&ETXvc$ u"", long0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // <zw~Y2td&ETXvc$ u (-2008) must be > 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
236,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.positive(""I)O^8h^wyO+"", 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // I)O^8h^wyO+ (0) must be > 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
237,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        MoreValidate.positive(""(zCKj&.]fy"", integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // (zCKj&.]fy (0) must be > 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
238,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.positive(""Y%HQ+{!`R,W\n#/?"", (-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Y%HQ+{!`R,W
         // #/? (-1) must be > 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
239,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test5()  throws Throwable  {
      Long long0 = new Long(4294967295L);
      Long long1 = MoreValidate.positive(""C"", long0);
}"
240,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test6()  throws Throwable  {
      Long long0 = new Long(1073741824L);
      Long long1 = MoreValidate.positive("""", long0);
}"
241,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test7()  throws Throwable  {
      Long long0 = Long.valueOf(37L);
      Long long1 = MoreValidate.positive(""+LB[54z+rYx><A"", long0);
}"
242,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test8()  throws Throwable  {
      Integer integer0 = new Integer(2146751218);
      Integer integer1 = MoreValidate.positive(""696fD&g"", integer0);
}"
243,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(1073741824);
      Integer integer1 = MoreValidate.positive(""vsUCw:b"", integer0);
}"
244,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(4193);
      Integer integer1 = MoreValidate.positive(""oi$"", integer0);
}"
245,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test11()  throws Throwable  {
      Long long0 = new Long(1L);
      Long long1 = MoreValidate.nonNegative((String) null, long0);
}"
246,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test12()  throws Throwable  {
      Long long0 = new Long(4294967293L);
      Long long1 = MoreValidate.nonNegative(""8d &;toQBI`B"", long0);
}"
247,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = MoreValidate.nonNegative((String) null, integer0);
}"
248,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1741);
      Integer integer1 = MoreValidate.nonNegative("""", integer0);
}"
249,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test15()  throws Throwable  {
      long long0 = MoreValidate.nonNegative(""^f8#b7^;_"", 0L);
}"
250,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test16()  throws Throwable  {
      int int0 = MoreValidate.nonNegative(""vsUCw:b"", 15);
}"
251,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test17()  throws Throwable  {
      double double0 = MoreValidate.nonNegative("") must be >= 0"", 0.0);
}"
252,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.positive(""$-<d$VO$L[=&UOgJssx"", (Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
253,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.positive((String) null, (Integer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
254,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.nonNegative("";+UxW#\""j4oMZ;T"", (Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
255,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.nonNegative(""oi$"", (Integer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
256,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.nonNegative(""+zC)$MYV74F"", (-1828.48810867));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // +zC)$MYV74F (-1828.48810867) must be >= 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
257,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test23()  throws Throwable  {
      double double0 = MoreValidate.nonNegative(""F\"";.S6[uR{"", 1235.90564);
}"
258,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test24()  throws Throwable  {
      Long long0 = Long.getLong("""", (-1L));
      // Undeclared exception!
      try { 
        MoreValidate.nonNegative("""", long0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         //  (-1) must be >= 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
259,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test25()  throws Throwable  {
      Long long0 = new Long(0);
      Long long1 = MoreValidate.nonNegative((String) null, long0);
}"
260,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.nonNegative((String) null, (-1262L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // null (-1262) must be >= 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
261,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test27()  throws Throwable  {
      long long0 = MoreValidate.nonNegative(""+LB[54z+rYx><A"", (long) 37);
}"
262,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-640));
      // Undeclared exception!
      try { 
        MoreValidate.nonNegative(""+LB[54z+rYx><A"", integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // +LB[54z+rYx><A (-640) must be >= 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
263,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(2147084116);
      Integer integer1 = MoreValidate.nonNegative("""", integer0);
}"
264,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.nonNegative(""}z"", (-820));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // }z (-820) must be >= 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
265,"    public static int nonNegative(@Nullable String role, int x) {
        if (x < 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be >= 0"");
        }
        return x;
    }","  public void test31()  throws Throwable  {
      int int0 = MoreValidate.nonNegative((String) null, 0);
}"
266,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.positive(""Y"", 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Y (0.0) must be >= 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
267,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test33()  throws Throwable  {
      double double0 = MoreValidate.positive((String) null, 1260.0);
}"
268,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test34()  throws Throwable  {
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        MoreValidate.positive("""", long0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         //  (0) must be > 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
269,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.positive("") must be >= 0"", (long) (-1512));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // ) must be >= 0 (-1512) must be > 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
270,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test36()  throws Throwable  {
      Long long0 = new Long(1710L);
      long long1 = MoreValidate.positive(""1710"", (long) long0);
}"
271,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test37()  throws Throwable  {
      Integer integer0 = new Integer((-3));
      // Undeclared exception!
      try { 
        MoreValidate.positive(""8d &;toQBI`B"", integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // 8d &;toQBI`B (-3) must be > 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
272,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreValidate.positive("""", 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         //  (0) must be > 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
273,"    public static int positive(@Nullable String role, int x) {
        if (x <= 0) {
            throw new IllegalArgumentException(role + "" ("" + x + "") must be > 0"");
        }
        return x;
    }","  public void test39()  throws Throwable  {
      int int0 = MoreValidate.positive(""+LB[54z+rYx><A"", 37);
}"
274,,"  public void test40()  throws Throwable  {
      MoreValidate moreValidate0 = new MoreValidate();
  }"
275,"    public static <E extends Enum<E>> long generateBits(final Class<E> enumClass, final Iterable<? extends E> values) {
        return EnumUtils.generateBitVector(enumClass, values);
    }","  public void test0()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[0];
      long long0 = EnumUtil.generateBits(class0, locale_FilteringModeArray0);
}"
276,"    public static <E extends Enum<E>> long generateBits(final Class<E> enumClass, final Iterable<? extends E> values) {
        return EnumUtils.generateBitVector(enumClass, values);
    }","  public void test1()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringModeArray0[0];
      locale_FilteringModeArray0[3] = locale_FilteringModeArray0[1];
      locale_FilteringModeArray0[4] = locale_FilteringMode0;
      locale_FilteringModeArray0[5] = locale_FilteringModeArray0[0];
      locale_FilteringModeArray0[6] = locale_FilteringMode0;
      long long0 = EnumUtil.generateBits(class0, locale_FilteringModeArray0);
}"
277,"    public static <E extends Enum<E>> long generateBits(final Class<E> enumClass, final Iterable<? extends E> values) {
        return EnumUtils.generateBitVector(enumClass, values);
    }","  public void test2()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      long long0 = EnumUtil.generateBits(class0, (Iterable<? extends Locale.FilteringMode>) linkedList0);
}"
278,"    public static <E extends Enum<E>> long generateBits(final Class<E> enumClass, final Iterable<? extends E> values) {
        return EnumUtils.generateBitVector(enumClass, values);
    }","  public void test3()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      long long0 = EnumUtil.generateBits(class0, (Iterable<? extends Locale.FilteringMode>) enumSet0);
}"
279,"    public static <E extends Enum<E>> EnumSet<E> processBits(final Class<E> enumClass, final long value) {
        return EnumUtils.processBitVector(enumClass, value);
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        EnumUtil.processBits((Class<Locale.FilteringMode>) null, 1029L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // EnumClass must be defined.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
280,"    public static <E extends Enum<E>> long generateBits(final Class<E> enumClass, final Iterable<? extends E> values) {
        return EnumUtils.generateBitVector(enumClass, values);
    }","  public void test5()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      // Undeclared exception!
      try { 
        EnumUtil.generateBits(class0, (Iterable<? extends Locale.FilteringMode>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
281,"    public static <E extends Enum<E>> long generateBits(final Class<E> enumClass, final Iterable<? extends E> values) {
        return EnumUtils.generateBitVector(enumClass, values);
    }","  public void test6()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      // Undeclared exception!
      try { 
        EnumUtil.generateBits(class0, locale_FilteringModeArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
282,,"  public void test7()  throws Throwable  {
      EnumUtil enumUtil0 = new EnumUtil();
  }"
283,"    public static <E extends Enum<E>> EnumSet<E> processBits(final Class<E> enumClass, final long value) {
        return EnumUtils.processBitVector(enumClass, value);
    }","  public void test8()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumUtil.processBits(class0, 0L);
}"
284,,"  public void test0()  throws Throwable  {
      Properties properties0 = new Properties();
      SystemPropertiesUtil.ListenableProperties systemPropertiesUtil_ListenableProperties0 = new SystemPropertiesUtil.ListenableProperties(properties0);
      SystemPropertiesUtil.PropertiesListener systemPropertiesUtil_PropertiesListener0 = mock(SystemPropertiesUtil.PropertiesListener.class, new ViolatedAssumptionAnswer());
      systemPropertiesUtil_ListenableProperties0.register(systemPropertiesUtil_PropertiesListener0);
      // Undeclared exception!
      try { 
        systemPropertiesUtil_ListenableProperties0.setProperty("""", ""XMh~}Stw:"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
285,,"  public void test1()  throws Throwable  {
      Properties properties0 = new Properties();
      SystemPropertiesUtil.ListenableProperties systemPropertiesUtil_ListenableProperties0 = new SystemPropertiesUtil.ListenableProperties(properties0);
      Object object0 = systemPropertiesUtil_ListenableProperties0.setProperty(""P<X>iE~ALp]-'Ls7"", """");
}"
286,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test2()  throws Throwable  {
      String string0 = SystemPropertiesUtil.getString(""|<"", "":``/B%PNtKa"", (String) null);
}"
287,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test3()  throws Throwable  {
      String string0 = SystemPropertiesUtil.getString(""com.google.common.io.PatternFilenameFilter"", (String) null);
}"
288,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test4()  throws Throwable  {
      String string0 = SystemPropertiesUtil.getString(""0*.9.dDd=WX8@O"", """");
}"
289,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test5()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = SystemPropertiesUtil.getLong(""'bLo)h5n"", ""'bLo)h5n"", long0);
}"
290,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test6()  throws Throwable  {
      Long long0 = new Long(1L);
      Long long1 = SystemPropertiesUtil.getLong(""t6Af-"", ""t6Af-"", long0);
}"
291,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test7()  throws Throwable  {
      Long long0 = new Long((-855L));
      Long long1 = SystemPropertiesUtil.getLong(""|]_'"", ""|]_'"", long0);
}"
292,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test8()  throws Throwable  {
      Long long0 = SystemPropertiesUtil.getLong("""", (Long) null);
}"
293,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test9()  throws Throwable  {
      Long long0 = new Long(0);
      Long long1 = SystemPropertiesUtil.getLong(""I;b:^xy(qh_\u0002a-5"", long0);
}"
294,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test10()  throws Throwable  {
      Long long0 = new Long((-1284L));
      Long long1 = SystemPropertiesUtil.getLong(""RSq)ygOsS"", long0);
}"
295,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test11()  throws Throwable  {
      Integer integer0 = SystemPropertiesUtil.getInteger(""B"", ""B"", (Integer) null);
}"
296,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(872);
      Integer integer1 = SystemPropertiesUtil.getInteger(""6nn"", ""6nn"", integer0);
}"
297,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-6184));
      Integer integer1 = SystemPropertiesUtil.getInteger(""U@4(VPS"", ""U@4(VPS"", integer0);
}"
298,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = SystemPropertiesUtil.getInteger(""NL~"", integer0);
}"
299,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(616);
      Integer integer1 = SystemPropertiesUtil.getInteger(""N2=cgn`><"", integer0);
}"
300,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-1358));
      Integer integer1 = SystemPropertiesUtil.getInteger((String) null, integer0);
}"
301,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test17()  throws Throwable  {
      Double double0 = SystemPropertiesUtil.getDouble(""U1>5"", ""U1>5"", (Double) null);
}"
302,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test18()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double double1 = SystemPropertiesUtil.getDouble(""DSYIu9"", ""m{;C8b<["", double0);
}"
303,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test19()  throws Throwable  {
      Double double0 = new Double((-6184));
      Double double1 = SystemPropertiesUtil.getDouble(""U@4(VPS"", ""U@4(VPS"", double0);
}"
304,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test20()  throws Throwable  {
      Double double0 = SystemPropertiesUtil.getDouble(""hVAfA(("", (Double) null);
}"
305,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test21()  throws Throwable  {
      Double double0 = new Double(9.001684426);
      Double double1 = SystemPropertiesUtil.getDouble(""I#W&?@~(Wx/|N<]$S"", double0);
}"
306,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test22()  throws Throwable  {
      Double double0 = new Double(0);
      Double double1 = SystemPropertiesUtil.getDouble(""B"", double0);
}"
307,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test23()  throws Throwable  {
      Double double0 = new Double((-2498.0661777969));
      Double double1 = SystemPropertiesUtil.getDouble(""2`rc "", double0);
}"
308,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test24()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = SystemPropertiesUtil.getBoolean(""dQ{se)Zj _"", ""dQ{se)Zj _"", boolean0);
}"
309,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test25()  throws Throwable  {
      Boolean boolean0 = SystemPropertiesUtil.getBoolean(""c"", (Boolean) null);
}"
310,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test26()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = SystemPropertiesUtil.getBoolean(""C@"", boolean0);
}"
311,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test27()  throws Throwable  {
      Boolean boolean0 = new Boolean(""c"");
      Boolean boolean1 = SystemPropertiesUtil.getBoolean(""c"", boolean0);
}"
312,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getString((String) null, ""*vlK];WDCNn]3%!u"", ""com.google.common.io.PatternFilenameFilter"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
313,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getString("""", """", ""]R1"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
314,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getString(""<@X*bk.*G!err6T<Ar"", ""<@X*bk.*G!err6T<Ar"", ""<@X*bk.*G!err6T<Ar"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // envName <@X*bk.*G!err6T<Ar has dot which is not valid
         //
         verifyException(""org.springside.modules.utils.base.SystemPropertiesUtil"", e);
      }
  }"
315,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getString((String) null, ""N2=cgn`><"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
316,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getString("""", ""I;b:^xy(qh_\u0002a-5"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
317,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getString((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
318,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getString("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
319,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test35()  throws Throwable  {
      Long long0 = new Long(2821L);
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getLong((String) null, "";K';'_ar1LW"", long0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
320,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test36()  throws Throwable  {
      Long long0 = SystemPropertiesUtil.getLong("" out of range"");
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getLong("""", ""n}'n|MN"", long0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
321,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getInteger((String) null, ""`N mMVW%1RlBiAv[_"", integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
322,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getInteger("""", """", integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
323,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getInteger(""com.google.common.io.PatternFilenameFilter"", ""com.google.common.io.PatternFilenameFilter"", integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // envName com.google.common.io.PatternFilenameFilter has dot which is not valid
         //
         verifyException(""org.springside.modules.utils.base.SystemPropertiesUtil"", e);
      }
  }"
324,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getDouble((String) null, """", (Double) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
325,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test41()  throws Throwable  {
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getDouble("""", "" has dot which is not valid"", double0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
326,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test42()  throws Throwable  {
      Double double0 = new Double(1.0);
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getDouble(""m{;C8b<["", (String) null, double0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // envName null has dot which is not valid
         //
         verifyException(""org.springside.modules.utils.base.SystemPropertiesUtil"", e);
      }
  }"
327,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getDouble((String) null, (Double) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
328,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getDouble("""", (Double) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
329,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getDouble((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
330,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getDouble("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
331,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test47()  throws Throwable  {
      Boolean boolean0 = SystemPropertiesUtil.getBoolean(""ZH$a@?bN{!m%0kqCXN"");
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getBoolean((String) null, ""XhvAr8hVX:W_-T[X$}9"", boolean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
332,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test48()  throws Throwable  {
      Boolean boolean0 = new Boolean("""");
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getBoolean("""", """", boolean0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
333,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test49()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getBoolean(""tQhN/d#"", (String) null, boolean0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // envName null has dot which is not valid
         //
         verifyException(""org.springside.modules.utils.base.SystemPropertiesUtil"", e);
      }
  }"
334,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getBoolean((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
335,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getBoolean("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
336,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test52()  throws Throwable  {
      Long long0 = new Long(872);
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getLong(""6nn"", ""org.springside.modules.utils.base.SystemPropertiesUtil"", long0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // envName org.springside.modules.utils.base.SystemPropertiesUtil has dot which is not valid
         //
         verifyException(""org.springside.modules.utils.base.SystemPropertiesUtil"", e);
      }
  }"
337,"    public static synchronized void registerSystemPropertiesListener(PropertiesListener listener) {
        Properties currentProperties = System.getProperties();

        if (!(currentProperties instanceof ListenableProperties)) {
            ListenableProperties newProperties = new ListenableProperties(currentProperties);
            System.setProperties(newProperties);
            currentProperties = newProperties;
        }

        ((ListenableProperties) currentProperties).register(listener);
    }","  public void test53()  throws Throwable  {
      SystemPropertiesUtil.PropertiesListener systemPropertiesUtil_PropertiesListener0 = mock(SystemPropertiesUtil.PropertiesListener.class, new ViolatedAssumptionAnswer());
      SystemPropertiesUtil.registerSystemPropertiesListener(systemPropertiesUtil_PropertiesListener0);
      SystemPropertiesUtil.PropertiesListener systemPropertiesUtil_PropertiesListener1 = mock(SystemPropertiesUtil.PropertiesListener.class, new ViolatedAssumptionAnswer());
      SystemPropertiesUtil.registerSystemPropertiesListener(systemPropertiesUtil_PropertiesListener1);
  }"
338,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test54()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean boolean1 = SystemPropertiesUtil.getBoolean(""_"", ""_"", boolean0);
}"
339,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test55()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean boolean1 = SystemPropertiesUtil.getBoolean(""_"", ""_"", boolean0);
}"
340,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test56()  throws Throwable  {
      Boolean boolean0 = SystemPropertiesUtil.getBoolean(""`N mMVW%1RlBiAv[_"", ""QjC Ef#2ytd\""e"", (Boolean) null);
}"
341,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test57()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = SystemPropertiesUtil.getDouble(""QjC Ef#2ytd\""e"", ""wG("", double0);
}"
342,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test58()  throws Throwable  {
      Long long0 = SystemPropertiesUtil.getLong(""%\"""", ""-fg4zdy)Vv>$4I"", (Long) null);
}"
343,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = SystemPropertiesUtil.getInteger(""envName "", ""`N mMVW%1RlBiAv[_"", integer0);
}"
344,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test60()  throws Throwable  {
      String string0 = SystemPropertiesUtil.getString(""_"", ""_"", ""_"");
}"
345,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test61()  throws Throwable  {
      String string0 = SystemPropertiesUtil.getString(""_"", ""_"", ""_"");
}"
346,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test62()  throws Throwable  {
      String string0 = SystemPropertiesUtil.getString(""l5"", ""&-Q@Er~8QVee"", """");
}"
347,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test63()  throws Throwable  {
      String string0 = SystemPropertiesUtil.getString(""l5"", ""&-Q@Er~8QVee"", """");
}"
348,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test64()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double double1 = SystemPropertiesUtil.getDouble(""-fg4zdy)Vv>$4I"", double0);
}"
349,,"  public void test65()  throws Throwable  {
      SystemPropertiesUtil systemPropertiesUtil0 = new SystemPropertiesUtil();
  }"
350,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test66()  throws Throwable  {
      String string0 = SystemPropertiesUtil.getString(""l5"", ""l5"");
}"
351,"    public static String getString(String name) {
        return System.getProperty(name);
    }","  public void test67()  throws Throwable  {
      String string0 = SystemPropertiesUtil.getString(""com.google.common.io.PatternFilenameFilter"");
}"
352,"    public static Double getDouble(String propertyName) {
        return NumberUtil.toDoubleObject(System.getProperty(propertyName));
    }","  public void test68()  throws Throwable  {
      Double double0 = SystemPropertiesUtil.getDouble(""com.google.common.io.PatternFilenameFilter"");
}"
353,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test69()  throws Throwable  {
      Integer integer0 = SystemPropertiesUtil.getInteger("""", (Integer) null);
}"
354,"    public static Integer getInteger(String name) {
        return Integer.getInteger(name);
    }","  public void test70()  throws Throwable  {
      Integer integer0 = SystemPropertiesUtil.getInteger(""Y&?Oc/O)!"");
}"
355,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test71()  throws Throwable  {
      Boolean boolean0 = SystemPropertiesUtil.getBoolean(""U0]E\u0006;_J[j9TcV."");
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getBoolean((String) null, boolean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
356,"    public static Long getLong(String name) {
        return Long.getLong(name);
    }","  public void test72()  throws Throwable  {
      Long long0 = new Long(1084L);
      Long long1 = SystemPropertiesUtil.getLong("" "", long0);
}"
357,"    public static Boolean getBoolean(String name) {
        String stringResult = System.getProperty(name);
        return BooleanUtil.toBooleanObject(stringResult);
    }","  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemPropertiesUtil.getBoolean("""", (Boolean) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
358,"    public static String toPrettyString(Object value) {
        if (value == null) {
            return NULL;
        }

        Class<?> type = value.getClass();

        if (type.isArray()) {
            Class componentType = type.getComponentType();

            if (componentType.isPrimitive()) {
                StringBuilder sb = new StringBuilder();

                if (componentType == int.class) {
                    sb.append(Arrays.toString((int[]) value));
                } else if (componentType == long.class) {
                    sb.append(Arrays.toString((long[]) value));
                } else if (componentType == double.class) {
                    sb.append(Arrays.toString((double[]) value));
                } else if (componentType == float.class) {
                    sb.append(Arrays.toString((float[]) value));
                } else if (componentType == boolean.class) {
                    sb.append(Arrays.toString((boolean[]) value));
                } else if (componentType == short.class) {
                    sb.append(Arrays.toString((short[]) value));
                } else if (componentType == byte.class) {
                    sb.append(Arrays.toString((byte[]) value));
                } else {
                    throw new IllegalArgumentException(""unsupport array type"");
                }

                return sb.toString();
            } else {
                StringBuilder sb = new StringBuilder();
                sb.append('[');

                Object[] array = (Object[]) value;
                for (int i = 0; i < array.length; i++) {
                    if (i > 0) {
                        sb.append("", "");
                    }
                    sb.append(toPrettyString(array[i]));
                }
                sb.append(']');
                return sb.toString();
            }
        } else if (value instanceof Iterable) {
            Iterable iterable = (Iterable) value;
            StringBuilder sb = new StringBuilder();
            sb.append('{');
            int i = 0;
            for (Object o : iterable) {
                if (i > 0) {
                    sb.append(',');
                }
                sb.append(toPrettyString(o));
                i++;
            }
            sb.append('}');
            return sb.toString();
        }

        return value.toString();
    }","  public void test0()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      ObjectUtil.toPrettyString(objectUtil0);
      Object[] objectArray0 = new Object[1];
      String string0 = ""com.google.common.io.PatternFilenameFilter"";
      SQLWarning sQLWarning0 = new SQLWarning(""com.google.common.io.PatternFilenameFilter"", ""com.google.common.io.PatternFilenameFilter"");
      int int0 = 0;
      // Undeclared exception!
      try { 
        sQLWarning0.setStackTrace((StackTraceElement[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.lang.Throwable"", e);
      }
  }"
359,,"  public void test1()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("""", """");
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.addSuppressed((Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException(""java.lang.Throwable"", e);
      }
  }"
360,"    public static int hashCode(Object... objects) {
        return Arrays.hashCode(objects);
    }","  public void test2()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Object object0 = new Object();
      ObjectUtil.toPrettyString(object0);
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) ""java.lang.Object@0000000002"";
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) ""java.lang.Object@0000000002"";
      ObjectUtil.hashCode(objectArray0);
  }"
361,"    public static int hashCode(Object... objects) {
        return Arrays.hashCode(objects);
    }","  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      ObjectUtil.hashCode(objectArray0);
      ObjectUtil.toPrettyString((Object) null);
      ObjectUtil.hashCode(objectArray0);
      String string0 = """";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("""");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("""", ""null"", (String) null, 198);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string1 = ""g9 !cn=OR!2{s"";
      StackTraceElement stackTraceElement1 = new StackTraceElement("""", ""g9 !cn=OR!2{s"", ""com.google.common.io.PatternFilenameFilter"", 198);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("""", ""g9 !cn=OR!2{s"", """", 198);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement(""64K"", ""org.springside.modules.utils.base.ObjectUtil"", ""null"", 198);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement(""org.springside.modules.utils.base.ObjectUtil"", ""null"", (String) null, 198);
      stackTraceElementArray0[4] = stackTraceElement4;
      int int0 = 0;
      StackTraceElement stackTraceElement5 = null;
      try {
        stackTraceElement5 = new StackTraceElement((String) null, ""64K"", ""org.springside.modules.utils.base.ObjectUtil"", 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
362,"    public static int hashCode(Object... objects) {
        return Arrays.hashCode(objects);
    }","  public void test4()  throws Throwable  {
      ObjectUtil objectUtil0 = new ObjectUtil();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectUtil0;
      objectArray0[1] = (Object) objectUtil0;
      objectArray0[2] = (Object) objectUtil0;
      objectArray0[3] = (Object) objectUtil0;
      ObjectUtil.hashCode(objectArray0);
  }"
363,,"  public void test5()  throws Throwable  {
      String string0 = """";
      String string1 = """";
      int int0 = 0;
      String string2 = ""CO~5"";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("""");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
364,"    public static int hashCode(Object... objects) {
        return Arrays.hashCode(objects);
    }","  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      ObjectUtil.hashCode(objectArray0);
  }"
365,"    public static RuntimeException uncheckedAndWrap(Throwable t) {

        Throwable unwrapped = unwrap(t);
        if (unwrapped instanceof RuntimeException) {
            throw (RuntimeException) unwrapped;
        }
        if (unwrapped instanceof Error) {
            throw (Error) unwrapped;
        }
        throw new UncheckedException(unwrapped);
    }","  public void test0()  throws Throwable  {
      MockError mockError0 = new MockError();
      ExceptionUtil.UncheckedException exceptionUtil_UncheckedException0 = new ExceptionUtil.UncheckedException(mockError0);
      // Undeclared exception!
      try { 
        ExceptionUtil.uncheckedAndWrap(exceptionUtil_UncheckedException0);
        fail(""Expecting exception: Error"");
      } catch(Error e) {
      }
  }"
366,"    public static RuntimeException uncheckedAndWrap(Throwable t) {

        Throwable unwrapped = unwrap(t);
        if (unwrapped instanceof RuntimeException) {
            throw (RuntimeException) unwrapped;
        }
        if (unwrapped instanceof Error) {
            throw (Error) unwrapped;
        }
        throw new UncheckedException(unwrapped);
    }","  public void test1()  throws Throwable  {
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException((String) null);
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException((String) null, exceptionUtil_CloneableRuntimeException0);
      ExecutionException executionException0 = new ExecutionException((String) null, exceptionUtil_CloneableException0);
      // Undeclared exception!
      try { 
        ExceptionUtil.uncheckedAndWrap(executionException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil"", e);
      }
  }"
367,,"  public void test2()  throws Throwable  {
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException("""");
      exceptionUtil_CloneableRuntimeException0.setMessage("""");
}"
368,,"  public void test3()  throws Throwable  {
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException(""org.springside.modules.utils.base.ExceptionUtil$UncheckedException"");
      String string0 = exceptionUtil_CloneableRuntimeException0.getMessage();
}"
369,,"  public void test4()  throws Throwable  {
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException(""y7LX-Y.4/LV J 5}]"");
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException1 = exceptionUtil_CloneableRuntimeException0.clone();
}"
370,,"  public void test5()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException();
      exceptionUtil_CloneableException0.setMessage((String) null);
}"
371,,"  public void test6()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException("""");
      String string0 = exceptionUtil_CloneableException0.getMessage();
}"
372,,"  public void test7()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException();
      ExceptionUtil.CloneableException exceptionUtil_CloneableException1 = exceptionUtil_CloneableException0.clone();
}"
373,"    public static String toStringWithShortName(@Nullable Throwable t) {
        return ExceptionUtils.getMessage(t);
    }","  public void test8()  throws Throwable  {
      String string0 = ExceptionUtil.toStringWithShortName((Throwable) null);
}"
374,"    public static Throwable getRootCause(Throwable t) {
        return Throwables.getRootCause(t);
    }","  public void test9()  throws Throwable  {
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException(""y7LX-Y.4/LV J 5}]"");
      Throwable throwable0 = ExceptionUtil.getRootCause(exceptionUtil_CloneableRuntimeException0);
}"
375,"    public static <T extends Throwable> T clearStackTrace(T exception) {
        Throwable cause = exception;
        while (cause != null) {
            cause.setStackTrace(EMPTY_STACK_TRACE);
            cause = cause.getCause();
        }
        return exception;// NOSONAR
    }","  public void test10()  throws Throwable  {
      Throwable throwable0 = ExceptionUtil.clearStackTrace((Throwable) null);
}"
376,"    public static RuntimeException uncheckedAndWrap(Throwable t) {

        Throwable unwrapped = unwrap(t);
        if (unwrapped instanceof RuntimeException) {
            throw (RuntimeException) unwrapped;
        }
        if (unwrapped instanceof Error) {
            throw (Error) unwrapped;
        }
        throw new UncheckedException(unwrapped);
    }","  public void test11()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ExceptionUtil.UncheckedException exceptionUtil_UncheckedException0 = new ExceptionUtil.UncheckedException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ExceptionUtil.uncheckedAndWrap(exceptionUtil_UncheckedException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
377,"    public static RuntimeException unchecked(Throwable t) {

        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
        if (t instanceof Error) {
            throw (Error) t;
        }
        throw new UncheckedException(t);
    }","  public void test12()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(""char"");
      // Undeclared exception!
      try { 
        ExceptionUtil.unchecked(mockRuntimeException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
378,"    public static String toStringWithShortName(@Nullable Throwable t) {
        return ExceptionUtils.getMessage(t);
    }","  public void test13()  throws Throwable  {
      ExceptionUtil.UncheckedException exceptionUtil_UncheckedException0 = new ExceptionUtil.UncheckedException((Throwable) null);
      // Undeclared exception!
      try { 
        ExceptionUtil.toStringWithShortName(exceptionUtil_UncheckedException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil$UncheckedException"", e);
      }
  }"
379,"    public static String toStringWithRootCause(@Nullable Throwable t) {
        if (t == null) {
            return StringUtils.EMPTY;
        }

        final String clsName = ClassUtils.getShortClassName(t, null);
        final String message = StringUtils.defaultString(t.getMessage());
        Throwable cause = getRootCause(t);

        StringBuilder sb = new StringBuilder(128).append(clsName).append("": "").append(message);
        if (cause != t) {
            sb.append(""; <---"").append(toStringWithShortName(cause));
        }

        return sb.toString();
    }","  public void test14()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError(""(o$<w\""z8^/ v.1("", mockRuntimeException0);
      MockThrowable mockThrowable0 = new MockThrowable(mockError0);
      mockRuntimeException0.initCause(mockThrowable0);
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException(""org.apache.commons.lang3.StringUtils"", mockThrowable0);
      // Undeclared exception!
      ExceptionUtil.toStringWithRootCause(exceptionUtil_CloneableRuntimeException0);
  }"
380,"    public static String toStringWithRootCause(@Nullable Throwable t) {
        if (t == null) {
            return StringUtils.EMPTY;
        }

        final String clsName = ClassUtils.getShortClassName(t, null);
        final String message = StringUtils.defaultString(t.getMessage());
        Throwable cause = getRootCause(t);

        StringBuilder sb = new StringBuilder(128).append(clsName).append("": "").append(message);
        if (cause != t) {
            sb.append(""; <---"").append(toStringWithShortName(cause));
        }

        return sb.toString();
    }","  public void test15()  throws Throwable  {
      ExceptionUtil.UncheckedException exceptionUtil_UncheckedException0 = new ExceptionUtil.UncheckedException((Throwable) null);
      // Undeclared exception!
      try { 
        ExceptionUtil.toStringWithRootCause(exceptionUtil_UncheckedException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil$UncheckedException"", e);
      }
  }"
381,"    public static boolean isCausedBy(Throwable t, Class<? extends Exception>... causeExceptionClasses) {
        Throwable cause = t;

        while (cause != null) {
            for (Class<? extends Exception> causeClass : causeExceptionClasses) {
                if (causeClass.isInstance(cause)) {
                    return true;
                }
            }
            cause = cause.getCause();
        }
        return false;
    }","  public void test16()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException();
      // Undeclared exception!
      try { 
        ExceptionUtil.isCausedBy(exceptionUtil_CloneableException0, (Class<? extends Exception>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
382,"    public static Throwable getRootCause(Throwable t) {
        return Throwables.getRootCause(t);
    }","  public void test17()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("" [wrapped] "");
      MockError mockError0 = new MockError(mockThrowable0);
      mockThrowable0.initCause(mockError0);
      // Undeclared exception!
      ExceptionUtil.getRootCause(mockThrowable0);
  }"
383,"    public static <T extends Throwable> T clearStackTrace(T exception) {
        Throwable cause = exception;
        while (cause != null) {
            cause.setStackTrace(EMPTY_STACK_TRACE);
            cause = cause.getCause();
        }
        return exception;// NOSONAR
    }","  public void test18()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""org.springside.modules.utils.base.ExceptionUtil$UncheckedException"");
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException("""", mockThrowable0);
      mockThrowable0.initCause(exceptionUtil_CloneableRuntimeException0);
      // Undeclared exception!
      ExceptionUtil.clearStackTrace((Throwable) mockThrowable0);
  }"
384,"    public static Throwable getRootCause(Throwable t) {
        return Throwables.getRootCause(t);
    }","  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtil.getRootCause((Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
385,"    public static String toStringWithRootCause(@Nullable Throwable t) {
        if (t == null) {
            return StringUtils.EMPTY;
        }

        final String clsName = ClassUtils.getShortClassName(t, null);
        final String message = StringUtils.defaultString(t.getMessage());
        Throwable cause = getRootCause(t);

        StringBuilder sb = new StringBuilder(128).append(clsName).append("": "").append(message);
        if (cause != t) {
            sb.append(""; <---"").append(toStringWithShortName(cause));
        }

        return sb.toString();
    }","  public void test20()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException(""D2"");
      String string0 = ExceptionUtil.toStringWithRootCause(exceptionUtil_CloneableException0);
}"
386,"    public static String toStringWithRootCause(@Nullable Throwable t) {
        if (t == null) {
            return StringUtils.EMPTY;
        }

        final String clsName = ClassUtils.getShortClassName(t, null);
        final String message = StringUtils.defaultString(t.getMessage());
        Throwable cause = getRootCause(t);

        StringBuilder sb = new StringBuilder(128).append(clsName).append("": "").append(message);
        if (cause != t) {
            sb.append(""; <---"").append(toStringWithShortName(cause));
        }

        return sb.toString();
    }","  public void test21()  throws Throwable  {
      String string0 = ExceptionUtil.toStringWithRootCause((Throwable) null);
}"
387,"    public static boolean isCausedBy(Throwable t, Class<? extends Exception>... causeExceptionClasses) {
        Throwable cause = t;

        while (cause != null) {
            for (Class<? extends Exception> causeClass : causeExceptionClasses) {
                if (causeClass.isInstance(cause)) {
                    return true;
                }
            }
            cause = cause.getCause();
        }
        return false;
    }","  public void test22()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<RuntimeException>[] classArray0 = (Class<RuntimeException>[]) Array.newInstance(Class.class, 8);
      Class<RuntimeException> class0 = RuntimeException.class;
      classArray0[0] = class0;
      boolean boolean0 = ExceptionUtil.isCausedBy(mockRuntimeException0, classArray0);
}"
388,"    public static RuntimeException uncheckedAndWrap(Throwable t) {

        Throwable unwrapped = unwrap(t);
        if (unwrapped instanceof RuntimeException) {
            throw (RuntimeException) unwrapped;
        }
        if (unwrapped instanceof Error) {
            throw (Error) unwrapped;
        }
        throw new UncheckedException(unwrapped);
    }","  public void test23()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ExceptionUtil.uncheckedAndWrap(mockError0);
        fail(""Expecting exception: Error"");
      } catch(Error e) {
      }
  }"
389,"    public static RuntimeException uncheckedAndWrap(Throwable t) {

        Throwable unwrapped = unwrap(t);
        if (unwrapped instanceof RuntimeException) {
            throw (RuntimeException) unwrapped;
        }
        if (unwrapped instanceof Error) {
            throw (Error) unwrapped;
        }
        throw new UncheckedException(unwrapped);
    }","  public void test24()  throws Throwable  {
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException();
      ExceptionUtil.UncheckedException exceptionUtil_UncheckedException0 = new ExceptionUtil.UncheckedException(exceptionUtil_CloneableRuntimeException0);
      // Undeclared exception!
      try { 
        ExceptionUtil.uncheckedAndWrap(exceptionUtil_UncheckedException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
390,"    public static Throwable unwrap(Throwable t) {
        if (t instanceof java.util.concurrent.ExecutionException
                || t instanceof java.lang.reflect.InvocationTargetException || t instanceof UncheckedException) {
            return t.getCause();
        }

        return t;
    }","  public void test25()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException();
      Throwable throwable0 = ExceptionUtil.unwrap(exceptionUtil_CloneableException0);
}"
391,"    public static Throwable unwrap(Throwable t) {
        if (t instanceof java.util.concurrent.ExecutionException
                || t instanceof java.lang.reflect.InvocationTargetException || t instanceof UncheckedException) {
            return t.getCause();
        }

        return t;
    }","  public void test26()  throws Throwable  {
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, (String) null);
      Throwable throwable0 = ExceptionUtil.unwrap(invocationTargetException0);
}"
392,"    public static Throwable unwrap(Throwable t) {
        if (t instanceof java.util.concurrent.ExecutionException
                || t instanceof java.lang.reflect.InvocationTargetException || t instanceof UncheckedException) {
            return t.getCause();
        }

        return t;
    }","  public void test27()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException(""D2"");
      ExceptionUtil.UncheckedException exceptionUtil_UncheckedException0 = new ExceptionUtil.UncheckedException(exceptionUtil_CloneableException0);
      Throwable throwable0 = ExceptionUtil.unwrap(exceptionUtil_UncheckedException0);
}"
393,"    public static Throwable unwrap(Throwable t) {
        if (t instanceof java.util.concurrent.ExecutionException
                || t instanceof java.lang.reflect.InvocationTargetException || t instanceof UncheckedException) {
            return t.getCause();
        }

        return t;
    }","  public void test28()  throws Throwable  {
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException(""{w,72/"");
      ExecutionException executionException0 = new ExecutionException(""{w,72/"", exceptionUtil_CloneableRuntimeException0);
      Throwable throwable0 = ExceptionUtil.unwrap(executionException0);
}"
394,"    public static RuntimeException unchecked(Throwable t) {

        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
        if (t instanceof Error) {
            throw (Error) t;
        }
        throw new UncheckedException(t);
    }","  public void test29()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ExceptionUtil.unchecked(mockError0);
        fail(""Expecting exception: Error"");
      } catch(Error e) {
      }
  }"
395,"    public static RuntimeException unchecked(Throwable t) {

        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
        if (t instanceof Error) {
            throw (Error) t;
        }
        throw new UncheckedException(t);
    }","  public void test30()  throws Throwable  {
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException(""sun.reflect.GeneratedConstructorAccessor41.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n"");
      // Undeclared exception!
      try { 
        ExceptionUtil.unchecked(exceptionUtil_CloneableRuntimeException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
396,"    public static RuntimeException unchecked(Throwable t) {

        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
        if (t instanceof Error) {
            throw (Error) t;
        }
        throw new UncheckedException(t);
    }","  public void test31()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException(""D2"");
      // Undeclared exception!
      try { 
        ExceptionUtil.unchecked(exceptionUtil_CloneableException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // D2
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil"", e);
      }
  }"
397,,"  public void test32()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException(""D2"");
      ExceptionUtil.UncheckedException exceptionUtil_UncheckedException0 = new ExceptionUtil.UncheckedException(exceptionUtil_CloneableException0);
      String string0 = exceptionUtil_UncheckedException0.getMessage();
}"
398,,"  public void test33()  throws Throwable  {
      ExceptionUtil.CloneableException exceptionUtil_CloneableException0 = new ExceptionUtil.CloneableException(""D2"");
      ExceptionUtil.CloneableException exceptionUtil_CloneableException1 = exceptionUtil_CloneableException0.clone(""D2"");
}"
399,"    public static String toStringWithRootCause(@Nullable Throwable t) {
        if (t == null) {
            return StringUtils.EMPTY;
        }

        final String clsName = ClassUtils.getShortClassName(t, null);
        final String message = StringUtils.defaultString(t.getMessage());
        Throwable cause = getRootCause(t);

        StringBuilder sb = new StringBuilder(128).append(clsName).append("": "").append(message);
        if (cause != t) {
            sb.append(""; <---"").append(toStringWithShortName(cause));
        }

        return sb.toString();
    }","  public void test34()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError(""(o$<w\""z8^/ v.1("", mockRuntimeException0);
      MockThrowable mockThrowable0 = new MockThrowable(mockError0);
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException(""org.apache.commons.lang3.StringUtils"", mockThrowable0);
      String string0 = ExceptionUtil.toStringWithRootCause(exceptionUtil_CloneableRuntimeException0);
}"
400,,"  public void test35()  throws Throwable  {
      ExceptionUtil exceptionUtil0 = new ExceptionUtil();
  }"
401,"    public static String toStringWithShortName(@Nullable Throwable t) {
        return ExceptionUtils.getMessage(t);
    }","  public void test36()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError(""(o$<w\""z8^/ v.1("", mockRuntimeException0);
      MockThrowable mockThrowable0 = new MockThrowable(mockError0);
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException(""org.apache.commons.lang3.StringUtils"", mockThrowable0);
      String string0 = ExceptionUtil.toStringWithShortName(exceptionUtil_CloneableRuntimeException0);
}"
402,"    public static <T extends Throwable> T clearStackTrace(T exception) {
        Throwable cause = exception;
        while (cause != null) {
            cause.setStackTrace(EMPTY_STACK_TRACE);
            cause = cause.getCause();
        }
        return exception;// NOSONAR
    }","  public void test37()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException((String) null, mockRuntimeException0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(exceptionUtil_CloneableRuntimeException0, (String) null);
      InvocationTargetException invocationTargetException1 = ExceptionUtil.clearStackTrace(invocationTargetException0);
}"
403,,"  public void test38()  throws Throwable  {
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException0 = new ExceptionUtil.CloneableRuntimeException(""{w,72/"");
      ExceptionUtil.CloneableRuntimeException exceptionUtil_CloneableRuntimeException1 = exceptionUtil_CloneableRuntimeException0.clone(""{w,72/"");
}"
404,"    public static String randomBase64(int length) {
        byte[] randomBytes = new byte[length];
        random.nextBytes(randomBytes);
        return EncodeUtil.encodeBase64UrlSafe(randomBytes);
    }","  public void test0()  throws Throwable  {
      String string0 = IdGenerator.randomBase64(69);
}"
405,"    public static String randomBase64(int length) {
        byte[] randomBytes = new byte[length];
        random.nextBytes(randomBytes);
        return EncodeUtil.encodeBase64UrlSafe(randomBytes);
    }","  public void test1()  throws Throwable  {
      String string0 = IdGenerator.randomBase64(0);
}"
406,"    public static String randomBase64(int length) {
        byte[] randomBytes = new byte[length];
        random.nextBytes(randomBytes);
        return EncodeUtil.encodeBase64UrlSafe(randomBytes);
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        IdGenerator.randomBase64((-1998));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.misc.IdGenerator"", e);
      }
  }"
407,"    public static String randomBase64(int length) {
        byte[] randomBytes = new byte[length];
        random.nextBytes(randomBytes);
        return EncodeUtil.encodeBase64UrlSafe(randomBytes);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      IdGenerator.randomBase64(362880);
  }"
408,"    public static String uuid2() {
        return UUID.randomUUID().toString().replaceAll(""-"", """");
    }","  public void test4()  throws Throwable  {
      String string0 = IdGenerator.uuid2();
}"
409,,"  public void test5()  throws Throwable  {
      IdGenerator idGenerator0 = new IdGenerator();
  }"
410,"    public static String uuid() {
        return UUID.randomUUID().toString();
    }","  public void test6()  throws Throwable  {
      String string0 = IdGenerator.uuid();
}"
411,"    public static String removeEnd(final String s, final char c) {
        if (endWith(s, c)) {
            return s.substring(0, s.length() - 1);
        }
        return s;
    }","  public void test0()  throws Throwable  {
      String string0 = MoreStringUtil.removeEnd(""wpzyb76GBoZOVVc"", '.');
}"
412,"    public static boolean startWith(@Nullable CharSequence s, char c) {
        if (StringUtils.isEmpty(s)) {
            return false;
        }
        return s.charAt(0) == c;
    }","  public void test1()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3326);
      boolean boolean0 = MoreStringUtil.startWith(charBuffer0, 'h');
}"
413,"    public static String replaceLast(@Nullable String s, char sub, char with) {
        if (s == null) {
            return null;
        }

        int index = s.lastIndexOf(sub);
        if (index == -1) {
            return s;
        }
        char[] str = s.toCharArray();
        str[index] = with;
        return new String(str);
    }","  public void test2()  throws Throwable  {
      String string0 = MoreStringUtil.replaceLast(""wpzyb76GBoZOVVc"", 'w', 'u');
}"
414,"    public static String replaceFirst(@Nullable String s, char sub, char with) {
        if (s == null) {
            return null;
        }
        int index = s.indexOf(sub);
        if (index == -1) {
            return s;
        }
        char[] str = s.toCharArray();
        str[index] = with;
        return new String(str);
    }","  public void test3()  throws Throwable  {
      String string0 = MoreStringUtil.replaceFirst(""org.springside.modules.utils.text.MoreStringUtil"", 'x', '6');
}"
415,"    public static List<String> split(@Nullable final String str, final char separatorChar, int expectParts) {
        if (str == null) {
            return null;
        }
        final int len = str.length();
        if (len == 0) {
            return ListUtil.emptyList();
        }
        final List<String> list = new ArrayList<String>(expectParts);
        int i = 0;
        int start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return list;
    }","  public void test4()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split(""..."", '.', 0);
}"
416,"    public static String replaceLast(@Nullable String s, char sub, char with) {
        if (s == null) {
            return null;
        }

        int index = s.lastIndexOf(sub);
        if (index == -1) {
            return s;
        }
        char[] str = s.toCharArray();
        str[index] = with;
        return new String(str);
    }","  public void test5()  throws Throwable  {
      String string0 = MoreStringUtil.replaceLast("""", 'w', 'u');
}"
417,"    public static String removeEnd(final String s, final char c) {
        if (endWith(s, c)) {
            return s.substring(0, s.length() - 1);
        }
        return s;
    }","  public void test6()  throws Throwable  {
      String string0 = MoreStringUtil.removeEnd((String) null, 'R');
}"
418,"    public static String removeEnd(final String s, final char c) {
        if (endWith(s, c)) {
            return s.substring(0, s.length() - 1);
        }
        return s;
    }","  public void test7()  throws Throwable  {
      String string0 = MoreStringUtil.removeEnd("""", 'Q');
}"
419,"    public static int utf8EncodedLength(@Nullable CharSequence sequence) {
        if (StringUtils.isEmpty(sequence)) {
            return 0;
        }
        return Utf8.encodedLength(sequence);
    }","  public void test8()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(55296);
      // Undeclared exception!
      MoreStringUtil.utf8EncodedLength(charBuffer0);
  }"
420,"    public static int utf8EncodedLength(@Nullable CharSequence sequence) {
        if (StringUtils.isEmpty(sequence)) {
            return 0;
        }
        return Utf8.encodedLength(sequence);
    }","  public void test9()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(833);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      char[] charArray0 = new char[6];
      charBuffer0.get(charArray0);
      // Undeclared exception!
      try { 
        MoreStringUtil.utf8EncodedLength(charBuffer1);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.Buffer"", e);
      }
  }"
421,"    public static List<String> split(@Nullable final String str, final char separatorChar, int expectParts) {
        if (str == null) {
            return null;
        }
        final int len = str.length();
        if (len == 0) {
            return ListUtil.emptyList();
        }
        final List<String> list = new ArrayList<String>(expectParts);
        int i = 0;
        int start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return list;
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoreStringUtil.split(""_O}Io14?3a@@hq"", 'I', (-1694));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1694
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
422,"    public static boolean endWith(@Nullable CharSequence s, char c) {
        if (StringUtils.isEmpty(s)) {
            return false;
        }
        return s.charAt(s.length() - 1) == c;
    }","  public void test11()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = MoreStringUtil.endWith(charBuffer0, 'd');
}"
423,"    public static boolean endWith(@Nullable CharSequence s, char c) {
        if (StringUtils.isEmpty(s)) {
            return false;
        }
        return s.charAt(s.length() - 1) == c;
    }","  public void test12()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.endWith(""wpzyb76GBoZOVVc"", 'w');
}"
424,"    public static int utf8EncodedLength(@Nullable CharSequence sequence) {
        if (StringUtils.isEmpty(sequence)) {
            return 0;
        }
        return Utf8.encodedLength(sequence);
    }","  public void test13()  throws Throwable  {
      int int0 = MoreStringUtil.utf8EncodedLength("""");
}"
425,"    public static int utf8EncodedLength(@Nullable CharSequence sequence) {
        if (StringUtils.isEmpty(sequence)) {
            return 0;
        }
        return Utf8.encodedLength(sequence);
    }","  public void test14()  throws Throwable  {
      int int0 = MoreStringUtil.utf8EncodedLength(""wEBBBOYNc"");
}"
426,"    public static String removeEnd(final String s, final char c) {
        if (endWith(s, c)) {
            return s.substring(0, s.length() - 1);
        }
        return s;
    }","  public void test15()  throws Throwable  {
      String string0 = MoreStringUtil.removeEnd(""_O}Io14?3a@@hqI"", 'I');
}"
427,"    public static boolean endWith(@Nullable CharSequence s, char c) {
        if (StringUtils.isEmpty(s)) {
            return false;
        }
        return s.charAt(s.length() - 1) == c;
    }","  public void test16()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.endWith("""", '.');
}"
428,"    public static boolean startWith(@Nullable CharSequence s, char c) {
        if (StringUtils.isEmpty(s)) {
            return false;
        }
        return s.charAt(0) == c;
    }","  public void test17()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.startWith(""wEBBBOYNc"", '.');
}"
429,"    public static boolean startWith(@Nullable CharSequence s, char c) {
        if (StringUtils.isEmpty(s)) {
            return false;
        }
        return s.charAt(0) == c;
    }","  public void test18()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.startWith("""", '.');
}"
430,"    public static boolean startWith(@Nullable CharSequence s, char c) {
        if (StringUtils.isEmpty(s)) {
            return false;
        }
        return s.charAt(0) == c;
    }","  public void test19()  throws Throwable  {
      boolean boolean0 = MoreStringUtil.startWith(""wEBBBOYNc"", 'w');
}"
431,"    public static String replaceLast(@Nullable String s, char sub, char with) {
        if (s == null) {
            return null;
        }

        int index = s.lastIndexOf(sub);
        if (index == -1) {
            return s;
        }
        char[] str = s.toCharArray();
        str[index] = with;
        return new String(str);
    }","  public void test20()  throws Throwable  {
      String string0 = MoreStringUtil.replaceLast((String) null, '&', '&');
}"
432,"    public static String replaceFirst(@Nullable String s, char sub, char with) {
        if (s == null) {
            return null;
        }
        int index = s.indexOf(sub);
        if (index == -1) {
            return s;
        }
        char[] str = s.toCharArray();
        str[index] = with;
        return new String(str);
    }","  public void test21()  throws Throwable  {
      String string0 = MoreStringUtil.replaceFirst((String) null, 'E', '&');
}"
433,"    public static String replaceFirst(@Nullable String s, char sub, char with) {
        if (s == null) {
            return null;
        }
        int index = s.indexOf(sub);
        if (index == -1) {
            return s;
        }
        char[] str = s.toCharArray();
        str[index] = with;
        return new String(str);
    }","  public void test22()  throws Throwable  {
      String string0 = MoreStringUtil.replaceFirst("""", '.', 'w');
}"
434,"    public static List<String> split(@Nullable final String str, final char separatorChar, int expectParts) {
        if (str == null) {
            return null;
        }
        final int len = str.length();
        if (len == 0) {
            return ListUtil.emptyList();
        }
        final List<String> list = new ArrayList<String>(expectParts);
        int i = 0;
        int start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return list;
    }","  public void test23()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split(""4W,m|;E"", 'E', '&');
}"
435,"    public static List<String> split(@Nullable final String str, final char separatorChar, int expectParts) {
        if (str == null) {
            return null;
        }
        final int len = str.length();
        if (len == 0) {
            return ListUtil.emptyList();
        }
        final List<String> list = new ArrayList<String>(expectParts);
        int i = 0;
        int start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return list;
    }","  public void test24()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split(""4W,m|;E"", 'E', '&');
}"
436,"    public static List<String> split(@Nullable final String str, final char separatorChar, int expectParts) {
        if (str == null) {
            return null;
        }
        final int len = str.length();
        if (len == 0) {
            return ListUtil.emptyList();
        }
        final List<String> list = new ArrayList<String>(expectParts);
        int i = 0;
        int start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return list;
    }","  public void test25()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split("""", '.', 'w');
}"
437,"    public static List<String> split(@Nullable final String str, final char separatorChar, int expectParts) {
        if (str == null) {
            return null;
        }
        final int len = str.length();
        if (len == 0) {
            return ListUtil.emptyList();
        }
        final List<String> list = new ArrayList<String>(expectParts);
        int i = 0;
        int start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return list;
    }","  public void test26()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split((String) null, '&', 'E');
}"
438,"    public static List<String> split(@Nullable final String str, final char separatorChar, int expectParts) {
        if (str == null) {
            return null;
        }
        final int len = str.length();
        if (len == 0) {
            return ListUtil.emptyList();
        }
        final List<String> list = new ArrayList<String>(expectParts);
        int i = 0;
        int start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return list;
    }","  public void test27()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split(""wEBBBOYNc"", 'w', 'w');
}"
439,"    public static List<String> split(@Nullable final String str, final char separatorChar, int expectParts) {
        if (str == null) {
            return null;
        }
        final int len = str.length();
        if (len == 0) {
            return ListUtil.emptyList();
        }
        final List<String> list = new ArrayList<String>(expectParts);
        int i = 0;
        int start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return list;
    }","  public void test28()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split(""wEBBBOYNc"", 'w', 'w');
}"
440,"    public static List<String> split(@Nullable final String str, final char separatorChar, int expectParts) {
        if (str == null) {
            return null;
        }
        final int len = str.length();
        if (len == 0) {
            return ListUtil.emptyList();
        }
        final List<String> list = new ArrayList<String>(expectParts);
        int i = 0;
        int start = 0;
        boolean match = false;
        while (i < len) {
            if (str.charAt(i) == separatorChar) {
                if (match) {
                    list.add(str.substring(start, i));
                    match = false;
                }
                start = ++i;
                continue;
            }
            match = true;
            i++;
        }
        if (match) {
            list.add(str.substring(start, i));
        }
        return list;
    }","  public void test29()  throws Throwable  {
      List<String> list0 = MoreStringUtil.split(""wEBBBOYNc"", 'w', 'w');
}"
441,,"  public void test30()  throws Throwable  {
      MoreStringUtil moreStringUtil0 = new MoreStringUtil();
  }"
442,"    public static boolean matchPath(String path, String pattern) {
        String[] pathElements = StringUtils.split(path, Platforms.FILE_PATH_SEPARATOR_CHAR);
        String[] patternElements = StringUtils.split(pattern, Platforms.FILE_PATH_SEPARATOR_CHAR);
        return matchTokens(pathElements, patternElements);
    }","  public void test0()  throws Throwable  {
      boolean boolean0 = WildcardMatcher.matchPath(""1-uPQlhRuCJHs+oU:"", ""**"");
}"
443,"    protected static boolean matchTokens(String[] tokens, String[] patterns) {
        int patNdxStart = 0;
        int patNdxEnd = patterns.length - 1;
        int tokNdxStart = 0;
        int tokNdxEnd = tokens.length - 1;

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // find first **
            String patDir = patterns[patNdxStart];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxStart], patDir)) {
                return false;
            }
            patNdxStart++;
            tokNdxStart++;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }
        if (patNdxStart > patNdxEnd) {
            return false; // string is not finished, but pattern is
        }

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // to the last **
            String patDir = patterns[patNdxEnd];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxEnd], patDir)) {
                return false;
            }
            patNdxEnd--;
            tokNdxEnd--;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }

        while ((patNdxStart != patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {
            int patIdxTmp = -1;
            for (int i = patNdxStart + 1; i <= patNdxEnd; i++) {
                if (patterns[i].equals(PATH_MATCH)) {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patNdxStart + 1) {
                patNdxStart++; // skip **/** situation
                continue;
            }
            // find the pattern between padIdxStart & padIdxTmp in str between strIdxStart & strIdxEnd
            int patLength = (patIdxTmp - patNdxStart - 1);
            int strLength = (tokNdxEnd - tokNdxStart + 1);
            int ndx = -1;
            strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    String subPat = patterns[patNdxStart + j + 1];
                    String subStr = tokens[tokNdxStart + i + j];
                    if (!match(subStr, subPat)) {
                        continue strLoop;
                    }
                }

                ndx = tokNdxStart + i;
                break;
            }

            if (ndx == -1) {
                return false;
            }

            patNdxStart = patIdxTmp;
            tokNdxStart = ndx + patLength;
        }

        for (int i = patNdxStart; i <= patNdxEnd; i++) {
            if (!patterns[i].equals(PATH_MATCH)) {
                return false;
            }
        }

        return true;
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""**"";
      // Undeclared exception!
      try { 
        WildcardMatcher.matchTokens(stringArray0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
444,"    public static int matchOne(String src, String[] patterns) {
        for (int i = 0; i < patterns.length; i++) {
            if (match(src, patterns[i])) {
                return i;
            }
        }
        return -1;
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""0CFhm~}"";
      int int0 = WildcardMatcher.matchOne(""0CFhm~}"", stringArray0);
}"
445,"    public static boolean match(CharSequence string, CharSequence pattern) {
        return match(string, pattern, 0, 0);
    }","  public void test3()  throws Throwable  {
      boolean boolean0 = WildcardMatcher.match(""/"", ""/"");
}"
446,"    public static int matchPathOne(String path, String[] patterns) {
        for (int i = 0; i < patterns.length; i++) {
            if (matchPath(path, patterns[i])) {
                return i;
            }
        }
        return -1;
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""1-uPQlhRuCJHs+oU:"";
      int int0 = WildcardMatcher.matchPathOne(""1-uPQlhRuCJHs+oU:"", stringArray0);
}"
447,"    public static boolean matchPath(String path, String pattern) {
        String[] pathElements = StringUtils.split(path, Platforms.FILE_PATH_SEPARATOR_CHAR);
        String[] patternElements = StringUtils.split(pattern, Platforms.FILE_PATH_SEPARATOR_CHAR);
        return matchTokens(pathElements, patternElements);
    }","  public void test5()  throws Throwable  {
      boolean boolean0 = WildcardMatcher.matchPath(""9-rpt6>vL}.k\""nsCOU"", ""OS/2"");
}"
448,"    public static int matchOne(String src, String[] patterns) {
        for (int i = 0; i < patterns.length; i++) {
            if (match(src, patterns[i])) {
                return i;
            }
        }
        return -1;
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""/"";
      stringArray0[1] = ""(OYC{u"";
      int int0 = WildcardMatcher.matchOne(""(OYC{u"", stringArray0);
}"
449,"    public static boolean match(CharSequence string, CharSequence pattern) {
        return match(string, pattern, 0, 0);
    }","  public void test7()  throws Throwable  {
      boolean boolean0 = WildcardMatcher.match(""**"", ""**"");
}"
450,"    public static boolean matchPath(String path, String pattern) {
        String[] pathElements = StringUtils.split(path, Platforms.FILE_PATH_SEPARATOR_CHAR);
        String[] patternElements = StringUtils.split(pattern, Platforms.FILE_PATH_SEPARATOR_CHAR);
        return matchTokens(pathElements, patternElements);
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        WildcardMatcher.matchPath((String) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.WildcardMatcher"", e);
      }
  }"
451,"    public static boolean match(CharSequence string, CharSequence pattern) {
        return match(string, pattern, 0, 0);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        WildcardMatcher.match((CharSequence) null, (CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.WildcardMatcher"", e);
      }
  }"
452,"    protected static boolean matchTokens(String[] tokens, String[] patterns) {
        int patNdxStart = 0;
        int patNdxEnd = patterns.length - 1;
        int tokNdxStart = 0;
        int tokNdxEnd = tokens.length - 1;

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // find first **
            String patDir = patterns[patNdxStart];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxStart], patDir)) {
                return false;
            }
            patNdxStart++;
            tokNdxStart++;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }
        if (patNdxStart > patNdxEnd) {
            return false; // string is not finished, but pattern is
        }

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // to the last **
            String patDir = patterns[patNdxEnd];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxEnd], patDir)) {
                return false;
            }
            patNdxEnd--;
            tokNdxEnd--;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }

        while ((patNdxStart != patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {
            int patIdxTmp = -1;
            for (int i = patNdxStart + 1; i <= patNdxEnd; i++) {
                if (patterns[i].equals(PATH_MATCH)) {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patNdxStart + 1) {
                patNdxStart++; // skip **/** situation
                continue;
            }
            // find the pattern between padIdxStart & padIdxTmp in str between strIdxStart & strIdxEnd
            int patLength = (patIdxTmp - patNdxStart - 1);
            int strLength = (tokNdxEnd - tokNdxStart + 1);
            int ndx = -1;
            strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    String subPat = patterns[patNdxStart + j + 1];
                    String subStr = tokens[tokNdxStart + i + j];
                    if (!match(subStr, subPat)) {
                        continue strLoop;
                    }
                }

                ndx = tokNdxStart + i;
                break;
            }

            if (ndx == -1) {
                return false;
            }

            patNdxStart = patIdxTmp;
            tokNdxStart = ndx + patLength;
        }

        for (int i = patNdxStart; i <= patNdxEnd; i++) {
            if (!patterns[i].equals(PATH_MATCH)) {
                return false;
            }
        }

        return true;
    }","  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""1-uPQlhRuAlCJHs+oU:"";
      stringArray0[1] = ""1-uPQlhRuAlCJHs+oU:"";
      String[] stringArray1 = new String[8];
      stringArray1[0] = ""**"";
      stringArray1[1] = ""1-uPQlhRuAlCJHs+oU:"";
      stringArray1[2] = ""1-uPQlhRuAlCJHs+oU:"";
      stringArray1[3] = ""**"";
      stringArray1[4] = ""1-uPQlhRuAlCJHs+oU:"";
      stringArray1[7] = ""**"";
      boolean boolean0 = WildcardMatcher.matchTokens(stringArray0, stringArray1);
}"
453,"    protected static boolean matchTokens(String[] tokens, String[] patterns) {
        int patNdxStart = 0;
        int patNdxEnd = patterns.length - 1;
        int tokNdxStart = 0;
        int tokNdxEnd = tokens.length - 1;

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // find first **
            String patDir = patterns[patNdxStart];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxStart], patDir)) {
                return false;
            }
            patNdxStart++;
            tokNdxStart++;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }
        if (patNdxStart > patNdxEnd) {
            return false; // string is not finished, but pattern is
        }

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // to the last **
            String patDir = patterns[patNdxEnd];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxEnd], patDir)) {
                return false;
            }
            patNdxEnd--;
            tokNdxEnd--;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }

        while ((patNdxStart != patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {
            int patIdxTmp = -1;
            for (int i = patNdxStart + 1; i <= patNdxEnd; i++) {
                if (patterns[i].equals(PATH_MATCH)) {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patNdxStart + 1) {
                patNdxStart++; // skip **/** situation
                continue;
            }
            // find the pattern between padIdxStart & padIdxTmp in str between strIdxStart & strIdxEnd
            int patLength = (patIdxTmp - patNdxStart - 1);
            int strLength = (tokNdxEnd - tokNdxStart + 1);
            int ndx = -1;
            strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    String subPat = patterns[patNdxStart + j + 1];
                    String subStr = tokens[tokNdxStart + i + j];
                    if (!match(subStr, subPat)) {
                        continue strLoop;
                    }
                }

                ndx = tokNdxStart + i;
                break;
            }

            if (ndx == -1) {
                return false;
            }

            patNdxStart = patIdxTmp;
            tokNdxStart = ndx + patLength;
        }

        for (int i = patNdxStart; i <= patNdxEnd; i++) {
            if (!patterns[i].equals(PATH_MATCH)) {
                return false;
            }
        }

        return true;
    }","  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""T-uPQlhRuCJHsoxi:"";
      String[] stringArray1 = new String[6];
      stringArray1[0] = ""T-uPQlhRuCJHsoxi:"";
      stringArray1[1] = ""**"";
      stringArray1[2] = ""**"";
      stringArray1[3] = ""T-uPQlhRuCJHsoxi:"";
      stringArray1[4] = ""T-uPQlhRuCJHsoxi:"";
      stringArray1[5] = ""**"";
      boolean boolean0 = WildcardMatcher.matchTokens(stringArray0, stringArray1);
}"
454,"    protected static boolean matchTokens(String[] tokens, String[] patterns) {
        int patNdxStart = 0;
        int patNdxEnd = patterns.length - 1;
        int tokNdxStart = 0;
        int tokNdxEnd = tokens.length - 1;

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // find first **
            String patDir = patterns[patNdxStart];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxStart], patDir)) {
                return false;
            }
            patNdxStart++;
            tokNdxStart++;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }
        if (patNdxStart > patNdxEnd) {
            return false; // string is not finished, but pattern is
        }

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // to the last **
            String patDir = patterns[patNdxEnd];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxEnd], patDir)) {
                return false;
            }
            patNdxEnd--;
            tokNdxEnd--;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }

        while ((patNdxStart != patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {
            int patIdxTmp = -1;
            for (int i = patNdxStart + 1; i <= patNdxEnd; i++) {
                if (patterns[i].equals(PATH_MATCH)) {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patNdxStart + 1) {
                patNdxStart++; // skip **/** situation
                continue;
            }
            // find the pattern between padIdxStart & padIdxTmp in str between strIdxStart & strIdxEnd
            int patLength = (patIdxTmp - patNdxStart - 1);
            int strLength = (tokNdxEnd - tokNdxStart + 1);
            int ndx = -1;
            strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    String subPat = patterns[patNdxStart + j + 1];
                    String subStr = tokens[tokNdxStart + i + j];
                    if (!match(subStr, subPat)) {
                        continue strLoop;
                    }
                }

                ndx = tokNdxStart + i;
                break;
            }

            if (ndx == -1) {
                return false;
            }

            patNdxStart = patIdxTmp;
            tokNdxStart = ndx + patLength;
        }

        for (int i = patNdxStart; i <= patNdxEnd; i++) {
            if (!patterns[i].equals(PATH_MATCH)) {
                return false;
            }
        }

        return true;
    }","  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ""T-uPQlhRuCJHsoxi:"";
      stringArray0[1] = ""**"";
      stringArray0[2] = ""**"";
      stringArray0[3] = ""T-uPQlhRuCJHsoxi:"";
      stringArray0[4] = ""T-uPQlhRuCJHsoxi:"";
      stringArray0[5] = ""**"";
      boolean boolean0 = WildcardMatcher.matchTokens(stringArray0, stringArray0);
}"
455,"    protected static boolean matchTokens(String[] tokens, String[] patterns) {
        int patNdxStart = 0;
        int patNdxEnd = patterns.length - 1;
        int tokNdxStart = 0;
        int tokNdxEnd = tokens.length - 1;

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // find first **
            String patDir = patterns[patNdxStart];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxStart], patDir)) {
                return false;
            }
            patNdxStart++;
            tokNdxStart++;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }
        if (patNdxStart > patNdxEnd) {
            return false; // string is not finished, but pattern is
        }

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // to the last **
            String patDir = patterns[patNdxEnd];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxEnd], patDir)) {
                return false;
            }
            patNdxEnd--;
            tokNdxEnd--;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }

        while ((patNdxStart != patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {
            int patIdxTmp = -1;
            for (int i = patNdxStart + 1; i <= patNdxEnd; i++) {
                if (patterns[i].equals(PATH_MATCH)) {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patNdxStart + 1) {
                patNdxStart++; // skip **/** situation
                continue;
            }
            // find the pattern between padIdxStart & padIdxTmp in str between strIdxStart & strIdxEnd
            int patLength = (patIdxTmp - patNdxStart - 1);
            int strLength = (tokNdxEnd - tokNdxStart + 1);
            int ndx = -1;
            strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    String subPat = patterns[patNdxStart + j + 1];
                    String subStr = tokens[tokNdxStart + i + j];
                    if (!match(subStr, subPat)) {
                        continue strLoop;
                    }
                }

                ndx = tokNdxStart + i;
                break;
            }

            if (ndx == -1) {
                return false;
            }

            patNdxStart = patIdxTmp;
            tokNdxStart = ndx + patLength;
        }

        for (int i = patNdxStart; i <= patNdxEnd; i++) {
            if (!patterns[i].equals(PATH_MATCH)) {
                return false;
            }
        }

        return true;
    }","  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""1-uPQlhRuCJHs+oU:"";
      stringArray0[1] = ""1-uPQlhRuCJHs+oU:"";
      String[] stringArray1 = new String[7];
      stringArray1[0] = ""1-uPQlhRuCJHs+oU:"";
      stringArray1[1] = ""**"";
      stringArray1[2] = ""1-uPQlhRuCJHs+oU:"";
      stringArray1[6] = ""1-uPQlhRuCJHs+oU:"";
      boolean boolean0 = WildcardMatcher.matchTokens(stringArray0, stringArray1);
}"
456,"    protected static boolean matchTokens(String[] tokens, String[] patterns) {
        int patNdxStart = 0;
        int patNdxEnd = patterns.length - 1;
        int tokNdxStart = 0;
        int tokNdxEnd = tokens.length - 1;

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // find first **
            String patDir = patterns[patNdxStart];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxStart], patDir)) {
                return false;
            }
            patNdxStart++;
            tokNdxStart++;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }
        if (patNdxStart > patNdxEnd) {
            return false; // string is not finished, but pattern is
        }

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // to the last **
            String patDir = patterns[patNdxEnd];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxEnd], patDir)) {
                return false;
            }
            patNdxEnd--;
            tokNdxEnd--;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }

        while ((patNdxStart != patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {
            int patIdxTmp = -1;
            for (int i = patNdxStart + 1; i <= patNdxEnd; i++) {
                if (patterns[i].equals(PATH_MATCH)) {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patNdxStart + 1) {
                patNdxStart++; // skip **/** situation
                continue;
            }
            // find the pattern between padIdxStart & padIdxTmp in str between strIdxStart & strIdxEnd
            int patLength = (patIdxTmp - patNdxStart - 1);
            int strLength = (tokNdxEnd - tokNdxStart + 1);
            int ndx = -1;
            strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    String subPat = patterns[patNdxStart + j + 1];
                    String subStr = tokens[tokNdxStart + i + j];
                    if (!match(subStr, subPat)) {
                        continue strLoop;
                    }
                }

                ndx = tokNdxStart + i;
                break;
            }

            if (ndx == -1) {
                return false;
            }

            patNdxStart = patIdxTmp;
            tokNdxStart = ndx + patLength;
        }

        for (int i = patNdxStart; i <= patNdxEnd; i++) {
            if (!patterns[i].equals(PATH_MATCH)) {
                return false;
            }
        }

        return true;
    }","  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""1-uPQlhRuCJHs+oU:"";
      stringArray0[1] = ""1-uPQlhRuCJHs+oU:"";
      String[] stringArray1 = new String[3];
      stringArray1[0] = ""1-uPQlhRuCJHs+oU:"";
      stringArray1[1] = ""**"";
      stringArray1[2] = ""1-uPQlhRuCJHs+oU:"";
      boolean boolean0 = WildcardMatcher.matchTokens(stringArray0, stringArray1);
}"
457,"    public static int matchPathOne(String path, String[] patterns) {
        for (int i = 0; i < patterns.length; i++) {
            if (matchPath(path, patterns[i])) {
                return i;
            }
        }
        return -1;
    }","  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""java.specification.vendor"";
      stringArray0[1] = """";
      // Undeclared exception!
      try { 
        WildcardMatcher.matchPathOne(""4MY#vQwVC"", stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.WildcardMatcher"", e);
      }
  }"
458,"    protected static boolean matchTokens(String[] tokens, String[] patterns) {
        int patNdxStart = 0;
        int patNdxEnd = patterns.length - 1;
        int tokNdxStart = 0;
        int tokNdxEnd = tokens.length - 1;

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // find first **
            String patDir = patterns[patNdxStart];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxStart], patDir)) {
                return false;
            }
            patNdxStart++;
            tokNdxStart++;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }
        if (patNdxStart > patNdxEnd) {
            return false; // string is not finished, but pattern is
        }

        while ((patNdxStart <= patNdxEnd) && (tokNdxStart <= tokNdxEnd)) { // to the last **
            String patDir = patterns[patNdxEnd];
            if (patDir.equals(PATH_MATCH)) {
                break;
            }
            if (!match(tokens[tokNdxEnd], patDir)) {
                return false;
            }
            patNdxEnd--;
            tokNdxEnd--;
        }
        if (tokNdxStart > tokNdxEnd) {
            for (int i = patNdxStart; i <= patNdxEnd; i++) { // string is finished
                if (!patterns[i].equals(PATH_MATCH)) {
                    return false;
                }
            }
            return true;
        }

        while ((patNdxStart != patNdxEnd) && (tokNdxStart <= tokNdxEnd)) {
            int patIdxTmp = -1;
            for (int i = patNdxStart + 1; i <= patNdxEnd; i++) {
                if (patterns[i].equals(PATH_MATCH)) {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patNdxStart + 1) {
                patNdxStart++; // skip **/** situation
                continue;
            }
            // find the pattern between padIdxStart & padIdxTmp in str between strIdxStart & strIdxEnd
            int patLength = (patIdxTmp - patNdxStart - 1);
            int strLength = (tokNdxEnd - tokNdxStart + 1);
            int ndx = -1;
            strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    String subPat = patterns[patNdxStart + j + 1];
                    String subStr = tokens[tokNdxStart + i + j];
                    if (!match(subStr, subPat)) {
                        continue strLoop;
                    }
                }

                ndx = tokNdxStart + i;
                break;
            }

            if (ndx == -1) {
                return false;
            }

            patNdxStart = patIdxTmp;
            tokNdxStart = ndx + patLength;
        }

        for (int i = patNdxStart; i <= patNdxEnd; i++) {
            if (!patterns[i].equals(PATH_MATCH)) {
                return false;
            }
        }

        return true;
    }","  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""1-uPQlhRuCJHs+oU:"";
      stringArray0[1] = ""1-uPQlhRuCJHs+oU:"";
      String[] stringArray1 = new String[7];
      stringArray1[0] = ""1-uPQlhRuCJHs+oU:"";
      stringArray1[2] = ""**"";
      stringArray1[1] = ""1-uPQlhRuCJHs+oU:"";
      // Undeclared exception!
      try { 
        WildcardMatcher.matchTokens(stringArray0, stringArray1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
459,"    public static int matchPathOne(String path, String[] patterns) {
        for (int i = 0; i < patterns.length; i++) {
            if (matchPath(path, patterns[i])) {
                return i;
            }
        }
        return -1;
    }","  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""*(/&@a&@fm:Ol"";
      stringArray0[1] = ""/"";
      int int0 = WildcardMatcher.matchPathOne(""/"", stringArray0);
}"
460,"    public static int matchOne(String src, String[] patterns) {
        for (int i = 0; i < patterns.length; i++) {
            if (match(src, patterns[i])) {
                return i;
            }
        }
        return -1;
    }","  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""*(/&@a&@fm:Ol"";
      stringArray0[1] = ""/"";
      stringArray0[2] = ""/"";
      int int0 = WildcardMatcher.matchOne("""", stringArray0);
}"
461,"    public static int matchOne(String src, String[] patterns) {
        for (int i = 0; i < patterns.length; i++) {
            if (match(src, patterns[i])) {
                return i;
            }
        }
        return -1;
    }","  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""??hm4,CnzgsKF'"";
      int int0 = WildcardMatcher.matchOne(""??hm4,CnzgsKF'"", stringArray0);
}"
462,"    public static int matchOne(String src, String[] patterns) {
        for (int i = 0; i < patterns.length; i++) {
            if (match(src, patterns[i])) {
                return i;
            }
        }
        return -1;
    }","  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""*(/&@a&@fm:Ol"";
      // Undeclared exception!
      try { 
        WildcardMatcher.matchOne("""", stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.WildcardMatcher"", e);
      }
  }"
463,"    public static boolean matchPath(String path, String pattern) {
        String[] pathElements = StringUtils.split(path, Platforms.FILE_PATH_SEPARATOR_CHAR);
        String[] patternElements = StringUtils.split(pattern, Platforms.FILE_PATH_SEPARATOR_CHAR);
        return matchTokens(pathElements, patternElements);
    }","  public void test21()  throws Throwable  {
      boolean boolean0 = WildcardMatcher.matchPath(""*"", ""*"");
}"
464,,"  public void test22()  throws Throwable  {
      WildcardMatcher wildcardMatcher0 = new WildcardMatcher();
  }"
465,"    public StringBuilder get() {
        StringBuilder sb = stringBuilder.get();
        sb.setLength(0);
        return sb;
    }","  public void test0()  throws Throwable  {
      StringBuilderHolder stringBuilderHolder0 = new StringBuilderHolder(0);
      StringBuilder stringBuilder0 = stringBuilderHolder0.get();
}"
466,"    public static StringBuilder getGlobal() {
        StringBuilder sb = globalStringBuilder.get();
        sb.setLength(0);
        return sb;
    }","  public void test1()  throws Throwable  {
      StringBuilder stringBuilder0 = StringBuilderHolder.getGlobal();
}"
467,"    public StringBuilder get() {
        StringBuilder sb = stringBuilder.get();
        sb.setLength(0);
        return sb;
    }","  public void test2()  throws Throwable  {
      StringBuilderHolder stringBuilderHolder0 = new StringBuilderHolder((-401));
      // Undeclared exception!
      try { 
        stringBuilderHolder0.get();
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.lang.AbstractStringBuilder"", e);
      }
  }"
468,"    public static String[] fromCsvString(String line) {
        List<String> row = new ArrayList<String>();

        boolean inQuotedField = false;
        int fieldStart = 0;

        final int len = line.length();
        for (int i = 0; i < len; i++) {
            char c = line.charAt(i);
            if (c == FIELD_SEPARATOR) {
                if (!inQuotedField) { // ignore we are quoting
                    addField(row, line, fieldStart, i, inQuotedField);
                    fieldStart = i + 1;
                }
            } else if (c == FIELD_QUOTE) {
                if (inQuotedField) {
                    if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see
                        // if this is the end of the field
                        addField(row, line, fieldStart, i, inQuotedField);
                        fieldStart = i + 2;
                        i++; // and skip the comma
                        inQuotedField = false;
                    }
                } else if (fieldStart == i) {
                    inQuotedField = true; // this is a beginning of a quote
                    fieldStart++; // move field start
                }
            }
        }
        // add last field - but only if string was not empty
        if (len > 0 && fieldStart <= len) {
            addField(row, line, fieldStart, len, inQuotedField);
        }
        return row.toArray(new String[row.size()]);
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = CsvUtil.fromCsvString(""\""[x,,\""\"","");
}"
469,"    public static String toCsvString(Object... elements) {
        StringBuilder line = new StringBuilder();
        int last = elements.length - 1;
        for (int i = 0; i < elements.length; i++) {
            if (elements[i] == null) {
                if (i != last) {
                    line.append(FIELD_SEPARATOR);
                }
                continue;
            }
            String field = elements[i].toString();

            // check for special cases
            int ndx = field.indexOf(FIELD_SEPARATOR);
            if (ndx == -1) {
                ndx = field.indexOf(FIELD_QUOTE);
            }
            if (ndx == -1 && (field.startsWith(SPACE) || field.endsWith(SPACE))) {
                ndx = 1;
            }
            if (ndx == -1) {
                ndx = StringUtils.indexOf(field, SPECIAL_CHARS);
            }

            // add field
            if (ndx != -1) {
                line.append(FIELD_QUOTE);
            }
            field = StringUtils.replace(field, QUOTE, DOUBLE_QUOTE);
            line.append(field);
            if (ndx != -1) {
                line.append(FIELD_QUOTE);
            }

            // last
            if (i != last) {
                line.append(FIELD_SEPARATOR);
            }
        }
        return line.toString();
    }","  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = CsvUtil.toCsvString(objectArray0);
}"
470,"    public static String toCsvString(Object... elements) {
        StringBuilder line = new StringBuilder();
        int last = elements.length - 1;
        for (int i = 0; i < elements.length; i++) {
            if (elements[i] == null) {
                if (i != last) {
                    line.append(FIELD_SEPARATOR);
                }
                continue;
            }
            String field = elements[i].toString();

            // check for special cases
            int ndx = field.indexOf(FIELD_SEPARATOR);
            if (ndx == -1) {
                ndx = field.indexOf(FIELD_QUOTE);
            }
            if (ndx == -1 && (field.startsWith(SPACE) || field.endsWith(SPACE))) {
                ndx = 1;
            }
            if (ndx == -1) {
                ndx = StringUtils.indexOf(field, SPECIAL_CHARS);
            }

            // add field
            if (ndx != -1) {
                line.append(FIELD_QUOTE);
            }
            field = StringUtils.replace(field, QUOTE, DOUBLE_QUOTE);
            line.append(field);
            if (ndx != -1) {
                line.append(FIELD_QUOTE);
            }

            // last
            if (i != last) {
                line.append(FIELD_SEPARATOR);
            }
        }
        return line.toString();
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        CsvUtil.toCsvString((Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.CsvUtil"", e);
      }
  }"
471,"    public static String[] fromCsvString(String line) {
        List<String> row = new ArrayList<String>();

        boolean inQuotedField = false;
        int fieldStart = 0;

        final int len = line.length();
        for (int i = 0; i < len; i++) {
            char c = line.charAt(i);
            if (c == FIELD_SEPARATOR) {
                if (!inQuotedField) { // ignore we are quoting
                    addField(row, line, fieldStart, i, inQuotedField);
                    fieldStart = i + 1;
                }
            } else if (c == FIELD_QUOTE) {
                if (inQuotedField) {
                    if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see
                        // if this is the end of the field
                        addField(row, line, fieldStart, i, inQuotedField);
                        fieldStart = i + 2;
                        i++; // and skip the comma
                        inQuotedField = false;
                    }
                } else if (fieldStart == i) {
                    inQuotedField = true; // this is a beginning of a quote
                    fieldStart++; // move field start
                }
            }
        }
        // add last field - but only if string was not empty
        if (len > 0 && fieldStart <= len) {
            addField(row, line, fieldStart, len, inQuotedField);
        }
        return row.toArray(new String[row.size()]);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        CsvUtil.fromCsvString((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.CsvUtil"", e);
      }
  }"
472,"    public static String[] fromCsvString(String line) {
        List<String> row = new ArrayList<String>();

        boolean inQuotedField = false;
        int fieldStart = 0;

        final int len = line.length();
        for (int i = 0; i < len; i++) {
            char c = line.charAt(i);
            if (c == FIELD_SEPARATOR) {
                if (!inQuotedField) { // ignore we are quoting
                    addField(row, line, fieldStart, i, inQuotedField);
                    fieldStart = i + 1;
                }
            } else if (c == FIELD_QUOTE) {
                if (inQuotedField) {
                    if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see
                        // if this is the end of the field
                        addField(row, line, fieldStart, i, inQuotedField);
                        fieldStart = i + 2;
                        i++; // and skip the comma
                        inQuotedField = false;
                    }
                } else if (fieldStart == i) {
                    inQuotedField = true; // this is a beginning of a quote
                    fieldStart++; // move field start
                }
            }
        }
        // add last field - but only if string was not empty
        if (len > 0 && fieldStart <= len) {
            addField(row, line, fieldStart, len, inQuotedField);
        }
        return row.toArray(new String[row.size()]);
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = CsvUtil.fromCsvString("""");
}"
473,"    public static String[] fromCsvString(String line) {
        List<String> row = new ArrayList<String>();

        boolean inQuotedField = false;
        int fieldStart = 0;

        final int len = line.length();
        for (int i = 0; i < len; i++) {
            char c = line.charAt(i);
            if (c == FIELD_SEPARATOR) {
                if (!inQuotedField) { // ignore we are quoting
                    addField(row, line, fieldStart, i, inQuotedField);
                    fieldStart = i + 1;
                }
            } else if (c == FIELD_QUOTE) {
                if (inQuotedField) {
                    if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see
                        // if this is the end of the field
                        addField(row, line, fieldStart, i, inQuotedField);
                        fieldStart = i + 2;
                        i++; // and skip the comma
                        inQuotedField = false;
                    }
                } else if (fieldStart == i) {
                    inQuotedField = true; // this is a beginning of a quote
                    fieldStart++; // move field start
                }
            }
        }
        // add last field - but only if string was not empty
        if (len > 0 && fieldStart <= len) {
            addField(row, line, fieldStart, len, inQuotedField);
        }
        return row.toArray(new String[row.size()]);
    }","  public void test5()  throws Throwable  {
      String[] stringArray0 = CsvUtil.fromCsvString(""cF\"";ZDF*"");
}"
474,"    public static String[] fromCsvString(String line) {
        List<String> row = new ArrayList<String>();

        boolean inQuotedField = false;
        int fieldStart = 0;

        final int len = line.length();
        for (int i = 0; i < len; i++) {
            char c = line.charAt(i);
            if (c == FIELD_SEPARATOR) {
                if (!inQuotedField) { // ignore we are quoting
                    addField(row, line, fieldStart, i, inQuotedField);
                    fieldStart = i + 1;
                }
            } else if (c == FIELD_QUOTE) {
                if (inQuotedField) {
                    if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see
                        // if this is the end of the field
                        addField(row, line, fieldStart, i, inQuotedField);
                        fieldStart = i + 2;
                        i++; // and skip the comma
                        inQuotedField = false;
                    }
                } else if (fieldStart == i) {
                    inQuotedField = true; // this is a beginning of a quote
                    fieldStart++; // move field start
                }
            }
        }
        // add last field - but only if string was not empty
        if (len > 0 && fieldStart <= len) {
            addField(row, line, fieldStart, len, inQuotedField);
        }
        return row.toArray(new String[row.size()]);
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = CsvUtil.fromCsvString(""\""[Sx,#h\""H\"","");
}"
475,"    public static String[] fromCsvString(String line) {
        List<String> row = new ArrayList<String>();

        boolean inQuotedField = false;
        int fieldStart = 0;

        final int len = line.length();
        for (int i = 0; i < len; i++) {
            char c = line.charAt(i);
            if (c == FIELD_SEPARATOR) {
                if (!inQuotedField) { // ignore we are quoting
                    addField(row, line, fieldStart, i, inQuotedField);
                    fieldStart = i + 1;
                }
            } else if (c == FIELD_QUOTE) {
                if (inQuotedField) {
                    if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see
                        // if this is the end of the field
                        addField(row, line, fieldStart, i, inQuotedField);
                        fieldStart = i + 2;
                        i++; // and skip the comma
                        inQuotedField = false;
                    }
                } else if (fieldStart == i) {
                    inQuotedField = true; // this is a beginning of a quote
                    fieldStart++; // move field start
                }
            }
        }
        // add last field - but only if string was not empty
        if (len > 0 && fieldStart <= len) {
            addField(row, line, fieldStart, len, inQuotedField);
        }
        return row.toArray(new String[row.size()]);
    }","  public void test7()  throws Throwable  {
      String[] stringArray0 = CsvUtil.fromCsvString(""\""\"""");
}"
476,"    public static String[] fromCsvString(String line) {
        List<String> row = new ArrayList<String>();

        boolean inQuotedField = false;
        int fieldStart = 0;

        final int len = line.length();
        for (int i = 0; i < len; i++) {
            char c = line.charAt(i);
            if (c == FIELD_SEPARATOR) {
                if (!inQuotedField) { // ignore we are quoting
                    addField(row, line, fieldStart, i, inQuotedField);
                    fieldStart = i + 1;
                }
            } else if (c == FIELD_QUOTE) {
                if (inQuotedField) {
                    if (i + 1 == len || line.charAt(i + 1) == FIELD_SEPARATOR) { // we are already quoting - peek to see
                        // if this is the end of the field
                        addField(row, line, fieldStart, i, inQuotedField);
                        fieldStart = i + 2;
                        i++; // and skip the comma
                        inQuotedField = false;
                    }
                } else if (fieldStart == i) {
                    inQuotedField = true; // this is a beginning of a quote
                    fieldStart++; // move field start
                }
            }
        }
        // add last field - but only if string was not empty
        if (len > 0 && fieldStart <= len) {
            addField(row, line, fieldStart, len, inQuotedField);
        }
        return row.toArray(new String[row.size()]);
    }","  public void test8()  throws Throwable  {
      String[] stringArray0 = CsvUtil.fromCsvString(""[Ljava.lang.Object;@0000000001,,,,,,,,,,"");
}"
477,"    public static String toCsvString(Object... elements) {
        StringBuilder line = new StringBuilder();
        int last = elements.length - 1;
        for (int i = 0; i < elements.length; i++) {
            if (elements[i] == null) {
                if (i != last) {
                    line.append(FIELD_SEPARATOR);
                }
                continue;
            }
            String field = elements[i].toString();

            // check for special cases
            int ndx = field.indexOf(FIELD_SEPARATOR);
            if (ndx == -1) {
                ndx = field.indexOf(FIELD_QUOTE);
            }
            if (ndx == -1 && (field.startsWith(SPACE) || field.endsWith(SPACE))) {
                ndx = 1;
            }
            if (ndx == -1) {
                ndx = StringUtils.indexOf(field, SPECIAL_CHARS);
            }

            // add field
            if (ndx != -1) {
                line.append(FIELD_QUOTE);
            }
            field = StringUtils.replace(field, QUOTE, DOUBLE_QUOTE);
            line.append(field);
            if (ndx != -1) {
                line.append(FIELD_QUOTE);
            }

            // last
            if (i != last) {
                line.append(FIELD_SEPARATOR);
            }
        }
        return line.toString();
    }","  public void test9()  throws Throwable  {
      String[] stringArray0 = CsvUtil.fromCsvString(""/[DG8 jlV b"");
      CsvUtil.toCsvString(stringArray0);
}"
478,"    public static String toCsvString(Object... elements) {
        StringBuilder line = new StringBuilder();
        int last = elements.length - 1;
        for (int i = 0; i < elements.length; i++) {
            if (elements[i] == null) {
                if (i != last) {
                    line.append(FIELD_SEPARATOR);
                }
                continue;
            }
            String field = elements[i].toString();

            // check for special cases
            int ndx = field.indexOf(FIELD_SEPARATOR);
            if (ndx == -1) {
                ndx = field.indexOf(FIELD_QUOTE);
            }
            if (ndx == -1 && (field.startsWith(SPACE) || field.endsWith(SPACE))) {
                ndx = 1;
            }
            if (ndx == -1) {
                ndx = StringUtils.indexOf(field, SPECIAL_CHARS);
            }

            // add field
            if (ndx != -1) {
                line.append(FIELD_QUOTE);
            }
            field = StringUtils.replace(field, QUOTE, DOUBLE_QUOTE);
            line.append(field);
            if (ndx != -1) {
                line.append(FIELD_QUOTE);
            }

            // last
            if (i != last) {
                line.append(FIELD_SEPARATOR);
            }
        }
        return line.toString();
    }","  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) objectArray0;
      String string0 = CsvUtil.toCsvString(objectArray0);
}"
479,,"  public void test11()  throws Throwable  {
      CsvUtil csvUtil0 = new CsvUtil();
  }"
480,"    public static String urlEncode(String part) {
        try {
            return URLEncoder.encode(part, Charsets.UTF_8_NAME);
        } catch (UnsupportedEncodingException ignored) {
            return null;
        }
    }","  public void test0()  throws Throwable  {
      String string0 = EscapeUtil.urlEncode("""");
}"
481,"    public static String urlDecode(String part) {
        try {
            return URLDecoder.decode(part, Charsets.UTF_8_NAME);
        } catch (UnsupportedEncodingException e) {
            return null;
        }
    }","  public void test1()  throws Throwable  {
      String string0 = EscapeUtil.urlDecode("""");
}"
482,"    public static String unescapeXml(String xml) {
        return StringEscapeUtils.unescapeXml(xml);
    }","  public void test2()  throws Throwable  {
      String string0 = EscapeUtil.unescapeXml((String) null);
}"
483,"    public static String unescapeXml(String xml) {
        return StringEscapeUtils.unescapeXml(xml);
    }","  public void test3()  throws Throwable  {
      String string0 = EscapeUtil.unescapeXml("""");
}"
484,"    public static String unescapeHtml(String html) {
        return StringEscapeUtils.unescapeHtml4(html);
    }","  public void test4()  throws Throwable  {
      String string0 = EscapeUtil.unescapeHtml((String) null);
}"
485,"    public static String unescapeHtml(String html) {
        return StringEscapeUtils.unescapeHtml4(html);
    }","  public void test5()  throws Throwable  {
      String string0 = EscapeUtil.unescapeHtml("""");
}"
486,"    public static String escapeXml(String xml) {
        return StringEscapeUtils.escapeXml11(xml);
    }","  public void test6()  throws Throwable  {
      String string0 = EscapeUtil.escapeXml((String) null);
}"
487,"    public static String escapeXml(String xml) {
        return StringEscapeUtils.escapeXml11(xml);
    }","  public void test7()  throws Throwable  {
      String string0 = EscapeUtil.escapeXml("""");
}"
488,"    public static String escapeHtml(String html) {
        return StringEscapeUtils.escapeHtml4(html);
    }","  public void test8()  throws Throwable  {
      String string0 = EscapeUtil.escapeHtml((String) null);
}"
489,"    public static String escapeHtml(String html) {
        return StringEscapeUtils.escapeHtml4(html);
    }","  public void test9()  throws Throwable  {
      String string0 = EscapeUtil.escapeHtml("""");
}"
490,"    public static String urlEncode(String part) {
        try {
            return URLEncoder.encode(part, Charsets.UTF_8_NAME);
        } catch (UnsupportedEncodingException ignored) {
            return null;
        }
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        EscapeUtil.urlEncode((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URLEncoder"", e);
      }
  }"
491,"    public static String urlDecode(String part) {
        try {
            return URLDecoder.decode(part, Charsets.UTF_8_NAME);
        } catch (UnsupportedEncodingException e) {
            return null;
        }
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        EscapeUtil.urlDecode((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URLDecoder"", e);
      }
  }"
492,"    public static String urlDecode(String part) {
        try {
            return URLDecoder.decode(part, Charsets.UTF_8_NAME);
        } catch (UnsupportedEncodingException e) {
            return null;
        }
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        EscapeUtil.urlDecode(""jW}DejEx&%q:M$d9d!/"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \""q:\""
         //
         verifyException(""java.net.URLDecoder"", e);
      }
  }"
493,"    public static String unescapeHtml(String html) {
        return StringEscapeUtils.unescapeHtml4(html);
    }","  public void test13()  throws Throwable  {
      String string0 = EscapeUtil.unescapeHtml("":f$S0Mrg2"");
}"
494,"    public static String unescapeXml(String xml) {
        return StringEscapeUtils.unescapeXml(xml);
    }","  public void test14()  throws Throwable  {
      String string0 = EscapeUtil.unescapeXml("":f$S0Mrg2"");
}"
495,"    public static String urlEncode(String part) {
        try {
            return URLEncoder.encode(part, Charsets.UTF_8_NAME);
        } catch (UnsupportedEncodingException ignored) {
            return null;
        }
    }","  public void test15()  throws Throwable  {
      String string0 = EscapeUtil.urlEncode("":f$S0Mrg2"");
}"
496,"    public static String urlDecode(String part) {
        try {
            return URLDecoder.decode(part, Charsets.UTF_8_NAME);
        } catch (UnsupportedEncodingException e) {
            return null;
        }
    }","  public void test16()  throws Throwable  {
      String string0 = EscapeUtil.urlDecode("":f$S0Mrg2"");
}"
497,"    public static String escapeHtml(String html) {
        return StringEscapeUtils.escapeHtml4(html);
    }","  public void test17()  throws Throwable  {
      String string0 = EscapeUtil.escapeHtml("":f$S0Mrg2"");
}"
498,,"  public void test18()  throws Throwable  {
      EscapeUtil escapeUtil0 = new EscapeUtil();
  }"
499,"    public static String escapeXml(String xml) {
        return StringEscapeUtils.escapeXml11(xml);
    }","  public void test19()  throws Throwable  {
      String string0 = EscapeUtil.escapeXml("":f$S0Mrg2"");
}"
500,"    public static String encodeHex(byte[] input) {
        return BaseEncoding.base16().encode(input);
    }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = EncodeUtil.encodeHex(byteArray0);
}"
501,,"  public void test1()  throws Throwable  {
      // Undeclared exception!
      CharBuffer.allocate(100000000);
  }"
502,"    public static byte[] decodeBase64UrlSafe(CharSequence input) {
        return BaseEncoding.base64Url().decode(input);
    }","  public void test2()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      charBuffer1.duplicate();
      charBuffer0.append('B');
      charBuffer0.chars();
      // Undeclared exception!
      try { 
        EncodeUtil.decodeBase64UrlSafe(charBuffer1);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.Buffer"", e);
      }
  }"
503,"    public static byte[] decodeBase64UrlSafe(CharSequence input) {
        return BaseEncoding.base64Url().decode(input);
    }","  public void test3()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3655);
      // Undeclared exception!
      try { 
        EncodeUtil.decodeBase64UrlSafe(charBuffer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unrecognized character: 0x0
         //
         verifyException(""com.google.common.io.BaseEncoding"", e);
      }
  }"
504,,"  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      CharBuffer.allocate(100000000);
  }"
505,"    public static byte[] decodeBase64(CharSequence input) {
        return BaseEncoding.base64().decode(input);
    }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-77);
      EncodeUtil.encodeBase64(byteArray0);
      EncodeUtil.encodeHex(byteArray0);
      EncodeUtil.encodeBase64UrlSafe(byteArray0);
      EncodeUtil.encodeBase64(byteArray0);
      EncodeUtil.decodeHex(""041D1A00B3"");
      EncodeUtil.encodeBase64(byteArray0);
      EncodeUtil encodeUtil0 = new EncodeUtil();
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        EncodeUtil.decodeBase64((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.CharMatcher"", e);
      }
  }"
506,"    public static String encodeBase64UrlSafe(byte[] input) {
        return BaseEncoding.base64Url().encode(input);
    }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = EncodeUtil.encodeBase64UrlSafe(byteArray0);
}"
507,"    public static byte[] decodeHex(CharSequence input) {
        return BaseEncoding.base16().decode(input);
    }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = EncodeUtil.encodeBase64UrlSafe(byteArray0);
      byte[] byteArray1 = new byte[0];
      EncodeUtil.encodeBase64UrlSafe(byteArray1);
      byte[] byteArray2 = EncodeUtil.decodeHex("""");
}"
508,"    public static byte[] decodeBase64(CharSequence input) {
        return BaseEncoding.base64().decode(input);
    }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      EncodeUtil.encodeBase64(byteArray0);
      EncodeUtil encodeUtil0 = new EncodeUtil();
      EncodeUtil.decodeBase64UrlSafe("""");
      byte[] byteArray1 = EncodeUtil.decodeBase64("""");
}"
509,"    public static byte[] decodeBase64(CharSequence input) {
        return BaseEncoding.base64().decode(input);
    }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-4);
      EncodeUtil.encodeBase64(byteArray0);
      byte[] byteArray1 = EncodeUtil.decodeBase64(""/A=="");
}"
510,"    public static String encodeHex(byte[] input) {
        return BaseEncoding.base16().encode(input);
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        EncodeUtil.encodeHex((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.io.BaseEncoding"", e);
      }
  }"
511,"    public static byte[] decodeBase64(CharSequence input) {
        return BaseEncoding.base64().decode(input);
    }","  public void test11()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(810);
      // Undeclared exception!
      try { 
        EncodeUtil.decodeBase64(charBuffer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unrecognized character: 0x0
         //
         verifyException(""com.google.common.io.BaseEncoding"", e);
      }
  }"
512,"    public static byte[] decodeBase64UrlSafe(CharSequence input) {
        return BaseEncoding.base64Url().decode(input);
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        EncodeUtil.decodeBase64UrlSafe((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.CharMatcher"", e);
      }
  }"
513,"    public static byte[] decodeHex(CharSequence input) {
        return BaseEncoding.base16().decode(input);
    }","  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-93);
      EncodeUtil.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        EncodeUtil.decodeHex(""CiYVAAL//qM="");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Unrecognized character: i
         //
         verifyException(""com.google.common.io.BaseEncoding"", e);
      }
  }"
514,"    public static String encodeBase64(byte[] input) {
        return BaseEncoding.base64().encode(input);
    }","  public void test14()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        EncodeUtil.encodeBase64((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.io.BaseEncoding"", e);
      }
  }"
515,"    public static byte[] decodeHex(CharSequence input) {
        return BaseEncoding.base16().decode(input);
    }","  public void test15()  throws Throwable  {
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        EncodeUtil.decodeHex((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.CharMatcher$None"", e);
      }
  }"
516,,"  public void test16()  throws Throwable  {
      EncodeUtil encodeUtil0 = new EncodeUtil();
  }"
517,"    public static byte[] decodeBase64(CharSequence input) {
        return BaseEncoding.base64().decode(input);
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        EncodeUtil.decodeBase64((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.CharMatcher"", e);
      }
  }"
518,"    public static String encodeBase64(byte[] input) {
        return BaseEncoding.base64().encode(input);
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        EncodeUtil.encodeBase64((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.io.BaseEncoding"", e);
      }
  }"
519,"    public static byte[] decodeBase64UrlSafe(CharSequence input) {
        return BaseEncoding.base64Url().decode(input);
    }","  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      EncodeUtil.encodeHex(byteArray0);
      byte[] byteArray1 = EncodeUtil.decodeBase64UrlSafe(""57"");
}"
520,"    public static String encodeBase64UrlSafe(byte[] input) {
        return BaseEncoding.base64Url().encode(input);
    }","  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        EncodeUtil.encodeBase64UrlSafe((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.io.BaseEncoding"", e);
      }
  }"
521,"    public static byte[] decodeHex(CharSequence input) {
        return BaseEncoding.base16().decode(input);
    }","  public void test21()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(10000);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 10000, 10000);
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = '[';
      charArray0[2] = '!';
      charBuffer0.put(charArray0, 0, 1);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      // Undeclared exception!
      try { 
        EncodeUtil.decodeHex(charBuffer2);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
522,,"  public void test0()  throws Throwable  {
      Charsets charsets0 = new Charsets();
  }"
523,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test0()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
}"
524,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test1()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      int int1 = HashUtil.murmur32AsInt(byteArray0);
}"
525,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test2()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      int int1 = HashUtil.murmur32AsInt(byteArray0);
}"
526,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test3()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      int int1 = HashUtil.murmur32AsInt(byteArray0);
}"
527,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test4()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      int int1 = HashUtil.murmur32AsInt(byteArray0);
}"
528,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        HashUtil.murmur32AsInt((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher"", e);
      }
  }"
529,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.crc32AsInt(byteArray0);
}"
530,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.crc32AsInt(byteArray0);
}"
531,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.crc32AsInt(byteArray0);
}"
532,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray0);
}"
533,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray0);
}"
534,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray0);
}"
535,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      int int1 = HashUtil.murmur32AsInt("""");
}"
536,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      int int1 = HashUtil.murmur32AsInt("""");
}"
537,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
}"
538,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
}"
539,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
}"
540,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
}"
541,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
}"
542,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
}"
543,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
}"
544,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
}"
545,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
}"
546,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
}"
547,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
}"
548,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
}"
549,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
}"
550,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
551,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
552,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
553,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
554,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
555,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
556,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
557,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
558,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
559,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
560,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
561,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byte[] byteArray2 = HashUtil.sha1File(byteArrayInputStream0);
}"
562,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test39()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        HashUtil.md5File((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.HashUtil"", e);
      }
  }"
563,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      long long0 = HashUtil.murmur128AsLong(byteArray0);
}"
564,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      long long0 = HashUtil.murmur128AsLong(byteArray0);
}"
565,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      long long0 = HashUtil.murmur128AsLong(byteArray0);
}"
566,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test43()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt(""fe%t,:B:OX["");
}"
567,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test44()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt(""fe%t,:B:OX["");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""fe%t,:B:OX["", byteArray0);
}"
568,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test45()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt(""fe%t,:B:OX["");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""fe%t,:B:OX["", byteArray0);
}"
569,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test46()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt(""fe%t,:B:OX["");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""fe%t,:B:OX["", byteArray0);
}"
570,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test47()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt(""fe%t,:B:OX["");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""fe%t,:B:OX["", byteArray0);
}"
571,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test48()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt(""fe%t,:B:OX["");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""fe%t,:B:OX["", byteArray0);
}"
572,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test49()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt(""fe%t,:B:OX["");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""fe%t,:B:OX["", byteArray0);
}"
573,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test50()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt(""fe%t,:B:OX["");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""fe%t,:B:OX["", byteArray0);
}"
574,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test51()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt(""fe%t,:B:OX["");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(""fe%t,:B:OX["", byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
}"
575,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null, (byte[]) null, (-1526));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
576,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test53()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
}"
577,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test54()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
}"
578,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test55()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
}"
579,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test56()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
580,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test57()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
581,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test58()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
582,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test59()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
583,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test60()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
584,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test61()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
585,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test62()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
586,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test63()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
}"
587,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test64()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
}"
588,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test65()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
}"
589,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test66()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
590,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test67()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
591,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test68()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
592,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test69()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
593,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test70()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
594,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test71()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
595,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test72()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
596,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test73()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
597,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test74()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
598,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test75()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
599,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test76()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""SHA-1"");
      long long1 = HashUtil.crc32AsLong(""48= W"");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)67;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      long long2 = HashUtil.crc32AsLong(""SHA-1"");
      byte[] byteArray2 = HashUtil.sha1(""SHA-1"", byteArray0, 0);
}"
600,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
}"
601,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
}"
602,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
}"
603,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
}"
604,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
}"
605,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
}"
606,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
}"
607,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
}"
608,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
}"
609,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
}"
610,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
611,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
612,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
613,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
614,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
615,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
616,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
617,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
618,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
619,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test96()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
620,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
}"
621,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test98()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
}"
622,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test99()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
}"
623,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
624,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
625,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
626,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
627,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
628,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
629,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
630,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
631,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
632,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
633,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
634,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
635,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
636,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
637,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
638,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
639,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
640,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
641,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
642,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
643,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
644,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
645,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
646,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
647,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
648,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
649,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-36);
      long long0 = HashUtil.crc32AsLong(byteArray0);
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, 8192);
      byte[] byteArray2 = HashUtil.sha1(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray3 = HashUtil.sha1(byteArray2, byteArray1, 1126);
}"
650,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test127()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
}"
651,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test128()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      int int1 = HashUtil.crc32AsInt("""");
}"
652,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test129()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      int int1 = HashUtil.crc32AsInt("""");
}"
653,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test130()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      int int1 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-841), 1);
}"
654,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test131()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      int int1 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-841), 1);
}"
655,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test132()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      int int1 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-841), 1);
}"
656,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test133()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      int int1 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-841), 1);
}"
657,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
}"
658,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
}"
659,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
}"
660,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
}"
661,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
}"
662,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
}"
663,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
}"
664,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
665,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
666,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
667,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
668,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
669,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
670,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
671,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
672,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
673,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
674,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
675,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
676,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
677,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
678,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
}"
679,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
}"
680,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
}"
681,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
}"
682,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
683,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
684,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
685,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
686,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
687,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
688,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
689,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
690,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
691,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
692,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
693,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
694,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
695,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
696,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
697,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
698,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (int) (byte)74);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0, (-1185));
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.murmur32AsInt(""UTF-8"");
      long long0 = HashUtil.crc32AsLong(byteArray2);
}"
699,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test176()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
}"
700,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test177()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
}"
701,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test178()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
}"
702,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test179()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
}"
703,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test180()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
}"
704,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test181()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
}"
705,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test182()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
}"
706,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test183()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
}"
707,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test184()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
}"
708,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test185()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
709,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test186()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
710,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test187()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
711,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test188()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
712,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test189()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
713,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test190()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
}"
714,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test191()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      int int2 = HashUtil.crc32AsInt(byteArray0);
}"
715,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test192()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      int int2 = HashUtil.crc32AsInt(byteArray0);
}"
716,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test193()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      int int2 = HashUtil.crc32AsInt(byteArray0);
}"
717,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test194()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      int int2 = HashUtil.crc32AsInt(byteArray0);
}"
718,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test195()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      int int2 = HashUtil.crc32AsInt(byteArray0);
}"
719,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test196()  throws Throwable  {
      int int0 = HashUtil.murmur32AsInt("""");
      long long0 = HashUtil.murmur128AsLong(""SHA-1"");
      byte[] byteArray0 = HashUtil.sha1(""SHA-1"");
      int int1 = HashUtil.crc32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray1 = HashUtil.sha1(byteArray0);
      int int2 = HashUtil.crc32AsInt(byteArray0);
}"
720,"    public static byte[] generateSalt(int numBytes) {
        Validate.isTrue(numBytes > 0, ""numBytes argument must be a positive integer (1 or larger)"", numBytes);

        byte[] bytes = new byte[numBytes];
        random.nextBytes(bytes);
        return bytes;
    }","  public void test197()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
}"
721,"    public static byte[] generateSalt(int numBytes) {
        Validate.isTrue(numBytes > 0, ""numBytes argument must be a positive integer (1 or larger)"", numBytes);

        byte[] bytes = new byte[numBytes];
        random.nextBytes(bytes);
        return bytes;
    }","  public void test198()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
}"
722,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test199()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
}"
723,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test200()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
}"
724,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test201()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
}"
725,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test202()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
}"
726,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test203()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
}"
727,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test204()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
}"
728,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test205()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
}"
729,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test206()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
730,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test207()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
731,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test208()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
732,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test209()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
733,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test210()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
734,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test211()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
735,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test212()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
736,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test213()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
737,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test214()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
738,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test215()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
}"
739,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test216()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
}"
740,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test217()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
741,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test218()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
742,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test219()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
743,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test220()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
744,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test221()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
745,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test222()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
746,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test223()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
747,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test224()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
748,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test225()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
749,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test226()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
750,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test227()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
751,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test228()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
752,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test229()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
753,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test230()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
754,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test231()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
755,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test232()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
756,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test233()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
757,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test234()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
758,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test235()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
759,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test236()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(61);
      long long0 = HashUtil.crc32AsLong(""GxcXh9"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 378);
      byte[] byteArray2 = HashUtil.sha1(""GxcXh9"", byteArray0);
      int int0 = HashUtil.murmur32AsInt(""GxcXh9"");
      byte[] byteArray3 = HashUtil.sha1(""GxcXh9"", byteArray1);
}"
760,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test237()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
}"
761,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test238()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
}"
762,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test239()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
}"
763,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test240()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
}"
764,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test241()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
}"
765,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test242()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
}"
766,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test243()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
}"
767,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test244()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
}"
768,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test245()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
}"
769,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test246()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
}"
770,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test247()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
}"
771,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test248()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
}"
772,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test249()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
}"
773,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test250()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
}"
774,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test251()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
}"
775,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test252()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
}"
776,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test253()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
}"
777,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test254()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
778,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test255()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
779,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test256()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
780,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test257()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
781,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test258()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
782,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test259()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
783,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test260()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
784,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test261()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
785,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test262()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
786,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test263()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
787,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test264()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
788,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test265()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
789,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test266()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
790,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test267()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
791,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test268()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
}"
792,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test269()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
793,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test270()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
794,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test271()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
795,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test272()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
796,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test273()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
797,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test274()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
798,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test275()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
799,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test276()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
800,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test277()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
801,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test278()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
802,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test279()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
803,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test280()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
}"
804,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test281()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
805,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test282()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
806,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test283()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
807,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test284()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
808,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test285()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
809,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test286()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
810,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test287()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
811,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test288()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
812,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test289()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
813,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test290()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
814,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test291()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
815,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test292()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
816,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test293()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
817,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test294()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
818,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test295()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
819,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test296()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
820,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test297()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
821,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test298()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
822,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test299()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
823,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test300()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
824,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test301()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
825,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test302()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
826,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test303()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
827,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test304()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
828,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test305()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
829,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test306()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
830,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test307()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
831,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test308()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
832,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test309()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
833,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test310()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
834,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test311()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
835,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test312()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
836,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test313()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
837,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test314()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
838,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test315()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
839,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test316()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
840,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test317()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
841,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test318()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
842,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test319()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
843,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test320()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt("""");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 2717);
      int int1 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray1, byteArray0);
      long long0 = HashUtil.crc32AsLong(byteArray1);
      long long1 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1(byteArray2);
}"
844,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
}"
845,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
}"
846,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
}"
847,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
}"
848,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test325()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
}"
849,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
}"
850,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
}"
851,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
}"
852,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
}"
853,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
}"
854,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
}"
855,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
}"
856,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test333()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
}"
857,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
}"
858,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
}"
859,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
}"
860,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
}"
861,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
}"
862,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
}"
863,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
}"
864,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test341()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
}"
865,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
}"
866,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
}"
867,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
}"
868,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test345()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
}"
869,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
}"
870,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
}"
871,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
}"
872,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
}"
873,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
}"
874,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test351()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
}"
875,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
}"
876,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
}"
877,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
878,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
879,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
880,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
881,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
882,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
883,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
884,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test361()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
885,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
886,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
887,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
888,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
889,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
890,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
891,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
892,"    public static byte[] md5File(InputStream input) throws IOException {
        return digestFile(input, get(MD5_DIGEST));
    }","  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-49);
      byte[] byteArray1 = HashUtil.sha1(""com.google.common.io.PatternFilenameFilter"", byteArray0, (int) (byte)1);
      long long0 = HashUtil.crc32AsLong(""com.google.common.io.PatternFilenameFilter"");
      long long1 = HashUtil.crc32AsLong(""k^6.a(L7my"");
      int int0 = HashUtil.murmur32AsInt(byteArray0);
      HashUtil hashUtil0 = new HashUtil();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (-3938), 0);
      boolean boolean0 = byteArrayInputStream0.markSupported();
      byte[] byteArray2 = HashUtil.md5File(byteArrayInputStream0);
}"
893,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test370()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
894,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test371()  throws Throwable  {
      long long0 = HashUtil.murmur128AsLong(""CXr'jv#!jcV6N"");
}"
895,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test372()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
896,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
897,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test374()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
898,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
899,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
900,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test377()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
901,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
902,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
}"
903,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
}"
904,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
}"
905,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
}"
906,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
}"
907,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
}"
908,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
}"
909,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
}"
910,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
911,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
912,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
913,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
914,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test391()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
915,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test392()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
916,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
917,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
918,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
919,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
920,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
921,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
922,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
923,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
924,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test401()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      int int0 = HashUtil.crc32AsInt(byteArray1);
      byte[] byteArray2 = HashUtil.sha1(byteArray0, byteArray1, (-5696));
}"
925,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test402()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.murmur128AsLong((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.hash.AbstractHasher"", e);
      }
  }"
926,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test403()  throws Throwable  {
      String string0 = """";
      long long0 = HashUtil.crc32AsLong("""");
}"
927,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test404()  throws Throwable  {
      byte[] byteArray0 = HashUtil.sha1("""", (byte[]) null);
}"
928,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test405()  throws Throwable  {
      byte[] byteArray0 = HashUtil.sha1("""", (byte[]) null);
}"
929,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test406()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HashUtil.crc32AsLong((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.HashUtil"", e);
      }
  }"
930,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test407()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
}"
931,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test408()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
}"
932,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test409()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
}"
933,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test410()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
}"
934,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test411()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
}"
935,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test412()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
}"
936,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test413()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
}"
937,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test414()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
}"
938,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test415()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
939,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test416()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
940,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test417()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
941,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test418()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
942,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test419()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
943,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test420()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
944,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test421()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
945,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test422()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
946,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test423()  throws Throwable  {
      String string0 = """";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = HashUtil.sha1("""", byteArray0, (-1));
      long long0 = HashUtil.crc32AsLong("""");
      long long1 = HashUtil.murmur128AsLong(byteArray1);
}"
947,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test424()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null, (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
948,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test425()  throws Throwable  {
      long long0 = HashUtil.murmur128AsLong(""|)/y,"");
}"
949,,"  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114), 8192);
}"
950,,"  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114), 8192);
}"
951,,"  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114), 8192);
}"
952,,"  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114), 8192);
}"
953,,"  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114), 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
}"
954,,"  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114), 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
}"
955,,"  public void test432()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114), 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
}"
956,,"  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2114), 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
}"
957,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test434()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        HashUtil.crc32AsInt((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.zip.CRC32"", e);
      }
  }"
958,"    public static byte[] generateSalt(int numBytes) {
        Validate.isTrue(numBytes > 0, ""numBytes argument must be a positive integer (1 or larger)"", numBytes);

        byte[] bytes = new byte[numBytes];
        random.nextBytes(bytes);
        return bytes;
    }","  public void test435()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.generateSalt((-784));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // numBytes argument must be a positive integer (1 or larger)
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
959,,"  public void test436()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
}"
960,,"  public void test437()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
}"
961,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test438()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
}"
962,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test439()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
}"
963,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test440()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
}"
964,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test441()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
}"
965,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test442()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
}"
966,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test443()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
}"
967,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test444()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
}"
968,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test445()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
}"
969,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test446()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
}"
970,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test447()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
}"
971,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test448()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
}"
972,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test449()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
}"
973,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test450()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
}"
974,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test451()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
}"
975,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test452()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
}"
976,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test453()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
}"
977,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test454()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
}"
978,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test455()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
}"
979,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test456()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, 910);
      int int0 = HashUtil.crc32AsInt(""US-ASCII"");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte) (-88);
      int int1 = HashUtil.murmur32AsInt(byteArray2);
      long long0 = HashUtil.crc32AsLong(""\""{yG"");
}"
980,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test457()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.sha1((byte[]) null, (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
981,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test458()  throws Throwable  {
      long long0 = HashUtil.murmur128AsLong("""");
}"
982,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test459()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        HashUtil.sha1File((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.HashUtil"", e);
      }
  }"
983,"    public static byte[] generateSalt(int numBytes) {
        Validate.isTrue(numBytes > 0, ""numBytes argument must be a positive integer (1 or larger)"", numBytes);

        byte[] bytes = new byte[numBytes];
        random.nextBytes(bytes);
        return bytes;
    }","  public void test460()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.generateSalt(0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // numBytes argument must be a positive integer (1 or larger)
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
984,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test461()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.murmur128AsLong((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher"", e);
      }
  }"
985,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test462()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashUtil.murmur32AsInt((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher"", e);
      }
  }"
986,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test463()  throws Throwable  {
      long long0 = HashUtil.crc32AsLong(""x+JPpFZc"");
}"
987,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test464()  throws Throwable  {
      int int0 = HashUtil.crc32AsInt(""q8v^J8Yr}&L$veZ-&"");
}"
988,,"  public void test465()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
}"
989,,"  public void test466()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
}"
990,,"  public void test467()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
}"
991,,"  public void test468()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
}"
992,,"  public void test469()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
}"
993,,"  public void test470()  throws Throwable  {
      HashUtil hashUtil0 = new HashUtil();
}"
994,"    public static byte[] generateSalt(int numBytes) {
        Validate.isTrue(numBytes > 0, ""numBytes argument must be a positive integer (1 or larger)"", numBytes);

        byte[] bytes = new byte[numBytes];
        random.nextBytes(bytes);
        return bytes;
    }","  public void test471()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
}"
995,"    public static byte[] generateSalt(int numBytes) {
        Validate.isTrue(numBytes > 0, ""numBytes argument must be a positive integer (1 or larger)"", numBytes);

        byte[] bytes = new byte[numBytes];
        random.nextBytes(bytes);
        return bytes;
    }","  public void test472()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
}"
996,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test473()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
}"
997,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test474()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
}"
998,"    public static long crc32AsLong(@NotNull String input) {
        return crc32AsLong(input.getBytes(Charsets.UTF_8));
    }","  public void test475()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
}"
999,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test476()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
}"
1000,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test477()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
}"
1001,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test478()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
}"
1002,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test479()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
}"
1003,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test480()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
}"
1004,"    public static int crc32AsInt(@NotNull String input) {
        return crc32AsInt(input.getBytes(Charsets.UTF_8));
    }","  public void test481()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
}"
1005,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test482()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
1006,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test483()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
1007,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test484()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
1008,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test485()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
1009,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test486()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
1010,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test487()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
}"
1011,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test488()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
}"
1012,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test489()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
}"
1013,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test490()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
}"
1014,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test491()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
}"
1015,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test492()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
}"
1016,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test493()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
}"
1017,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test494()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1018,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test495()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1019,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test496()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1020,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test497()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1021,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test498()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1022,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test499()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1023,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test500()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1024,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test501()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1025,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test502()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1026,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test503()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1027,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test504()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1028,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test505()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1029,"    public static long murmur128AsLong(@NotNull byte[] input) {
        return Hashing.murmur3_128(MURMUR_SEED).hashBytes(input).asLong();
    }","  public void test506()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
}"
1030,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test507()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1031,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test508()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1032,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test509()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1033,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test510()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1034,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test511()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1035,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test512()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1036,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test513()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1037,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test514()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1038,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test515()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1039,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test516()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1040,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test517()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1041,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test518()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1042,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test519()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1043,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test520()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1044,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test521()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1045,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test522()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1046,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test523()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1047,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test524()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1048,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test525()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1049,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test526()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
}"
1050,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test527()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1051,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test528()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1052,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test529()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1053,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test530()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1054,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test531()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1055,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test532()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1056,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test533()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1057,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test534()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1058,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test535()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1059,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test536()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1060,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test537()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1061,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test538()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1062,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test539()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1063,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test540()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1064,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test541()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1065,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test542()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1066,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test543()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1067,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test544()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1068,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test545()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1069,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test546()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1070,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test547()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1071,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test548()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1072,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test549()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1073,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test550()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1074,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test551()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1075,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test552()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1076,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test553()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1077,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test554()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1078,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test555()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1079,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test556()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1080,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test557()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1081,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test558()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1082,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test559()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1083,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test560()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
}"
1084,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test561()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1085,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test562()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1086,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test563()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1087,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test564()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1088,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test565()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1089,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test566()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1090,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test567()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1091,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test568()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1092,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test569()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1093,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test570()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1094,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test571()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1095,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test572()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1096,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test573()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1097,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test574()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1098,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test575()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1099,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test576()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1100,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test577()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1101,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test578()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1102,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test579()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1103,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test580()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1104,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test581()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1105,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test582()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1106,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test583()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1107,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test584()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1108,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test585()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1109,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test586()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1110,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test587()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1111,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test588()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1112,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test589()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1113,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test590()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1114,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test591()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1115,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test592()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1116,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test593()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1117,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test594()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1118,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test595()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1119,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test596()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1120,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test597()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1121,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test598()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1122,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test599()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1123,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test600()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1124,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test601()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1125,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test602()  throws Throwable  {
      byte[] byteArray0 = HashUtil.generateSalt(2122);
      long long0 = HashUtil.crc32AsLong(""&TYn8%"");
      HashUtil hashUtil0 = new HashUtil();
      int int0 = HashUtil.crc32AsInt(byteArray0);
      long long1 = HashUtil.murmur128AsLong(""( Do\""Bfk5b"");
      int int1 = HashUtil.crc32AsInt(""( Do\""Bfk5b"");
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0);
      byte[] byteArray2 = HashUtil.sha1(""( Do\""Bfk5b"");
      long long2 = HashUtil.murmur128AsLong(byteArray1);
      byte[] byteArray3 = HashUtil.sha1("""", byteArray1);
      byte[] byteArray4 = HashUtil.sha1(byteArray1, byteArray3);
      byte[] byteArray5 = HashUtil.sha1(byteArray3);
}"
1126,,"  public void test603()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
}"
1127,,"  public void test604()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
}"
1128,,"  public void test605()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
}"
1129,,"  public void test606()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
}"
1130,,"  public void test607()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
}"
1131,,"  public void test608()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
}"
1132,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test609()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byte[] byteArray1 = HashUtil.sha1File(bufferedInputStream0);
}"
1133,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test610()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byte[] byteArray1 = HashUtil.sha1File(bufferedInputStream0);
}"
1134,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test611()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byte[] byteArray1 = HashUtil.sha1File(bufferedInputStream0);
}"
1135,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test612()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byte[] byteArray1 = HashUtil.sha1File(bufferedInputStream0);
}"
1136,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test613()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byte[] byteArray1 = HashUtil.sha1File(bufferedInputStream0);
}"
1137,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test614()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byte[] byteArray1 = HashUtil.sha1File(bufferedInputStream0);
}"
1138,"    public static byte[] sha1File(InputStream input) throws IOException {
        return digestFile(input, get(SHA_1_DIGEST));
    }","  public void test615()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)70;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 8192);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      byte[] byteArray1 = HashUtil.sha1File(bufferedInputStream0);
}"
1139,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test616()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.murmur32AsInt(byteArray0);
}"
1140,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test617()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.murmur32AsInt(byteArray0);
}"
1141,"    public static int murmur32AsInt(@NotNull byte[] input) {
        return Hashing.murmur3_32(MURMUR_SEED).hashBytes(input).asInt();
    }","  public void test618()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = HashUtil.murmur32AsInt(byteArray0);
}"
1142,"    public static byte[] sha1(@NotNull byte[] input) {
        return digest(input, get(SHA_1_DIGEST), null, 1);
    }","  public void test619()  throws Throwable  {
      HashUtil.murmur32AsInt("">)A]EIt+Tm\u0002BlMa2;>"");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = HashUtil.sha1(byteArray0, byteArray0, (-1477764841));
      byte[] byteArray2 = HashUtil.sha1(""kaMX"", byteArray1, (int) (byte)0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray2);
      byteArrayInputStream0.read();
      byteArrayInputStream0.mark((-526));
      byteArrayInputStream0.reset();
      byteArrayInputStream0.mark(1318007700);
      byteArrayInputStream0.read(byteArray0);
      HashUtil.md5File(byteArrayInputStream0);
      HashUtil.murmur32AsInt(""kaMX"");
      HashUtil.sha1(""=-z2`nn"", byteArray1, 1);
      // Undeclared exception!
      HashUtil.sha1(byteArray2, byteArray2, 1318007700);
  }"
1143,"    public JavaType buildMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass) {
        return mapper.getTypeFactory().constructMapType(mapClass, keyClass, valueClass);
    }","  public void test0()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.defaultMapper();
      Class<HashMap> class0 = HashMap.class;
      Class<Locale.Category> class1 = Locale.Category.class;
      JavaType javaType0 = jsonMapper0.buildMapType(class0, class1, class0);
}"
1144,"    public void update(String jsonString, Object object) {
        try {
            mapper.readerForUpdating(object).readValue(jsonString);
        } catch (JsonProcessingException e) {
            logger.warn(""update json string:"" + jsonString + "" to object:"" + object + "" error."", e);
        } catch (IOException e) {
            logger.warn(""update json string:"" + jsonString + "" to object:"" + object + "" error."", e);
        }
    }","  public void test1()  throws Throwable  {
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      JsonMapper jsonMapper0 = JsonMapper.defaultMapper();
      jsonMapper0.update(""f<M8+"", jsonInclude_Include0);
  }"
1145,"    public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
        if (StringUtils.isEmpty(jsonString)) {
            return null;
        }

        try {
            return mapper.readValue(jsonString, clazz);
        } catch (IOException e) {
            logger.warn(""parse json string error:"" + jsonString, e);
            return null;
        }
    }","  public void test2()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.defaultMapper();
      Class<Object> class0 = Object.class;
      Object object0 = jsonMapper0.fromJson(""\""java.util.HashMap\"""", class0);
}"
1146,"    public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
        if (StringUtils.isEmpty(jsonString)) {
            return null;
        }

        try {
            return mapper.readValue(jsonString, clazz);
        } catch (IOException e) {
            logger.warn(""parse json string error:"" + jsonString, e);
            return null;
        }
    }","  public void test3()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.INSTANCE;
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      String string0 = jsonMapper0.fromJson(""\""java.lang.Object\"""", (JavaType) resolvedRecursiveType0);
}"
1147,"    public void update(String jsonString, Object object) {
        try {
            mapper.readerForUpdating(object).readValue(jsonString);
        } catch (JsonProcessingException e) {
            logger.warn(""update json string:"" + jsonString + "" to object:"" + object + "" error."", e);
        } catch (IOException e) {
            logger.warn(""update json string:"" + jsonString + "" to object:"" + object + "" error."", e);
        }
    }","  public void test4()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.nonNullMapper();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jsonMapper0.update((String) null, object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.fasterxml.jackson.core.JsonFactory"", e);
      }
  }"
1148,"    public void update(String jsonString, Object object) {
        try {
            mapper.readerForUpdating(object).readValue(jsonString);
        } catch (JsonProcessingException e) {
            logger.warn(""update json string:"" + jsonString + "" to object:"" + object + "" error."", e);
        } catch (IOException e) {
            logger.warn(""update json string:"" + jsonString + "" to object:"" + object + "" error."", e);
        }
    }","  public void test5()  throws Throwable  {
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      JsonMapper jsonMapper0 = new JsonMapper(jsonInclude_Include0);
      jsonMapper0.INSTANCE.update("""", """");
  }"
1149,"    public String toJsonP(String functionName, Object object) {
        return toJson(new JSONPObject(functionName, object));
    }","  public void test6()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.defaultMapper();
      String string0 = jsonMapper0.toJsonP((String) null, (Object) null);
}"
1150,"    public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
        if (StringUtils.isEmpty(jsonString)) {
            return null;
        }

        try {
            return mapper.readValue(jsonString, clazz);
        } catch (IOException e) {
            logger.warn(""parse json string error:"" + jsonString, e);
            return null;
        }
    }","  public void test7()  throws Throwable  {
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      JsonMapper jsonMapper0 = new JsonMapper(jsonInclude_Include0);
      // Undeclared exception!
      try { 
        jsonMapper0.fromJson(""FZpxq_oU`jU=ZD%c&"", (Class<Integer>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
      }
  }"
1151,"    public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
        if (StringUtils.isEmpty(jsonString)) {
            return null;
        }

        try {
            return mapper.readValue(jsonString, clazz);
        } catch (IOException e) {
            logger.warn(""parse json string error:"" + jsonString, e);
            return null;
        }
    }","  public void test8()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.INSTANCE;
      // Undeclared exception!
      try { 
        jsonMapper0.INSTANCE.fromJson(""["", (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1152,"    public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
        if (StringUtils.isEmpty(jsonString)) {
            return null;
        }

        try {
            return mapper.readValue(jsonString, clazz);
        } catch (IOException e) {
            logger.warn(""parse json string error:"" + jsonString, e);
            return null;
        }
    }","  public void test9()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.INSTANCE;
      Class<LinkedList> class0 = LinkedList.class;
      JavaType javaType0 = jsonMapper0.INSTANCE.buildCollectionType(class0, class0);
      JavaType javaType1 = jsonMapper0.INSTANCE.fromJson(""1196"", javaType0);
}"
1153,"    public JsonMapper() {
        this(null);
    }","  public void test10()  throws Throwable  {
      JsonMapper jsonMapper0 = new JsonMapper((JsonInclude.Include) null);
  }"
1154,"    public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
        if (StringUtils.isEmpty(jsonString)) {
            return null;
        }

        try {
            return mapper.readValue(jsonString, clazz);
        } catch (IOException e) {
            logger.warn(""parse json string error:"" + jsonString, e);
            return null;
        }
    }","  public void test11()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.defaultMapper();
      Class<LinkedList> class0 = LinkedList.class;
      Class<Integer> class1 = Integer.TYPE;
      JavaType javaType0 = jsonMapper0.INSTANCE.buildCollectionType(class0, class1);
      Integer integer0 = jsonMapper0.fromJson((String) null, javaType0);
}"
1155,"    public String toJson(Object object) {

        try {
            return mapper.writeValueAsString(object);
        } catch (IOException e) {
            logger.warn(""write to json string error:"" + object, e);
            return null;
        }
    }","  public void test12()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.INSTANCE;
      Class<Integer> class0 = Integer.class;
      Integer integer0 = jsonMapper0.fromJson("""", class0);
      String string0 = jsonMapper0.toJson(integer0);
}"
1156,"    public ObjectMapper getMapper() {
        return mapper;
    }","  public void test13()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.INSTANCE;
      ObjectMapper objectMapper0 = jsonMapper0.getMapper();
}"
1157,"    public void enableEnumUseToString() {
        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);
        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);
    }","  public void test14()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.INSTANCE;
      jsonMapper0.enableEnumUseToString();
  }"
1158,"    public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
        if (StringUtils.isEmpty(jsonString)) {
            return null;
        }

        try {
            return mapper.readValue(jsonString, clazz);
        } catch (IOException e) {
            logger.warn(""parse json string error:"" + jsonString, e);
            return null;
        }
    }","  public void test15()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.INSTANCE;
      Class<LinkedList> class0 = LinkedList.class;
      JavaType javaType0 = jsonMapper0.INSTANCE.buildCollectionType(class0, class0);
      LinkedList<JsonMapper> linkedList0 = jsonMapper0.INSTANCE.fromJson(""BtTPL52jQ+"", javaType0);
}"
1159,"    public String toJsonP(String functionName, Object object) {
        return toJson(new JSONPObject(functionName, object));
    }","  public void test16()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.INSTANCE;
      String string0 = jsonMapper0.toJsonP("""", """");
}"
1160,"    public void update(String jsonString, Object object) {
        try {
            mapper.readerForUpdating(object).readValue(jsonString);
        } catch (JsonProcessingException e) {
            logger.warn(""update json string:"" + jsonString + "" to object:"" + object + "" error."", e);
        } catch (IOException e) {
            logger.warn(""update json string:"" + jsonString + "" to object:"" + object + "" error."", e);
        }
    }","  public void test17()  throws Throwable  {
      JsonMapper jsonMapper0 = new JsonMapper();
      // Undeclared exception!
      try { 
        jsonMapper0.INSTANCE.update(""\""cti{3\""0R=vE"", ""\""cti{3\""0R=vE"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Can not update object of type java.lang.String (by deserializer of type com.fasterxml.jackson.databind.deser.std.StringDeserializer)
         //
         verifyException(""com.fasterxml.jackson.databind.JsonDeserializer"", e);
      }
  }"
1161,"    public <T> T fromJson(@Nullable String jsonString, Class<T> clazz) {
        if (StringUtils.isEmpty(jsonString)) {
            return null;
        }

        try {
            return mapper.readValue(jsonString, clazz);
        } catch (IOException e) {
            logger.warn(""parse json string error:"" + jsonString, e);
            return null;
        }
    }","  public void test18()  throws Throwable  {
      JsonMapper jsonMapper0 = JsonMapper.defaultMapper();
      Class<Integer> class0 = Integer.TYPE;
      Integer integer0 = jsonMapper0.INSTANCE.fromJson(""f<M8+"", class0);
}"
1162,"    public static String toXml(Object root) {
        Class clazz = ClassUtil.unwrapCglib(root);
        return toXml(root, clazz, null);
    }","  public void test0()  throws Throwable  {
      LinkedList<XmlMapper.CollectionWrapper> linkedList0 = new LinkedList<XmlMapper.CollectionWrapper>();
      String string0 = "")yoNY\\u%F+CBR39"";
      XmlMapper.CollectionWrapper xmlMapper_CollectionWrapper0 = new XmlMapper.CollectionWrapper();
      linkedList0.add(xmlMapper_CollectionWrapper0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Collection<?>) linkedList0, string0, (Class) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil"", e);
      }
  }"
1163,"    public static String toXml(Object root) {
        Class clazz = ClassUtil.unwrapCglib(root);
        return toXml(root, clazz, null);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) null, ""+;uHFjl1"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Instance must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
1164,"    public static String toXml(Object root) {
        Class clazz = ClassUtil.unwrapCglib(root);
        return toXml(root, clazz, null);
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Instance must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
1165,"    protected static JAXBContext getJaxbContext(Class clazz) {
        Validate.notNull(clazz, ""'clazz' must not be null"");
        JAXBContext jaxbContext = jaxbContexts.get(clazz);
        if (jaxbContext == null) {
            try {
                jaxbContext = JAXBContext.newInstance(clazz, CollectionWrapper.class);
                jaxbContexts.putIfAbsent(clazz, jaxbContext);
            } catch (JAXBException ex) {
                throw new RuntimeException(""Could not instantiate JAXBContext for class ["" + clazz + ""]: ""
                        + ex.getMessage(), ex);
            }
        }
        return jaxbContext;
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.getJaxbContext((Class) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
1166,"    public static <T> T fromXml(String xml, Class<T> clazz) {
        try {
            StringReader reader = new StringReader(xml);
            return (T) createUnmarshaller(clazz).unmarshal(reader);
        } catch (JAXBException e) {
            throw ExceptionUtil.unchecked(e);
        }
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.fromXml("""", (Class<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
1167,"    public static Unmarshaller createUnmarshaller(Class clazz) {
        try {
            JAXBContext jaxbContext = getJaxbContext(clazz);
            return jaxbContext.createUnmarshaller();
        } catch (JAXBException e) {
            throw ExceptionUtil.unchecked(e);
        }
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.createUnmarshaller((Class) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
1168,"    public static Marshaller createMarshaller(Class clazz, String encoding) {
        try {
            JAXBContext jaxbContext = getJaxbContext(clazz);

            Marshaller marshaller = jaxbContext.createMarshaller();

            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

            if (StringUtils.isNotBlank(encoding)) {
                marshaller.setProperty(Marshaller.JAXB_ENCODING, encoding);
            }

            return marshaller;
        } catch (JAXBException e) {
            throw ExceptionUtil.unchecked(e);
        }
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.createMarshaller((Class) null, ""]: "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
1169,,"  public void test7()  throws Throwable  {
      XmlMapper xmlMapper0 = new XmlMapper();
  }"
1170,"    public static String toXml(Object root) {
        Class clazz = ClassUtil.unwrapCglib(root);
        return toXml(root, clazz, null);
    }","  public void test8()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Object) linkedList0, ""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?>\n<\u0002w#dcB:7svk7jVdi/>\n"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil"", e);
      }
  }"
1171,"    public static String toXml(Object root) {
        Class clazz = ClassUtil.unwrapCglib(root);
        return toXml(root, clazz, null);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        XmlMapper.toXml((Collection<?>) null, ""$`v[l["", (Class) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // 'clazz' must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
1172,"    public static List<Long> longAsList(long... backingArray) {
        return Longs.asList(backingArray);
    }","  public void test0()  throws Throwable  {
      long[] longArray0 = new long[0];
      List<Long> list0 = ArrayUtil.longAsList(longArray0);
}"
1173,"    public static <T> T[] toArray(List<T> list, Class<T> type) {
        return list.toArray((T[]) Array.newInstance(type, list.size()));
    }","  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""KCvIl:4gfC}Qv9z"");
      Class<String> class0 = String.class;
      String[] stringArray0 = ArrayUtil.toArray((List<String>) linkedList0, class0);
}"
1174,"    public static <T> T[] shuffle(T[] array) {
        List<T> list = new ArrayList<T>(array.length);
        Collections.addAll(list, array);
        Collections.shuffle(list);
        return list.toArray(array);
    }","  public void test2()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      MockRandom mockRandom0 = new MockRandom(0L);
      Double[] doubleArray1 = ArrayUtil.shuffle(doubleArray0, (Random) mockRandom0);
}"
1175,"    public static <T> T[] shuffle(T[] array) {
        List<T> list = new ArrayList<T>(array.length);
        Collections.addAll(list, array);
        Collections.shuffle(list);
        return list.toArray(array);
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtil.shuffle(stringArray0);
}"
1176,"    public static <T> T[] newArray(Class<T> type, int length) {
        return (T[]) Array.newInstance(type, length);
    }","  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = ArrayUtil.newArray(class0, 0);
}"
1177,"    public static <T> T[] toArray(List<T> list, Class<T> type) {
        return list.toArray((T[]) Array.newInstance(type, list.size()));
    }","  public void test5()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      List<Double> list0 = ArrayUtil.asList((Double) null, doubleArray0);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        ArrayUtil.toArray((List<Double>) list0, (Class<Double>) class0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // [D cannot be cast to [Ljava.lang.Object;
         //
         verifyException(""org.springside.modules.utils.collection.ArrayUtil"", e);
      }
  }"
1178,"    public static <T> T[] shuffle(T[] array) {
        List<T> list = new ArrayList<T>(array.length);
        Collections.addAll(list, array);
        Collections.shuffle(list);
        return list.toArray(array);
    }","  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        ArrayUtil.shuffle(objectArray0, (Random) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1179,"    public static <T> T[] shuffle(T[] array) {
        List<T> list = new ArrayList<T>(array.length);
        Collections.addAll(list, array);
        Collections.shuffle(list);
        return list.toArray(array);
    }","  public void test7()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(Integer.MIN_VALUE);
      Object[] objectArray0 = new Object[3];
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        ArrayUtil.shuffle(objectArray0, (Random) mockRandom0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1180,"    public static <T> T[] shuffle(T[] array) {
        List<T> list = new ArrayList<T>(array.length);
        Collections.addAll(list, array);
        Collections.shuffle(list);
        return list.toArray(array);
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.shuffle((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.ArrayUtil"", e);
      }
  }"
1181,"    public static <T> T[] newArray(Class<T> type, int length) {
        return (T[]) Array.newInstance(type, length);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.newArray((Class<Integer>) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1182,"    public static <T> T[] newArray(Class<T> type, int length) {
        return (T[]) Array.newInstance(type, length);
    }","  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        ArrayUtil.newArray((Class<Integer>) class0, 0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to [Ljava.lang.Object;
         //
         verifyException(""org.springside.modules.utils.collection.ArrayUtil"", e);
      }
  }"
1183,"    public static List<Integer> intAsList(int... backingArray) {
        return Ints.asList(backingArray);
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.intAsList((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.primitives.Ints"", e);
      }
  }"
1184,"    public static List<Double> doubleAsList(double... backingArray) {
        return Doubles.asList(backingArray);
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.doubleAsList((double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.primitives.Doubles"", e);
      }
  }"
1185,"    public static <T> T[] concat(@Nullable T element, T[] array) {
        return ObjectArrays.concat(element, array);
    }","  public void test13()  throws Throwable  {
      Long long0 = new Long(2537L);
      // Undeclared exception!
      try { 
        ArrayUtil.concat((Long[]) null, long0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.ObjectArrays"", e);
      }
  }"
1186,"    public static <T> T[] concat(@Nullable T element, T[] array) {
        return ObjectArrays.concat(element, array);
    }","  public void test14()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ArrayUtil.concat((Object[]) doubleArray0, (Object) integer0);
        fail(""Expecting exception: ArrayStoreException"");
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException(""com.google.common.collect.ObjectArrays"", e);
      }
  }"
1187,"    public static <T> T[] concat(@Nullable T element, T[] array) {
        return ObjectArrays.concat(element, array);
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.concat((Object) ""U'f6^W?OqNN"", (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.ObjectArrays"", e);
      }
  }"
1188,"    public static <T> T[] concat(@Nullable T element, T[] array) {
        return ObjectArrays.concat(element, array);
    }","  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      List<Double> list0 = ArrayUtil.asList(doubleArray0);
      // Undeclared exception!
      try { 
        ArrayUtil.concat((Object) list0, (Object[]) doubleArray0);
        fail(""Expecting exception: ArrayStoreException"");
      } catch(ArrayStoreException e) {
         //
         // java.util.Arrays$ArrayList
         //
         verifyException(""com.google.common.collect.ObjectArrays"", e);
      }
  }"
1189,"    public static <T> List<T> asList(T... a) {
        return Arrays.asList(a);
    }","  public void test17()  throws Throwable  {
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        ArrayUtil.asList(long0, (Long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1190,"    public static <T> T[] concat(@Nullable T element, T[] array) {
        return ObjectArrays.concat(element, array);
    }","  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String[] stringArray1 = ArrayUtil.concat(stringArray0, ""U(am{ZjJ~1.sy+Aob"");
}"
1191,"    public static <T> T[] shuffle(T[] array) {
        List<T> list = new ArrayList<T>(array.length);
        Collections.addAll(list, array);
        Collections.shuffle(list);
        return list.toArray(array);
    }","  public void test19()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer[] integerArray1 = ArrayUtil.shuffle(integerArray0, (Random) null);
}"
1192,"    public static <T> T[] toArray(List<T> list, Class<T> type) {
        return list.toArray((T[]) Array.newInstance(type, list.size()));
    }","  public void test20()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Double[] doubleArray0 = ArrayUtil.newArray(class0, 2678);
      List<Object> list0 = ArrayUtil.asList((Object) ""^TT/vDR@a"", (Object[]) doubleArray0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      ArrayUtil.toArray(list0, class1);
  }"
1193,"    public static <T> T[] toArray(List<T> list, Class<T> type) {
        return list.toArray((T[]) Array.newInstance(type, list.size()));
    }","  public void test21()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = ArrayUtil.toArray((List<Object>) linkedList0, class0);
}"
1194,,"  public void test22()  throws Throwable  {
      ArrayUtil arrayUtil0 = new ArrayUtil();
  }"
1195,"    public static List<Double> doubleAsList(double... backingArray) {
        return Doubles.asList(backingArray);
    }","  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      List<Double> list0 = ArrayUtil.doubleAsList(doubleArray0);
}"
1196,"    public static List<Integer> intAsList(int... backingArray) {
        return Ints.asList(backingArray);
    }","  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      List<Integer> list0 = ArrayUtil.intAsList(intArray0);
}"
1197,"    public static <T> T[] concat(@Nullable T element, T[] array) {
        return ObjectArrays.concat(element, array);
    }","  public void test25()  throws Throwable  {
      Double double0 = new Double((-382.95281628811085));
      Double[] doubleArray0 = new Double[3];
      Double[] doubleArray1 = ArrayUtil.concat(double0, doubleArray0);
}"
1198,"    public static List<Long> longAsList(long... backingArray) {
        return Longs.asList(backingArray);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.longAsList((long[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.primitives.Longs"", e);
      }
  }"
1199,"    public static <T> T[] shuffle(T[] array) {
        List<T> list = new ArrayList<T>(array.length);
        Collections.addAll(list, array);
        Collections.shuffle(list);
        return list.toArray(array);
    }","  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = ArrayUtil.newArray(class0, 212);
      Object[] objectArray0 = ArrayUtil.shuffle((Object[]) stringArray0);
}"
1200,"    public static <T> List<T> asList(T... a) {
        return Arrays.asList(a);
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtil.asList((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1201,"    public static <E> EvictingQueue<E> createLRUQueue(int maxSize) {
        return EvictingQueue.create(maxSize);
    }","  public void test0()  throws Throwable  {
      EvictingQueue<String> evictingQueue0 = QueueUtil.createLRUQueue(1805);
}"
1202,"    public static <E> LinkedBlockingQueue<E> newLinkedBlockingQeque(int capacity) {
        return new LinkedBlockingQueue<E>(capacity);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueueUtil.newLinkedBlockingQeque(0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.LinkedBlockingQueue"", e);
      }
  }"
1203,"    public static <E> LinkedBlockingDeque<E> newBlockingDeque(int capacity) {
        return new LinkedBlockingDeque<E>(capacity);
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueueUtil.newBlockingDeque((-515));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.LinkedBlockingDeque"", e);
      }
  }"
1204,"    public static <E> ArrayBlockingQueue<E> newArrayBlockingQueue(int capacity) {
        return new ArrayBlockingQueue<E>(capacity);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueueUtil.newArrayBlockingQueue(0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ArrayBlockingQueue"", e);
      }
  }"
1205,"    public static <E> Deque<E> newConcurrentNonBlockingDeque() {
        return new java.util.concurrent.ConcurrentLinkedDeque<E>();
    }","  public void test4()  throws Throwable  {
      Deque<Object> deque0 = QueueUtil.newConcurrentNonBlockingDeque();
}"
1206,"    public static <E> LinkedBlockingDeque<E> newBlockingUnlimitDeque() {
        return new LinkedBlockingDeque<E>();
    }","  public void test5()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = QueueUtil.newBlockingUnlimitDeque();
}"
1207,"    public static <E> Queue<E> createStack(int initSize) {
        return Collections.asLifoQueue(new ArrayDeque<E>(initSize));
    }","  public void test6()  throws Throwable  {
      Queue<Object> queue0 = QueueUtil.createStack(2448);
}"
1208,"    public static <E> LinkedBlockingQueue<E> newLinkedBlockingQeque(int capacity) {
        return new LinkedBlockingQueue<E>(capacity);
    }","  public void test7()  throws Throwable  {
      LinkedBlockingQueue<String> linkedBlockingQueue0 = QueueUtil.newLinkedBlockingQeque(2448);
}"
1209,"    public static <E> LinkedBlockingDeque<E> newBlockingDeque(int capacity) {
        return new LinkedBlockingDeque<E>(capacity);
    }","  public void test8()  throws Throwable  {
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = QueueUtil.newBlockingDeque(43);
}"
1210,"    public static <E> LinkedBlockingQueue<E> newBlockingUnlimitQueue() {
        return new LinkedBlockingQueue<E>();
    }","  public void test9()  throws Throwable  {
      LinkedBlockingQueue<Integer> linkedBlockingQueue0 = QueueUtil.newBlockingUnlimitQueue();
}"
1211,"    public static <E> LinkedList<E> newLinkedDeque() {
        return new LinkedList<E>();
    }","  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = QueueUtil.newLinkedDeque();
}"
1212,"    public static <E> Queue<E> createConcurrentStack() {
        return (Queue<E>) Collections.asLifoQueue(newConcurrentNonBlockingDeque());
    }","  public void test11()  throws Throwable  {
      Queue<String> queue0 = QueueUtil.createConcurrentStack();
}"
1213,"    public static <E> ArrayBlockingQueue<E> newArrayBlockingQueue(int capacity) {
        return new ArrayBlockingQueue<E>(capacity);
    }","  public void test12()  throws Throwable  {
      ArrayBlockingQueue<String> arrayBlockingQueue0 = QueueUtil.newArrayBlockingQueue(43);
}"
1214,"    public static <E> ArrayDeque<E> newArrayDeque(int initSize) {
        return new ArrayDeque<E>(initSize);
    }","  public void test13()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = QueueUtil.newArrayDeque(2448);
}"
1215,"    public static <E> EvictingQueue<E> createLRUQueue(int maxSize) {
        return EvictingQueue.create(maxSize);
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueueUtil.createLRUQueue((-1555));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // maxSize (-1555) must >= 0
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1216,"    public static <E> ConcurrentLinkedQueue<E> newConcurrentNonBlockingQueue() {
        return new ConcurrentLinkedQueue<E>();
    }","  public void test15()  throws Throwable  {
      ConcurrentLinkedQueue<Object> concurrentLinkedQueue0 = QueueUtil.newConcurrentNonBlockingQueue();
}"
1217,,"  public void test16()  throws Throwable  {
      QueueUtil queueUtil0 = new QueueUtil();
  }"
1218,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test0()  throws Throwable  {
      int int0 = 477;
      HashSet<Object> hashSet0 = new HashSet<Object>(477, 477);
      Stream<Object> stream0 = hashSet0.parallelStream();
      Set<Object> set0 = SetUtil.intersectionView((Set<Object>) hashSet0, (Set<?>) hashSet0);
      hashSet0.add(set0);
      SetUtil.emptySetIfNull(set0);
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      hashSet0.add(stream0);
      SetUtil.newSortedSet((Comparator<? super Locale.LanguageRange>) comparator0);
      // Undeclared exception!
      try { 
        SetUtil.newHashSet((Iterable<?>) set0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1219,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test1()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Set<Object> set0 = SetUtil.intersectionView((Set<Object>) hashSet0, (Set<?>) hashSet0);
      hashSet0.add(set0);
      Set<Object> set1 = SetUtil.intersectionView((Set<Object>) set0, (Set<?>) hashSet0);
      Set<Object> set2 = SetUtil.intersectionView((Set<Object>) hashSet0, (Set<?>) set1);
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = new Boolean("""");
      hashMap0.replace(boolean0, boolean1);
      SetUtil.newSetFromMap((Map<Boolean, Boolean>) hashMap0);
      Set<Locale.LanguageRange> set3 = SetUtil.emptySetIfNull((Set<Locale.LanguageRange>) null);
      Set<Locale.LanguageRange> set4 = SetUtil.emptySetIfNull((Set<Locale.LanguageRange>) set3);
      SetUtil.unmodifiableSet((Set<? extends Locale.LanguageRange>) set4);
      SetUtil.emptySet();
      SetUtil.emptySet();
      SetUtil.newHashSet();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) set2;
      objectArray0[2] = (Object) hashMap0;
      // Undeclared exception!
      try { 
        SetUtil.newHashSet(objectArray0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
      }
  }"
1220,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test2()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      SetUtil.newSetFromMap((Map<Object, Boolean>) hashMap0);
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[0];
      SetUtil.newHashSet(locale_CategoryArray0);
  }"
1221,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""*"";
      HashSet<String> hashSet0 = SetUtil.newHashSet(stringArray0);
      hashSet0.add(""Pz8brc>L@k"");
      SetUtil.emptySetIfNull((Set<String>) hashSet0);
      SetUtil.newHashSet((Iterable<? extends String>) hashSet0);
  }"
1222,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test4()  throws Throwable  {
      HashSet<Object> hashSet0 = SetUtil.newHashSet();
      Object object0 = new Object();
      hashSet0.add(object0);
      hashSet0.add(""org.springside.modules.utils.collection.SetUtil"");
      Set<Object> set0 = SetUtil.unmodifiableSet((Set<?>) hashSet0);
      hashSet0.add(set0);
      HashSet<String> hashSet1 = new HashSet<String>();
      hashSet1.add(""org.springside.modules.utils.collection.SetUtil"");
      hashSet1.add("""");
      Set<String> set1 = SetUtil.unmodifiableSet((Set<? extends String>) hashSet1);
      Set<String> set2 = SetUtil.differenceView((Set<String>) set1, (Set<?>) hashSet1);
      Set<String> set3 = SetUtil.singletonSet("""");
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Integer integer0 = new Integer(421);
      hashSet0.add(integer0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      HashSet<Locale.Category> hashSet2 = SetUtil.newHashSet(locale_CategoryArray0);
      SetUtil.intersectionView((Set<Locale.Category>) hashSet2, (Set<?>) set3);
      SetUtil setUtil0 = new SetUtil();
      SetUtil.intersectionView((Set<Object>) set0, (Set<?>) set2);
      SetUtil.newSortedSet();
      SetUtil.intersectionView((Set<Object>) set0, (Set<?>) set1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = SetUtil.newSortedSet((Comparator<? super Integer>) comparator0);
      SetUtil.disjointView((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) treeSet0);
      // Undeclared exception!
      try { 
        SetUtil.newHashSet((Iterable<?>) set0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1223,"    public static <T> Set<T> unmodifiableSet(Set<? extends T> s) {
        return Collections.unmodifiableSet(s);
    }","  public void test5()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-830));
      Integer integer0 = new Integer((-830));
      Integer integer1 = Integer.getInteger("""", integer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayDeque0.forEach(consumer0);
      arrayDeque0.stream();
      Integer.max(16, (-1));
      Integer.max(16, 0);
      arrayDeque0.add(integer1);
      SetUtil.newHashSet((Iterable<? extends Integer>) arrayDeque0);
      Set<String> set0 = null;
      // Undeclared exception!
      try { 
        SetUtil.unmodifiableSet((Set<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableCollection"", e);
      }
  }"
1224,"    public static <E> Set<E> differenceView(final Set<E> set1, final Set<?> set2) {
        return Sets.difference(set1, set2);
    }","  public void test6()  throws Throwable  {
      SetUtil setUtil0 = new SetUtil();
      HashSet<Integer> hashSet0 = SetUtil.newHashSetWithCapacity(3861);
      HashSet<Integer> hashSet1 = SetUtil.newHashSetWithCapacity(3861);
      Set<Integer> set0 = SetUtil.unionView((Set<? extends Integer>) hashSet0, (Set<? extends Integer>) hashSet1);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-1667));
      hashSet1.add(integer0);
      SetUtil.newSetFromMap((Map<Integer, Boolean>) hashMap0);
      Set<Locale.FilteringMode> set1 = null;
      // Undeclared exception!
      try { 
        SetUtil.differenceView((Set<Locale.FilteringMode>) null, (Set<?>) set0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // set1
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1225,"    public static <E> Set<E> disjointView(final Set<? extends E> set1, final Set<? extends E> set2) {
        return Sets.symmetricDifference(set1, set2);
    }","  public void test7()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      SetUtil.emptySetIfNull((Set<String>) concurrentHashSet0);
      SetUtil.newSortedSet();
      // Undeclared exception!
      try { 
        SetUtil.disjointView((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // set1
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1226,"    public static final <T> Set<T> singletonSet(T o) {
        return Collections.singleton(o);
    }","  public void test8()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SetUtil.singletonSet(boolean0);
  }"
1227,"    public static <E> Set<E> disjointView(final Set<? extends E> set1, final Set<? extends E> set2) {
        return Sets.symmetricDifference(set1, set2);
    }","  public void test9()  throws Throwable  {
      ConcurrentHashSet<Locale.Category> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      Set<Locale.Category> set0 = SetUtil.unionView((Set<? extends Locale.Category>) concurrentHashSet0, (Set<? extends Locale.Category>) concurrentHashSet0);
      Set<Locale.Category> set1 = SetUtil.differenceView((Set<Locale.Category>) set0, (Set<?>) set0);
      SetUtil.disjointView((Set<?>) set0, (Set<?>) set1);
  }"
1228,"    public static <E> Set<E> unionView(final Set<? extends E> set1, final Set<? extends E> set2) {
        return Sets.union(set1, set2);
    }","  public void test10()  throws Throwable  {
      Set<String> set0 = null;
      Set<String> set1 = SetUtil.emptySetIfNull((Set<String>) null);
      // Undeclared exception!
      try { 
        SetUtil.unionView((Set<? extends String>) set1, (Set<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // set2
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1229,"    public static <E> Set<E> intersectionView(final Set<E> set1, final Set<?> set2) {
        return Sets.intersection(set1, set2);
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtil.intersectionView((Set<Integer>) null, (Set<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // set1
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1230,"    public static <T> HashSet<T> newHashSetWithCapacity(int expectedSize) {
        return Sets.newHashSetWithExpectedSize(expectedSize);
    }","  public void test12()  throws Throwable  {
      SetUtil setUtil0 = new SetUtil();
      // Undeclared exception!
      try { 
        SetUtil.newHashSetWithCapacity((-2144));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -2144
         //
         verifyException(""com.google.common.collect.CollectPreconditions"", e);
      }
  }"
1231,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test13()  throws Throwable  {
      SetUtil.newConcurrentHashSet();
      SetUtil.emptySet();
      // Undeclared exception!
      try { 
        SetUtil.newHashSet((Iterable<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Sets"", e);
      }
  }"
1232,"    public static <T> Set<T> newSetFromMap(Map<T, Boolean> map) {
        return Collections.newSetFromMap(map);
    }","  public void test14()  throws Throwable  {
      SetUtil.newSortedSet();
      SetUtil.emptySet();
      // Undeclared exception!
      try { 
        SetUtil.newSetFromMap((Map<String, Boolean>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$SetFromMap"", e);
      }
  }"
1233,"    public static <T> HashSet<T> newHashSetWithCapacity(int expectedSize) {
        return Sets.newHashSetWithExpectedSize(expectedSize);
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtil.newHashSetWithCapacity((-1283));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -1283
         //
         verifyException(""com.google.common.collect.CollectPreconditions"", e);
      }
  }"
1234,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test16()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      SetUtil.newHashSet((Iterable<? extends String>) concurrentHashSet0);
  }"
1235,"    public static <T extends Comparable> TreeSet<T> newSortedSet() {
        return new TreeSet<T>();
    }","  public void test17()  throws Throwable  {
      SetUtil.newConcurrentHashSet();
      SetUtil setUtil0 = new SetUtil();
      SetUtil.emptySet();
      // Undeclared exception!
      try { 
        SetUtil.newSortedSet((Comparator<? super Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1236,"    public static <T extends Comparable> TreeSet<T> newSortedSet() {
        return new TreeSet<T>();
    }","  public void test18()  throws Throwable  {
      SetUtil.newConcurrentHashSet();
      SetUtil setUtil0 = new SetUtil();
      // Undeclared exception!
      try { 
        SetUtil.newSortedSet((Comparator<? super Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1237,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtil.newHashSet((Boolean[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Sets"", e);
      }
  }"
1238,"    public static <T> Set<T> newSetFromMap(Map<T, Boolean> map) {
        return Collections.newSetFromMap(map);
    }","  public void test20()  throws Throwable  {
      SetUtil.newConcurrentHashSet();
      SetUtil.emptySet();
      ConcurrentHashSet<String> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      SetUtil.unmodifiableSet((Set<? extends String>) concurrentHashSet0);
      SetUtil.newSortedSet();
      HashMap<Locale.FilteringMode, Boolean> hashMap0 = new HashMap<Locale.FilteringMode, Boolean>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Boolean boolean0 = Boolean.valueOf("""");
      Boolean.getBoolean("""");
      hashMap0.put(locale_FilteringMode0, boolean0);
      HashMap<Locale.FilteringMode, Boolean> hashMap1 = new HashMap<Locale.FilteringMode, Boolean>();
      hashMap0.putAll(hashMap1);
      // Undeclared exception!
      try { 
        SetUtil.newSetFromMap((Map<Locale.FilteringMode, Boolean>) hashMap0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Map is non-empty
         //
         verifyException(""java.util.Collections$SetFromMap"", e);
      }
  }"
1239,"    public static <E> Set<E> disjointView(final Set<? extends E> set1, final Set<? extends E> set2) {
        return Sets.symmetricDifference(set1, set2);
    }","  public void test21()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = SetUtil.newSortedSet();
      Set<Boolean> set0 = SetUtil.disjointView((Set<? extends Boolean>) treeSet0, (Set<? extends Boolean>) treeSet0);
}"
1240,"    public static <E> Set<E> differenceView(final Set<E> set1, final Set<?> set2) {
        return Sets.difference(set1, set2);
    }","  public void test22()  throws Throwable  {
      HashSet<String> hashSet0 = SetUtil.newHashSet();
      Set<String> set0 = SetUtil.differenceView((Set<String>) hashSet0, (Set<?>) hashSet0);
}"
1241,"    public static <E> Set<E> intersectionView(final Set<E> set1, final Set<?> set2) {
        return Sets.intersection(set1, set2);
    }","  public void test23()  throws Throwable  {
      HashSet<Boolean> hashSet0 = new HashSet<Boolean>();
      Set<Boolean> set0 = SetUtil.intersectionView((Set<Boolean>) hashSet0, (Set<?>) hashSet0);
}"
1242,"    public static <E> Set<E> unionView(final Set<? extends E> set1, final Set<? extends E> set2) {
        return Sets.union(set1, set2);
    }","  public void test24()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      Set<String> set0 = SetUtil.unionView((Set<? extends String>) concurrentHashSet0, (Set<? extends String>) concurrentHashSet0);
}"
1243,"    public static <T> Set<T> newSetFromMap(Map<T, Boolean> map) {
        return Collections.newSetFromMap(map);
    }","  public void test25()  throws Throwable  {
      HashMap<Locale.FilteringMode, Boolean> hashMap0 = new HashMap<Locale.FilteringMode, Boolean>();
      Set<Locale.FilteringMode> set0 = SetUtil.newSetFromMap((Map<Locale.FilteringMode, Boolean>) hashMap0);
}"
1244,"    public static <T> Set<T> unmodifiableSet(Set<? extends T> s) {
        return Collections.unmodifiableSet(s);
    }","  public void test26()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Set<String> set0 = SetUtil.unmodifiableSet((Set<? extends String>) treeSet0);
}"
1245,"    public static <T> Set<T> emptySetIfNull(final Set<T> set) {
        return set == null ? (Set<T>) Collections.EMPTY_SET : set;
    }","  public void test27()  throws Throwable  {
      HashSet<Boolean> hashSet0 = SetUtil.newHashSet();
      Set<Boolean> set0 = SetUtil.emptySetIfNull((Set<Boolean>) hashSet0);
}"
1246,"    public static final <T> Set<T> emptySet() {
        return Collections.emptySet();
    }","  public void test28()  throws Throwable  {
      Set<Object> set0 = SetUtil.emptySet();
}"
1247,"    public static <T> ConcurrentHashSet<T> newConcurrentHashSet() {
        return new ConcurrentHashSet<T>();
    }","  public void test29()  throws Throwable  {
      ConcurrentHashSet<Boolean> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
}"
1248,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashSet<String> hashSet0 = SetUtil.newHashSet(stringArray0);
}"
1249,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test31()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = SetUtil.newHashSet();
}"
1250,"    public static <T> Set<T> newSetFromMap(Map<T, Boolean> map) {
        return Collections.newSetFromMap(map);
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtil.newSetFromMap((Map<Boolean, Boolean>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$SetFromMap"", e);
      }
  }"
1251,"    public static final <T> Set<T> emptySet() {
        return Collections.emptySet();
    }","  public void test33()  throws Throwable  {
      SetUtil.newHashSetWithCapacity(0);
      SetUtil setUtil0 = new SetUtil();
      Boolean[] booleanArray0 = new Boolean[14];
      HashSet<Boolean> hashSet0 = SetUtil.newHashSet(booleanArray0);
      SetUtil.disjointView((Set<? extends Boolean>) hashSet0, (Set<? extends Boolean>) hashSet0);
      ConcurrentHashSet<Locale.FilteringMode> concurrentHashSet0 = SetUtil.newConcurrentHashSet();
      SetUtil.emptySetIfNull((Set<Locale.FilteringMode>) concurrentHashSet0);
      Set<String> set0 = SetUtil.emptySet();
}"
1252,"    public static <T> HashSet<T> newHashSet() {
        return new HashSet<T>();
    }","  public void test34()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      HashSet<String> hashSet0 = SetUtil.newHashSet((Iterable<? extends String>) priorityQueue0);
}"
1253,"    public static <E> Set<E> intersectionView(final Set<E> set1, final Set<?> set2) {
        return Sets.intersection(set1, set2);
    }","  public void test35()  throws Throwable  {
      HashSet<Integer> hashSet0 = SetUtil.newHashSet();
      SetUtil.unmodifiableSet((Set<?>) hashSet0);
      Set<String> set0 = SetUtil.singletonSet(""gAw59 m7!UbDvZa*.T"");
      SetUtil.unionView((Set<? extends String>) set0, (Set<? extends String>) set0);
      Set<Object> set1 = SetUtil.emptySetIfNull((Set<Object>) null);
      SetUtil.differenceView((Set<Integer>) hashSet0, (Set<?>) set1);
      SetUtil.newSortedSet();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Object> treeSet0 = SetUtil.newSortedSet((Comparator<? super Object>) comparator0);
      // Undeclared exception!
      try { 
        SetUtil.intersectionView((Set<Object>) null, (Set<?>) treeSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // set1
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1254,"    public static <K, V> HashMap<K, V> newHashMap() {
        return new HashMap<K, V>();
    }","  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ConcurrentHashMap<Object, Object> concurrentHashMap0 = new ConcurrentHashMap<Object, Object>();
      MutableLong mutableLong0 = new MutableLong((-1L));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduce((-1L), (BiFunction<? super Object, ? super Object, ? extends Integer>) biFunction0, (BiFunction<? super Integer, ? super Integer, ? extends Integer>) biFunction0);
      Object object0 = MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<Object, Object>) concurrentHashMap0, (Object) mutableLong0, (Object) concurrentHashMap0);
      objectArray0[0] = object0;
      MutableInt mutableInt0 = new MutableInt(mutableLong0);
      ConcurrentHashMap concurrentHashMap1 = new ConcurrentHashMap<MutableInt, MutableInt>();
      Object object1 = new Object();
      objectArray0[1] = object1;
      // Undeclared exception!
      try { 
        MapUtil.newHashMap(objectArray0, objectArray0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1255,"    public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> m) {
        return Collections.unmodifiableSortedMap(m);
    }","  public void test1()  throws Throwable  {
      Float float0 = new Float((-3971.86428));
      Float.sum((-117.0F), (-117.0F));
      MutableLong mutableLong0 = new MutableLong(float0);
      MapUtil.singletonMap(mutableLong0, mutableLong0);
      MapUtil.createRangeMap();
      MapUtil.createConcurrentMapCounter();
      Integer[] integerArray0 = new Integer[0];
      MapUtil.newHashMap(integerArray0, integerArray0);
      TreeMap<Locale.FilteringMode, String> treeMap0 = MapUtil.newSortedMap();
      SortedMap<Locale.FilteringMode, String> sortedMap0 = MapUtil.unmodifiableSortedMap((SortedMap<Locale.FilteringMode, ? extends String>) treeMap0);
      TreeMap<Locale.FilteringMode, String> treeMap1 = new TreeMap<Locale.FilteringMode, String>(sortedMap0);
  }"
1256,"    public static <K> HashMap<K, MutableInt> createMutableIntValueHashMap(int initialCapacity, float loadFactor) {
        return new HashMap<K, MutableInt>(initialCapacity, loadFactor);
    }","  public void test2()  throws Throwable  {
      ConcurrentSkipListMap<Locale.FilteringMode, MutableLong> concurrentSkipListMap0 = new ConcurrentSkipListMap<Locale.FilteringMode, MutableLong>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Byte byte0 = new Byte((byte) (-65));
      MutableLong mutableLong0 = new MutableLong((Number) byte0);
      mutableLong0.decrementAndGet();
      mutableLong0.getAndIncrement();
      concurrentSkipListMap0.put(locale_FilteringMode0, mutableLong0);
      Short short0 = new Short((short)1733);
      concurrentSkipListMap0.clone();
      Short.toUnsignedInt((short) (-2856));
      MutableLong mutableLong1 = new MutableLong((Number) short0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      concurrentSkipListMap0.put(locale_FilteringMode1, mutableLong1);
      concurrentSkipListMap0.put(locale_FilteringMode0, mutableLong1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      MapUtil.ValueCreator<MutableLong> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<MutableLong>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      MapUtil.createIfAbsent((ConcurrentMap<Locale.FilteringMode, MutableLong>) concurrentSkipListMap0, locale_FilteringMode2, (MapUtil.ValueCreator<? extends MutableLong>) mapUtil_ValueCreator0);
      MapUtil.newSortedMap();
      MapUtil.createWeakValueConcurrentHashMap((int) 1733, 43);
      MapUtil.createListValueMap(62680, 3522);
      MapUtil.createRangeMap();
      MapUtil.emptyMap();
      MapUtil.createWeakValueConcurrentHashMap(0, 43);
      // Undeclared exception!
      try { 
        MapUtil.createMutableIntValueHashMap(1448, (-5885.054F));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -5885.054
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1257,"    public static <K, V> MapDifference<K, V> difference(Map<? extends K, ? extends V> left,
                                                        Map<? extends K, ? extends V> right) {
        return Maps.difference(left, right);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.difference((Map<? extends Integer, ? extends Integer>) null, (Map<? extends Integer, ? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1258,"    public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> m) {
        return Collections.unmodifiableMap(m);
    }","  public void test4()  throws Throwable  {
      MapUtil.newSortedMap();
      MapUtil.createRangeMap();
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""g4"";
      stringArray0[1] = ""up fn{Kf%z"";
      stringArray0[2] = ""4]4+m$)PEw7x1"";
      MapUtil.newHashMap(locale_FilteringModeArray0, stringArray0);
      MapUtil.newHashMap();
      // Undeclared exception!
      try { 
        MapUtil.unmodifiableMap((Map<?, ? extends Class<MutableLong>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
1259,"    public static <K, V extends Comparable> SortedSetMultimap<K, V> createSortedSetValueMap() {
        return MultimapBuilder.hashKeys().treeSetValues().build();
    }","  public void test5()  throws Throwable  {
      ConcurrentHashMap<Object, String> concurrentHashMap0 = new ConcurrentHashMap<Object, String>();
      concurrentHashMap0.clear();
      MapUtil.isNotEmpty(concurrentHashMap0);
      // Undeclared exception!
      try { 
        MapUtil.createSortedSetValueMap((Comparator<MutableInt>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1260,"    public static <K, V> ConcurrentMap<K, V> createWeakKeyConcurrentHashMap(int initialCapacity, int concurrencyLevel) {
        return new MapMaker().weakKeys().initialCapacity(initialCapacity).concurrencyLevel(concurrencyLevel).makeMap();
    }","  public void test6()  throws Throwable  {
      MapUtil.newHashMapWithCapacity(Integer.MAX_VALUE, (float) Integer.MAX_VALUE);
      // Undeclared exception!
      MapUtil.createWeakKeyConcurrentHashMap(Integer.MAX_VALUE, Integer.MAX_VALUE);
  }"
1261,"    public static <K, V extends Comparable> SortedSetMultimap<K, V> createSortedSetValueMap() {
        return MultimapBuilder.hashKeys().treeSetValues().build();
    }","  public void test7()  throws Throwable  {
      Map<String, Integer> map0 = MapUtil.emptyMapIfNull((Map<String, Integer>) null);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>(map0);
      String string0 = ""org.springside.modules.utils.collection.MapUtil"";
      concurrentHashMap0.contains(""org.springside.modules.utils.collection.MapUtil"");
      concurrentHashMap0.size();
      concurrentHashMap0.put(""org.springside.modules.utils.collection.MapUtil"", ""org.springside.modules.utils.collection.MapUtil"");
      MapUtil.ValueCreator<String> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<String>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      MapUtil.createIfAbsent((ConcurrentMap<String, Object>) concurrentHashMap0, ""org.springside.modules.utils.collection.MapUtil"", (MapUtil.ValueCreator<?>) mapUtil_ValueCreator0);
      MapUtil.createRangeMap();
      HashMap<MutableLong, Integer> hashMap0 = new HashMap<MutableLong, Integer>();
      MutableLong mutableLong0 = new MutableLong(1054L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(mutableLong0, biFunction0);
      MapUtil.difference((Map<? extends MutableLong, ? extends Integer>) hashMap0, (Map<? extends MutableLong, ? extends Integer>) hashMap0);
      Comparator<MutableInt> comparator0 = (Comparator<MutableInt>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtil.createSortedSetValueMap((Comparator<MutableInt>) comparator0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5 cannot be cast to com.google.common.collect.SortedSetMultimap
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1262,"    public static <K, V extends Comparable> SortedSetMultimap<K, V> createSortedSetValueMap() {
        return MultimapBuilder.hashKeys().treeSetValues().build();
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createSortedSetValueMap((Comparator<MutableInt>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // comparator
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1263,"    public static <V> LongObjectHashMap<V> createLongObjectHashMap(int initialCapacity, float loadFactor) {
        return new LongObjectHashMap<V>(initialCapacity, loadFactor);
    }","  public void test9()  throws Throwable  {
      MapUtil.newSortedMap();
      MapUtil.createListValueMap(0, 0);
      MapUtil.newHashMap();
      // Undeclared exception!
      try { 
        MapUtil.createLongObjectHashMap((-501), (float) 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
1264,"    public static <V> IntObjectHashMap<V> createIntObjectHashMap(int initialCapacity, float loadFactor) {
        return new IntObjectHashMap<V>(initialCapacity, loadFactor);
    }","  public void test10()  throws Throwable  {
      TreeMap<MutableLong, MutableLong> treeMap0 = MapUtil.newSortedMap();
      treeMap0.ceilingEntry((MutableLong) null);
      MapUtil.unmodifiableMap((Map<? extends MutableLong, ? extends MutableLong>) treeMap0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        MapUtil.createIntObjectHashMap(0, 1271.2F);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1265,"    public static <K, V> ConcurrentMap<K, V> createWeakKeyConcurrentHashMap(int initialCapacity, int concurrencyLevel) {
        return new MapMaker().weakKeys().initialCapacity(initialCapacity).concurrencyLevel(concurrencyLevel).makeMap();
    }","  public void test11()  throws Throwable  {
      HashMap<Locale.FilteringMode, MutableInt> hashMap0 = MapUtil.createMutableIntValueHashMap(0, 2216.994F);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Long long0 = new Long(2022L);
      MutableInt mutableInt0 = new MutableInt(long0);
      hashMap0.put(locale_FilteringMode0, mutableInt0);
      MapUtil.isEmpty(hashMap0);
      // Undeclared exception!
      try { 
        MapUtil.createWeakKeyConcurrentHashMap(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1266,"    public static boolean isEmpty(final Map<?, ?> map) {
        return (map == null) || map.isEmpty();
    }","  public void test12()  throws Throwable  {
      MapUtil.createSortedSetValueMap();
      Vector<MutableInt> vector0 = new Vector<MutableInt>();
      MutableInt mutableInt0 = new MutableInt(25);
      vector0.add(mutableInt0);
      HashMap<MutableInt, MutableInt> hashMap0 = MapUtil.newHashMap((List<MutableInt>) vector0, (List<MutableInt>) vector0);
}"
1267,"    public static <K, V> HashMap<K, V> newHashMap() {
        return new HashMap<K, V>();
    }","  public void test13()  throws Throwable  {
      HashMap<MutableInt, Object> hashMap0 = MapUtil.newHashMap();
      MutableInt mutableInt0 = new MutableInt(5890);
      hashMap0.put(mutableInt0, mutableInt0);
      MutableInt mutableInt1 = new MutableInt((-2260));
      MutableInt mutableInt2 = new MutableInt(mutableInt1);
      Double double0 = new Double(1042.539);
      MutableLong mutableLong0 = new MutableLong((long) 5890);
      hashMap0.put(mutableInt1, mutableLong0);
      mutableLong0.decrement();
      mutableInt1.addAndGet((Number) double0);
      hashMap0.remove((Object) mutableInt2);
      hashMap0.put(mutableInt1, mutableInt1);
      hashMap0.clear();
      hashMap0.put(mutableInt1, mutableInt1);
      MapUtil.isNotEmpty(hashMap0);
      MapUtil.createConcurrentMapCounter();
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<String>) null, (List<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1268,"    public static <K> HashMap<K, MutableLong> createMutableLongValueHashMap(int initialCapacity, float loadFactor) {
        return new HashMap<K, MutableLong>(initialCapacity, loadFactor);
    }","  public void test14()  throws Throwable  {
      int int0 = 0;
      MapUtil.newHashMapWithCapacity(0, 1.6F);
      // Undeclared exception!
      try { 
        MapUtil.createMutableLongValueHashMap(0, 0.0F);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1269,"    public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> m) {
        return Collections.unmodifiableSortedMap(m);
    }","  public void test15()  throws Throwable  {
      MapUtil.createMutableLongValueHashMap(1, (float) 1);
      // Undeclared exception!
      try { 
        MapUtil.unmodifiableSortedMap((SortedMap<MutableInt, ?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
1270,"    public static <K, V> ArrayListMultimap<K, V> createListValueMap(int expectedKeys, int expectedValuesPerKey) {
        return ArrayListMultimap.create(expectedKeys, expectedValuesPerKey);
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createListValueMap((-1), 2058);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -1
         //
         verifyException(""com.google.common.collect.CollectPreconditions"", e);
      }
  }"
1271,"    public static <K, V> ArrayListMultimap<K, V> createListValueMap(int expectedKeys, int expectedValuesPerKey) {
        return ArrayListMultimap.create(expectedKeys, expectedValuesPerKey);
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createListValueMap((-332), (-332));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -332
         //
         verifyException(""com.google.common.collect.CollectPreconditions"", e);
      }
  }"
1272,"    public static <K, V> HashMap<K, V> newHashMap() {
        return new HashMap<K, V>();
    }","  public void test18()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.iterator();
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      stack1.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      stack1.remove((Object) locale_FilteringMode1);
      stack1.add(locale_FilteringMode1);
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<String>) stack0, (List<Locale.FilteringMode>) stack1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 0 but values.size is 2
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1273,"    public static <K, V> V createIfAbsent(@NotNull final ConcurrentMap<K, V> map, final K key,
                                          @NotNull final ValueCreator<? extends V> creator) {
        final V value = map.get(key);
        if (value == null) {
            return putIfAbsentWithFinalValue(map, key, creator.get());
        }
        return value;
    }","  public void test19()  throws Throwable  {
      MapUtil.createRangeMap();
      int int0 = 414;
      ConcurrentMap<MutableLong, Integer> concurrentMap0 = MapUtil.createWeakValueConcurrentHashMap(414, 414);
      MutableLong mutableLong0 = new MutableLong((long) 414);
      MapUtil.ValueCreator<Integer> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<Integer>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(mapUtil_ValueCreator0).get();
      // Undeclared exception!
      try { 
        MapUtil.createIfAbsent((ConcurrentMap<MutableLong, Integer>) concurrentMap0, mutableLong0, (MapUtil.ValueCreator<? extends Integer>) mapUtil_ValueCreator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1274,"    public static <V> IntObjectHashMap<V> createIntObjectHashMap(int initialCapacity, float loadFactor) {
        return new IntObjectHashMap<V>(initialCapacity, loadFactor);
    }","  public void test20()  throws Throwable  {
      ConcurrentMap<Object, Integer> concurrentMap0 = MapUtil.createWeakKeyConcurrentHashMap(46, 46);
      MapUtil.isNotEmpty(concurrentMap0);
      MapUtil.createMutableLongValueHashMap(46, (float) 46);
      MapUtil.createConcurrentMapCounter();
      ArrayList<Class<Integer>> arrayList0 = new ArrayList<Class<Integer>>();
      ArrayList<MutableLong> arrayList1 = new ArrayList<MutableLong>();
      MapUtil.newHashMap((List<Class<Integer>>) arrayList0, (List<MutableLong>) arrayList1);
      IntObjectHashMap<Class<String>> intObjectHashMap0 = MapUtil.createIntObjectHashMap(46, 1.0F);
}"
1275,"    public static <E> AtomicLongMap<E> createConcurrentMapCounter() {
        return AtomicLongMap.create();
    }","  public void test21()  throws Throwable  {
      ConcurrentMap<Object, Integer> concurrentMap0 = MapUtil.createWeakKeyConcurrentHashMap(46, 46);
      MapUtil.isNotEmpty(concurrentMap0);
      MapUtil.createMutableLongValueHashMap(46, (float) 46);
      MapUtil.createConcurrentMapCounter();
      ArrayList<Class<Integer>> arrayList0 = new ArrayList<Class<Integer>>();
      ArrayList<MutableLong> arrayList1 = new ArrayList<MutableLong>();
      MapUtil.newHashMap((List<Class<Integer>>) arrayList0, (List<MutableLong>) arrayList1);
      IntObjectHashMap<Class<String>> intObjectHashMap0 = MapUtil.createIntObjectHashMap(46, 1.0F);
      ConcurrentHashMultiset<MutableLong> concurrentHashMultiset0 = MapUtil.createConcurrentMapCounter((Iterable<? extends MutableLong>) arrayList1);
}"
1276,"    public static <K, V> V createIfAbsent(@NotNull final ConcurrentMap<K, V> map, final K key,
                                          @NotNull final ValueCreator<? extends V> creator) {
        final V value = map.get(key);
        if (value == null) {
            return putIfAbsentWithFinalValue(map, key, creator.get());
        }
        return value;
    }","  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(957692532);
      MutableInt mutableInt0 = new MutableInt(957692532);
      mutableInt0.incrementAndGet();
      mutableInt0.getAndIncrement();
      MapUtil.singletonMap(integer0, mutableInt0);
      ConcurrentSkipListMap<String, Object> concurrentSkipListMap0 = MapUtil.newConcurrentSortedMap();
      // Undeclared exception!
      try { 
        MapUtil.createIfAbsent((ConcurrentMap<String, Object>) concurrentSkipListMap0, """", (MapUtil.ValueCreator<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1277,"    public static <K, V> ConcurrentMap<K, V> createWeakKeyConcurrentHashMap(int initialCapacity, int concurrencyLevel) {
        return new MapMaker().weakKeys().initialCapacity(initialCapacity).concurrencyLevel(concurrencyLevel).makeMap();
    }","  public void test23()  throws Throwable  {
      MapUtil.createWeakValueConcurrentHashMap(6, 8);
      ConcurrentMap<MutableInt, String> concurrentMap0 = MapUtil.newConcurrentHashMap();
      Map<Object, String> map0 = MapUtil.unmodifiableMap((Map<?, ? extends String>) concurrentMap0);
      MapUtil.difference((Map<?, ? extends String>) concurrentMap0, (Map<?, ? extends String>) map0);
      MapUtil.createLongObjectHashMap(6, 0.5F);
      MapUtil.isEmpty(map0);
      // Undeclared exception!
      MapUtil.createWeakKeyConcurrentHashMap(8, 2147483645);
  }"
1278,"    public static <K, V> V putIfAbsentWithFinalValue(@NotNull final ConcurrentMap<K, V> map, final K key,
                                                     final V value) {
        final V result = map.putIfAbsent(key, value);
        return result != null ? result : value;
    }","  public void test24()  throws Throwable  {
      ConcurrentSkipListMap<Map.Entry<MutableInt, MutableInt>, MutableLong> concurrentSkipListMap0 = new ConcurrentSkipListMap<Map.Entry<MutableInt, MutableInt>, MutableLong>();
      int int0 = 2;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      Integer.getInteger(""X}"", integer1);
      Integer.getInteger("""", (Integer) null);
      MutableLong mutableLong0 = new MutableLong((Number) integer0);
      // Undeclared exception!
      try { 
        MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<Map.Entry<MutableInt, MutableInt>, MutableLong>) concurrentSkipListMap0, (Map.Entry<MutableInt, MutableInt>) null, mutableLong0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentSkipListMap"", e);
      }
  }"
1279,"    public static <K, V> HashMap<K, V> newHashMap() {
        return new HashMap<K, V>();
    }","  public void test25()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) null);
      int int0 = 65;
      MutableInt mutableInt0 = new MutableInt(65);
      mutableInt0.getAndIncrement();
      mutableInt0.getAndDecrement();
      arrayList0.add((Object) mutableInt0);
      Stack<Map.Entry<String, String>> stack0 = new Stack<Map.Entry<String, String>>();
      Map.Entry<String, String> map_Entry0 = (Map.Entry<String, String>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(65);
      mutableInt0.addAndGet((Number) integer0);
      arrayList0.add((Object) stack0);
      stack0.add(map_Entry0);
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<Object>) arrayList0, (List<Map.Entry<String, String>>) stack0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 3 but values.size is 1
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1280,"    public static <E> AtomicLongMap<E> createConcurrentMapCounter() {
        return AtomicLongMap.create();
    }","  public void test26()  throws Throwable  {
      Map.Entry<Integer, Object> map_Entry0 = (Map.Entry<Integer, Object>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(map_Entry0).toString();
      MapUtil.newHashMap(map_Entry0, (String) null);
      // Undeclared exception!
      try { 
        MapUtil.createConcurrentMapCounter((Iterable<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1281,"    public static <K extends Enum<K>, V> EnumMap<K, V> newEnumMap(@NotNull Class<K> type) {
        return new EnumMap<K, V>(Preconditions.checkNotNull(type));
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.newEnumMap((Class<Locale.FilteringMode>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1282,"    public static <V> LongObjectHashMap<V> createLongObjectHashMap(int initialCapacity, float loadFactor) {
        return new LongObjectHashMap<V>(initialCapacity, loadFactor);
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createLongObjectHashMap(0, (-39.495F));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
1283,"    public static <K, V> HashMap<K, V> newHashMap() {
        return new HashMap<K, V>();
    }","  public void test29()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumMap<Locale.FilteringMode, Object> enumMap0 = MapUtil.newEnumMap(class0);
      ConcurrentMap<MutableLong, MutableLong> concurrentMap0 = MapUtil.newConcurrentHashMap();
      MapUtil.isNotEmpty(enumMap0);
      TreeSet<MutableInt> treeSet0 = new TreeSet<MutableInt>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0);
      arrayList0.add((Object) concurrentMap0);
      arrayList0.add((Object) null);
      ArrayList<TreeMultimap<MutableInt, Locale.FilteringMode>> arrayList1 = new ArrayList<TreeMultimap<MutableInt, Locale.FilteringMode>>();
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<Object>) arrayList0, (List<TreeMultimap<MutableInt, Locale.FilteringMode>>) arrayList1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 2 but values.size is 0
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1284,"    public static <E> AtomicLongMap<E> createConcurrentMapCounter() {
        return AtomicLongMap.create();
    }","  public void test30()  throws Throwable  {
      MapUtil.emptyMap();
      ArrayDeque<MutableInt> arrayDeque0 = new ArrayDeque<MutableInt>(61);
      ConcurrentHashMultiset<MutableInt> concurrentHashMultiset0 = MapUtil.createConcurrentMapCounter((Iterable<? extends MutableInt>) arrayDeque0);
}"
1285,"    public static <K, V> HashMap<K, V> newHashMap() {
        return new HashMap<K, V>();
    }","  public void test31()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = MapUtil.newHashMap((Object) null, (Object) ""keys.size is "");
}"
1286,"    public static <K, V> ConcurrentMap<K, V> createWeakValueConcurrentHashMap(int initialCapacity,
                                                                              int concurrencyLevel) {
        return new MapMaker().weakValues().initialCapacity(initialCapacity).concurrencyLevel(concurrencyLevel)
                .makeMap();
    }","  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapUtil.newSortedMap((Comparator<Object>) comparator0);
      // Undeclared exception!
      MapUtil.createWeakValueConcurrentHashMap(40320, 40320);
  }"
1287,"    public static <K, V> ConcurrentMap<K, V> createWeakValueConcurrentHashMap(int initialCapacity,
                                                                              int concurrencyLevel) {
        return new MapMaker().weakValues().initialCapacity(initialCapacity).concurrencyLevel(concurrencyLevel)
                .makeMap();
    }","  public void test33()  throws Throwable  {
      MapUtil.isNotEmpty((Map<?, ?>) null);
      String string0 = "" but values.size is "";
      MapUtil.createRangeMap();
      MapUtil.isEmpty((Map<?, ?>) null);
      // Undeclared exception!
      try { 
        MapUtil.createWeakValueConcurrentHashMap((-3730), (-3730));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1288,"    public static <K, V> V putIfAbsentWithFinalValue(@NotNull final ConcurrentMap<K, V> map, final K key,
                                                     final V value) {
        final V result = map.putIfAbsent(key, value);
        return result != null ? result : value;
    }","  public void test34()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string0 = null;
      MutableInt mutableInt0 = new MutableInt(65);
      mutableInt0.getAndIncrement();
      Stack<Map.Entry<String, String>> stack0 = new Stack<Map.Entry<String, String>>();
      Integer integer0 = new Integer(65);
      Integer integer1 = new Integer(65);
      HashMap<Object, Map.Entry<String, String>> hashMap0 = MapUtil.newHashMap((List<Object>) arrayList0, (List<Map.Entry<String, String>>) stack0);
      stack0.ensureCapacity(65);
      Map.Entry<String, String> map_Entry0 = (Map.Entry<String, String>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      hashMap0.put((Object) null, map_Entry0);
      stack0.removeAllElements();
      ConcurrentMap<String, String> concurrentMap0 = MapUtil.createWeakValueConcurrentHashMap(65, 65);
      // Undeclared exception!
      try { 
        MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<String, String>) concurrentMap0, (String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1289,"    public static <K, V> HashMap<K, V> newHashMap() {
        return new HashMap<K, V>();
    }","  public void test35()  throws Throwable  {
      TreeMultimap[] treeMultimapArray0 = (TreeMultimap[]) Array.newInstance(TreeMultimap.class, 0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((TreeMultimap<Class<Object>, MutableLong>[]) treeMultimapArray0, locale_FilteringModeArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // keys.length is 0 but values.length is 6
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1290,"    public static <K> HashMap<K, MutableLong> createMutableLongValueHashMap(int initialCapacity, float loadFactor) {
        return new HashMap<K, MutableLong>(initialCapacity, loadFactor);
    }","  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtil.createMutableLongValueHashMap((-1014), (float) (-1014));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1014
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1291,"    public static boolean isNotEmpty(final Map<?, ?> map) {
        return (map != null) && !map.isEmpty();
    }","  public void test37()  throws Throwable  {
      ConcurrentSkipListMap<MutableLong, Object> concurrentSkipListMap0 = MapUtil.newConcurrentSortedMap();
      Byte byte0 = new Byte((byte)0);
      MutableLong mutableLong0 = new MutableLong((Number) byte0);
      concurrentSkipListMap0.put(mutableLong0, mutableLong0);
      boolean boolean0 = MapUtil.isNotEmpty(concurrentSkipListMap0);
}"
1292,"    public static <K extends Comparable, V> TreeRangeMap<K, V> createRangeMap() {
        return TreeRangeMap.create();
    }","  public void test38()  throws Throwable  {
      MapUtil.createWeakValueConcurrentHashMap(35, 35);
      MapUtil.createConcurrentMapCounter();
      TreeRangeMap<String, TreeMultimap<Class<Locale.FilteringMode>, Locale.FilteringMode>> treeRangeMap0 = MapUtil.createRangeMap();
}"
1293,"    public static <K, V> V putIfAbsentWithFinalValue(@NotNull final ConcurrentMap<K, V> map, final K key,
                                                     final V value) {
        final V result = map.putIfAbsent(key, value);
        return result != null ? result : value;
    }","  public void test39()  throws Throwable  {
      HashMap<Integer, Locale.FilteringMode> hashMap0 = MapUtil.newHashMap();
      MapUtil.isEmpty(hashMap0);
      ConcurrentMap<MutableLong, MutableLong> concurrentMap0 = MapUtil.newConcurrentHashMap();
      MutableLong mutableLong0 = new MutableLong(0L);
      MutableLong mutableLong1 = MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<MutableLong, MutableLong>) concurrentMap0, mutableLong0, mutableLong0);
}"
1294,"    public static <K, V> HashMap<K, V> newHashMap() {
        return new HashMap<K, V>();
    }","  public void test40()  throws Throwable  {
      ConcurrentSkipListMap<Object, String> concurrentSkipListMap0 = MapUtil.newConcurrentSortedMap();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[5];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      concurrentSkipListMap0.remove((Object) locale_Category0, (Object) locale_Category0);
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      concurrentSkipListMap0.put(locale_Category0, ""ENAR\""l-oNF`"");
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      MutableLong[] mutableLongArray0 = new MutableLong[0];
      // Undeclared exception!
      try { 
        MapUtil.newHashMap(locale_CategoryArray0, mutableLongArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // keys.length is 5 but values.length is 0
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1295,"    public static <K extends Comparable, V> TreeRangeMap<K, V> createRangeMap() {
        return TreeRangeMap.create();
    }","  public void test41()  throws Throwable  {
      MutableLong[] mutableLongArray0 = new MutableLong[2];
      MapUtil.newHashMap(mutableLongArray0, (Object[]) mutableLongArray0);
      TreeMap<Locale.FilteringMode, MutableInt> treeMap0 = MapUtil.newSortedMap();
      MapUtil.unmodifiableSortedMap((SortedMap<Locale.FilteringMode, ? extends MutableInt>) treeMap0);
      TreeRangeMap<Integer, Map.Entry<Class<Object>, Class<Object>>> treeRangeMap0 = MapUtil.createRangeMap();
}"
1296,"    public static <K> HashMap<K, MutableLong> createMutableLongValueHashMap(int initialCapacity, float loadFactor) {
        return new HashMap<K, MutableLong>(initialCapacity, loadFactor);
    }","  public void test42()  throws Throwable  {
      MapUtil.createRangeMap();
      ConcurrentMap<MutableLong, Integer> concurrentMap0 = MapUtil.createWeakValueConcurrentHashMap(414, 414);
      MutableLong mutableLong0 = new MutableLong((long) 414);
      Integer integer0 = new Integer(3);
      MapUtil.ValueCreator<Integer> mapUtil_ValueCreator0 = (MapUtil.ValueCreator<Integer>) mock(MapUtil.ValueCreator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(mapUtil_ValueCreator0).get();
      MapUtil.createIfAbsent((ConcurrentMap<MutableLong, Integer>) concurrentMap0, mutableLong0, (MapUtil.ValueCreator<? extends Integer>) mapUtil_ValueCreator0);
      MapUtil.emptyMap();
      // Undeclared exception!
      try { 
        MapUtil.createMutableLongValueHashMap(1217, (-2101.047F));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -2101.047
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1297,"    public static <K, V extends Comparable> SortedSetMultimap<K, V> createSortedSetValueMap() {
        return MultimapBuilder.hashKeys().treeSetValues().build();
    }","  public void test43()  throws Throwable  {
      MapUtil.isNotEmpty((Map<?, ?>) null);
      Float float0 = new Float((-1205.5944F));
      MutableLong mutableLong0 = new MutableLong(float0);
      mutableLong0.decrement();
      Float.max((-1554.6093F), 294.1088F);
      Float.sum((-1205.5944F), 1.0F);
      mutableLong0.add(1L);
      mutableLong0.addAndGet(1L);
      MapUtil.newHashMap((Object) null, mutableLong0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MapUtil.createSortedSetValueMap(comparator0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5 cannot be cast to com.google.common.collect.SortedSetMultimap
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1298,"    public static <V> LongObjectHashMap<V> createLongObjectHashMap(int initialCapacity, float loadFactor) {
        return new LongObjectHashMap<V>(initialCapacity, loadFactor);
    }","  public void test44()  throws Throwable  {
      MapUtil.createRangeMap();
      Map<Integer, MutableInt> map0 = MapUtil.emptyMap();
      MapUtil.difference((Map<? extends Integer, ? extends MutableInt>) map0, (Map<? extends Integer, ? extends MutableInt>) map0);
      // Undeclared exception!
      try { 
        MapUtil.createLongObjectHashMap((-902), (float) (-902));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
1299,"    public static boolean isEmpty(final Map<?, ?> map) {
        return (map == null) || map.isEmpty();
    }","  public void test45()  throws Throwable  {
      ConcurrentHashMap<String, Class<MutableLong>> concurrentHashMap0 = new ConcurrentHashMap<String, Class<MutableLong>>();
      MapUtil.createListValueMap(9, 9);
      ConcurrentSkipListMap<MutableInt, String> concurrentSkipListMap0 = new ConcurrentSkipListMap<MutableInt, String>();
      MutableInt mutableInt0 = new MutableInt(1);
      concurrentSkipListMap0.put(mutableInt0, ""O"");
      mutableInt0.setValue(4704);
      mutableInt0.subtract(14);
      Integer integer0 = new Integer((-964));
      mutableInt0.add((Number) integer0);
      MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<MutableInt, String>) concurrentSkipListMap0, mutableInt0, ""com.google.common.collect.Maps$IteratorBasedAbstractMap$1"");
      MapUtil.emptyMapIfNull((Map<Object, String>) null);
      ConcurrentMap<MutableLong, Locale.FilteringMode> concurrentMap0 = MapUtil.newConcurrentHashMap();
}"
1300,"    public static <K extends Enum<K>, V> EnumMap<K, V> newEnumMap(@NotNull Class<K> type) {
        return new EnumMap<K, V>(Preconditions.checkNotNull(type));
    }","  public void test46()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ConcurrentHashMap<Object, Object> concurrentHashMap0 = new ConcurrentHashMap<Object, Object>();
      MutableLong mutableLong0 = new MutableLong((-1L));
      mutableLong0.getAndDecrement();
      Object object0 = MapUtil.putIfAbsentWithFinalValue((ConcurrentMap<Object, Object>) concurrentHashMap0, (Object) mutableLong0, (Object) concurrentHashMap0);
      concurrentHashMap0.toString();
      objectArray0[0] = object0;
      MutableInt mutableInt0 = new MutableInt(mutableLong0);
      concurrentHashMap0.put(mutableLong0, mutableInt0);
      Object object1 = new Object();
      objectArray0[1] = object1;
      HashMap<Object, Object> hashMap0 = MapUtil.newHashMap(objectArray0, objectArray0);
      MapUtil.isEmpty(hashMap0);
      MapUtil.newConcurrentSortedMap();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumMap<Locale.FilteringMode, MutableLong> enumMap0 = MapUtil.newEnumMap(class0);
}"
1301,"    public static boolean isEmpty(final Map<?, ?> map) {
        return (map == null) || map.isEmpty();
    }","  public void test47()  throws Throwable  {
      Map<MutableInt, Object> map0 = MapUtil.emptyMap();
      Integer integer0 = new Integer(3461);
      MapUtil.singletonMap(integer0, (Object) map0);
      TreeMap<MutableLong, String> treeMap0 = MapUtil.newSortedMap();
      SortedMap<MutableLong, String> sortedMap0 = MapUtil.unmodifiableSortedMap((SortedMap<MutableLong, ? extends String>) treeMap0);
      SortedMap<MutableLong, String> sortedMap1 = MapUtil.unmodifiableSortedMap((SortedMap<MutableLong, ? extends String>) sortedMap0);
      ConcurrentHashMap<MutableLong, String> concurrentHashMap0 = new ConcurrentHashMap<MutableLong, String>(sortedMap1);
      Map<MutableLong, String> map1 = MapUtil.emptyMapIfNull((Map<MutableLong, String>) concurrentHashMap0);
}"
1302,"    public static <K, V> MapDifference<K, V> difference(Map<? extends K, ? extends V> left,
                                                        Map<? extends K, ? extends V> right) {
        return Maps.difference(left, right);
    }","  public void test48()  throws Throwable  {
      MapUtil.emptyMap();
      ConcurrentMap<Integer, Locale.FilteringMode> concurrentMap0 = MapUtil.createWeakValueConcurrentHashMap(5, 5);
      MapDifference<Integer, Locale.FilteringMode> mapDifference0 = MapUtil.difference((Map<? extends Integer, ? extends Locale.FilteringMode>) concurrentMap0, (Map<? extends Integer, ? extends Locale.FilteringMode>) concurrentMap0);
}"
1303,"    public static boolean isNotEmpty(final Map<?, ?> map) {
        return (map != null) && !map.isEmpty();
    }","  public void test49()  throws Throwable  {
      boolean boolean0 = MapUtil.isEmpty((Map<?, ?>) null);
      MapUtil.newSortedMap();
      TreeMap<Integer, MutableLong> treeMap0 = new TreeMap<Integer, MutableLong>();
      Integer integer0 = new Integer(405);
      MutableLong mutableLong0 = new MutableLong((Number) integer0);
      treeMap0.put(integer0, mutableLong0);
      Integer integer1 = new Integer(97);
      treeMap0.ceilingKey(integer1);
      boolean boolean1 = MapUtil.isNotEmpty(treeMap0);
}"
1304,"    public static boolean isNotEmpty(final Map<?, ?> map) {
        return (map != null) && !map.isEmpty();
    }","  public void test50()  throws Throwable  {
      boolean boolean0 = MapUtil.isEmpty((Map<?, ?>) null);
      MapUtil.newSortedMap();
      TreeMap<Integer, MutableLong> treeMap0 = new TreeMap<Integer, MutableLong>();
      Integer integer0 = new Integer(405);
      MutableLong mutableLong0 = new MutableLong((Number) integer0);
      treeMap0.put(integer0, mutableLong0);
      Integer integer1 = new Integer(97);
      treeMap0.ceilingKey(integer1);
      boolean boolean1 = MapUtil.isNotEmpty(treeMap0);
}"
1305,"    public static <K, V> HashMap<K, V> newHashMapWithCapacity(int expectedSize, float loadFactor) {
        int finalSize = (int) ((double) expectedSize / loadFactor + 1.0F);
        return new HashMap<K, V>(finalSize, loadFactor);
    }","  public void test51()  throws Throwable  {
      HashMap<String, MutableLong> hashMap0 = MapUtil.newHashMap();
      MutableInt mutableInt0 = new MutableInt(0);
      MutableLong mutableLong0 = new MutableLong(0L);
      ImmutableSetMultimap<MutableInt, MutableLong> immutableSetMultimap0 = ImmutableSetMultimap.of(mutableInt0, mutableLong0, mutableInt0, mutableLong0, mutableInt0, mutableLong0, mutableInt0, mutableLong0);
      LinkedListMultimap<MutableInt, MutableLong> linkedListMultimap0 = LinkedListMultimap.create((Multimap<? extends MutableInt, ? extends MutableLong>) immutableSetMultimap0);
      List<MutableLong> list0 = linkedListMultimap0.removeAll(hashMap0);
      linkedListMultimap0.clear();
      Stack<Object> stack0 = new Stack<Object>();
      MapUtil.newHashMap((List<MutableLong>) list0, (List<Object>) stack0);
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      HashMap<Object, Locale.FilteringMode> hashMap1 = MapUtil.newHashMap((List<Object>) stack0, (List<Locale.FilteringMode>) linkedList0);
      MapUtil.emptyMapIfNull((Map<Object, Locale.FilteringMode>) hashMap1);
      MapUtil mapUtil0 = new MapUtil();
      MapUtil.createSortedSetValueMap();
      // Undeclared exception!
      try { 
        MapUtil.newHashMapWithCapacity(0, (float) 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1306,"    public static <K, V> HashMap<K, V> newHashMap() {
        return new HashMap<K, V>();
    }","  public void test52()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.iterator();
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      stack1.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      stack1.remove((Object) locale_FilteringMode1);
      stack1.add(locale_FilteringMode1);
      // Undeclared exception!
      try { 
        MapUtil.newHashMap((List<String>) stack0, (List<Locale.FilteringMode>) stack1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // keys.size is 0 but values.size is 2
         //
         verifyException(""org.springside.modules.utils.collection.MapUtil"", e);
      }
  }"
1307,"    public static <K, V> Map<K, V> emptyMapIfNull(final Map<K, V> map) {
        return map == null ? (Map<K, V>) Collections.EMPTY_MAP : map;
    }","  public void test53()  throws Throwable  {
      ConcurrentMap<String, Object> concurrentMap0 = MapUtil.newConcurrentHashMap();
      MapUtil.isEmpty(concurrentMap0);
      MapUtil.newSortedMap();
      MapUtil.createMutableIntValueHashMap(1, 0.75F);
      MapUtil.createRangeMap();
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      MapUtil.newEnumMap(class0);
      MapUtil.createRangeMap();
      MapUtil.isEmpty(concurrentMap0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MapUtil.newSortedMap(comparator0);
      ConcurrentHashMap<Integer, MutableInt> concurrentHashMap0 = new ConcurrentHashMap<Integer, MutableInt>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceKeysToInt(1, toIntFunction0, 1, intBinaryOperator0);
      concurrentHashMap0.clear();
      MapUtil.emptyMapIfNull((Map<Integer, MutableInt>) concurrentHashMap0);
      MapUtil mapUtil0 = new MapUtil();
  }"
1308,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test0()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(281);
      arrayList0.add(integer0);
      arrayList0.add((Integer) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(281, 281).when(comparator0).compare(any() , any());
      Pair<Integer, Integer> pair0 = CollectionUtil.minAndMax((Collection<? extends Integer>) arrayList0, (Comparator<? super Integer>) comparator0);
}"
1309,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test1()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-4)).when(comparator0).compare(any() , any());
      Pair<Integer, Integer> pair0 = CollectionUtil.minAndMax((Collection<? extends Integer>) linkedList0, (Comparator<? super Integer>) comparator0);
}"
1310,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test2()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0, 0).when(comparator0).compare(any() , any());
      Pair<Integer, Integer> pair0 = CollectionUtil.minAndMax((Collection<? extends Integer>) linkedList0, (Comparator<? super Integer>) comparator0);
}"
1311,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test3()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-9), (-9)).when(comparator0).compare(anyString() , anyString());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      priorityQueue0.add(""aVfLRqK#B`qJKmqp"");
      priorityQueue0.add(""aVfLRqK#B`qJKmqp"");
      priorityQueue0.add(""org.springside.modules.utils.collection.CollectionUtil"");
      Pair<String, String> pair0 = CollectionUtil.minAndMax((Collection<? extends String>) priorityQueue0);
}"
1312,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test4()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-9), (-9)).when(comparator0).compare(anyString() , anyString());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      priorityQueue0.add(""aVfLRqK#B`qJKmqp"");
      priorityQueue0.add(""sL=k]&ia"");
      priorityQueue0.add(""org.springside.modules.utils.collection.CollectionUtil"");
      Pair<String, String> pair0 = CollectionUtil.minAndMax((Collection<? extends String>) priorityQueue0);
}"
1313,"    public static <T> T getLast(Collection<T> collection) {
        if (isEmpty(collection)) {
            return null;
        }

        // 当类型List时，直接取得最后一个元素.
        if (collection instanceof List) {
            List<T> list = (List<T>) collection;
            return list.get(list.size() - 1);
        }

        return Iterators.getLast(collection.iterator());
    }","  public void test5()  throws Throwable  {
      Integer integer0 = CollectionUtil.getLast((Collection<Integer>) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) integer0);
      arrayList0.add((Object) null);
      Object object0 = CollectionUtil.getLast((Collection<Object>) arrayList0);
}"
1314,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test6()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add((String) null);
      Object object0 = CollectionUtil.min((Collection<?>) linkedHashSet0, (Comparator<? super Object>) comparator0);
}"
1315,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test7()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer1 = CollectionUtil.min((Collection<? extends Integer>) linkedHashSet0, (Comparator<? super Integer>) comparator0);
}"
1316,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test8()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = CollectionUtil.min((Collection<? extends Integer>) linkedList0);
}"
1317,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test9()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add(""=(<A`g~\u0001yMk0w}M"");
      String string0 = CollectionUtil.min((Collection<? extends String>) priorityQueue0);
}"
1318,"    public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) {
        return Collections.max(coll);
    }","  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = CollectionUtil.max((Collection<? extends String>) linkedHashSet0, (Comparator<? super String>) comparator0);
}"
1319,"    public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) {
        return Collections.max(coll);
    }","  public void test11()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      stack0.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = CollectionUtil.max((Collection<? extends Locale.FilteringMode>) stack0, (Comparator<? super Locale.FilteringMode>) null);
}"
1320,"    public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) {
        return Collections.max(coll);
    }","  public void test12()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      String string0 = CollectionUtil.max((Collection<? extends String>) linkedHashSet0);
}"
1321,"    public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) {
        return Collections.max(coll);
    }","  public void test13()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      linkedList0.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = CollectionUtil.max((Collection<? extends Locale.FilteringMode>) linkedList0);
}"
1322,"    public static boolean elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2) {
        return Iterables.elementsEqual(iterable1, iterable2);
    }","  public void test14()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      boolean boolean0 = CollectionUtil.elementsEqual(linkedList0, linkedHashSet0);
}"
1323,"    public static <T extends Comparable> List<T> topN(Iterable<T> coll, int n) {
        return Ordering.natural().greatestOf(coll, n);
    }","  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) null, 928, (Comparator<? super Integer>) comparator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Ordering"", e);
      }
  }"
1324,"    public static <T extends Comparable> List<T> topN(Iterable<T> coll, int n) {
        return Ordering.natural().greatestOf(coll, n);
    }","  public void test16()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) vector0, 1073741823, (Comparator<? super Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1325,"    public static <T extends Comparable> List<T> topN(Iterable<T> coll, int n) {
        return Ordering.natural().greatestOf(coll, n);
    }","  public void test17()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) hashSet0, (-1), (Comparator<? super Integer>) comparator0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -1
         //
         verifyException(""com.google.common.collect.CollectPreconditions"", e);
      }
  }"
1326,"    public static <T extends Comparable> List<T> topN(Iterable<T> coll, int n) {
        return Ordering.natural().greatestOf(coll, n);
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Ordering"", e);
      }
  }"
1327,"    public static <T extends Comparable> List<T> topN(Iterable<T> coll, int n) {
        return Ordering.natural().greatestOf(coll, n);
    }","  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.getInteger((String) null);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<Integer>) linkedList0, 3114);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1328,"    public static <T extends Comparable> List<T> topN(Iterable<T> coll, int n) {
        return Ordering.natural().greatestOf(coll, n);
    }","  public void test20()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.topN((Iterable<String>) arrayDeque0, (-911));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -911
         //
         verifyException(""com.google.common.collect.CollectPreconditions"", e);
      }
  }"
1329,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test21()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      TreeSet<String> treeSet0 = new TreeSet<String>(set0);
      List<String> list0 = CollectionUtil.topN((Iterable<String>) treeSet0, 1277);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends String>) list0, (Comparator<? super String>) comparator0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.AbstractList$Itr"", e);
      }
  }"
1330,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test22()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      Integer integer0 = new Integer(0);
      priorityQueue0.add(integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Integer> list0 = CollectionUtil.bottomN((Iterable<Integer>) priorityQueue0, 0, (Comparator<? super Integer>) comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends Integer>) list0, (Comparator<? super Integer>) comparator1);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Iterators$1"", e);
      }
  }"
1331,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<?>) null, (Comparator<? super Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.CollectionUtil"", e);
      }
  }"
1332,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test24()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends String>) hashSet0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.HashMap$HashIterator"", e);
      }
  }"
1333,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test25()  throws Throwable  {
      HashSet<Comparable<Object>> hashSet0 = new HashSet<Comparable<Object>>(8, 8);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      hashSet0.add(comparable0);
      List<Comparable<Object>> list0 = CollectionUtil.topN((Iterable<Comparable<Object>>) hashSet0, 0);
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends Comparable<Object>>) list0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Iterators$1"", e);
      }
  }"
1334,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.minAndMax((Collection<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.CollectionUtil"", e);
      }
  }"
1335,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test27()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Locale.FilteringMode> list0 = CollectionUtil.topN((Iterable<Locale.FilteringMode>) enumSet0, 0, (Comparator<? super Locale.FilteringMode>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends Locale.FilteringMode>) list0, (Comparator<? super Locale.FilteringMode>) comparator1);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Iterators$1"", e);
      }
  }"
1336,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test28()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends Integer>) null, (Comparator<? super Integer>) comparator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1337,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test29()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Locale.FilteringMode> list0 = CollectionUtil.topN((Iterable<Locale.FilteringMode>) enumSet0, 0, (Comparator<? super Locale.FilteringMode>) comparator0);
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends Locale.FilteringMode>) list0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Iterators$1"", e);
      }
  }"
1338,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1339,"    public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) {
        return Collections.max(coll);
    }","  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends Locale.FilteringMode>) null, (Comparator<? super Locale.FilteringMode>) comparator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1340,"    public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) {
        return Collections.max(coll);
    }","  public void test32()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(2);
      arrayDeque0.add("",g"");
      List<String> list0 = CollectionUtil.topN((Iterable<String>) arrayDeque0, 0);
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) list0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Iterators$1"", e);
      }
  }"
1341,"    public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) {
        return Collections.max(coll);
    }","  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1342,"    public static boolean elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2) {
        return Iterables.elementsEqual(iterable1, iterable2);
    }","  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      // Undeclared exception!
      try { 
        CollectionUtil.elementsEqual((Iterable<?>) null, treeSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Iterables"", e);
      }
  }"
1343,"    public static <T extends Comparable> List<T> bottomN(Iterable<T> coll, int n) {
        return Ordering.natural().leastOf(coll, n);
    }","  public void test35()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<Integer>) null, (-2006), (Comparator<? super Integer>) comparator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Ordering"", e);
      }
  }"
1344,"    public static <T extends Comparable> List<T> bottomN(Iterable<T> coll, int n) {
        return Ordering.natural().leastOf(coll, n);
    }","  public void test36()  throws Throwable  {
      Answers answers0 = Answers.RETURNS_SMART_NULLS;
      EnumSet<Answers> enumSet0 = EnumSet.of(answers0, answers0);
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<Answers>) enumSet0, 0, (Comparator<? super Answers>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1345,"    public static <T extends Comparable> List<T> bottomN(Iterable<T> coll, int n) {
        return Ordering.natural().leastOf(coll, n);
    }","  public void test37()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<String>) treeSet0, (-1759), (Comparator<? super String>) comparator0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -1759
         //
         verifyException(""com.google.common.collect.CollectPreconditions"", e);
      }
  }"
1346,"    public static <T extends Comparable> List<T> bottomN(Iterable<T> coll, int n) {
        return Ordering.natural().leastOf(coll, n);
    }","  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<String>) null, (-3385));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.collect.Ordering"", e);
      }
  }"
1347,"    public static <T extends Comparable> List<T> bottomN(Iterable<T> coll, int n) {
        return Ordering.natural().leastOf(coll, n);
    }","  public void test39()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<Integer>) linkedList0, 74);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1348,"    public static <T extends Comparable> List<T> bottomN(Iterable<T> coll, int n) {
        return Ordering.natural().leastOf(coll, n);
    }","  public void test40()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Collection<String> collection0 = hashMap0.values();
      // Undeclared exception!
      try { 
        CollectionUtil.bottomN((Iterable<String>) collection0, (-3406));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // k cannot be negative but was: -3406
         //
         verifyException(""com.google.common.collect.CollectPreconditions"", e);
      }
  }"
1349,"    public static boolean isEmpty(Collection<?> collection) {
        return (collection == null) || collection.isEmpty();
    }","  public void test41()  throws Throwable  {
      boolean boolean0 = CollectionUtil.isEmpty((Collection<?>) null);
}"
1350,"    public static boolean isEmpty(Collection<?> collection) {
        return (collection == null) || collection.isEmpty();
    }","  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      boolean boolean0 = CollectionUtil.isEmpty(linkedList0);
}"
1351,"    public static boolean isEmpty(Collection<?> collection) {
        return (collection == null) || collection.isEmpty();
    }","  public void test43()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = CollectionUtil.isEmpty(linkedList0);
}"
1352,"    public static <T extends Object & Comparable<? super T>> Pair<T, T> minAndMax(Collection<? extends T> coll) {
        Iterator<? extends T> i = coll.iterator();
        T minCandidate = i.next();
        T maxCandidate = minCandidate;

        while (i.hasNext()) {
            T next = i.next();
            if (next.compareTo(minCandidate) < 0) {
                minCandidate = next;
            } else if (next.compareTo(maxCandidate) > 0) {
                maxCandidate = next;
            }
        }
        return Pair.of(minCandidate, maxCandidate);
    }","  public void test44()  throws Throwable  {
      PriorityQueue<Comparable<Object>> priorityQueue0 = new PriorityQueue<Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      priorityQueue0.add(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparable1).compareTo(any());
      priorityQueue0.add(comparable1);
      Pair<Comparable<Object>, Comparable<Object>> pair0 = CollectionUtil.minAndMax((Collection<? extends Comparable<Object>>) priorityQueue0);
}"
1353,"    public static <T> T getLast(Collection<T> collection) {
        if (isEmpty(collection)) {
            return null;
        }

        // 当类型List时，直接取得最后一个元素.
        if (collection instanceof List) {
            List<T> list = (List<T>) collection;
            return list.get(list.size() - 1);
        }

        return Iterators.getLast(collection.iterator());
    }","  public void test45()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add(""hhGsSo)Kz3E."");
      Object object0 = CollectionUtil.getLast((Collection<Object>) arrayDeque0);
}"
1354,"    public static <T> T getFirst(Collection<T> collection) {
        if (isEmpty(collection)) {
            return null;
        }
        if (collection instanceof List) {
            return ((List<T>) collection).get(0);
        }
        return collection.iterator().next();
    }","  public void test46()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) enumSet0);
      Object object0 = CollectionUtil.getFirst((Collection<Object>) vector0);
}"
1355,"    public static boolean isNotEmpty(Collection<?> collection) {
        return (collection != null) && !(collection.isEmpty());
    }","  public void test47()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add(""=(<A`g~\u0001yMk0w}M"");
      boolean boolean0 = CollectionUtil.isNotEmpty(priorityQueue0);
}"
1356,"    public static boolean isNotEmpty(Collection<?> collection) {
        return (collection != null) && !(collection.isEmpty());
    }","  public void test48()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      boolean boolean0 = CollectionUtil.isNotEmpty(stack0);
}"
1357,"    public static boolean isNotEmpty(Collection<?> collection) {
        return (collection != null) && !(collection.isEmpty());
    }","  public void test49()  throws Throwable  {
      boolean boolean0 = CollectionUtil.isNotEmpty((Collection<?>) null);
}"
1358,"    public static <T> T getFirst(Collection<T> collection) {
        if (isEmpty(collection)) {
            return null;
        }
        if (collection instanceof List) {
            return ((List<T>) collection).get(0);
        }
        return collection.iterator().next();
    }","  public void test50()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-35));
      treeSet0.add(integer0);
      Integer integer1 = CollectionUtil.getFirst((Collection<Integer>) treeSet0);
}"
1359,"    public static <T> T getFirst(Collection<T> collection) {
        if (isEmpty(collection)) {
            return null;
        }
        if (collection instanceof List) {
            return ((List<T>) collection).get(0);
        }
        return collection.iterator().next();
    }","  public void test51()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String string0 = CollectionUtil.getFirst((Collection<String>) linkedHashSet0);
}"
1360,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test52()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<? extends String>) priorityQueue0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.PriorityQueue$Itr"", e);
      }
  }"
1361,"    public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) {
        return Collections.max(coll);
    }","  public void test53()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) linkedHashSet0, (Comparator<? super String>) comparator0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.LinkedHashMap$LinkedHashIterator"", e);
      }
  }"
1362,,"  public void test54()  throws Throwable  {
      CollectionUtil collectionUtil0 = new CollectionUtil();
  }"
1363,"    public static boolean elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2) {
        return Iterables.elementsEqual(iterable1, iterable2);
    }","  public void test55()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      List<Integer> list0 = CollectionUtil.bottomN((Iterable<Integer>) priorityQueue0, 2);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(2);
      List<String> list1 = CollectionUtil.topN((Iterable<String>) arrayDeque0, 0);
      boolean boolean0 = CollectionUtil.elementsEqual(list1, list0);
}"
1364,"    public static <T extends Object & Comparable<? super T>> T min(Collection<? extends T> coll) {
        return Collections.min(coll);
    }","  public void test56()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CollectionUtil.min((Collection<?>) linkedHashSet0, (Comparator<? super Object>) comparator0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.LinkedHashMap$LinkedHashIterator"", e);
      }
  }"
1365,"    public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll) {
        return Collections.max(coll);
    }","  public void test57()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        CollectionUtil.max((Collection<? extends String>) linkedHashSet0);
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.LinkedHashMap$LinkedHashIterator"", e);
      }
  }"
1366,"    public static <E> SetUniqueList<E> setUniqueList(final List<E> list) {
        return SetUniqueList.setUniqueList(list);
    }","  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = linkedList0.poll();
      List<Integer> list0 = linkedList0.subList(0, 0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        CommonCollections.setUniqueList((List<Integer>) list0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
1367,"    public static <E> SetUniqueList<E> setUniqueList(final List<E> list) {
        return SetUniqueList.setUniqueList(list);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        CommonCollections.setUniqueList((List<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException(""org.apache.commons.collections4.list.SetUniqueList"", e);
      }
  }"
1368,"    public static <K, V> Flat3Map<K, V> flat3Map() {
        return new Flat3Map<K, V>();
    }","  public void test2()  throws Throwable  {
      Flat3Map<Object, Integer> flat3Map0 = CommonCollections.flat3Map();
}"
1369,,"  public void test3()  throws Throwable  {
      CommonCollections commonCollections0 = new CommonCollections();
  }"
1370,"    public static <E> SetUniqueList<E> setUniqueList(final List<E> list) {
        return SetUniqueList.setUniqueList(list);
    }","  public void test4()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = CommonCollections.setUniqueList((List<Integer>) linkedList0);
}"
1371,"    public static <E> TreeList<E> treeList() {
        return new TreeList<E>();
    }","  public void test5()  throws Throwable  {
      TreeList<Integer> treeList0 = CommonCollections.treeList();
}"
1372,"    public static <T> List<T> disjoint(final List<? extends T> list1, final List<? extends T> list2) {
        List<T> intersection = intersection(list1, list2);
        List<T> towIntersection = union(intersection, intersection);
        return difference(union(list1, list2), towIntersection);
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ArrayList<String> arrayList0 = ListUtil.newArrayList(stringArray0);
      List<String> list0 = ListUtil.disjoint((List<? extends String>) arrayList0, (List<? extends String>) arrayList0);
      List<String> list1 = ListUtil.disjoint((List<? extends String>) list0, (List<? extends String>) arrayList0);
}"
1373,"    public static <T> List<T> disjoint(final List<? extends T> list1, final List<? extends T> list2) {
        List<T> intersection = intersection(list1, list2);
        List<T> towIntersection = union(intersection, intersection);
        return difference(union(list1, list2), towIntersection);
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ArrayList<String> arrayList0 = ListUtil.newArrayList(stringArray0);
      List<String> list0 = ListUtil.disjoint((List<? extends String>) arrayList0, (List<? extends String>) arrayList0);
      List<String> list1 = ListUtil.disjoint((List<? extends String>) list0, (List<? extends String>) arrayList0);
}"
1374,"    public static <T> T getLast(List<T> list) {
        if (isEmpty(list)) {
            return null;
        }

        return list.get(list.size() - 1);
    }","  public void test2()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("""");
      vector0.add("""");
      String string0 = ListUtil.getLast((List<String>) vector0);
}"
1375,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test3()  throws Throwable  {
      ArrayList<Integer> arrayList0 = ListUtil.newArrayList();
      ListUtil.sort((List<Integer>) arrayList0, (Comparator<? super Integer>) null);
}"
1376,"    public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2) {
        final List<E> result = new ArrayList<E>(list1.size() + list2.size());
        result.addAll(list1);
        result.addAll(list2);
        return result;
    }","  public void test4()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      ListUtil.union((List<? extends Integer>) arrayList0, (List<? extends Integer>) arrayList0);
}"
1377,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test5()  throws Throwable  {
      ArrayList<Integer> arrayList0 = ListUtil.newArrayListWithCapacity(1753);
      List<Integer> list0 = ListUtil.reverse((List<Integer>) arrayList0);
      List<Integer> list1 = ListUtil.reverse((List<Integer>) list0);
}"
1378,"    public static <T> List<T> reverse(final List<T> list) {
        return Lists.reverse(list);
    }","  public void test6()  throws Throwable  {
      Stack<ListUtil> stack0 = new Stack<ListUtil>();
      List<ListUtil> list0 = ListUtil.reverse((List<ListUtil>) stack0);
      stack0.add((ListUtil) null);
      List<ListUtil> list1 = ListUtil.reverse((List<ListUtil>) list0);
}"
1379,"    public static <T> LinkedList<T> newLinkedList() {
        return new LinkedList<T>();
    }","  public void test7()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(0);
      arrayDeque0.add(integer0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>(arrayDeque0);
      LinkedList<Integer> linkedList0 = ListUtil.newLinkedList((Iterable<? extends Integer>) hashSet0);
}"
1380,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test8()  throws Throwable  {
      Comparable[] comparableArray0 = (Comparable[]) Array.newInstance(Comparable.class, 0);
      CopyOnWriteArrayList<Comparable<String>> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList((Comparable<String>[]) comparableArray0);
}"
1381,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test9()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = ListUtil.newArrayListWithCapacity(0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(arrayList0);
      ArrayList<Object> arrayList1 = ListUtil.newArrayList((Iterable<Object>) linkedHashSet0);
}"
1382,"    public static <T> List<T> emptyListIfNull(final List<T> list) {
        return list == null ? (List<T>) Collections.EMPTY_LIST : list;
    }","  public void test10()  throws Throwable  {
      Stack<ListUtil> stack0 = new Stack<ListUtil>();
      stack0.add((ListUtil) null);
      List<ListUtil> list0 = ListUtil.emptyListIfNull((List<ListUtil>) stack0);
}"
1383,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test11()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      CopyOnWriteArrayList<Integer> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(integerArray0);
      SortedArrayList<Integer> sortedArrayList0 = ListUtil.createSortedArrayList();
      List<Integer> list0 = ListUtil.difference((List<? extends Integer>) copyOnWriteArrayList0, (List<? extends Integer>) sortedArrayList0);
}"
1384,"    public static <T> int binarySearch(List<? extends Comparable<? super T>> sortedList, T key) {
        return Collections.binarySearch(sortedList, key);
    }","  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = ListUtil.newArrayList();
      arrayList0.add("""");
      int int0 = ListUtil.binarySearch((List<? extends String>) arrayList0, """", (Comparator<? super String>) null);
}"
1385,"    public static <T> int binarySearch(List<? extends Comparable<? super T>> sortedList, T key) {
        return Collections.binarySearch(sortedList, key);
    }","  public void test13()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-3454));
      ArrayList<Integer> arrayList0 = ListUtil.newArrayList(integerArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      int int0 = ListUtil.binarySearch((List<? extends Integer>) arrayList0, integer0, (Comparator<? super Integer>) comparator0);
}"
1386,"    public static <T> int binarySearch(List<? extends Comparable<? super T>> sortedList, T key) {
        return Collections.binarySearch(sortedList, key);
    }","  public void test14()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<Locale.FilteringMode> list0 = ListUtil.singletonList(locale_FilteringMode0);
      int int0 = ListUtil.binarySearch((List<? extends Comparable<? super Locale.FilteringMode>>) list0, locale_FilteringMode0);
}"
1387,"    public static <T> int binarySearch(List<? extends Comparable<? super T>> sortedList, T key) {
        return Collections.binarySearch(sortedList, key);
    }","  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = ListUtil.newLinkedList();
      linkedList0.add(""org.springside.modules.utils.collection.ListUtil"");
      linkedList0.add(""org.springside.modules.utils.collection.ListUtil"");
      linkedList0.addFirst(""org.springside.modules.utils.collection.ListUtil"");
      int int0 = ListUtil.binarySearch((List<? extends Comparable<? super String>>) linkedList0, ""org.springside.modules.utils.collection.ListUtil"");
}"
1388,"    public static <T> List<T> unmodifiableList(List<? extends T> list) {
        return Collections.unmodifiableList(list);
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.unmodifiableList((List<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableCollection"", e);
      }
  }"
1389,"    public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2) {
        final List<E> result = new ArrayList<E>(list1.size() + list2.size());
        result.addAll(list1);
        result.addAll(list2);
        return result;
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.union((List<? extends Locale.LanguageRange>) null, (List<? extends Locale.LanguageRange>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.ListUtil"", e);
      }
  }"
1390,"    public static <T> List<T> synchronizedList(List<T> list) {
        return Collections.synchronizedList(list);
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.synchronizedList((List<Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1391,"    public static <T extends Comparable<? super T>> void sortReverse(List<T> list) {
        Collections.sort(list, Collections.reverseOrder());
    }","  public void test19()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = ListUtil.newLinkedList();
      List<Locale.FilteringMode> list0 = ListUtil.unmodifiableList((List<? extends Locale.FilteringMode>) linkedList0);
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ListUtil.sortReverse((List<Locale.FilteringMode>) list0, (Comparator<? super Locale.FilteringMode>) comparator0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableList"", e);
      }
  }"
1392,"    public static <T extends Comparable<? super T>> void sortReverse(List<T> list) {
        Collections.sort(list, Collections.reverseOrder());
    }","  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ListUtil.sortReverse((List<Comparable<Object>>) null, (Comparator<? super Comparable<Object>>) comparator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1393,"    public static <T extends Comparable<? super T>> void sortReverse(List<T> list) {
        Collections.sort(list, Collections.reverseOrder());
    }","  public void test21()  throws Throwable  {
      List<String> list0 = ListUtil.emptyList();
      List<String> list1 = ListUtil.unmodifiableList((List<? extends String>) list0);
      // Undeclared exception!
      try { 
        ListUtil.sortReverse((List<String>) list1);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableList"", e);
      }
  }"
1394,"    public static <T extends Comparable<? super T>> void sortReverse(List<T> list) {
        Collections.sort(list, Collections.reverseOrder());
    }","  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.sortReverse((List<Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1395,"    public static <T extends Comparable<? super T>> void sort(List<T> list) {
        Collections.sort(list);
    }","  public void test23()  throws Throwable  {
      LinkedList<Comparable<Integer>> linkedList0 = ListUtil.newLinkedList();
      List<Object> list0 = ListUtil.unmodifiableList((List<?>) linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ListUtil.sort((List<Object>) list0, (Comparator<? super Object>) comparator0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableList"", e);
      }
  }"
1396,"    public static <T extends Comparable<? super T>> void sort(List<T> list) {
        Collections.sort(list);
    }","  public void test24()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) vector0;
      CopyOnWriteArrayList<Object> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(objectArray0);
      // Undeclared exception!
      try { 
        ListUtil.sort((List<Object>) copyOnWriteArrayList0, (Comparator<? super Object>) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1397,"    public static <T extends Comparable<? super T>> void sort(List<T> list) {
        Collections.sort(list);
    }","  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = ListUtil.createSortedArrayList((Comparator<? super String>) comparator0);
      List<String> list0 = ListUtil.unmodifiableList((List<? extends String>) sortedArrayList0);
      // Undeclared exception!
      try { 
        ListUtil.sort((List<String>) list0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableList"", e);
      }
  }"
1398,"    public static <T extends Comparable<? super T>> void sort(List<T> list) {
        Collections.sort(list);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.sort((List<Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1399,"    public static void shuffle(List<?> list) {
        Collections.shuffle(list);
    }","  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CopyOnWriteArrayList<String> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(stringArray0);
      List<String> list0 = ListUtil.unmodifiableList((List<? extends String>) copyOnWriteArrayList0);
      MockRandom mockRandom0 = new MockRandom((-675L));
      // Undeclared exception!
      try { 
        ListUtil.shuffle((List<?>) list0, (Random) mockRandom0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableList"", e);
      }
  }"
1400,"    public static void shuffle(List<?> list) {
        Collections.shuffle(list);
    }","  public void test28()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = ListUtil.createSortedArrayList();
      Integer integer0 = new Integer((-1));
      sortedArrayList0.add(integer0);
      sortedArrayList0.add(integer0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        ListUtil.shuffle((List<?>) sortedArrayList0, (Random) mockRandom0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.SortedArrayList"", e);
      }
  }"
1401,"    public static void shuffle(List<?> list) {
        Collections.shuffle(list);
    }","  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-264L));
      // Undeclared exception!
      try { 
        ListUtil.shuffle((List<?>) null, (Random) mockRandom0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1402,"    public static void shuffle(List<?> list) {
        Collections.shuffle(list);
    }","  public void test30()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[1];
      ArrayList<Locale.Category> arrayList0 = ListUtil.newArrayList(locale_CategoryArray0);
      List<Locale.Category> list0 = ListUtil.unmodifiableList((List<? extends Locale.Category>) arrayList0);
      arrayList0.add(locale_CategoryArray0[0]);
      // Undeclared exception!
      try { 
        ListUtil.shuffle(list0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableList"", e);
      }
  }"
1403,"    public static void shuffle(List<?> list) {
        Collections.shuffle(list);
    }","  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.shuffle((List<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1404,"    public static <T> List<T> reverse(final List<T> list) {
        return Lists.reverse(list);
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.reverse((List<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1405,"    public static <T> LinkedList<T> newLinkedList() {
        return new LinkedList<T>();
    }","  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newLinkedList((Iterable<? extends Locale.FilteringMode>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1406,"    public static <T> CopyOnWriteArrayList<T> newCopyOnWriteArrayList() {
        return new CopyOnWriteArrayList<T>();
    }","  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newCopyOnWriteArrayList((Comparable<Integer>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.CopyOnWriteArrayList"", e);
      }
  }"
1407,"    public static <T> ArrayList<T> newArrayListWithCapacity(int initSize) {
        return new ArrayList<T>(initSize);
    }","  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newArrayListWithCapacity((-1099));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1099
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1408,"    public static <T> ArrayList<T> newArrayList() {
        return new ArrayList<T>();
    }","  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newArrayList((Comparable<String>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1409,"    public static <T> ArrayList<T> newArrayList() {
        return new ArrayList<T>();
    }","  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.newArrayList((Iterable<Locale.FilteringMode>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
1410,"    public static <T> List<T> intersection(final List<? extends T> list1, final List<? extends T> list2) {
        List<? extends T> smaller = list1;
        List<? extends T> larger = list2;
        if (list1.size() > list2.size()) {
            smaller = list2;
            larger = list1;
        }

        // 克隆一个可修改的副本
        List<T> newSmaller = new ArrayList<T>(smaller);
        List<T> result = new ArrayList<T>(smaller.size());
        for (final T e : larger) {
            if (newSmaller.contains(e)) {
                result.add(e);
                newSmaller.remove(e);
            }
        }
        return result;
    }","  public void test38()  throws Throwable  {
      LinkedList<String> linkedList0 = ListUtil.newLinkedList();
      // Undeclared exception!
      try { 
        ListUtil.intersection((List<? extends String>) null, (List<? extends String>) linkedList0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.ListUtil"", e);
      }
  }"
1411,"    public static <T> List<T> disjoint(final List<? extends T> list1, final List<? extends T> list2) {
        List<T> intersection = intersection(list1, list2);
        List<T> towIntersection = union(intersection, intersection);
        return difference(union(list1, list2), towIntersection);
    }","  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.disjoint((List<? extends Integer>) null, (List<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.ListUtil"", e);
      }
  }"
1412,"    public static <T> List<T> difference(final List<? extends T> list1, final List<? extends T> list2) {
        final List<T> result = new ArrayList<T>(list1);
        final Iterator<? extends T> iterator = list2.iterator();

        while (iterator.hasNext()) {
            result.remove(iterator.next());
        }

        return result;
    }","  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ListUtil.difference((List<? extends Integer>) null, (List<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1413,"    public static <T> int binarySearch(List<? extends Comparable<? super T>> sortedList, T key) {
        return Collections.binarySearch(sortedList, key);
    }","  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ListUtil.binarySearch((List<? extends Comparable<Integer>>) null, (Comparable<Integer>) integer0, (Comparator<? super Comparable<Integer>>) comparator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
1414,"    public static <T> int binarySearch(List<? extends Comparable<? super T>> sortedList, T key) {
        return Collections.binarySearch(sortedList, key);
    }","  public void test42()  throws Throwable  {
      List<String> list0 = ListUtil.emptyList();
      List<String> list1 = ListUtil.unmodifiableList((List<? extends String>) list0);
      List[] listArray0 = (List[]) Array.newInstance(List.class, 2);
      listArray0[0] = list1;
      CopyOnWriteArrayList<List<String>> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList((List<String>[]) listArray0);
      // Undeclared exception!
      try { 
        ListUtil.binarySearch((List<? extends List<String>>) copyOnWriteArrayList0, list1, (Comparator<? super List<String>>) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1415,"    public static <T> int binarySearch(List<? extends Comparable<? super T>> sortedList, T key) {
        return Collections.binarySearch(sortedList, key);
    }","  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<Comparable<Object>> sortedArrayList0 = ListUtil.createSortedArrayList((Comparator<? super Comparable<Object>>) comparator0);
      LinkedList<Comparable<Object>> linkedList0 = ListUtil.newLinkedList((Iterable<? extends Comparable<Object>>) sortedArrayList0);
      linkedList0.add((Comparable<Object>) null);
      // Undeclared exception!
      try { 
        ListUtil.binarySearch((List<? extends Comparable<? super Object>>) linkedList0, (Object) ""&}3ig>O+im,7i"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1416,"    public static <T> List<T> intersection(final List<? extends T> list1, final List<? extends T> list2) {
        List<? extends T> smaller = list1;
        List<? extends T> larger = list2;
        if (list1.size() > list2.size()) {
            smaller = list2;
            larger = list1;
        }

        // 克隆一个可修改的副本
        List<T> newSmaller = new ArrayList<T>(smaller);
        List<T> result = new ArrayList<T>(smaller.size());
        for (final T e : larger) {
            if (newSmaller.contains(e)) {
                result.add(e);
                newSmaller.remove(e);
            }
        }
        return result;
    }","  public void test44()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      arrayList0.add(locale_FilteringMode0);
      List<Object> list0 = ListUtil.intersection((List<?>) arrayList0, (List<?>) arrayList0);
}"
1417,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test45()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      List<Object> list0 = ListUtil.intersection((List<?>) arrayList0, (List<?>) arrayList0);
}"
1418,"    public static <T> List<T> intersection(final List<? extends T> list1, final List<? extends T> list2) {
        List<? extends T> smaller = list1;
        List<? extends T> larger = list2;
        if (list1.size() > list2.size()) {
            smaller = list2;
            larger = list1;
        }

        // 克隆一个可修改的副本
        List<T> newSmaller = new ArrayList<T>(smaller);
        List<T> result = new ArrayList<T>(smaller.size());
        for (final T e : larger) {
            if (newSmaller.contains(e)) {
                result.add(e);
                newSmaller.remove(e);
            }
        }
        return result;
    }","  public void test46()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add(""O4Ea6T4_09zp[},&"");
      List<String> list0 = ListUtil.difference((List<? extends String>) vector0, (List<? extends String>) vector0);
      List<String> list1 = ListUtil.intersection((List<? extends String>) vector0, (List<? extends String>) list0);
}"
1419,"    public static <T> List<T> intersection(final List<? extends T> list1, final List<? extends T> list2) {
        List<? extends T> smaller = list1;
        List<? extends T> larger = list2;
        if (list1.size() > list2.size()) {
            smaller = list2;
            larger = list1;
        }

        // 克隆一个可修改的副本
        List<T> newSmaller = new ArrayList<T>(smaller);
        List<T> result = new ArrayList<T>(smaller.size());
        for (final T e : larger) {
            if (newSmaller.contains(e)) {
                result.add(e);
                newSmaller.remove(e);
            }
        }
        return result;
    }","  public void test47()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add(""O4Ea6T4_09zp[},&"");
      List<String> list0 = ListUtil.difference((List<? extends String>) vector0, (List<? extends String>) vector0);
      List<String> list1 = ListUtil.intersection((List<? extends String>) vector0, (List<? extends String>) list0);
}"
1420,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ArrayList<String> arrayList0 = ListUtil.newArrayList(stringArray0);
      boolean boolean0 = ListUtil.isEmpty(arrayList0);
}"
1421,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test49()  throws Throwable  {
      boolean boolean0 = ListUtil.isEmpty((List<?>) null);
}"
1422,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test50()  throws Throwable  {
      List<Locale.Category> list0 = ListUtil.emptyList();
      boolean boolean0 = ListUtil.isEmpty(list0);
}"
1423,"    public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2) {
        final List<E> result = new ArrayList<E>(list1.size() + list2.size());
        result.addAll(list1);
        result.addAll(list2);
        return result;
    }","  public void test51()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      List<String> list0 = ListUtil.union((List<? extends String>) vector0, (List<? extends String>) vector0);
}"
1424,"    public static <T> List<T> emptyListIfNull(final List<T> list) {
        return list == null ? (List<T>) Collections.EMPTY_LIST : list;
    }","  public void test52()  throws Throwable  {
      List<ArrayList<Object>> list0 = ListUtil.emptyListIfNull((List<ArrayList<Object>>) null);
}"
1425,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test53()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      List<String> list0 = ListUtil.emptyListIfNull((List<String>) vector0);
}"
1426,"    public static boolean isNotEmpty(List<?> list) {
        return (list != null) && !(list.isEmpty());
    }","  public void test54()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      boolean boolean0 = ListUtil.isNotEmpty(linkedList0);
}"
1427,"    public static boolean isNotEmpty(List<?> list) {
        return (list != null) && !(list.isEmpty());
    }","  public void test55()  throws Throwable  {
      ArrayList<Integer> arrayList0 = ListUtil.newArrayListWithCapacity(1753);
      boolean boolean0 = ListUtil.isNotEmpty(arrayList0);
}"
1428,"    public static boolean isNotEmpty(List<?> list) {
        return (list != null) && !(list.isEmpty());
    }","  public void test56()  throws Throwable  {
      boolean boolean0 = ListUtil.isNotEmpty((List<?>) null);
}"
1429,"    public static <T> T getFirst(List<T> list) {
        if (isEmpty(list)) {
            return null;
        }
        return list.get(0);
    }","  public void test57()  throws Throwable  {
      LinkedList<String> linkedList0 = ListUtil.newLinkedList();
      linkedList0.add(""org.springside.modules.utils.collection.ListUtil"");
      String string0 = ListUtil.getFirst((List<String>) linkedList0);
}"
1430,"    public static <T> T getLast(List<T> list) {
        if (isEmpty(list)) {
            return null;
        }

        return list.get(list.size() - 1);
    }","  public void test58()  throws Throwable  {
      Object object0 = ListUtil.getLast((List<Object>) null);
}"
1431,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test59()  throws Throwable  {
      CopyOnWriteArrayList<String> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList();
}"
1432,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CopyOnWriteArrayList<Object> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList((Object[]) stringArray0);
      ListUtil.shuffle((List<?>) copyOnWriteArrayList0);
}"
1433,"    public static <T extends Comparable<? super T>> void sortReverse(List<T> list) {
        Collections.sort(list, Collections.reverseOrder());
    }","  public void test61()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = ListUtil.newLinkedList();
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ListUtil.sortReverse((List<Locale.FilteringMode>) linkedList0, (Comparator<? super Locale.FilteringMode>) comparator0);
}"
1434,"    public static <T> T getFirst(List<T> list) {
        if (isEmpty(list)) {
            return null;
        }
        return list.get(0);
    }","  public void test62()  throws Throwable  {
      LinkedList<String> linkedList0 = ListUtil.newLinkedList();
      String string0 = ListUtil.getFirst((List<String>) linkedList0);
}"
1435,"    public static <T> int binarySearch(List<? extends Comparable<? super T>> sortedList, T key) {
        return Collections.binarySearch(sortedList, key);
    }","  public void test63()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = ListUtil.createSortedArrayList();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = ListUtil.binarySearch((List<?>) sortedArrayList0, (Object) sortedArrayList0, (Comparator<? super Object>) comparator0);
}"
1436,"    public static <T extends Comparable<? super T>> void sort(List<T> list) {
        Collections.sort(list);
    }","  public void test64()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = ListUtil.createSortedArrayList();
      ListUtil.sort((List<String>) sortedArrayList0);
}"
1437,"    public static void shuffle(List<?> list) {
        Collections.shuffle(list);
    }","  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ArrayList<String> arrayList0 = ListUtil.newArrayList(stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      ListUtil.shuffle((List<?>) arrayList0, (Random) mockRandom0);
}"
1438,"    public static <T extends Comparable<? super T>> void sort(List<T> list) {
        Collections.sort(list);
    }","  public void test66()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      CopyOnWriteArrayList<Object> copyOnWriteArrayList0 = ListUtil.newCopyOnWriteArrayList(objectArray0);
      // Undeclared exception!
      try { 
        ListUtil.sort((List<Object>) copyOnWriteArrayList0, (Comparator<? super Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1439,"    public static void shuffle(List<?> list) {
        Collections.shuffle(list);
    }","  public void test67()  throws Throwable  {
      ListUtil listUtil0 = new ListUtil();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = ListUtil.createSortedArrayList((Comparator<? super Object>) comparator0);
      Object object0 = new Object();
      sortedArrayList0.add(object0);
      sortedArrayList0.add((Object) listUtil0);
      // Undeclared exception!
      try { 
        ListUtil.shuffle((List<?>) sortedArrayList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.SortedArrayList"", e);
      }
  }"
1440,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test68()  throws Throwable  {
      List<Integer> list0 = ListUtil.emptyList();
      ArrayList<Integer> arrayList0 = ListUtil.newArrayList((Iterable<Integer>) list0);
      List<Integer> list1 = ListUtil.unmodifiableList((List<? extends Integer>) arrayList0);
}"
1441,"    public static <T extends Comparable<? super T>> void sortReverse(List<T> list) {
        Collections.sort(list, Collections.reverseOrder());
    }","  public void test69()  throws Throwable  {
      ArrayList<String> arrayList0 = ListUtil.newArrayList();
      ListUtil.sortReverse((List<String>) arrayList0);
}"
1442,"    public static boolean isEmpty(List<?> list) {
        return (list == null) || list.isEmpty();
    }","  public void test70()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<Object> sortedArrayList0 = ListUtil.createSortedArrayList((Comparator<? super Object>) comparator0);
      List<Object> list0 = ListUtil.synchronizedList((List<Object>) sortedArrayList0);
}"
1443,"    public static <T> int binarySearch(List<? extends Comparable<? super T>> sortedList, T key) {
        return Collections.binarySearch(sortedList, key);
    }","  public void test71()  throws Throwable  {
      List<String> list0 = ListUtil.emptyList();
      int int0 = ListUtil.binarySearch((List<? extends Comparable<? super String>>) list0, ""com.google.common.io.PatternFilenameFilter"");
}"
1444,"    public boolean equals(Object o) {
        return o == this || s.equals(o);
    }","  public void test0()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Object object0 = new Object();
      concurrentHashSet0.add(object0);
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = concurrentHashSet0.toArray(objectArray0);
}"
1445,"    public Object[] toArray() {
        return s.toArray();
    }","  public void test1()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = concurrentHashSet0.toArray(objectArray0);
}"
1446,"    public Object[] toArray() {
        return s.toArray();
    }","  public void test2()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer((-1865));
      concurrentHashSet0.add(integer0);
      Object[] objectArray0 = concurrentHashSet0.toArray();
}"
1447,"    public int size() {
        return m.size();
    }","  public void test3()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      concurrentHashSet0.add(linkedList0);
      int int0 = concurrentHashSet0.size();
}"
1448,"    public int size() {
        return m.size();
    }","  public void test4()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      ConcurrentHashSet<String> concurrentHashSet1 = new ConcurrentHashSet<String>();
      concurrentHashSet1.add(""awt.toolkit"");
      boolean boolean0 = concurrentHashSet1.retainAll(concurrentHashSet0);
}"
1449,"    public boolean retainAll(Collection<?> c) {
        return s.retainAll(c);
    }","  public void test5()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      ConcurrentHashSet<String> concurrentHashSet1 = new ConcurrentHashSet<String>();
      concurrentHashSet1.add(""awt.toolkit"");
      boolean boolean0 = concurrentHashSet1.retainAll(concurrentHashSet0);
}"
1450,"    public boolean isEmpty() {
        return m.isEmpty();
    }","  public void test6()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Object object0 = new Object();
      concurrentHashSet0.add(object0);
      boolean boolean0 = concurrentHashSet0.removeAll(concurrentHashSet0);
}"
1451,"    public boolean removeAll(Collection<?> c) {
        return s.removeAll(c);
    }","  public void test7()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Object object0 = new Object();
      concurrentHashSet0.add(object0);
      boolean boolean0 = concurrentHashSet0.removeAll(concurrentHashSet0);
}"
1452,"    public Object[] toArray() {
        return s.toArray();
    }","  public void test8()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Stream<Object> stream0 = concurrentHashSet0.stream();
      concurrentHashSet0.add(stream0);
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        concurrentHashSet0.toArray(stringArray0);
        fail(""Expecting exception: ArrayStoreException"");
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1453,"    public boolean retainAll(Collection<?> c) {
        return s.retainAll(c);
    }","  public void test9()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.retainAll((Collection<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap$CollectionView"", e);
      }
  }"
1454,"    public boolean removeAll(Collection<?> c) {
        return s.removeAll(c);
    }","  public void test10()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.removeAll((Collection<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap$CollectionView"", e);
      }
  }"
1455,"    public boolean remove(Object o) {
        return m.remove(o) != null;
    }","  public void test11()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.remove((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
1456,"    public boolean containsAll(Collection<?> c) {
        return s.containsAll(c);
    }","  public void test12()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        concurrentHashSet0.containsAll(linkedList0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1457,"    public boolean add(E e) {
        return m.put(e, Boolean.TRUE) == null;
    }","  public void test13()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.add((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
1458,"    public boolean equals(Object o) {
        return o == this || s.equals(o);
    }","  public void test14()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Integer> concurrentHashSet1 = new ConcurrentHashSet<Integer>();
      boolean boolean0 = concurrentHashSet1.equals(concurrentHashSet0);
}"
1459,"    public boolean contains(Object o) {
        return m.containsKey(o);
    }","  public void test15()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.contains(concurrentHashSet0);
}"
1460,"    public Iterator<E> iterator() {
        return s.iterator();
    }","  public void test16()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      Iterator<Object> iterator0 = concurrentHashSet0.iterator();
}"
1461,"    public int size() {
        return m.size();
    }","  public void test17()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      int int0 = concurrentHashSet0.size();
}"
1462,"    public int hashCode() {
        return s.hashCode();
    }","  public void test18()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      concurrentHashSet0.hashCode();
  }"
1463,"    public boolean equals(Object o) {
        return o == this || s.equals(o);
    }","  public void test19()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer((-1865));
      boolean boolean0 = concurrentHashSet0.add(integer0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean1 = concurrentHashSet1.equals(concurrentHashSet0);
}"
1464,"    public boolean equals(Object o) {
        return o == this || s.equals(o);
    }","  public void test20()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer((-1865));
      boolean boolean0 = concurrentHashSet0.add(integer0);
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean1 = concurrentHashSet1.equals(concurrentHashSet0);
}"
1465,"    public boolean add(E e) {
        return m.put(e, Boolean.TRUE) == null;
    }","  public void test21()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer((-1865));
      boolean boolean0 = concurrentHashSet0.add(integer0);
}"
1466,"    public boolean add(E e) {
        return m.put(e, Boolean.TRUE) == null;
    }","  public void test22()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Integer integer0 = new Integer((-1865));
      boolean boolean0 = concurrentHashSet0.add(integer0);
      boolean boolean1 = concurrentHashSet0.add(integer0);
}"
1467,"    public int size() {
        return m.size();
    }","  public void test23()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      concurrentHashSet1.add(concurrentHashSet0);
      ConcurrentHashSet<Object> concurrentHashSet2 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.remove(concurrentHashSet2);
}"
1468,"    public boolean remove(Object o) {
        return m.remove(o) != null;
    }","  public void test24()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      concurrentHashSet1.add(concurrentHashSet0);
      ConcurrentHashSet<Object> concurrentHashSet2 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.remove(concurrentHashSet2);
}"
1469,"    public boolean remove(Object o) {
        return m.remove(o) != null;
    }","  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-1865));
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet0.remove(integer0);
}"
1470,"    public boolean contains(Object o) {
        return m.containsKey(o);
    }","  public void test26()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.add(concurrentHashSet0);
      boolean boolean1 = concurrentHashSet1.contains(concurrentHashSet0);
}"
1471,"    public boolean contains(Object o) {
        return m.containsKey(o);
    }","  public void test27()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.add(concurrentHashSet0);
      boolean boolean1 = concurrentHashSet1.contains(concurrentHashSet0);
}"
1472,"    public boolean isEmpty() {
        return m.isEmpty();
    }","  public void test28()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      concurrentHashSet1.add(concurrentHashSet0);
      boolean boolean0 = concurrentHashSet1.removeAll(concurrentHashSet0);
}"
1473,"    public boolean removeAll(Collection<?> c) {
        return s.removeAll(c);
    }","  public void test29()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      concurrentHashSet1.add(concurrentHashSet0);
      boolean boolean0 = concurrentHashSet1.removeAll(concurrentHashSet0);
}"
1474,"    public boolean isEmpty() {
        return m.isEmpty();
    }","  public void test30()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet0.isEmpty();
}"
1475,"    public boolean isEmpty() {
        return m.isEmpty();
    }","  public void test31()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      concurrentHashSet1.add(concurrentHashSet0);
}"
1476,"    public boolean isEmpty() {
        return m.isEmpty();
    }","  public void test32()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      concurrentHashSet1.add(concurrentHashSet0);
      boolean boolean0 = concurrentHashSet1.isEmpty();
}"
1477,"    public int size() {
        return m.size();
    }","  public void test33()  throws Throwable  {
      ConcurrentHashSet<Object> concurrentHashSet0 = new ConcurrentHashSet<Object>();
      concurrentHashSet0.clear();
}"
1478,"    public boolean retainAll(Collection<?> c) {
        return s.retainAll(c);
    }","  public void test34()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      ConcurrentHashSet<Object> concurrentHashSet1 = new ConcurrentHashSet<Object>();
      boolean boolean0 = concurrentHashSet1.retainAll(concurrentHashSet0);
}"
1479,"    public String toString() {
        return s.toString();
    }","  public void test35()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      String string0 = concurrentHashSet0.toString();
}"
1480,"    public Object[] toArray() {
        return s.toArray();
    }","  public void test36()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      // Undeclared exception!
      try { 
        concurrentHashSet0.toArray((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1481,"    public Object[] toArray() {
        return s.toArray();
    }","  public void test37()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      Object[] objectArray0 = concurrentHashSet0.toArray();
}"
1482,"    public boolean containsAll(Collection<?> c) {
        return s.containsAll(c);
    }","  public void test38()  throws Throwable  {
      ConcurrentHashSet<String> concurrentHashSet0 = new ConcurrentHashSet<String>();
      ConcurrentHashSet<Integer> concurrentHashSet1 = new ConcurrentHashSet<Integer>();
      boolean boolean0 = concurrentHashSet1.containsAll(concurrentHashSet0);
}"
1483,"    public boolean containsAll(Collection<?> c) {
        return s.containsAll(c);
    }","  public void test39()  throws Throwable  {
      ConcurrentHashSet<Integer> concurrentHashSet0 = new ConcurrentHashSet<Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(concurrentHashSet0);
      boolean boolean0 = concurrentHashSet0.containsAll(linkedList0);
}"
1484,,"  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
}"
1485,,"  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
}"
1486,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test2()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
}"
1487,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
}"
1488,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
}"
1489,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test5()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
}"
1490,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test6()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
}"
1491,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
}"
1492,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test8()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
}"
1493,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test9()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
}"
1494,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
}"
1495,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
}"
1496,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
}"
1497,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
}"
1498,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
}"
1499,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1500,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1501,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1502,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1503,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1504,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1505,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1506,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add("""");
      boolean boolean1 = linkedList0.add("""");
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(linkedList0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1507,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1508,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test24()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1509,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1510,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1511,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1512,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1513,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1514,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
}"
1515,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
}"
1516,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
}"
1517,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
}"
1518,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test34()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
}"
1519,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test35()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
}"
1520,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test36()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1521,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test37()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1522,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test38()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1523,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test39()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1524,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1525,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test41()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1526,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1527,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1528,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test44()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1529,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test45()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1530,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test46()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1531,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test47()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1532,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test48()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1533,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test49()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1534,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test50()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1535,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test51()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1536,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test52()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1537,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test53()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1538,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test54()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1539,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test55()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1540,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test56()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1541,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test57()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1542,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test58()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021, (-1), 3629).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1543,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test59()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1544,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test60()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1545,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test61()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1546,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test62()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1547,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test63()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1548,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test64()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1549,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test65()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1550,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test66()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
}"
1551,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test67()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
}"
1552,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test68()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
}"
1553,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test69()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
}"
1554,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test70()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
}"
1555,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test71()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
}"
1556,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test72()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1557,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test73()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1558,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test74()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1559,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test75()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1560,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test76()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
}"
1561,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test77()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1562,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test78()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1563,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test79()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1564,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test80()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1565,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test81()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1566,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test82()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1567,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test83()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1568,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test84()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1569,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test85()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1570,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test86()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1571,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test87()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1572,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test88()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1573,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test89()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1574,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test90()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1575,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test91()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1576,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test92()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1577,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test93()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1578,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test94()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
}"
1579,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test95()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1580,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test96()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1581,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test97()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1582,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test98()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1583,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test99()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 177, 177, 0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = linkedList0.add(integer0);
      boolean boolean2 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean3 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1584,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test100()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1585,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test101()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1586,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test102()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1587,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test103()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
}"
1588,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test104()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
}"
1589,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test105()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
}"
1590,"    public Comparator getComparator() {
        return comparator;
    }","  public void test106()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      Comparator<Object> comparator0 = sortedArrayList0.getComparator();
}"
1591,"    public Comparator getComparator() {
        return comparator;
    }","  public void test107()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      Comparator<Object> comparator0 = sortedArrayList0.getComparator();
}"
1592,"    public Comparator getComparator() {
        return comparator;
    }","  public void test108()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      Comparator<Object> comparator0 = sortedArrayList0.getComparator();
}"
1593,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test109()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
}"
1594,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test110()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
}"
1595,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test111()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
}"
1596,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test112()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
}"
1597,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test113()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
}"
1598,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test114()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
}"
1599,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test115()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
}"
1600,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test116()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
}"
1601,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test117()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) ""org.springside.modules.utils.collection.type.SortedArrayList"", (-886), (-2184));
}"
1602,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test118()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) ""org.springside.modules.utils.collection.type.SortedArrayList"", (-886), (-2184));
}"
1603,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test119()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) ""org.springside.modules.utils.collection.type.SortedArrayList"", (-886), (-2184));
}"
1604,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test120()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) ""org.springside.modules.utils.collection.type.SortedArrayList"", (-886), (-2184));
}"
1605,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test121()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) ""org.springside.modules.utils.collection.type.SortedArrayList"", (-886), (-2184));
}"
1606,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test122()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) ""org.springside.modules.utils.collection.type.SortedArrayList"", (-886), (-2184));
}"
1607,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test123()  throws Throwable  {
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>();
      SortedArrayList<Object> sortedArrayList1 = (SortedArrayList<Object>)sortedArrayList0.clone();
      int int0 = sortedArrayList1.findInsertionPoint((Object) ""org.springside.modules.utils.collection.type.SortedArrayList"", (-886), (-2184));
}"
1608,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test124()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1609,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test125()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1610,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test126()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1611,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test127()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1612,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test128()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
}"
1613,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test129()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
}"
1614,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test130()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
}"
1615,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test131()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
}"
1616,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test132()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
}"
1617,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test133()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1618,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test134()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1619,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test135()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1620,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test136()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1621,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test137()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      boolean boolean0 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint("""");
}"
1622,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test138()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1623,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test139()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1624,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test140()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1625,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test141()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1626,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test142()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
}"
1627,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test143()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
      int int0 = sortedArrayList0.compare(object0, object0);
}"
1628,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test144()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
      int int0 = sortedArrayList0.compare(object0, object0);
}"
1629,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test145()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
      int int0 = sortedArrayList0.compare(object0, object0);
}"
1630,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test146()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Object object0 = new Object();
      int int0 = sortedArrayList0.compare(object0, object0);
}"
1631,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test147()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
}"
1632,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test148()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
}"
1633,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test149()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
}"
1634,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test150()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare(""vC<-JU-}J4~DZeQ;B"", """");
}"
1635,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test151()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare(""vC<-JU-}J4~DZeQ;B"", """");
}"
1636,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test152()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare(""vC<-JU-}J4~DZeQ;B"", """");
}"
1637,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test153()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare(""vC<-JU-}J4~DZeQ;B"", """");
}"
1638,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test154()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
}"
1639,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test155()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
}"
1640,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test156()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
}"
1641,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test157()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare(""?wi%F|XwMw>>Xk(ko"", ""org.springside.modules.utils.collection.type.SortedArrayList"");
}"
1642,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test158()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare(""?wi%F|XwMw>>Xk(ko"", ""org.springside.modules.utils.collection.type.SortedArrayList"");
}"
1643,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test159()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare(""?wi%F|XwMw>>Xk(ko"", ""org.springside.modules.utils.collection.type.SortedArrayList"");
}"
1644,"    protected int compare(E k1, E k2) {
        if (comparator == null) {
            return ((Comparable) k1).compareTo(k2);
        }
        return comparator.compare(k1, k2);
    }","  public void test160()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>();
      int int0 = sortedArrayList0.compare(""?wi%F|XwMw>>Xk(ko"", ""org.springside.modules.utils.collection.type.SortedArrayList"");
}"
1645,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test161()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1646,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test162()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1647,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test163()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1648,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test164()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1649,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test165()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1650,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test166()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1651,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test167()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1652,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test168()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1653,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test169()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
}"
1654,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test170()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
}"
1655,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test171()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
}"
1656,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test172()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
}"
1657,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test173()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.addAll((Collection<?>) sortedArrayList0);
}"
1658,,"  public void test174()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1659,,"  public void test175()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1660,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test176()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
}"
1661,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test177()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
}"
1662,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test178()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
}"
1663,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test179()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
}"
1664,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test180()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
}"
1665,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test181()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
}"
1666,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test182()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
}"
1667,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test183()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
}"
1668,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test184()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      Integer integer0 = new Integer(1);
}"
1669,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test185()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
      Integer integer0 = new Integer(1);
}"
1670,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test186()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
}"
1671,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test187()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
}"
1672,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test188()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
}"
1673,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test189()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
}"
1674,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test190()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
}"
1675,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test191()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
}"
1676,,"  public void test192()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1677,,"  public void test193()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1678,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test194()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
}"
1679,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test195()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
}"
1680,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test196()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
}"
1681,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test197()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
}"
1682,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test198()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
}"
1683,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test199()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
}"
1684,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test200()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
}"
1685,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test201()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      boolean boolean0 = sortedArrayList0.add((Integer) null);
}"
1686,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test202()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
}"
1687,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test203()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
}"
1688,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test204()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
}"
1689,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test205()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
}"
1690,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test206()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
}"
1691,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test207()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      boolean boolean0 = sortedArrayList0.add((Object) sortedArrayList0);
}"
1692,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test208()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1693,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test209()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1694,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test210()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1695,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test211()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1696,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test212()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1697,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test213()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1698,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test214()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1699,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test215()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1700,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test216()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1701,,"  public void test217()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
}"
1702,,"  public void test218()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
}"
1703,,"  public void test219()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
}"
1704,,"  public void test220()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
}"
1705,,"  public void test221()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
}"
1706,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test222()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
}"
1707,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test223()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
}"
1708,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test224()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
}"
1709,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test225()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
}"
1710,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test226()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1711,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test227()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1712,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test228()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1713,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test229()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1714,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test230()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1715,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test231()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1716,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test232()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1717,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test233()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1718,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test234()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1719,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test235()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1720,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test236()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1721,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test237()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1722,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test238()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1723,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test239()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1724,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test240()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1725,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test241()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1726,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test242()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1727,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test243()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
}"
1728,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test244()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1729,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test245()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1730,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test246()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1731,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test247()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1732,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test248()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1733,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test249()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1734,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test250()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1735,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test251()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1736,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test252()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1737,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test253()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1738,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test254()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<String> sortedArrayList1 = new SortedArrayList<String>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add("""");
}"
1739,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test255()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1740,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test256()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1741,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test257()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
}"
1742,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test258()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1743,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test259()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1744,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test260()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1745,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test261()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1746,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test262()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
}"
1747,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test263()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
}"
1748,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test264()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
}"
1749,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test265()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
}"
1750,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test266()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
}"
1751,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test267()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      boolean boolean0 = sortedArrayList1.add((Object) sortedArrayList0);
}"
1752,,"  public void test268()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
}"
1753,,"  public void test269()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
}"
1754,,"  public void test270()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
}"
1755,,"  public void test271()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
}"
1756,,"  public void test272()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
}"
1757,,"  public void test273()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
}"
1758,,"  public void test274()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
}"
1759,,"  public void test275()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
}"
1760,,"  public void test276()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.clear();
}"
1761,,"  public void test277()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.clear();
}"
1762,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test278()  throws Throwable  {
      SortedArrayList<String> sortedArrayList0 = null;
      try {
        sortedArrayList0 = new SortedArrayList<String>((Collection<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.SortedArrayList"", e);
      }
  }"
1763,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test279()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1764,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test280()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1765,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test281()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1766,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test282()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
}"
1767,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test283()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1768,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test284()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1769,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test285()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
}"
1770,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test286()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
}"
1771,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test287()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
}"
1772,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test288()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
}"
1773,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test289()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
}"
1774,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test290()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
}"
1775,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test291()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1776,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test292()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1777,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test293()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1778,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test294()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1779,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test295()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1780,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test296()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1781,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test297()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
}"
1782,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test298()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) """");
}"
1783,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test299()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) """");
}"
1784,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test300()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) """");
}"
1785,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test301()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) """");
}"
1786,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test302()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) """");
}"
1787,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test303()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2249)).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2249));
      boolean boolean0 = linkedList0.add(integer0);
      boolean boolean1 = sortedArrayList0.addAll((Collection<?>) linkedList0);
      boolean boolean2 = sortedArrayList0.add((Object) """");
}"
1788,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test304()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Stream<Object> stream0 = sortedArrayList0.stream();
      boolean boolean0 = sortedArrayList0.add((Object) """");
}"
1789,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test305()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1021).when(comparator0).compare(any() , any());
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>(comparator0);
      Stream<Object> stream0 = sortedArrayList0.stream();
      boolean boolean0 = sortedArrayList0.add((Object) """");
      int int0 = sortedArrayList0.findInsertionPoint((Object) stream0, 0, 0);
}"
1790,"    public SortedArrayList(Comparator<? super E> c) {
        comparator = c;
    }","  public void test306()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("""");
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
}"
1791,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test307()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("""");
      SortedArrayList<String> sortedArrayList0 = new SortedArrayList<String>(linkedList0);
      int int0 = sortedArrayList0.findInsertionPoint("" o/crK"", 0, 0);
}"
1792,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test308()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(comparator0);
      SortedArrayList<Object> sortedArrayList1 = new SortedArrayList<Object>(sortedArrayList0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(sortedArrayList0);
      linkedList0.addFirst(sortedArrayList0);
      // Undeclared exception!
      try { 
        sortedArrayList1.addAll((Collection<?>) linkedList0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1793,"    public boolean add(E o) {
        int idx = 0;
        if (!isEmpty()) {
            idx = findInsertionPoint(o);
        }
        super.add(idx, o);
        return true;
    }","  public void test309()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      // Undeclared exception!
      try { 
        sortedArrayList0.add((-1196), (Object) null);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.SortedArrayList"", e);
      }
  }"
1794,"    public Comparator getComparator() {
        return comparator;
    }","  public void test310()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(comparator0);
      Comparator<Object> comparator1 = sortedArrayList0.getComparator();
}"
1795,"    public E set(int index, E element) {
        throw new UnsupportedOperationException();
    }","  public void test311()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(47);
      SortedArrayList<Integer> sortedArrayList0 = new SortedArrayList<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        sortedArrayList0.set(47, integer0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.SortedArrayList"", e);
      }
  }"
1796,"    public int findInsertionPoint(E o) {
        return findInsertionPoint(o, 0, size() - 1);
    }","  public void test312()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      int int0 = sortedArrayList0.findInsertionPoint(sortedArrayList0);
}"
1797,"    public boolean addAll(Collection<? extends E> c) {
        Iterator<? extends E> i = c.iterator();
        boolean changed = false;
        while (i.hasNext()) {
            boolean ret = add(i.next());
            if (!changed) {
                changed = ret;
            }
        }
        return changed;
    }","  public void test313()  throws Throwable  {
      SortedArrayList<Object> sortedArrayList0 = new SortedArrayList<Object>();
      // Undeclared exception!
      try { 
        sortedArrayList0.addAll((-1), (Collection<?>) sortedArrayList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.SortedArrayList"", e);
      }
  }"
1798,"    public V put(int key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test0()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(2);
      intObjectHashMap0.put(0, """");
  }"
1799,"    public void putAll(Map<? extends Integer, ? extends V> sourceMap) {
        if (sourceMap instanceof IntObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            IntObjectHashMap<V> source = (IntObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Integer, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, (String) null);
      intObjectHashMap0.putAll(hashMap0);
      Integer integer1 = new Integer(1147);
      intObjectHashMap0.putIfAbsent(integer1, integer1);
  }"
1800,"    public V remove(int key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test2()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) 8, ""}G*x:q7(6W%=\""lKgV"");
      intObjectHashMap0.putAll(hashMap0);
      Integer integer0 = new Integer(1124);
      intObjectHashMap0.putIfAbsent(integer0, integer0);
      intObjectHashMap0.remove(1124);
  }"
1801,"    public IntObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test3()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      Integer integer0 = new Integer(1124);
      intObjectHashMap0.putIfAbsent(integer0, integer0);
      IntObjectHashMap<IntObjectHashMap<String>> intObjectHashMap1 = new IntObjectHashMap<IntObjectHashMap<String>>(8);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      intObjectHashMap0.compute((Integer) intObjectHashMap1.DEFAULT_CAPACITY, biFunction0);
  }"
1802,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof IntObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        IntObjectMap other = (IntObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                int key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test4()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<Object, String>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(intObjectHashMap0, ""-13x-kG:B"");
      intObjectHashMap0.putIfAbsent((Integer) intObjectHashMap0.DEFAULT_CAPACITY, abstractMap_SimpleEntry0);
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap0.equals(intObjectHashMap1);
  }"
1803,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (int key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(1575);
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put(integer0, "", "");
      intObjectHashMap0.putAll(hashMap0);
      intObjectHashMap0.hashCode();
  }"
1804,"    public boolean containsKey(int key) {
        return indexOf(key) >= 0;
    }","  public void test6()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      Integer integer0 = new Integer(2018);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""(this Map)"").when(biFunction0).apply(any() , any());
      intObjectHashMap0.compute(integer0, biFunction0);
      intObjectHashMap0.containsKey(2018);
  }"
1805,"    public V put(int key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test7()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) 8, ""}G*x:q7(6W%=\""lKgV"");
      intObjectHashMap0.putAll(hashMap0);
      Integer integer0 = new Integer(1124);
      intObjectHashMap0.putIfAbsent(integer0, integer0);
      IntObjectHashMap<IntObjectHashMap<String>> intObjectHashMap1 = new IntObjectHashMap<IntObjectHashMap<String>>(8);
      intObjectHashMap0.put(1124, (Object) intObjectHashMap1.DEFAULT_CAPACITY);
  }"
1806,"    public void putAll(Map<? extends Integer, ? extends V> sourceMap) {
        if (sourceMap instanceof IntObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            IntObjectHashMap<V> source = (IntObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Integer, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test8()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, ""}G*x:q7(6W%=\""lKgV"");
      hashMap0.put((Integer) 8, ""}G*x:q7(6W%=\""lKgV"");
      intObjectHashMap0.putAll(hashMap0);
      Integer integer1 = new Integer(1124);
      intObjectHashMap0.putIfAbsent(integer1, integer1);
  }"
1807,"    public V put(int key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test9()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>>(1999);
      intObjectHashMap0.put(8, (AbstractMap.SimpleEntry<String, Object>) null);
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(8);
      intObjectHashMap_MapEntry0.setValue((Integer) intObjectHashMap0.DEFAULT_CAPACITY);
  }"
1808,"    public V put(int key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test10()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>>(1999);
      intObjectHashMap0.put(8, (AbstractMap.SimpleEntry<String, Object>) null);
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(8);
      intObjectHashMap_MapEntry0.getValue();
  }"
1809,"    public V put(int key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test11()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      intObjectHashMap0.put((Integer) intObjectHashMap0.DEFAULT_CAPACITY, ""a^Y@sD="");
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(0);
      intObjectHashMap_MapEntry0.getKey();
  }"
1810,"    public IntObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test12()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>>(1999);
      IntObjectHashMap.MapEntry intObjectHashMap_MapEntry0 = intObjectHashMap0.new MapEntry(8);
      // Undeclared exception!
      try { 
        intObjectHashMap_MapEntry0.getValue();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // The map entry has been removed
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap$MapEntry"", e);
      }
  }"
1811,"    public Set<Entry<Integer, V>> entrySet() {
        return entrySet;
    }","  public void test13()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(8);
      intObjectHashMap0.entrySet();
  }"
1812,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof IntObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        IntObjectMap other = (IntObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                int key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test14()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      intObjectHashMap0.equals(intObjectHashMap0);
  }"
1813,"    public int size() {
        return size;
    }","  public void test15()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>();
      intObjectHashMap0.put((-2638), (Object) intObjectHashMap1);
      intObjectHashMap0.size();
  }"
1814,"    public V remove(int key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test16()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<Object>> intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<Object>>();
      intObjectHashMap0.remove((Object) intObjectHashMap0.DEFAULT_CAPACITY);
  }"
1815,"    public V remove(int key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test17()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<String>> intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<String>>(8);
      IntObjectHashMap<Integer> intObjectHashMap1 = new IntObjectHashMap<Integer>();
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = intObjectHashMap1.merge((Integer) 8, (Integer) intObjectHashMap0.DEFAULT_CAPACITY, biFunction0);
      intObjectHashMap1.remove((Object) integer0);
  }"
1816,"    public V put(int key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test18()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) 8, ""}G*x:q7(6W%=\""lKgV"");
      intObjectHashMap0.putAll(hashMap0);
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put((Integer) intObjectHashMap1.DEFAULT_CAPACITY, (Object) """");
  }"
1817,"    protected String keyToString(int key) {
        return Integer.toString(key);
    }","  public void test19()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.keyToString(2);
  }"
1818,"    public V get(int key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test20()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>();
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>();
      intObjectHashMap1.get((Object) intObjectHashMap0.DEFAULT_CAPACITY);
  }"
1819,"    public V get(int key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test21()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      intObjectHashMap0.putIfAbsent((Integer) intObjectHashMap0.DEFAULT_CAPACITY, intObjectHashMap0.DEFAULT_CAPACITY);
      intObjectHashMap0.get((Object) intObjectHashMap0.DEFAULT_CAPACITY);
  }"
1820,"    public boolean containsKey(int key) {
        return indexOf(key) >= 0;
    }","  public void test22()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""(this Map)"").when(biFunction0).apply(any() , any());
      intObjectHashMap0.compute((Integer) intObjectHashMap0.DEFAULT_CAPACITY, biFunction0);
      intObjectHashMap0.containsKey((Object) intObjectHashMap0.DEFAULT_CAPACITY);
  }"
1821,"    public boolean containsKey(int key) {
        return indexOf(key) >= 0;
    }","  public void test23()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      intObjectHashMap0.containsKey((Object) intObjectHashMap0.DEFAULT_CAPACITY);
  }"
1822,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" : toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test24()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<Integer>> intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<Integer>>(120, 1.0F);
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(40320);
      intObjectHashMap1.put((Integer) intObjectHashMap0.DEFAULT_CAPACITY, (Object) intObjectHashMap1);
      // Undeclared exception!
      intObjectHashMap1.toString();
  }"
1823,"    public V remove(int key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test25()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(792);
      // Undeclared exception!
      try { 
        intObjectHashMap0.remove((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1824,"    public void putAll(Map<? extends Integer, ? extends V> sourceMap) {
        if (sourceMap instanceof IntObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            IntObjectHashMap<V> source = (IntObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Integer, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test26()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(1907);
      IntObjectHashMap<String> intObjectHashMap1 = new IntObjectHashMap<String>(10080);
      // Undeclared exception!
      intObjectHashMap0.putAll(intObjectHashMap1);
  }"
1825,"    public void putAll(Map<? extends Integer, ? extends V> sourceMap) {
        if (sourceMap instanceof IntObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            IntObjectHashMap<V> source = (IntObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Integer, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test27()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      // Undeclared exception!
      try { 
        intObjectHashMap0.putAll((Map<? extends Integer, ?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1826,"    public V put(int key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test28()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = new IntObjectHashMap<Integer>();
      IntObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> intObjectHashMap1 = new IntObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>(673);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("""", intObjectHashMap0);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        intObjectHashMap1.put((Integer) null, abstractMap_SimpleImmutableEntry0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1827,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (int key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test29()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<String>> intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<String>>(9983, 0.5F);
      // Undeclared exception!
      intObjectHashMap0.hashCode();
  }"
1828,"    public V get(int key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test30()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      // Undeclared exception!
      try { 
        intObjectHashMap0.get((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1829,"    public V get(int key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test31()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      // Undeclared exception!
      try { 
        intObjectHashMap0.get((Object) intObjectHashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.IntObjectHashMap cannot be cast to java.lang.Integer
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1830,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof IntObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        IntObjectMap other = (IntObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                int key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test32()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      IntObjectHashMap<Comparable<Object>> intObjectHashMap1 = new IntObjectHashMap<Comparable<Object>>(9973);
      // Undeclared exception!
      intObjectHashMap1.equals(intObjectHashMap0);
  }"
1831,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test33()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1151, 0.5F);
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(31622, 0.5F);
      // Undeclared exception!
      intObjectHashMap1.containsValue(intObjectHashMap0);
  }"
1832,"    public boolean containsKey(int key) {
        return indexOf(key) >= 0;
    }","  public void test34()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>>();
      // Undeclared exception!
      try { 
        intObjectHashMap0.containsKey((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1833,"    public boolean containsKey(int key) {
        return indexOf(key) >= 0;
    }","  public void test35()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<Object>> intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<Object>>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        intObjectHashMap0.containsKey(object0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Integer
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1834,"    public IntObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test36()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<Object>> intObjectHashMap0 = null;
      try {
        intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<Object>>(2081450105, 0.5F);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2081450105) not representable as an int
         //
         verifyException(""com.google.common.math.IntMath"", e);
      }
  }"
1835,"    public IntObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test37()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<Integer>> intObjectHashMap0 = null;
      try {
        intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<Integer>>((-737));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // x (-737) must be > 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
1836,"    public IntObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test38()  throws Throwable  {
      IntObjectHashMap<Integer> intObjectHashMap0 = null;
      try {
        intObjectHashMap0 = new IntObjectHashMap<Integer>(Integer.MAX_VALUE);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2147483647) not representable as an int
         //
         verifyException(""com.google.common.math.IntMath"", e);
      }
  }"
1837,"    public int size() {
        return size;
    }","  public void test39()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(1);
      Integer integer1 = Integer.getInteger("""", 23);
      hashMap0.put(integer1, ""Fy=1s.<.`-<ZB"");
      hashMap0.put(integer0, ""}G*x:q7(6W%=\""lKgV"");
      hashMap0.put((Integer) 8, ""}G*x:q7(6W%=\""lKgV"");
      intObjectHashMap0.putAll(hashMap0);
}"
1838,"    public boolean containsKey(int key) {
        return indexOf(key) >= 0;
    }","  public void test40()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>();
      boolean boolean0 = intObjectHashMap0.containsKey((-1));
}"
1839,"    public int size() {
        return size;
    }","  public void test41()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put((Integer) 8, """");
      boolean boolean0 = intObjectHashMap0.isEmpty();
}"
1840,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test42()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put((Integer) 8, """");
      boolean boolean0 = intObjectHashMap0.isEmpty();
}"
1841,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test43()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      boolean boolean0 = intObjectHashMap0.isEmpty();
}"
1842,"    public V get(int key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test44()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>>(1999);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = intObjectHashMap0.get(1999);
}"
1843,"    public int size() {
        return size;
    }","  public void test45()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) 8, ""}G*x:q7(6W%=\""lKgV"");
      intObjectHashMap0.putAll(hashMap0);
      intObjectHashMap0.get(8);
}"
1844,"    public int size() {
        return size;
    }","  public void test46()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<String, Object>>();
      int int0 = intObjectHashMap0.size();
}"
1845,"    public int size() {
        return size;
    }","  public void test47()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      intObjectHashMap0.put(581, ""X%gP$/8E/P["");
      Collection<String> collection0 = intObjectHashMap0.values();
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.put((Integer) 8, (Object) collection0);
      intObjectHashMap1.putAll(intObjectHashMap0);
}"
1846,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" : toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test48()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      intObjectHashMap0.put(581, ""X%gP$/8E/P["");
      Collection<String> collection0 = intObjectHashMap0.values();
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.put((Integer) 8, (Object) collection0);
      intObjectHashMap1.putAll(intObjectHashMap0);
      String string0 = intObjectHashMap1.toString();
}"
1847,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test49()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, (String) null);
      hashMap0.put((Integer) 8, (String) null);
      intObjectHashMap0.putAll(hashMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , any());
      intObjectHashMap0.compute((Integer) intObjectHashMap0.DEFAULT_CAPACITY, biFunction0);
}"
1848,"    public int size() {
        return size;
    }","  public void test50()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, ""X%g!P$/8mE/(["");
      intObjectHashMap0.put((-1), (String) null);
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.putAll(intObjectHashMap0);
}"
1849,"    public int size() {
        return size;
    }","  public void test51()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, ""X%g!P$/8mE/(["");
      intObjectHashMap0.put((-1), (String) null);
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.putAll(intObjectHashMap0);
      intObjectHashMap1.remove((-1));
}"
1850,"    public int size() {
        return size;
    }","  public void test52()  throws Throwable  {
      IntObjectHashMap<Object> intObjectHashMap0 = new IntObjectHashMap<Object>(1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) 8, ""}G*x:q7(6W%=\""lKgV"");
      intObjectHashMap0.putAll(hashMap0);
      Integer integer0 = new Integer(1124);
      intObjectHashMap0.putIfAbsent(integer0, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      intObjectHashMap0.compute((Integer) intObjectHashMap0.DEFAULT_CAPACITY, biFunction0);
}"
1851,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test53()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put((-1), (String) null);
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.putAll(intObjectHashMap0);
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1852,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof IntObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        IntObjectMap other = (IntObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                int key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test54()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put((-1), (String) null);
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.putAll(intObjectHashMap0);
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1853,"    public int size() {
        return size;
    }","  public void test55()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, """");
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.putAll(intObjectHashMap0);
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyInt() , any());
      intObjectHashMap1.replaceAll(biFunction0);
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1854,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof IntObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        IntObjectMap other = (IntObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                int key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test56()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, """");
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.putAll(intObjectHashMap0);
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyInt() , any());
      intObjectHashMap1.replaceAll(biFunction0);
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1855,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test57()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, """");
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.putAll(intObjectHashMap0);
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1856,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof IntObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        IntObjectMap other = (IntObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                int key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test58()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, """");
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.putAll(intObjectHashMap0);
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1857,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof IntObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        IntObjectMap other = (IntObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                int key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test59()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<String, Integer>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<String, Integer>>();
      boolean boolean0 = intObjectHashMap0.equals(""X%gP$/8E/P["");
}"
1858,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test60()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, """");
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1859,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof IntObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        IntObjectMap other = (IntObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                int key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test61()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, """");
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1860,"    public int size() {
        return size;
    }","  public void test62()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, ""X%g!P$/8mE/(["");
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyInt() , any());
      intObjectHashMap0.replaceAll(biFunction0);
      boolean boolean0 = intObjectHashMap0.containsValue((Object) null);
}"
1861,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test63()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, ""X%g!P$/8mE/(["");
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyInt() , any());
      intObjectHashMap0.replaceAll(biFunction0);
      boolean boolean0 = intObjectHashMap0.containsValue((Object) null);
}"
1862,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test64()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, """");
      boolean boolean0 = intObjectHashMap0.containsValue((Object) null);
}"
1863,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test65()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, """");
      boolean boolean0 = intObjectHashMap0.containsValue((Object) null);
}"
1864,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test66()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<String>> intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<String>>(8);
      String string0 = intObjectHashMap0.toString();
}"
1865,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" : toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test67()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<String>> intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<String>>(8);
      String string0 = intObjectHashMap0.toString();
}"
1866,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test68()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<String, Integer>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<String, Integer>>();
      intObjectHashMap0.remove(8);
}"
1867,"    public IntObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test69()  throws Throwable  {
      IntObjectHashMap<Comparable<Object>> intObjectHashMap0 = null;
      try {
        intObjectHashMap0 = new IntObjectHashMap<Comparable<Object>>(8, 8);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1868,"    public IntObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test70()  throws Throwable  {
      IntObjectHashMap<Comparable<Object>> intObjectHashMap0 = null;
      try {
        intObjectHashMap0 = new IntObjectHashMap<Comparable<Object>>((-2343), (-2343));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1869,"    public int size() {
        return size;
    }","  public void test71()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, ""X%g!P$/8mE/(["");
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(8);
      intObjectHashMap1.putAll(intObjectHashMap0);
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""8"").when(biFunction0).apply(anyInt() , any());
      intObjectHashMap1.replaceAll(biFunction0);
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1870,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof IntObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        IntObjectMap other = (IntObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                int key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test72()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>(8);
      intObjectHashMap0.put(8, ""X%g!P$/8mE/(["");
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>(8);
      intObjectHashMap1.putAll(intObjectHashMap0);
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""8"").when(biFunction0).apply(anyInt() , any());
      intObjectHashMap1.replaceAll(biFunction0);
      boolean boolean0 = intObjectHashMap1.equals(intObjectHashMap0);
}"
1871,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test73()  throws Throwable  {
      IntObjectHashMap<AbstractMap.SimpleEntry<String, Integer>> intObjectHashMap0 = new IntObjectHashMap<AbstractMap.SimpleEntry<String, Integer>>();
      Iterable<IntObjectMap.PrimitiveEntry<AbstractMap.SimpleEntry<String, Integer>>> iterable0 = (Iterable<IntObjectMap.PrimitiveEntry<AbstractMap.SimpleEntry<String, Integer>>>)intObjectHashMap0.entries();
}"
1872,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test74()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<Integer>> intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<Integer>>(120, 1.0F);
      Set<Integer> set0 = intObjectHashMap0.keySet();
}"
1873,"    public V remove(int key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test75()  throws Throwable  {
      IntObjectHashMap<IntObjectHashMap<Integer>> intObjectHashMap0 = new IntObjectHashMap<IntObjectHashMap<Integer>>();
      // Undeclared exception!
      try { 
        intObjectHashMap0.remove((Object) ""H}p?w:kZ,ux!"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Integer
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.IntObjectHashMap"", e);
      }
  }"
1874,"    public int size() {
        return size;
    }","  public void test76()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      intObjectHashMap0.clear();
}"
1875,"    public int size() {
        return size;
    }","  public void test77()  throws Throwable  {
      IntObjectHashMap<String> intObjectHashMap0 = new IntObjectHashMap<String>();
      Collection<String> collection0 = intObjectHashMap0.values();
      IntObjectHashMap<Object> intObjectHashMap1 = new IntObjectHashMap<Object>();
      intObjectHashMap1.put((Integer) 8, (Object) collection0);
      intObjectHashMap1.toString();
}"
1876,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test0()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
}"
1877,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
}"
1878,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test2()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
}"
1879,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test3()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
}"
1880,"    public int size() {
        return size;
    }","  public void test4()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
}"
1881,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test5()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
}"
1882,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test6()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
}"
1883,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test7()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
}"
1884,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test8()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
}"
1885,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test9()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
}"
1886,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test10()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
}"
1887,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test11()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
}"
1888,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test12()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
}"
1889,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test13()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
}"
1890,"    public int size() {
        return size;
    }","  public void test14()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
}"
1891,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test15()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
}"
1892,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test16()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
}"
1893,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test17()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
}"
1894,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test18()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
}"
1895,"    public int size() {
        return size;
    }","  public void test19()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
}"
1896,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test20()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
      Object object0 = longObjectHashMap_MapEntry0.setValue((Object) null);
}"
1897,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test21()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
      Object object0 = longObjectHashMap_MapEntry0.setValue((Object) null);
}"
1898,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test22()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
      Object object0 = longObjectHashMap_MapEntry0.setValue((Object) null);
}"
1899,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test23()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
      Object object0 = longObjectHashMap_MapEntry0.setValue((Object) null);
}"
1900,"    public int size() {
        return size;
    }","  public void test24()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      Long long0 = new Long(1450);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(""com.google.common.math.IntMath"", ""+y{3u_N?EP"");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = longObjectHashMap0.putIfAbsent(long0, abstractMap_SimpleEntry1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
      Object object0 = longObjectHashMap_MapEntry0.setValue((Object) null);
}"
1901,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test25()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
}"
1902,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test26()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
}"
1903,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test27()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
}"
1904,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test28()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
}"
1905,"    public int size() {
        return size;
    }","  public void test29()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
}"
1906,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test30()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
}"
1907,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test31()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
}"
1908,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test32()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
}"
1909,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test33()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
}"
1910,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test34()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
}"
1911,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test35()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
}"
1912,"    public int size() {
        return size;
    }","  public void test36()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
}"
1913,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test37()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
}"
1914,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test38()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
}"
1915,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test39()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
}"
1916,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test40()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
}"
1917,"    public int size() {
        return size;
    }","  public void test41()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
}"
1918,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test42()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
}"
1919,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test43()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
}"
1920,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test44()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
}"
1921,"    public int size() {
        return size;
    }","  public void test45()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
}"
1922,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test46()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
}"
1923,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test47()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
}"
1924,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test48()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
}"
1925,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test49()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
}"
1926,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test50()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
}"
1927,"    public int size() {
        return size;
    }","  public void test51()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
}"
1928,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test52()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
}"
1929,"    public int size() {
        return size;
    }","  public void test53()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
}"
1930,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test54()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
}"
1931,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test55()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(65536);
}"
1932,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test56()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(65536);
}"
1933,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test57()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(65536);
}"
1934,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test58()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(65536);
}"
1935,"    public int size() {
        return size;
    }","  public void test59()  throws Throwable  {
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(65536);
      Long long0 = new Long(1L);
      Comparable<Object> comparable0 = longObjectHashMap0.remove((Object) long0);
      Comparable<Object> comparable1 = longObjectHashMap0.remove((long) 65536);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      Set<Long> set0 = longObjectHashMap1.keySet();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(65536);
}"
1936,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test60()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
1937,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test61()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
1938,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test62()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
1939,"    public int size() {
        return size;
    }","  public void test63()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
1940,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test64()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
1941,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test65()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
}"
1942,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test66()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
}"
1943,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test67()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
}"
1944,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test68()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
}"
1945,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test69()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
}"
1946,"    public int size() {
        return size;
    }","  public void test70()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
}"
1947,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test71()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
}"
1948,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test72()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
}"
1949,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test73()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
}"
1950,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test74()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
}"
1951,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test75()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
}"
1952,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test76()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
}"
1953,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test77()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
}"
1954,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test78()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
}"
1955,"    public int size() {
        return size;
    }","  public void test79()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
}"
1956,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test80()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
}"
1957,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test81()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
}"
1958,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test82()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
}"
1959,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test83()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
}"
1960,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test84()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
}"
1961,"    public int size() {
        return size;
    }","  public void test85()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
}"
1962,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test86()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
}"
1963,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test87()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
}"
1964,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test88()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
}"
1965,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test89()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
}"
1966,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test90()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
}"
1967,"    public int size() {
        return size;
    }","  public void test91()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
}"
1968,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test92()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
}"
1969,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test93()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
}"
1970,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test94()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
}"
1971,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test95()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
}"
1972,"    public int size() {
        return size;
    }","  public void test96()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
}"
1973,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test97()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
}"
1974,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test98()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
}"
1975,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test99()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
}"
1976,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test100()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
}"
1977,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test101()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
}"
1978,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test102()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
}"
1979,"    public int size() {
        return size;
    }","  public void test103()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
}"
1980,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test104()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
}"
1981,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test105()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
}"
1982,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test106()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
}"
1983,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test107()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
}"
1984,"    public int size() {
        return size;
    }","  public void test108()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
}"
1985,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test109()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
}"
1986,"    public int size() {
        return size;
    }","  public void test110()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
}"
1987,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test111()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
}"
1988,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test112()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
}"
1989,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test113()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
}"
1990,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test114()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
}"
1991,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test115()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
}"
1992,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test116()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
}"
1993,"    public int size() {
        return size;
    }","  public void test117()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
}"
1994,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test118()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
}"
1995,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test119()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
}"
1996,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test120()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
}"
1997,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test121()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
}"
1998,"    public int size() {
        return size;
    }","  public void test122()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
}"
1999,"    public int size() {
        return size;
    }","  public void test123()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
}"
2000,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test124()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
}"
2001,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test125()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
}"
2002,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test126()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
}"
2003,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test127()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
}"
2004,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test128()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
}"
2005,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test129()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
}"
2006,"    public int size() {
        return size;
    }","  public void test130()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
}"
2007,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test131()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
}"
2008,"    public int size() {
        return size;
    }","  public void test132()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
}"
2009,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test133()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
}"
2010,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test134()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2011,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test135()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2012,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test136()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2013,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test137()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2014,"    public int size() {
        return size;
    }","  public void test138()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2015,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test139()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2016,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test140()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2017,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test141()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2018,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test142()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2019,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test143()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2020,"    public int size() {
        return size;
    }","  public void test144()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2021,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test145()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2022,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test146()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2023,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test147()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2024,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test148()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2025,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test149()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2026,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test150()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2027,"    public int size() {
        return size;
    }","  public void test151()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
}"
2028,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test152()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2029,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test153()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2030,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test154()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2031,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test155()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2032,"    public int size() {
        return size;
    }","  public void test156()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2033,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test157()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2034,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test158()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2035,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test159()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2036,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test160()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2037,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test161()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2038,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test162()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2039,"    public int size() {
        return size;
    }","  public void test163()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2040,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test164()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2041,"    public int size() {
        return size;
    }","  public void test165()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2042,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test166()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = longObjectHashMap0.computeIfPresent(long0, biFunction0);
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""org.springside.modules.utils.number.MathUtil"").when(biFunction1).apply(any() , anyString());
      String string1 = longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long long2 = Long.getLong(""%pKL0k?"");
      long long3 = Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      String string2 = longObjectHashMap0.put(0L, ""&{/}[@As:Z-rZ;"");
      String string3 = longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction2).apply(anyLong() , any());
      String string4 = longObjectHashMap0.compute(long1, biFunction2);
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long4 = hashMap0.put(long1, long0);
      longObjectHashMap1.putAll(hashMap0);
      boolean boolean0 = longObjectHashMap0.equals(longObjectHashMap1);
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable1 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      Iterable<LongObjectMap.PrimitiveEntry<String>> iterable2 = (Iterable<LongObjectMap.PrimitiveEntry<String>>)longObjectHashMap0.entries();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      boolean boolean1 = longObjectHashMap0.equals(longObjectHashMap2);
}"
2043,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test167()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2044,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test168()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2045,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test169()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2046,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test170()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2047,"    public int size() {
        return size;
    }","  public void test171()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2048,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test172()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2049,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test173()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2050,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test174()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2051,"    public int size() {
        return size;
    }","  public void test175()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2052,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test176()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2053,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test177()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
}"
2054,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test178()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
}"
2055,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test179()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
}"
2056,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test180()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
}"
2057,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test181()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2058,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test182()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2059,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test183()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2060,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test184()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2061,"    public int size() {
        return size;
    }","  public void test185()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2062,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test186()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2063,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test187()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2064,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test188()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2065,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test189()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2066,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test190()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2067,"    public int size() {
        return size;
    }","  public void test191()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2068,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test192()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
}"
2069,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test193()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
}"
2070,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test194()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
}"
2071,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test195()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
}"
2072,"    public int size() {
        return size;
    }","  public void test196()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
}"
2073,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test197()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2074,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test198()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2075,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test199()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2076,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test200()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2077,"    public int size() {
        return size;
    }","  public void test201()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Collection<String> collection0 = longObjectHashMap0.values();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2078,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test202()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2079,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test203()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2080,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test204()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2081,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test205()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2082,"    public int size() {
        return size;
    }","  public void test206()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2083,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test207()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2084,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test208()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2085,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test209()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2086,"    public int size() {
        return size;
    }","  public void test210()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2087,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test211()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2088,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test212()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
}"
2089,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test213()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
}"
2090,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test214()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
}"
2091,"    public int size() {
        return size;
    }","  public void test215()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
}"
2092,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test216()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
}"
2093,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test217()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
2094,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test218()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
2095,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test219()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
2096,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test220()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
2097,"    public int size() {
        return size;
    }","  public void test221()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
2098,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test222()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
2099,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test223()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2100,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test224()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2101,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test225()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2102,"    public int size() {
        return size;
    }","  public void test226()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2103,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test227()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2104,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test228()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
}"
2105,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test229()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
}"
2106,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test230()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
}"
2107,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test231()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
}"
2108,"    public int size() {
        return size;
    }","  public void test232()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
}"
2109,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test233()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
}"
2110,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test234()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
}"
2111,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test235()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2112,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test236()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2113,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test237()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2114,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test238()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2115,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test239()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2116,"    public int size() {
        return size;
    }","  public void test240()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2117,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test241()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2118,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test242()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2119,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test243()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2120,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test244()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2121,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test245()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2122,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test246()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2123,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test247()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2124,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test248()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2125,"    public int size() {
        return size;
    }","  public void test249()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2126,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test250()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2127,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test251()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2128,"    public int size() {
        return size;
    }","  public void test252()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2129,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test253()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2130,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test254()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2131,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test255()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2132,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test256()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2133,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test257()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2134,"    public int size() {
        return size;
    }","  public void test258()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2135,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test259()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2136,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test260()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
}"
2137,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test261()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
}"
2138,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test262()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
}"
2139,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test263()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
}"
2140,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test264()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2141,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test265()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2142,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test266()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2143,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test267()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2144,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test268()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2145,"    public int size() {
        return size;
    }","  public void test269()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2146,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test270()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2147,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test271()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2148,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test272()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2149,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test273()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2150,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test274()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2151,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test275()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2152,"    public int size() {
        return size;
    }","  public void test276()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2153,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test277()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2154,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test278()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
}"
2155,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test279()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
}"
2156,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test280()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
}"
2157,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test281()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2158,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test282()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2159,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test283()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2160,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test284()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2161,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test285()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2162,"    public int size() {
        return size;
    }","  public void test286()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2163,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test287()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2164,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test288()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2165,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test289()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2166,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test290()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2167,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test291()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2168,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test292()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2169,"    public int size() {
        return size;
    }","  public void test293()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2170,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test294()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2171,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test295()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2172,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test296()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2173,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test297()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2174,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test298()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2175,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test299()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2176,"    public int size() {
        return size;
    }","  public void test300()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2177,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test301()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(31L);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2178,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test302()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2179,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test303()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2180,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test304()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2181,"    public int size() {
        return size;
    }","  public void test305()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2182,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test306()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2183,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test307()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
}"
2184,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test308()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
}"
2185,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test309()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
}"
2186,"    public int size() {
        return size;
    }","  public void test310()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
}"
2187,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test311()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
}"
2188,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test312()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
}"
2189,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test313()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
}"
2190,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test314()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
}"
2191,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test315()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
}"
2192,"    public int size() {
        return size;
    }","  public void test316()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
}"
2193,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test317()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
}"
2194,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test318()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
}"
2195,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test319()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
}"
2196,"    public int size() {
        return size;
    }","  public void test320()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
}"
2197,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test321()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
}"
2198,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test322()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(10000);
}"
2199,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test323()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(10000);
}"
2200,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test324()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(10000);
}"
2201,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test325()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(10000);
}"
2202,"    public int size() {
        return size;
    }","  public void test326()  throws Throwable  {
      int int0 = 10000;
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>(10000);
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(10000);
}"
2203,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test327()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2204,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test328()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2205,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test329()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2206,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test330()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2207,"    public int size() {
        return size;
    }","  public void test331()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2208,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test332()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2209,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test333()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2210,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test334()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2211,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test335()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2212,"    public int size() {
        return size;
    }","  public void test336()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2213,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test337()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2214,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test338()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2215,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test339()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2216,"    public int size() {
        return size;
    }","  public void test340()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2217,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test341()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2218,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test342()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2219,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test343()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2220,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test344()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2221,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test345()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2222,"    public int size() {
        return size;
    }","  public void test346()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
2223,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test347()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2224,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test348()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2225,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test349()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2226,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test350()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2227,"    public int size() {
        return size;
    }","  public void test351()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2228,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test352()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2229,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test353()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2230,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test354()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2231,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test355()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2232,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test356()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2233,"    public int size() {
        return size;
    }","  public void test357()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2234,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test358()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
2235,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test359()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2236,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test360()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2237,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test361()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2238,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test362()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2239,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test363()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2240,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test364()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2241,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test365()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2242,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test366()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2243,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test367()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2244,"    public int size() {
        return size;
    }","  public void test368()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2245,"    public int size() {
        return size;
    }","  public void test369()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2246,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test370()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2247,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test371()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
2248,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test372()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
}"
2249,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test373()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
}"
2250,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test374()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
}"
2251,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test375()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
}"
2252,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test376()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
}"
2253,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test377()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
}"
2254,"    public int size() {
        return size;
    }","  public void test378()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
}"
2255,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test379()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
}"
2256,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test380()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
}"
2257,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test381()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
}"
2258,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test382()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
}"
2259,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test383()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
}"
2260,"    public int size() {
        return size;
    }","  public void test384()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
}"
2261,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test385()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
}"
2262,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test386()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
}"
2263,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test387()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
}"
2264,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test388()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
}"
2265,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test389()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
}"
2266,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test390()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
}"
2267,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test391()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
}"
2268,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test392()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
}"
2269,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test393()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
}"
2270,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test394()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
}"
2271,"    public int size() {
        return size;
    }","  public void test395()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
}"
2272,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test396()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2273,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test397()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2274,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test398()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2275,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test399()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2276,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test400()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2277,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test401()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2278,"    public int size() {
        return size;
    }","  public void test402()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2279,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test403()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
}"
2280,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test404()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
}"
2281,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test405()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
}"
2282,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test406()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
}"
2283,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test407()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
}"
2284,"    public int size() {
        return size;
    }","  public void test408()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
}"
2285,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test409()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
}"
2286,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test410()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
}"
2287,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test411()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
}"
2288,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test412()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2289,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test413()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2290,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test414()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2291,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test415()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2292,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test416()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2293,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test417()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2294,"    public int size() {
        return size;
    }","  public void test418()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2295,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test419()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2296,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test420()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2297,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test421()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2298,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test422()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2299,"    public int size() {
        return size;
    }","  public void test423()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2300,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test424()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2301,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test425()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
}"
2302,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test426()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
}"
2303,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test427()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
}"
2304,"    public int size() {
        return size;
    }","  public void test428()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
}"
2305,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test429()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
}"
2306,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test430()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
}"
2307,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test431()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
}"
2308,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test432()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
}"
2309,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test433()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
}"
2310,"    public int size() {
        return size;
    }","  public void test434()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
}"
2311,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test435()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
}"
2312,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test436()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
}"
2313,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test437()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2314,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test438()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2315,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test439()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2316,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test440()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2317,"    public int size() {
        return size;
    }","  public void test441()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2318,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test442()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
      longObjectHashMap4.clear();
}"
2319,"    public void clear() {
        Arrays.fill(keys, 0);
        Arrays.fill(values, null);
        size = 0;
    }","  public void test443()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
      longObjectHashMap4.clear();
}"
2320,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test444()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
      longObjectHashMap4.clear();
}"
2321,"    public int size() {
        return size;
    }","  public void test445()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Integer integer2 = longObjectHashMap1.put(1L, (Integer) 8);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer3 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer4 = longObjectHashMap1.merge(long0, integer3, biFunction0);
      Integer integer5 = longObjectHashMap1.replace(long0, (Integer) 8);
      longObjectHashMap1.clear();
      Integer integer6 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      Object object0 = longObjectHashMap3.remove(1319L);
      String string1 = longObjectHashMap3.keyToString(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap4 = new LongObjectHashMap<Comparable<Object>>(8);
      longObjectHashMap4.clear();
}"
2322,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test446()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
}"
2323,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test447()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
}"
2324,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test448()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
}"
2325,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test449()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
}"
2326,"    public int size() {
        return size;
    }","  public void test450()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
}"
2327,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test451()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1138);
}"
2328,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test452()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1138);
}"
2329,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test453()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1138);
}"
2330,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test454()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1138);
}"
2331,"    public int size() {
        return size;
    }","  public void test455()  throws Throwable  {
      int int0 = 1138;
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(1138);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1138);
}"
2332,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test456()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2333,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test457()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2334,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test458()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2335,"    public int size() {
        return size;
    }","  public void test459()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2336,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test460()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2337,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test461()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2338,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test462()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2339,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test463()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2340,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test464()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2341,"    public int size() {
        return size;
    }","  public void test465()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2342,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test466()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2343,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test467()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2344,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test468()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2345,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test469()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2346,"    public int size() {
        return size;
    }","  public void test470()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
2347,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test471()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
}"
2348,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test472()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
}"
2349,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test473()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
}"
2350,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test474()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
}"
2351,"    public int size() {
        return size;
    }","  public void test475()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
}"
2352,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test476()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2353,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test477()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2354,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test478()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2355,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test479()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2356,"    public int size() {
        return size;
    }","  public void test480()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2357,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test481()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
}"
2358,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test482()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
}"
2359,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test483()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
}"
2360,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test484()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
}"
2361,"    public int size() {
        return size;
    }","  public void test485()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
}"
2362,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test486()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
}"
2363,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test487()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2364,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test488()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2365,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test489()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2366,"    public int size() {
        return size;
    }","  public void test490()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
}"
2367,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test491()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
}"
2368,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test492()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
}"
2369,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test493()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
}"
2370,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test494()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
}"
2371,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test495()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2372,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test496()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2373,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test497()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2374,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test498()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2375,"    public int size() {
        return size;
    }","  public void test499()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
2376,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test500()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2377,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test501()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2378,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test502()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2379,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test503()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2380,"    public int size() {
        return size;
    }","  public void test504()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2381,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test505()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
}"
2382,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test506()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
}"
2383,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test507()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
}"
2384,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test508()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2385,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test509()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2386,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test510()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2387,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test511()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2388,"    public int size() {
        return size;
    }","  public void test512()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2389,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test513()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
2390,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test514()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap2 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2391,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test515()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap2 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2392,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test516()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap2 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2393,"    public int size() {
        return size;
    }","  public void test517()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap2 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2394,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test518()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(313L, (Integer) 8);
      String string0 = longObjectHashMap1.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap1);
      longObjectHashMap1.forEach(biConsumer0);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      boolean boolean1 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap2 = new LongObjectHashMap<Comparable<Object>>(8);
}"
2395,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test519()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2396,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test520()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2397,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test521()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2398,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test522()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2399,"    public int size() {
        return size;
    }","  public void test523()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2400,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test524()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(0L);
}"
2401,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test525()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(0L);
}"
2402,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test526()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(0L);
      String string0 = longObjectHashMap0.remove((Object) long0);
}"
2403,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test527()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(0L);
      String string0 = longObjectHashMap0.remove((Object) long0);
}"
2404,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test528()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(0L);
      String string0 = longObjectHashMap0.remove((Object) long0);
}"
2405,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test529()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(0L);
      String string0 = longObjectHashMap0.remove((Object) long0);
}"
2406,"    public int size() {
        return size;
    }","  public void test530()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(0L);
      String string0 = longObjectHashMap0.remove((Object) long0);
}"
2407,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test531()  throws Throwable  {
      int int0 = 9982;
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(9982);
}"
2408,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test532()  throws Throwable  {
      int int0 = 9982;
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(9982);
}"
2409,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test533()  throws Throwable  {
      int int0 = 9982;
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(9982);
}"
2410,"    public int size() {
        return size;
    }","  public void test534()  throws Throwable  {
      int int0 = 9982;
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(9982);
}"
2411,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test535()  throws Throwable  {
      int int0 = 9982;
      LongObjectHashMap<Comparable<Object>> longObjectHashMap0 = new LongObjectHashMap<Comparable<Object>>(9982);
}"
2412,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test536()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2413,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test537()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2414,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test538()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2415,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test539()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2416,"    public int size() {
        return size;
    }","  public void test540()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2417,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test541()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      int int0 = Integer.MAX_VALUE;
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(Integer.MAX_VALUE);
}"
2418,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test542()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      int int0 = Integer.MAX_VALUE;
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(Integer.MAX_VALUE);
}"
2419,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test543()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      int int0 = Integer.MAX_VALUE;
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(Integer.MAX_VALUE);
}"
2420,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test544()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      int int0 = Integer.MAX_VALUE;
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(Integer.MAX_VALUE);
}"
2421,"    public int size() {
        return size;
    }","  public void test545()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      int int0 = Integer.MAX_VALUE;
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(Integer.MAX_VALUE);
}"
2422,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test546()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2423,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test547()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2424,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test548()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2425,"    public int size() {
        return size;
    }","  public void test549()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2426,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test550()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
2427,"    public Set<Entry<Long, V>> entrySet() {
        return entrySet;
    }","  public void test551()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
}"
2428,"    public Set<Entry<Long, V>> entrySet() {
        return entrySet;
    }","  public void test552()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
}"
2429,"    public Set<Entry<Long, V>> entrySet() {
        return entrySet;
    }","  public void test553()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
}"
2430,"    public int size() {
        return size;
    }","  public void test554()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
}"
2431,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test555()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
}"
2432,"    public int size() {
        return size;
    }","  public void test556()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
}"
2433,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test557()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
}"
2434,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test558()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
}"
2435,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test559()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
}"
2436,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test560()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
}"
2437,"    public int size() {
        return size;
    }","  public void test561()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
}"
2438,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test562()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
}"
2439,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test563()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
}"
2440,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test564()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
}"
2441,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test565()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
}"
2442,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test566()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
}"
2443,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test567()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
}"
2444,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test568()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
}"
2445,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test569()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
}"
2446,"    public int size() {
        return size;
    }","  public void test570()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
}"
2447,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test571()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
}"
2448,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test572()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
}"
2449,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test573()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
}"
2450,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test574()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
}"
2451,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test575()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
}"
2452,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test576()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
}"
2453,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test577()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
}"
2454,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test578()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
}"
2455,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test579()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
}"
2456,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test580()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
}"
2457,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test581()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
}"
2458,"    public int size() {
        return size;
    }","  public void test582()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
}"
2459,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test583()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
}"
2460,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test584()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
}"
2461,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test585()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
}"
2462,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test586()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
}"
2463,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test587()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
}"
2464,"    public int size() {
        return size;
    }","  public void test588()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
}"
2465,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test589()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
}"
2466,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test590()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
}"
2467,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test591()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
}"
2468,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test592()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
}"
2469,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test593()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
}"
2470,"    public int size() {
        return size;
    }","  public void test594()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
}"
2471,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test595()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
}"
2472,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test596()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
}"
2473,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test597()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
}"
2474,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test598()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
}"
2475,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test599()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
}"
2476,"    public int size() {
        return size;
    }","  public void test600()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
}"
2477,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test601()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
}"
2478,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test602()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
}"
2479,"    public int size() {
        return size;
    }","  public void test603()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
}"
2480,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test604()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
      LongObjectHashMap<String> longObjectHashMap3 = new LongObjectHashMap<String>();
}"
2481,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test605()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
      LongObjectHashMap<String> longObjectHashMap3 = new LongObjectHashMap<String>();
}"
2482,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test606()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
      LongObjectHashMap<String> longObjectHashMap3 = new LongObjectHashMap<String>();
}"
2483,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test607()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
      LongObjectHashMap<String> longObjectHashMap3 = new LongObjectHashMap<String>();
}"
2484,"    public int size() {
        return size;
    }","  public void test608()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)longObjectHashMap0.entrySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(2496);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.putIfAbsent(long0, integer0);
      long long1 = Long.sum(2496, 390L);
      Integer integer2 = new Integer(2496);
      Integer integer3 = longObjectHashMap1.put(long0, integer2);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(8);
      Collection<LongObjectHashMap<Object>> collection0 = longObjectHashMap2.values();
      Set<Long> set1 = longObjectHashMap2.keySet();
      LongObjectHashMap<String> longObjectHashMap3 = new LongObjectHashMap<String>();
}"
2485,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test609()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2486,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test610()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2487,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test611()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2488,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test612()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2489,"    public int size() {
        return size;
    }","  public void test613()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2490,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test614()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
2491,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test615()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
2492,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test616()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
2493,"    public int size() {
        return size;
    }","  public void test617()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
2494,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test618()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
2495,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test619()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2496,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test620()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2497,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test621()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2498,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test622()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2499,"    public int size() {
        return size;
    }","  public void test623()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2500,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test624()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
}"
2501,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test625()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
}"
2502,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test626()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
}"
2503,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test627()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
}"
2504,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test628()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
}"
2505,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test629()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
}"
2506,"    public int size() {
        return size;
    }","  public void test630()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
}"
2507,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test631()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
}"
2508,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test632()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
}"
2509,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test633()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
}"
2510,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test634()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
}"
2511,"    public int size() {
        return size;
    }","  public void test635()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
}"
2512,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test636()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
}"
2513,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test637()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
2514,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test638()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
2515,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test639()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
2516,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test640()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
2517,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test641()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
2518,"    public int size() {
        return size;
    }","  public void test642()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
2519,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test643()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2520,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test644()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2521,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test645()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2522,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test646()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2523,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test647()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2524,"    public int size() {
        return size;
    }","  public void test648()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2525,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test649()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
}"
2526,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test650()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
}"
2527,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test651()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2528,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test652()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2529,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test653()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2530,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test654()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2531,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test655()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2532,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test656()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2533,"    public int size() {
        return size;
    }","  public void test657()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2534,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test658()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
2535,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test659()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2536,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test660()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2537,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test661()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2538,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test662()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2539,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test663()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2540,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test664()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2541,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test665()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2542,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test666()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2543,"    public int size() {
        return size;
    }","  public void test667()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2544,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test668()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
}"
2545,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test669()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
}"
2546,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test670()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
}"
2547,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test671()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
}"
2548,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test672()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
}"
2549,"    public int size() {
        return size;
    }","  public void test673()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
}"
2550,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test674()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
}"
2551,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test675()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
}"
2552,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test676()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
}"
2553,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test677()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
}"
2554,"    public int size() {
        return size;
    }","  public void test678()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
}"
2555,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test679()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
}"
2556,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test680()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2557,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test681()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2558,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test682()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2559,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test683()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2560,"    public int size() {
        return size;
    }","  public void test684()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
2561,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test685()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2562,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test686()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2563,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test687()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2564,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test688()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2565,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test689()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2566,"    public int size() {
        return size;
    }","  public void test690()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2567,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test691()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put((-2316L), integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      Long long0 = new Long((-2316L));
      Integer integer2 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer3 = longObjectHashMap1.get((-2316L));
      String string1 = longObjectHashMap0.get((-1011L));
      boolean boolean1 = longObjectHashMap0.containsKey(0L);
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
      String string2 = longObjectHashMap3.keyToString((-1055L));
}"
2568,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test692()  throws Throwable  {
      int int0 = 2976;
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>>(2976);
}"
2569,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test693()  throws Throwable  {
      int int0 = 2976;
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>>(2976);
}"
2570,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test694()  throws Throwable  {
      int int0 = 2976;
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>>(2976);
}"
2571,"    public int size() {
        return size;
    }","  public void test695()  throws Throwable  {
      int int0 = 2976;
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>>(2976);
}"
2572,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test696()  throws Throwable  {
      int int0 = 2976;
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<Integer, String>>(2976);
}"
2573,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test697()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2574,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test698()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2575,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test699()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2576,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test700()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2577,"    public int size() {
        return size;
    }","  public void test701()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2578,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test702()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2579,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test703()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2580,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test704()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2581,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test705()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2582,"    public int size() {
        return size;
    }","  public void test706()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2583,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test707()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
}"
2584,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test708()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
}"
2585,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test709()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
}"
2586,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test710()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
}"
2587,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test711()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
}"
2588,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test712()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
}"
2589,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test713()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2590,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test714()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2591,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test715()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2592,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test716()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2593,"    public int size() {
        return size;
    }","  public void test717()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2594,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test718()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
}"
2595,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test719()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Object object0 = longObjectHashMap1.get((long) 8);
}"
2596,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test720()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Object object0 = longObjectHashMap1.get((long) 8);
}"
2597,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test721()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Object object0 = longObjectHashMap1.get((long) 8);
}"
2598,"    public int size() {
        return size;
    }","  public void test722()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Object object0 = longObjectHashMap1.get((long) 8);
}"
2599,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test723()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long1 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      Object object0 = longObjectHashMap1.get((long) 8);
}"
2600,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test724()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2601,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test725()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2602,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test726()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2603,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test727()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2604,"    public int size() {
        return size;
    }","  public void test728()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
2605,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test729()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2606,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test730()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2607,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test731()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2608,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test732()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2609,"    public int size() {
        return size;
    }","  public void test733()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2610,"    public int size() {
        return size;
    }","  public void test734()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2611,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test735()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2612,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test736()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
}"
2613,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test737()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
}"
2614,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test738()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
}"
2615,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test739()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
}"
2616,"    public int size() {
        return size;
    }","  public void test740()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
}"
2617,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test741()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
}"
2618,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test742()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
}"
2619,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test743()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
}"
2620,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test744()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
}"
2621,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test745()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
}"
2622,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test746()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
}"
2623,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test747()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
}"
2624,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test748()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
}"
2625,"    public int size() {
        return size;
    }","  public void test749()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
}"
2626,"    public Set<Entry<Long, V>> entrySet() {
        return entrySet;
    }","  public void test750()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
      Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>> set1 = (Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>>)longObjectHashMap1.entrySet();
}"
2627,"    public Set<Entry<Long, V>> entrySet() {
        return entrySet;
    }","  public void test751()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
      Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>> set1 = (Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>>)longObjectHashMap1.entrySet();
}"
2628,"    public Set<Entry<Long, V>> entrySet() {
        return entrySet;
    }","  public void test752()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
      Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>> set1 = (Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>>)longObjectHashMap1.entrySet();
}"
2629,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test753()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
      Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>> set1 = (Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>>)longObjectHashMap1.entrySet();
}"
2630,"    public int size() {
        return size;
    }","  public void test754()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
      Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>> set1 = (Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>>)longObjectHashMap1.entrySet();
}"
2631,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test755()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
      Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>> set1 = (Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>>)longObjectHashMap1.entrySet();
}"
2632,"    public int size() {
        return size;
    }","  public void test756()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, String>>(2);
      Long long0 = new Long(989L);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("""", """");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = longObjectHashMap1.putIfAbsent(long0, abstractMap_SimpleImmutableEntry1);
      Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>> set1 = (Set<Map.Entry<Long, AbstractMap.SimpleImmutableEntry<String, String>>>)longObjectHashMap1.entrySet();
}"
2633,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test757()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2634,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test758()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2635,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test759()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2636,"    public int size() {
        return size;
    }","  public void test760()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2637,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test761()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2638,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test762()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2639,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test763()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2640,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test764()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2641,"    public int size() {
        return size;
    }","  public void test765()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2642,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test766()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
}"
2643,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test767()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
}"
2644,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test768()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
}"
2645,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test769()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
}"
2646,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test770()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
}"
2647,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test771()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
}"
2648,"    public int size() {
        return size;
    }","  public void test772()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
}"
2649,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test773()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
}"
2650,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test774()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
}"
2651,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test775()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
}"
2652,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test776()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
}"
2653,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test777()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
}"
2654,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test778()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
}"
2655,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test779()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
}"
2656,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test780()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
}"
2657,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test781()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
}"
2658,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test782()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
}"
2659,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test783()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
}"
2660,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test784()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
}"
2661,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test785()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
}"
2662,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test786()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
}"
2663,"    public int size() {
        return size;
    }","  public void test787()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
}"
2664,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test788()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
}"
2665,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test789()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
}"
2666,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test790()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
}"
2667,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test791()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
}"
2668,"    public int size() {
        return size;
    }","  public void test792()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
}"
2669,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test793()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
}"
2670,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test794()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2671,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test795()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2672,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test796()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2673,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test797()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2674,"    public int size() {
        return size;
    }","  public void test798()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2675,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test799()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
}"
2676,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test800()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2677,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test801()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2678,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test802()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2679,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test803()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2680,"    public int size() {
        return size;
    }","  public void test804()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2681,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test805()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2682,"    public int size() {
        return size;
    }","  public void test806()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2683,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test807()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2684,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test808()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
}"
2685,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test809()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
}"
2686,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test810()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
}"
2687,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test811()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
}"
2688,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test812()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
}"
2689,"    public int size() {
        return size;
    }","  public void test813()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
}"
2690,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test814()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
}"
2691,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test815()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2692,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test816()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2693,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test817()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2694,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test818()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2695,"    public int size() {
        return size;
    }","  public void test819()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
}"
2696,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test820()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
}"
2697,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test821()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
}"
2698,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test822()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
}"
2699,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test823()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
}"
2700,"    public int size() {
        return size;
    }","  public void test824()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
}"
2701,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test825()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
}"
2702,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test826()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
}"
2703,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test827()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
}"
2704,"    public int size() {
        return size;
    }","  public void test828()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
}"
2705,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test829()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
}"
2706,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test830()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
}"
2707,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test831()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
}"
2708,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test832()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
}"
2709,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test833()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
}"
2710,"    public int size() {
        return size;
    }","  public void test834()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = longObjectHashMap1.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      Long long1 = new Long((-4245L));
      String string0 = ""l5QhK"";
      int int0 = Long.compareUnsigned(0L, (-4245L));
      long long2 = Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Long, String>(long1, ""l5QhK"");
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry2 = longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry1);
      String string1 = longObjectHashMap0.get((-678L));
      Collection<String> collection0 = longObjectHashMap0.values();
      Set<Long> set0 = longObjectHashMap0.keySet();
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry3 = longObjectHashMap1.put(1759L, abstractMap_SimpleEntry1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>(8);
      Object object0 = longObjectHashMap2.get(2066L);
      boolean boolean0 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
}"
2711,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test835()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2712,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test836()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2713,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test837()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2714,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test838()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2715,"    public int size() {
        return size;
    }","  public void test839()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2716,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test840()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
}"
2717,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test841()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
}"
2718,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test842()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
}"
2719,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test843()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
}"
2720,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test844()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
}"
2721,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test845()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
}"
2722,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test846()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
}"
2723,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test847()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
}"
2724,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test848()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
}"
2725,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test849()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
}"
2726,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test850()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
2727,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test851()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
2728,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test852()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
2729,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test853()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
2730,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test854()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
2731,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test855()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
2732,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test856()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
2733,"    public int size() {
        return size;
    }","  public void test857()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
2734,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test858()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
2735,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test859()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
2736,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test860()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
2737,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test861()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
2738,"    public int size() {
        return size;
    }","  public void test862()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
2739,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test863()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
2740,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test864()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
2741,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test865()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
2742,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test866()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
2743,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test867()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
2744,"    public int size() {
        return size;
    }","  public void test868()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
2745,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test869()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
}"
2746,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test870()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
}"
2747,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test871()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
}"
2748,"    public int size() {
        return size;
    }","  public void test872()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
}"
2749,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test873()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
}"
2750,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test874()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
}"
2751,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test875()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
}"
2752,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test876()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
}"
2753,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test877()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
}"
2754,"    public int size() {
        return size;
    }","  public void test878()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
}"
2755,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test879()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
}"
2756,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test880()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2757,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test881()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2758,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test882()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2759,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test883()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2760,"    public int size() {
        return size;
    }","  public void test884()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2761,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test885()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
2762,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test886()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
2763,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test887()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
2764,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test888()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
2765,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test889()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
2766,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test890()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
2767,"    public int size() {
        return size;
    }","  public void test891()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
2768,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test892()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
2769,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test893()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2770,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test894()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2771,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test895()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2772,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test896()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2773,"    public int size() {
        return size;
    }","  public void test897()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2774,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test898()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
2775,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test899()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
2776,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test900()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
2777,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test901()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
2778,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test902()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
2779,"    public int size() {
        return size;
    }","  public void test903()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
2780,"    public int size() {
        return size;
    }","  public void test904()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
2781,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test905()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue(long1);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
2782,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test906()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
}"
2783,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test907()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
}"
2784,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test908()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
}"
2785,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test909()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
}"
2786,"    public int size() {
        return size;
    }","  public void test910()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
}"
2787,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test911()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
}"
2788,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test912()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
}"
2789,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test913()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
}"
2790,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test914()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
}"
2791,"    public int size() {
        return size;
    }","  public void test915()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
}"
2792,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test916()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
}"
2793,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test917()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2794,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test918()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2795,"    public Set<Long> keySet() {
        return keySet;
    }","  public void test919()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2796,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test920()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2797,"    public int size() {
        return size;
    }","  public void test921()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2798,"    public int size() {
        return size;
    }","  public void test922()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2799,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test923()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
2800,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test924()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2801,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test925()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2802,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test926()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2803,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test927()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2804,"    public int size() {
        return size;
    }","  public void test928()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
2805,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test929()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2806,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test930()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2807,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test931()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2808,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test932()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2809,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test933()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2810,"    public int size() {
        return size;
    }","  public void test934()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2811,"    public int size() {
        return size;
    }","  public void test935()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2812,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test936()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2813,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test937()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2814,"    public int size() {
        return size;
    }","  public void test938()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2815,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test939()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
}"
2816,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test940()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
}"
2817,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test941()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
}"
2818,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test942()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
}"
2819,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test943()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
}"
2820,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test944()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
}"
2821,"    public int size() {
        return size;
    }","  public void test945()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
}"
2822,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test946()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
}"
2823,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test947()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
}"
2824,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test948()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
}"
2825,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test949()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
}"
2826,"    public int size() {
        return size;
    }","  public void test950()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
}"
2827,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test951()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
}"
2828,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test952()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
}"
2829,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test953()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
}"
2830,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test954()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
}"
2831,"    public int size() {
        return size;
    }","  public void test955()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
}"
2832,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test956()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
}"
2833,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test957()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
}"
2834,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test958()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2835,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test959()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2836,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test960()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2837,"    public int size() {
        return size;
    }","  public void test961()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2838,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test962()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2839,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test963()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
}"
2840,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test964()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
}"
2841,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test965()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
}"
2842,"    public int size() {
        return size;
    }","  public void test966()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
}"
2843,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test967()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
}"
2844,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test968()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
}"
2845,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test969()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
}"
2846,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test970()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
}"
2847,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test971()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
}"
2848,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test972()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
}"
2849,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test973()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
}"
2850,"    public int size() {
        return size;
    }","  public void test974()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
}"
2851,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test975()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2852,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test976()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2853,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test977()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2854,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test978()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2855,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test979()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2856,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test980()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2857,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test981()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2858,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test982()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2859,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test983()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2860,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test984()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2861,"    public int size() {
        return size;
    }","  public void test985()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2862,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test986()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2863,"    public int size() {
        return size;
    }","  public void test987()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2864,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test988()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2865,"    public int size() {
        return size;
    }","  public void test989()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
}"
2866,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test990()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
}"
2867,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test991()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
}"
2868,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test992()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
}"
2869,"    public int size() {
        return size;
    }","  public void test993()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
}"
2870,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test994()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
      boolean boolean2 = longObjectHashMap3.isEmpty();
}"
2871,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test995()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
      boolean boolean2 = longObjectHashMap3.isEmpty();
}"
2872,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test996()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
      boolean boolean2 = longObjectHashMap3.isEmpty();
}"
2873,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test997()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
      boolean boolean2 = longObjectHashMap3.isEmpty();
}"
2874,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test998()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
      boolean boolean2 = longObjectHashMap3.isEmpty();
}"
2875,"    public int size() {
        return size;
    }","  public void test999()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
      boolean boolean2 = longObjectHashMap3.isEmpty();
}"
2876,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1000()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      Set<Long> set0 = longObjectHashMap0.keySet();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean0 = longObjectHashMap1.equals(set0);
      String string1 = longObjectHashMap1.keyToString(16L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      boolean boolean1 = longObjectHashMap2.isEmpty();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<String> longObjectHashMap4 = longObjectHashMap3.remove((long) 8);
      Long long0 = new Long(1347L);
      LongObjectHashMap<String> longObjectHashMap5 = new LongObjectHashMap<String>(8);
      BiFunction<Object, Object, LongObjectHashMap<String>> biFunction0 = (BiFunction<Object, Object, LongObjectHashMap<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LongObjectHashMap<String> longObjectHashMap6 = longObjectHashMap3.merge(long0, longObjectHashMap5, biFunction0);
      longObjectHashMap3.hashCode();
      boolean boolean2 = longObjectHashMap3.isEmpty();
}"
2877,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1001()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2878,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1002()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2879,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1003()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2880,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1004()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2881,"    public int size() {
        return size;
    }","  public void test1005()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2882,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1006()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
}"
2883,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1007()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
}"
2884,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1008()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
}"
2885,"    public int size() {
        return size;
    }","  public void test1009()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
}"
2886,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1010()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
}"
2887,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1011()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
}"
2888,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1012()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
}"
2889,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1013()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
}"
2890,"    public int size() {
        return size;
    }","  public void test1014()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
}"
2891,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1015()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
}"
2892,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1016()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
}"
2893,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1017()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
}"
2894,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1018()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
}"
2895,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1019()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
}"
2896,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1020()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
}"
2897,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1021()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
}"
2898,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1022()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
}"
2899,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1023()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
}"
2900,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1024()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
}"
2901,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1025()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
}"
2902,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1026()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
}"
2903,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1027()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
}"
2904,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1028()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
}"
2905,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1029()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
}"
2906,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1030()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
}"
2907,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1031()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
}"
2908,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1032()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
}"
2909,"    public int size() {
        return size;
    }","  public void test1033()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
}"
2910,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1034()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
}"
2911,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1035()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
}"
2912,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1036()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
}"
2913,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1037()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
}"
2914,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1038()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
}"
2915,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1039()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
}"
2916,"    public int size() {
        return size;
    }","  public void test1040()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
}"
2917,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1041()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
}"
2918,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1042()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
}"
2919,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test1043()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
}"
2920,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test1044()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
}"
2921,"    public int size() {
        return size;
    }","  public void test1045()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
}"
2922,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1046()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
}"
2923,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test1047()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
}"
2924,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1048()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
}"
2925,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1049()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
}"
2926,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1050()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
}"
2927,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1051()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
}"
2928,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1052()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
}"
2929,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1053()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
}"
2930,"    public int size() {
        return size;
    }","  public void test1054()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
}"
2931,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1055()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
}"
2932,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1056()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2933,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1057()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2934,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1058()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2935,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1059()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2936,"    public int size() {
        return size;
    }","  public void test1060()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
2937,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1061()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
}"
2938,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1062()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
}"
2939,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1063()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
}"
2940,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1064()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
}"
2941,"    public int size() {
        return size;
    }","  public void test1065()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
}"
2942,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1066()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2943,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1067()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2944,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1068()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2945,"    public int size() {
        return size;
    }","  public void test1069()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
}"
2946,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test1070()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      String string0 = longObjectHashMap1.keyToString(0L);
}"
2947,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test1071()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      String string0 = longObjectHashMap1.keyToString(0L);
}"
2948,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test1072()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      String string0 = longObjectHashMap1.keyToString(0L);
}"
2949,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1073()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      String string0 = longObjectHashMap1.keyToString(0L);
}"
2950,"    public int size() {
        return size;
    }","  public void test1074()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      String string0 = longObjectHashMap1.keyToString(0L);
}"
2951,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test1075()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      longObjectHashMap0.hashCode();
      Collection<Long> collection0 = longObjectHashMap0.values();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(1127L, 1127L);
      int int1 = Long.compareUnsigned(2493L, 1127L);
      long long1 = Long.sum((-2L), 1721L);
      int int2 = Long.compareUnsigned(23L, (-852L));
      int int3 = Long.compareUnsigned(8, 1721L);
      BiFunction<Long, Object, Long> biFunction0 = (BiFunction<Long, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(biFunction0).apply(anyLong() , any());
      Long long2 = longObjectHashMap0.compute(long0, biFunction0);
      Long long3 = longObjectHashMap0.put((long) 8, (Long) null);
      boolean boolean0 = longObjectHashMap0.containsKey((long) 8);
      int int4 = longObjectHashMap0.hashCode();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleImmutableEntry<String, Object>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap2.forEach(biConsumer0);
      String string0 = longObjectHashMap1.keyToString(0L);
}"
2952,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1076()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2953,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1077()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2954,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1078()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2955,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1079()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2956,"    public int size() {
        return size;
    }","  public void test1080()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
}"
2957,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1081()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
}"
2958,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1082()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
}"
2959,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test1083()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
}"
2960,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test1084()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
}"
2961,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test1085()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
}"
2962,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1086()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
}"
2963,"    public int size() {
        return size;
    }","  public void test1087()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
}"
2964,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1088()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
}"
2965,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1089()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
}"
2966,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1090()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
}"
2967,"    public int size() {
        return size;
    }","  public void test1091()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
}"
2968,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1092()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
}"
2969,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1093()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
2970,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1094()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
2971,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1095()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
2972,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1096()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
2973,"    public int size() {
        return size;
    }","  public void test1097()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
2974,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1098()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2975,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1099()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2976,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1100()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2977,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1101()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2978,"    public int size() {
        return size;
    }","  public void test1102()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
2979,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1103()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
}"
2980,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1104()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
}"
2981,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1105()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
}"
2982,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1106()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
}"
2983,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1107()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
}"
2984,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1108()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
}"
2985,"    public int size() {
        return size;
    }","  public void test1109()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
}"
2986,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1110()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
}"
2987,"    public int size() {
        return size;
    }","  public void test1111()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      Long long0 = new Long(8);
      Long long1 = longObjectHashMap0.get((Object) long0);
      Long long2 = longObjectHashMap0.put(1L, long0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      LongObjectHashMap<Object> longObjectHashMap3 = longObjectHashMap1.put(2725L, longObjectHashMap2);
}"
2988,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1112()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2989,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1113()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2990,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1114()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2991,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1115()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2992,"    public int size() {
        return size;
    }","  public void test1116()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
2993,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1117()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
}"
2994,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1118()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
}"
2995,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1119()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
}"
2996,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1120()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
}"
2997,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1121()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
}"
2998,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1122()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
}"
2999,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1123()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
}"
3000,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1124()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
}"
3001,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1125()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
}"
3002,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1126()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
}"
3003,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1127()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
}"
3004,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1128()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
}"
3005,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1129()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
3006,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1130()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
3007,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1131()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
3008,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1132()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
3009,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1133()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
3010,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1134()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
3011,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1135()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
3012,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1136()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
3013,"    public int size() {
        return size;
    }","  public void test1137()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
}"
3014,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1138()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
3015,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1139()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
3016,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1140()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
3017,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1141()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
3018,"    public int size() {
        return size;
    }","  public void test1142()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
3019,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1143()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
}"
3020,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1144()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
3021,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1145()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
3022,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1146()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
3023,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1147()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
3024,"    public int size() {
        return size;
    }","  public void test1148()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
}"
3025,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1149()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
}"
3026,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1150()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
}"
3027,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1151()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
}"
3028,"    public int size() {
        return size;
    }","  public void test1152()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
}"
3029,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test1153()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
}"
3030,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test1154()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
}"
3031,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1155()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
}"
3032,"    public int size() {
        return size;
    }","  public void test1156()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
}"
3033,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test1157()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
}"
3034,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1158()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3035,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1159()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3036,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1160()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3037,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1161()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3038,"    public int size() {
        return size;
    }","  public void test1162()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3039,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test1163()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
3040,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test1164()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
3041,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1165()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
3042,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1166()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
3043,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1167()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
3044,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test1168()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
3045,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1169()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
3046,"    public int size() {
        return size;
    }","  public void test1170()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
3047,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test1171()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
}"
3048,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1172()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
3049,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1173()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
3050,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1174()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
3051,"    public int size() {
        return size;
    }","  public void test1175()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
3052,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1176()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
3053,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1177()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
3054,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1178()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
3055,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1179()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
3056,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1180()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
3057,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1181()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
3058,"    public int size() {
        return size;
    }","  public void test1182()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
3059,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1183()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
3060,"    public int size() {
        return size;
    }","  public void test1184()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
}"
3061,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1185()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
}"
3062,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1186()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
}"
3063,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1187()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
}"
3064,"    public int size() {
        return size;
    }","  public void test1188()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
}"
3065,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1189()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
      String string3 = longObjectHashMap1.toString();
}"
3066,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1190()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
      String string3 = longObjectHashMap1.toString();
}"
3067,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1191()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
      String string3 = longObjectHashMap1.toString();
}"
3068,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1192()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
      String string3 = longObjectHashMap1.toString();
}"
3069,"    public int size() {
        return size;
    }","  public void test1193()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
      String string3 = longObjectHashMap1.toString();
}"
3070,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1194()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long((-460L));
      Long long1 = new Long((-460L));
      Long long2 = Long.getLong("""", long1);
      long long3 = Long.remainderUnsigned((-460L), (-460L));
      long long4 = Long.sum((-460L), 8);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      String string0 = longObjectHashMap0.compute(long0, biFunction0);
      String string1 = longObjectHashMap0.toString();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string2 = longObjectHashMap0.put((-2188L), (String) null);
      longObjectHashMap0.forEach(biConsumer0);
      boolean boolean0 = longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      boolean boolean1 = longObjectHashMap1.containsValue(long1);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
      longObjectHashMap2.putAll(longObjectHashMap0);
      longObjectHashMap2.hashCode();
      String string3 = longObjectHashMap1.toString();
}"
3071,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1195()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
}"
3072,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1196()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
}"
3073,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1197()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
}"
3074,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1198()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
}"
3075,"    public int size() {
        return size;
    }","  public void test1199()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
}"
3076,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1200()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
}"
3077,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1201()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
}"
3078,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1202()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
}"
3079,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1203()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
}"
3080,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1204()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
}"
3081,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1205()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
}"
3082,"    public int size() {
        return size;
    }","  public void test1206()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
}"
3083,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1207()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
}"
3084,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1208()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
}"
3085,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1209()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
}"
3086,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1210()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
}"
3087,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1211()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
}"
3088,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1212()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
}"
3089,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1213()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
}"
3090,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1214()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
}"
3091,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1215()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
}"
3092,"    public int size() {
        return size;
    }","  public void test1216()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
}"
3093,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1217()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
}"
3094,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1218()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
}"
3095,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1219()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
}"
3096,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1220()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
}"
3097,"    public int size() {
        return size;
    }","  public void test1221()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
}"
3098,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1222()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
}"
3099,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1223()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
}"
3100,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1224()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
}"
3101,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1225()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
}"
3102,"    public int size() {
        return size;
    }","  public void test1226()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
}"
3103,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1227()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
}"
3104,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1228()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
}"
3105,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1229()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
}"
3106,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1230()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
}"
3107,"    public int size() {
        return size;
    }","  public void test1231()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
}"
3108,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1232()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
}"
3109,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1233()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
}"
3110,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1234()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
}"
3111,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1235()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
}"
3112,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1236()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
}"
3113,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1237()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
}"
3114,"    public int size() {
        return size;
    }","  public void test1238()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
}"
3115,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1239()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
}"
3116,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1240()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
}"
3117,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1241()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
}"
3118,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1242()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
}"
3119,"    public int size() {
        return size;
    }","  public void test1243()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
}"
3120,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1244()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
      Long long1 = Long.valueOf(0L);
}"
3121,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1245()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
      Long long1 = Long.valueOf(0L);
}"
3122,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1246()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
      Long long1 = Long.valueOf(0L);
}"
3123,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1247()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
      Long long1 = Long.valueOf(0L);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long1, """");
}"
3124,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1248()  throws Throwable  {
      int int0 = 1010;
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>(1010);
      Long long0 = new Long(1010);
      String string0 = longObjectHashMap0.toString();
      Integer integer0 = new Integer(8);
      Object object0 = longObjectHashMap0.putIfAbsent(long0, integer0);
      int int1 = longObjectHashMap0.hashCode();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      String string1 = longObjectHashMap1.put((long) 8, ""{}"");
      int int2 = Long.compare(1010, 3374L);
      String string2 = longObjectHashMap1.put(long0, ""next must be called before each remove."");
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap2 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>();
      Long long1 = Long.valueOf(0L);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long1, """");
}"
3125,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1249()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3126,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1250()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3127,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1251()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3128,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1252()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3129,"    public int size() {
        return size;
    }","  public void test1253()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3130,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1254()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
}"
3131,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1255()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
}"
3132,"    public Collection<V> values() {
        return new AbstractCollection<V>() {
            @Override
            public Iterator<V> iterator() {
                return new Iterator<V>() {
                    final PrimitiveIterator iter = new PrimitiveIterator();

                    @Override
                    public boolean hasNext() {
                        return iter.hasNext();
                    }

                    @Override
                    public V next() {
                        return iter.next().value();
                    }

                    @Override
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }

            @Override
            public int size() {
                return size;
            }
        };
    }","  public void test1256()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
}"
3133,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1257()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
}"
3134,"    public int size() {
        return size;
    }","  public void test1258()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
}"
3135,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1259()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
3136,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1260()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
3137,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1261()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
3138,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1262()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
3139,"    public int size() {
        return size;
    }","  public void test1263()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      Collection<Object> collection0 = longObjectHashMap0.values();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<String>>();
}"
3140,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1264()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3141,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1265()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3142,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1266()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3143,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1267()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3144,"    public int size() {
        return size;
    }","  public void test1268()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3145,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1269()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
}"
3146,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1270()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
}"
3147,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1271()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
}"
3148,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1272()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
}"
3149,"    public int size() {
        return size;
    }","  public void test1273()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
}"
3150,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1274()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
3151,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1275()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
3152,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1276()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
3153,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1277()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
3154,"    public int size() {
        return size;
    }","  public void test1278()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
3155,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1279()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
}"
3156,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1280()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
}"
3157,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1281()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
}"
3158,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1282()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
}"
3159,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1283()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
}"
3160,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1284()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
}"
3161,"    public int size() {
        return size;
    }","  public void test1285()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
}"
3162,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1286()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
}"
3163,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1287()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
}"
3164,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1288()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
}"
3165,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1289()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
}"
3166,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1290()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
}"
3167,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1291()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
}"
3168,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1292()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
}"
3169,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1293()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
}"
3170,"    public int size() {
        return size;
    }","  public void test1294()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
}"
3171,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1295()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
}"
3172,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1296()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
}"
3173,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1297()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
}"
3174,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1298()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
}"
3175,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1299()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
}"
3176,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1300()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
}"
3177,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1301()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
}"
3178,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1302()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
}"
3179,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1303()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
}"
3180,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1304()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
}"
3181,"    public int size() {
        return size;
    }","  public void test1305()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
}"
3182,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1306()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
}"
3183,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1307()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3184,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1308()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3185,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1309()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3186,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1310()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3187,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1311()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3188,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1312()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3189,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1313()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3190,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1314()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3191,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1315()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3192,"    public int size() {
        return size;
    }","  public void test1316()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3193,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1317()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3194,"    public int size() {
        return size;
    }","  public void test1318()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3195,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1319()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
}"
3196,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1320()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
}"
3197,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1321()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
}"
3198,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1322()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
}"
3199,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1323()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
}"
3200,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1324()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
}"
3201,"    public int size() {
        return size;
    }","  public void test1325()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
}"
3202,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1326()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
      Long long2 = new Long(31L);
}"
3203,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1327()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
      Long long2 = new Long(31L);
}"
3204,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1328()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
      Long long2 = new Long(31L);
}"
3205,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1329()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
      Long long2 = new Long(31L);
}"
3206,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1330()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap0.put(31L, (Integer) 8);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      Integer integer1 = longObjectHashMap1.put(long0, (Integer) 8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long1 = new Long(31L);
      Integer integer2 = longObjectHashMap1.putIfAbsent(long1, (Integer) null);
      boolean boolean0 = longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
      Long long2 = new Long(31L);
      long long3 = Long.min(88L, 31L);
}"
3207,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1331()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
}"
3208,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1332()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
}"
3209,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1333()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
}"
3210,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1334()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
}"
3211,"    public int size() {
        return size;
    }","  public void test1335()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
}"
3212,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1336()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
      boolean boolean0 = longObjectHashMap0.isEmpty();
}"
3213,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1337()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
      boolean boolean0 = longObjectHashMap0.isEmpty();
}"
3214,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1338()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
      boolean boolean0 = longObjectHashMap0.isEmpty();
}"
3215,"    public int size() {
        return size;
    }","  public void test1339()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
      boolean boolean0 = longObjectHashMap0.isEmpty();
}"
3216,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1340()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>(504);
      boolean boolean0 = longObjectHashMap0.isEmpty();
}"
3217,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1341()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
}"
3218,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1342()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
}"
3219,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1343()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
}"
3220,"    public int size() {
        return size;
    }","  public void test1344()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
}"
3221,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1345()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
}"
3222,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1346()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3223,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1347()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3224,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1348()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3225,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1349()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3226,"    public int size() {
        return size;
    }","  public void test1350()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3227,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1351()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
}"
3228,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1352()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
}"
3229,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1353()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
}"
3230,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1354()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
}"
3231,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1355()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
}"
3232,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1356()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
}"
3233,"    public int size() {
        return size;
    }","  public void test1357()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
}"
3234,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1358()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
}"
3235,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1359()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
}"
3236,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1360()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
}"
3237,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test1361()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
}"
3238,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test1362()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
}"
3239,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test1363()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
}"
3240,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1364()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
}"
3241,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1365()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
}"
3242,"    public int size() {
        return size;
    }","  public void test1366()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
}"
3243,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test1367()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
}"
3244,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1368()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
      String string0 = longObjectHashMap1.toString();
}"
3245,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1369()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
      String string0 = longObjectHashMap1.toString();
}"
3246,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1370()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
      String string0 = longObjectHashMap1.toString();
}"
3247,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1371()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
      String string0 = longObjectHashMap1.toString();
}"
3248,"    public int size() {
        return size;
    }","  public void test1372()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
      String string0 = longObjectHashMap1.toString();
}"
3249,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1373()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>(559);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      Integer integer0 = longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long(8);
      Object object0 = longObjectHashMap1.get((Object) long1);
      String string0 = longObjectHashMap1.toString();
}"
3250,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1374()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3251,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1375()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3252,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1376()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3253,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1377()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3254,"    public int size() {
        return size;
    }","  public void test1378()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
}"
3255,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test1379()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
}"
3256,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test1380()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
}"
3257,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test1381()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
}"
3258,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1382()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
}"
3259,"    public int size() {
        return size;
    }","  public void test1383()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
}"
3260,"    protected String keyToString(long key) {
        return Long.toString(key);
    }","  public void test1384()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
}"
3261,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1385()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3262,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1386()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3263,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1387()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3264,"    public int size() {
        return size;
    }","  public void test1388()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3265,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1389()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3266,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1390()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
}"
3267,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1391()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
}"
3268,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1392()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
}"
3269,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1393()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
}"
3270,"    public int size() {
        return size;
    }","  public void test1394()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
}"
3271,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1395()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
}"
3272,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1396()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
}"
3273,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1397()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
}"
3274,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1398()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
}"
3275,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1399()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
}"
3276,"    public int size() {
        return size;
    }","  public void test1400()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
}"
3277,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1401()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
}"
3278,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test1402()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
      Iterable<LongObjectMap.PrimitiveEntry<Long>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<Long>>)longObjectHashMap2.entries();
}"
3279,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test1403()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
      Iterable<LongObjectMap.PrimitiveEntry<Long>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<Long>>)longObjectHashMap2.entries();
}"
3280,"    public Iterable<PrimitiveEntry<V>> entries() {
        return entries;
    }","  public void test1404()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
      Iterable<LongObjectMap.PrimitiveEntry<Long>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<Long>>)longObjectHashMap2.entries();
}"
3281,"    public int size() {
        return size;
    }","  public void test1405()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
      Iterable<LongObjectMap.PrimitiveEntry<Long>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<Long>>)longObjectHashMap2.entries();
}"
3282,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1406()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      String string0 = longObjectHashMap0.keyToString(0L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      String string1 = longObjectHashMap1.toString();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(704);
      Iterable<LongObjectMap.PrimitiveEntry<Long>> iterable0 = (Iterable<LongObjectMap.PrimitiveEntry<Long>>)longObjectHashMap2.entries();
}"
3283,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1407()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3284,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1408()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3285,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1409()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3286,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1410()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3287,"    public int size() {
        return size;
    }","  public void test1411()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
}"
3288,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1412()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
}"
3289,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1413()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
}"
3290,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1414()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
}"
3291,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1415()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
}"
3292,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1416()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
}"
3293,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1417()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
}"
3294,"    public int size() {
        return size;
    }","  public void test1418()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
}"
3295,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1419()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
}"
3296,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1420()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
}"
3297,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1421()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
}"
3298,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1422()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
}"
3299,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1423()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
}"
3300,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1424()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
}"
3301,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1425()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
}"
3302,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1426()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
}"
3303,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1427()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
}"
3304,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1428()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
}"
3305,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1429()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
}"
3306,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1430()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
}"
3307,"    public int size() {
        return size;
    }","  public void test1431()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
}"
3308,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1432()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
}"
3309,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1433()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
}"
3310,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1434()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
}"
3311,"    public int size() {
        return size;
    }","  public void test1435()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
}"
3312,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1436()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
}"
3313,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1437()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
}"
3314,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1438()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
}"
3315,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1439()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
}"
3316,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1440()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
}"
3317,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1441()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
}"
3318,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1442()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
}"
3319,"    public int size() {
        return size;
    }","  public void test1443()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
}"
3320,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1444()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
}"
3321,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1445()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
}"
3322,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1446()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
}"
3323,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1447()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
}"
3324,"    public int size() {
        return size;
    }","  public void test1448()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
}"
3325,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1449()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
}"
3326,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1450()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
}"
3327,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1451()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
}"
3328,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1452()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
}"
3329,"    public int size() {
        return size;
    }","  public void test1453()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
}"
3330,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1454()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
}"
3331,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1455()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      longObjectHashMap1.putAll(longObjectHashMap2);
}"
3332,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1456()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      longObjectHashMap1.putAll(longObjectHashMap2);
}"
3333,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1457()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      longObjectHashMap1.putAll(longObjectHashMap2);
}"
3334,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1458()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      longObjectHashMap1.putAll(longObjectHashMap2);
}"
3335,"    public int size() {
        return size;
    }","  public void test1459()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      longObjectHashMap1.putAll(longObjectHashMap2);
}"
3336,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1460()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      longObjectHashMap1.putAll(longObjectHashMap2);
}"
3337,"    public int size() {
        return size;
    }","  public void test1461()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      longObjectHashMap1.putAll(longObjectHashMap2);
}"
3338,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1462()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      int int0 = Long.compareUnsigned(8, 1L);
      boolean boolean0 = longObjectHashMap0.remove((Object) long0, (Object) long0);
      Long long1 = new Long(12L);
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap0.putIfAbsent(long1, integer0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(biFunction0).apply(any() , any());
      longObjectHashMap0.replaceAll(biFunction0);
      Integer integer2 = longObjectHashMap0.remove(12L);
      LongObjectHashMap<Comparable<String>> longObjectHashMap1 = new LongObjectHashMap<Comparable<String>>(1);
      LongObjectHashMap<String> longObjectHashMap2 = new LongObjectHashMap<String>();
      longObjectHashMap1.putAll(longObjectHashMap2);
}"
3339,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1463()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(362, 1.0F);
}"
3340,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1464()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(362, 1.0F);
}"
3341,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1465()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(362, 1.0F);
}"
3342,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1466()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(362, 1.0F);
}"
3343,"    public int size() {
        return size;
    }","  public void test1467()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(362, 1.0F);
}"
3344,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1468()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3345,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1469()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3346,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1470()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3347,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1471()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3348,"    public int size() {
        return size;
    }","  public void test1472()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3349,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1473()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3350,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1474()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3351,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1475()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3352,"    public int size() {
        return size;
    }","  public void test1476()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3353,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1477()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3354,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1478()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
3355,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1479()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
3356,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1480()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
3357,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1481()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
3358,"    public int size() {
        return size;
    }","  public void test1482()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
}"
3359,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1483()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
3360,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1484()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
3361,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1485()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
3362,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1486()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
3363,"    public int size() {
        return size;
    }","  public void test1487()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
}"
3364,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1488()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
3365,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1489()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
3366,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1490()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
3367,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1491()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
3368,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1492()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
3369,"    public int size() {
        return size;
    }","  public void test1493()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
}"
3370,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1494()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3371,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1495()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3372,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1496()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3373,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1497()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3374,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1498()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3375,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1499()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3376,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1500()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3377,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1501()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3378,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1502()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3379,"    public int size() {
        return size;
    }","  public void test1503()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3380,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1504()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3381,"    public int size() {
        return size;
    }","  public void test1505()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3382,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1506()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
}"
3383,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1507()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
}"
3384,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1508()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
}"
3385,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1509()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
}"
3386,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1510()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
}"
3387,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1511()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
3388,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1512()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
3389,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1513()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
3390,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1514()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
3391,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1515()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
3392,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1516()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
3393,"    public int size() {
        return size;
    }","  public void test1517()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
}"
3394,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1518()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
3395,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1519()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
3396,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1520()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
3397,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1521()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
3398,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1522()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
3399,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1523()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
3400,"    public int size() {
        return size;
    }","  public void test1524()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
}"
3401,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1525()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
}"
3402,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1526()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
}"
3403,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1527()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
}"
3404,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1528()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
}"
3405,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1529()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
}"
3406,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1530()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
}"
3407,"    public int size() {
        return size;
    }","  public void test1531()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
}"
3408,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1532()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
}"
3409,"    public int size() {
        return size;
    }","  public void test1533()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
      int int0 = longObjectHashMap3.size();
}"
3410,"    public int size() {
        return size;
    }","  public void test1534()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
      int int0 = longObjectHashMap3.size();
}"
3411,"    public int size() {
        return size;
    }","  public void test1535()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
      int int0 = longObjectHashMap3.size();
}"
3412,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1536()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
      int int0 = longObjectHashMap3.size();
}"
3413,"    public int size() {
        return size;
    }","  public void test1537()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = longObjectHashMap1.put((long) 8, (Integer) 8);
      Integer integer1 = longObjectHashMap1.put(328L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer2 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      Integer integer3 = longObjectHashMap1.merge(long0, integer2, biFunction0);
      Integer integer4 = longObjectHashMap1.replace(long0, (Integer) 8);
      Integer integer5 = new Integer(8);
      LongObjectHashMap<Comparable<Object>> longObjectHashMap3 = new LongObjectHashMap<Comparable<Object>>(19);
      int int0 = longObjectHashMap3.size();
}"
3414,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1538()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3415,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1539()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3416,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1540()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3417,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1541()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3418,"    public int size() {
        return size;
    }","  public void test1542()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
}"
3419,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test1543()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
3420,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test1544()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
3421,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1545()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
3422,"    public int size() {
        return size;
    }","  public void test1546()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
3423,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test1547()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
}"
3424,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1548()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3425,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1549()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3426,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1550()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3427,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1551()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3428,"    public int size() {
        return size;
    }","  public void test1552()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
}"
3429,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1553()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
}"
3430,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1554()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
}"
3431,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1555()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
}"
3432,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1556()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
}"
3433,"    public V put(long key, V value) {
        int startIndex = hashIndex(key);
        int index = startIndex;

        for (; ; ) {
            if (values[index] == null) {
                // Found empty slot, use it.
                keys[index] = key;
                values[index] = toInternal(value);
                growSize();
                return null;
            }
            if (keys[index] == key) {
                // Found existing entry with this key, just replace the value.
                V previousValue = values[index];
                values[index] = toInternal(value);
                return toExternal(previousValue);
            }

            // Conflict, keep probing ...
            if ((index = probeNext(index)) == startIndex) {
                // Can only happen if the map was full at MAX_ARRAY_SIZE and couldn't grow.
                throw new IllegalStateException(""Unable to insert"");
            }
        }
    }","  public void test1557()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
}"
3434,"    public int size() {
        return size;
    }","  public void test1558()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
}"
3435,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1559()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
}"
3436,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1560()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
}"
3437,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1561()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
}"
3438,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1562()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
}"
3439,"    public int size() {
        return size;
    }","  public void test1563()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
}"
3440,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1564()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
}"
3441,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1565()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
}"
3442,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1566()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3443,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1567()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3444,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1568()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3445,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1569()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3446,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1570()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3447,"    public int size() {
        return size;
    }","  public void test1571()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3448,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1572()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
}"
3449,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1573()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
}"
3450,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1574()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
}"
3451,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1575()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
}"
3452,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1576()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3453,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1577()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3454,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1578()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3455,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1579()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3456,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1580()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3457,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1581()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3458,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1582()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3459,"    public int size() {
        return size;
    }","  public void test1583()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3460,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1584()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3461,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1585()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
}"
3462,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1586()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3463,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1587()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3464,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1588()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3465,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1589()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3466,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1590()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3467,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1591()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3468,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1592()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3469,"    public int size() {
        return size;
    }","  public void test1593()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3470,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1594()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3471,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1595()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
}"
3472,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1596()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
}"
3473,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1597()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
}"
3474,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1598()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
}"
3475,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1599()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
}"
3476,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1600()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
}"
3477,"    public int size() {
        return size;
    }","  public void test1601()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
}"
3478,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1602()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
}"
3479,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1603()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
}"
3480,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1604()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
}"
3481,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1605()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
}"
3482,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1606()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
}"
3483,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1607()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
3484,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1608()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
3485,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1609()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
3486,"    public int size() {
        return size;
    }","  public void test1610()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
3487,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1611()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
}"
3488,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1612()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Integer> longObjectHashMap4 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3489,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1613()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Integer> longObjectHashMap4 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3490,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1614()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Integer> longObjectHashMap4 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3491,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1615()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Integer> longObjectHashMap4 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3492,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1616()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Integer> longObjectHashMap4 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3493,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1617()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Integer> longObjectHashMap4 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3494,"    public int size() {
        return size;
    }","  public void test1618()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Integer> longObjectHashMap4 = new LongObjectHashMap<Integer>(8, 0.5F);
}"
3495,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1619()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      boolean boolean0 = longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      long long1 = 31L;
      Integer integer0 = new Integer(8);
      Integer integer1 = longObjectHashMap1.put(31L, integer0);
      String string0 = longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long2 = new Long(1927L);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = longObjectHashMap1.merge(long2, integer0, biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = longObjectHashMap1.replace(long2, (Integer) 8, (Integer) 8);
      longObjectHashMap2.forEach(biConsumer0);
      Long long3 = new Long(31L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<Object>>();
      LongObjectHashMap<Integer> longObjectHashMap4 = new LongObjectHashMap<Integer>(8, 0.5F);
      Object object0 = new Object();
}"
3496,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1620()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.keySet();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>(40320);
      // Undeclared exception!
      longObjectHashMap1.hashCode();
  }"
3497,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1621()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      longObjectHashMap0.containsKey(1L);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(8);
      longObjectHashMap2.putIfAbsent(long0, (Integer) null);
      longObjectHashMap2.equals(longObjectHashMap1);
      Long long1 = new Long(31L);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      longObjectHashMap1.replace(long1, (Integer) 8);
      // Undeclared exception!
      try { 
        longObjectHashMap1.remove((Object) longObjectHashMap2);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3498,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1622()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(4045);
      Long long0 = new Long(8);
      boolean boolean0 = longObjectHashMap0.equals(long0);
}"
3499,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test1623()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      longObjectHashMap1.put(319L, (Integer) 8);
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(31L);
      Integer integer0 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, integer0, biFunction0);
      Integer integer1 = new Integer(8);
      longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      // Undeclared exception!
      try { 
        longObjectHashMap0.containsKey((Object) 8);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Long
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3500,"    public V get(long key) {
        int index = indexOf(key);
        return index == -1 ? null : toExternal(values[index]);
    }","  public void test1624()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long((-4245L));
      Long.compareUnsigned(0L, (-4245L));
      Long.min((-1748L), 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      longObjectHashMap1.remove(1935L);
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>();
      // Undeclared exception!
      try { 
        longObjectHashMap2.get((Object) longObjectHashMap1);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3501,"    public int size() {
        return size;
    }","  public void test1625()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>(841);
      Set<Long> set0 = longObjectHashMap0.keySet();
}"
3502,"    public int hashCode() {
        // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
        // array, which may have different lengths for two maps of same size(), so the
        // capacity cannot be used as input for hashing but the size can.
        int hash = size;
        for (long key : keys) {
            // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
            // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
            // or the devastatingly bad memory locality of visiting value objects.
            // Also, it's important to use a hash function that does not depend on the ordering
            // of terms, only their values; since the map is an unordered collection and
            // entries can end up in different positions in different maps that have the same
            // elements, but with different history of puts/removes, due to conflicts.
            hash ^= hashCode(key);
        }
        return hash;
    }","  public void test1626()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      longObjectHashMap0.hashCode();
  }"
3503,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1627()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put((long) 8, (Integer) 8);
      longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(8);
      BiFunction<Long, Integer, Integer> biFunction0 = (BiFunction<Long, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3171);
      longObjectHashMap1.putIfAbsent(long0, integer0);
      longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
      Long long1 = new Long(8);
      Long.min(88L, 1L);
      // Undeclared exception!
      try { 
        longObjectHashMap0.remove((Object) longObjectHashMap1);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3504,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1628()  throws Throwable  {
      LongObjectHashMap<Object> longObjectHashMap0 = new LongObjectHashMap<Object>();
      longObjectHashMap0.toString();
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap1 = null;
      try {
        longObjectHashMap1 = new LongObjectHashMap<LongObjectHashMap<Object>>(8, 1362.3615F);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3505,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1629()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      longObjectHashMap1.putIfAbsent(long0, (Integer) null);
      longObjectHashMap1.equals(longObjectHashMap0);
}"
3506,"    public int size() {
        return size;
    }","  public void test1630()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Long long0 = new Long(31L);
      longObjectHashMap1.putIfAbsent(long0, (Integer) null);
      longObjectHashMap1.equals(longObjectHashMap0);
      Long long1 = new Long(31L);
      Long.min(31L, 31L);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(242);
      longObjectHashMap2.entries();
      LongObjectHashMap<Object> longObjectHashMap3 = new LongObjectHashMap<Object>();
}"
3507,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1631()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.clear();
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
      longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.containsValue(longObjectHashMap1);
      LongObjectHashMap<Long> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Long>(8, (-4003.7878F));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3508,"    public V remove(long key) {
        int index = indexOf(key);
        if (index == -1) {
            return null;
        }

        V prev = values[index];
        removeAt(index);
        return toExternal(prev);
    }","  public void test1632()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      long long0 = (-2316L);
      longObjectHashMap0.containsKey((-2316L));
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Integer integer0 = new Integer(8);
      longObjectHashMap1.put(0L, integer0);
      longObjectHashMap1.toString();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8, 0.5F);
      Integer integer1 = new Integer(8);
      Long long1 = new Long(0L);
      longObjectHashMap1.replace(long1, (Integer) 8);
      // Undeclared exception!
      try { 
        longObjectHashMap1.remove((Object) longObjectHashMap2);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.springside.modules.utils.collection.type.primitive.LongObjectHashMap cannot be cast to java.lang.Long
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3509,"    public void putAll(Map<? extends Long, ? extends V> sourceMap) {
        if (sourceMap instanceof LongObjectHashMap) {
            // Optimization - iterate through the arrays.
            @SuppressWarnings(""unchecked"")
            LongObjectHashMap<V> source = (LongObjectHashMap<V>) sourceMap;
            for (int i = 0; i < source.values.length; ++i) {
                V sourceValue = source.values[i];
                if (sourceValue != null) {
                    put(source.keys[i], sourceValue);
                }
            }
            return;
        }

        // Otherwise, just add each entry.
        for (Entry<? extends Long, ? extends V> entry : sourceMap.entrySet()) {
            put(entry.getKey(), entry.getValue());
        }
    }","  public void test1633()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<String> longObjectHashMap1 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      longObjectHashMap1.putIfAbsent(long0, ""/@`<:"");
      longObjectHashMap0.putAll(longObjectHashMap1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.getKey();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry"", e);
      }
  }"
3510,"    public int size() {
        return size;
    }","  public void test1634()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Long long0 = new Long(8);
      hashMap0.put(long0, (Integer) 8);
      longObjectHashMap0.putAll(hashMap0);
}"
3511,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1635()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(8);
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.getValue();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry"", e);
      }
  }"
3512,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test1636()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Integer, Integer>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Integer, Integer>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.forEach(biConsumer0);
      Long long0 = new Long(0L);
      boolean boolean0 = longObjectHashMap0.containsKey((Object) long0);
}"
3513,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1637()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(1);
      longObjectHashMap1.clear();
}"
3514,"    public boolean containsKey(long key) {
        return indexOf(key) >= 0;
    }","  public void test1638()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<String>>();
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(1);
      longObjectHashMap1.clear();
      LongObjectHashMap<Integer> longObjectHashMap2 = new LongObjectHashMap<Integer>(8);
      boolean boolean0 = longObjectHashMap2.containsKey(1305L);
}"
3515,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1639()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(24);
      Long long0 = new Long(1945L);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>();
      longObjectHashMap0.put(long0, longObjectHashMap1);
      Long long1 = new Long(1945L);
      longObjectHashMap0.containsKey((Object) long1);
      LongObjectHashMap<Long> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Long>(2145616061, 0.5F);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2145616061) not representable as an int
         //
         verifyException(""com.google.common.math.IntMath"", e);
      }
  }"
3516,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1640()  throws Throwable  {
      LongObjectHashMap<Long> longObjectHashMap0 = new LongObjectHashMap<Long>();
      int int0 = 0;
      Long long0 = new Long(8);
      Long long1 = new Long(125);
      longObjectHashMap0.putIfAbsent(long0, long1);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(0);
      longObjectHashMap_MapEntry0.getKey();
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, String>> longObjectHashMap1 = null;
      try {
        longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, String>>(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3517,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1641()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Long>> longObjectHashMap0 = null;
      try {
        longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Long>>((-736), (-736));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3518,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1642()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Object, Object>>(1450);
      LongObjectHashMap.MapEntry longObjectHashMap_MapEntry0 = longObjectHashMap0.new MapEntry(1450);
      // Undeclared exception!
      try { 
        longObjectHashMap_MapEntry0.setValue((Object) null);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // The map entry has been removed
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap$MapEntry"", e);
      }
  }"
3519,"    public int size() {
        return size;
    }","  public void test1643()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put((long) 8, (Integer) 8);
      longObjectHashMap1.put(313L, (Integer) 8);
      longObjectHashMap1.toString();
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer0 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, integer0, biFunction0);
      longObjectHashMap1.replace(long0, (Integer) 8);
      boolean boolean0 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
3520,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1644()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put((long) 8, (Integer) 8);
      longObjectHashMap1.put(313L, (Integer) 8);
      longObjectHashMap1.toString();
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(8);
      Integer integer0 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, integer0, biFunction0);
      longObjectHashMap1.replace(long0, (Integer) 8);
      boolean boolean0 = longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
}"
3521,"    public String toString() {
        if (isEmpty()) {
            return ""{}"";
        }
        StringBuilder sb = new StringBuilder(4 * size);
        sb.append('{');
        boolean first = true;
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                if (!first) {
                    sb.append("", "");
                }
                sb.append(keyToString(keys[i])).append('=').append(value == this ? ""(this Map)"" :
                        toExternal(value));
                first = false;
            }
        }
        return sb.append('}').toString();
    }","  public void test1645()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
}"
3522,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1646()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>(8);
      longObjectHashMap3.remove((long) 8);
      longObjectHashMap3.hashCode();
}"
3523,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1647()  throws Throwable  {
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap0 = new LongObjectHashMap<LongObjectHashMap<Object>>(1, 1);
      String string0 = longObjectHashMap0.toString();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>();
      LongObjectHashMap<LongObjectHashMap<String>> longObjectHashMap3 = new LongObjectHashMap<LongObjectHashMap<String>>(8);
      longObjectHashMap3.remove((long) 8);
      longObjectHashMap3.hashCode();
      boolean boolean0 = longObjectHashMap0.equals(""{}"");
}"
3524,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1648()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put((long) 8, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(8);
      longObjectHashMap1.putIfAbsent(long0, (Integer) 8);
      Long long1 = new Long((-224L));
      Integer integer0 = new Integer(8);
      longObjectHashMap1.equals(longObjectHashMap0);
      longObjectHashMap0.forEach(biConsumer0);
      Long long2 = new Long(8);
      longObjectHashMap0.putAll(longObjectHashMap1);
      Integer integer1 = new Integer(8);
}"
3525,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1649()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      longObjectHashMap0.computeIfPresent(long0, biFunction0);
      longObjectHashMap0.clear();
      Long long1 = new Long(8);
      BiFunction<Object, String, String> biFunction1 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyString());
      longObjectHashMap0.put(long1, ""-IwC1DV:xUb"");
      Long.getLong(""%pKL0k?"");
      Long.sum(0L, 8);
      longObjectHashMap0.replaceAll(biFunction1);
      longObjectHashMap0.put((-1L), ""L0D|I.!{IJY\""j9lc,f"");
      BiFunction<Long, Object, String> biFunction2 = (BiFunction<Long, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(anyLong() , any());
      longObjectHashMap0.compute(long1, biFunction2);
      longObjectHashMap0.size();
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(1);
      longObjectHashMap0.equals(longObjectHashMap1);
      longObjectHashMap0.entries();
      longObjectHashMap0.entries();
      longObjectHashMap0.entries();
}"
3526,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1650()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      Long.getLong(""org.springside.modules.utils.number.MathUtil"");
      longObjectHashMap0.put((-1L), ""org.springside.modules.utils.number.MathUtil"");
      LongObjectHashMap<Long> longObjectHashMap1 = new LongObjectHashMap<Long>(8);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      hashMap0.put(long0, long0);
      longObjectHashMap1.putAll(hashMap0);
      longObjectHashMap0.equals(longObjectHashMap1);
      longObjectHashMap0.entries();
}"
3527,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1651()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put(31L, (Integer) 8);
      longObjectHashMap1.put((long) 8, (Integer) null);
      longObjectHashMap1.put(319L, (Integer) 8);
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(31L);
      Integer integer0 = new Integer(8);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, integer0, biFunction0);
      Integer integer1 = new Integer(8);
      longObjectHashMap1.replace(long0, (Integer) 8, (Integer) null);
      LongObjectHashMap<Long> longObjectHashMap2 = null;
      try {
        longObjectHashMap2 = new LongObjectHashMap<Long>((-1702), 3649.625F);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3528,"    public int size() {
        return size;
    }","  public void test1652()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      longObjectHashMap1.put(319L, (Integer) 8);
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(31L);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, (Integer) 8, biFunction0);
}"
3529,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1653()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      longObjectHashMap1.put(31L, (Integer) 8);
      longObjectHashMap0.toString();
      longObjectHashMap1.put(319L, (Integer) 8);
      longObjectHashMap1.equals(longObjectHashMap1);
      Long long0 = new Long(31L);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(any() , anyInt());
      longObjectHashMap1.merge(long0, (Integer) 8, biFunction0);
      LongObjectHashMap<Long> longObjectHashMap2 = new LongObjectHashMap<Long>(9964);
}"
3530,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1654()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap1 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      Long.compareUnsigned(0L, 8);
      AbstractMap.SimpleEntry<Long, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, String>(long0, ""l5QhK"");
      longObjectHashMap1.put((-1748L), abstractMap_SimpleEntry0);
      longObjectHashMap0.values();
      longObjectHashMap0.keySet();
      longObjectHashMap1.put(1759L, abstractMap_SimpleEntry0);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
      LongObjectHashMap<Integer> longObjectHashMap3 = null;
      try {
        longObjectHashMap3 = new LongObjectHashMap<Integer>((-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // x (-1) must be > 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3531,"    public LongObjectHashMap() {
        this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);
    }","  public void test1655()  throws Throwable  {
      LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>> longObjectHashMap0 = new LongObjectHashMap<AbstractMap.SimpleEntry<Long, String>>(1);
      Long long0 = new Long(8);
      longObjectHashMap0.putIfAbsent(long0, (AbstractMap.SimpleEntry<Long, String>) null);
      longObjectHashMap0.put((-1748L), (AbstractMap.SimpleEntry<Long, String>) null);
      longObjectHashMap0.put(1759L, (AbstractMap.SimpleEntry<Long, String>) null);
      LongObjectHashMap<Object> longObjectHashMap1 = new LongObjectHashMap<Object>(8);
      longObjectHashMap1.get(2061L);
      LongObjectHashMap<LongObjectHashMap<Object>> longObjectHashMap2 = new LongObjectHashMap<LongObjectHashMap<Object>>(2587);
      LongObjectHashMap<Comparable<String>> longObjectHashMap3 = null;
      try {
        longObjectHashMap3 = new LongObjectHashMap<Comparable<String>>(4448, (-2032.64F));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // loadFactor must be > 0 and <= 1
         //
         verifyException(""org.springside.modules.utils.collection.type.primitive.LongObjectHashMap"", e);
      }
  }"
3532,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1656()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      Long.getLong("""", long0);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      longObjectHashMap0.compute(long0, biFunction0);
      longObjectHashMap0.remove((long) long0);
      longObjectHashMap0.put((-2191L), (String) null);
      longObjectHashMap0.containsValue((Object) null);
}"
3533,"    public boolean containsValue(Object value) {
        @SuppressWarnings(""unchecked"")
        V v1 = toInternal((V) value);
        for (V v2 : values) {
            // The map supports null values; this will be matched as NULL_VALUE.equals(NULL_VALUE).
            if (v2 != null && v2.equals(v1)) {
                return true;
            }
        }
        return false;
    }","  public void test1657()  throws Throwable  {
      LongObjectHashMap<String> longObjectHashMap0 = new LongObjectHashMap<String>();
      Long long0 = new Long(8);
      Long.getLong("""", long0);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(biFunction0).apply(any() , anyString());
      longObjectHashMap0.compute(long0, biFunction0);
      longObjectHashMap0.remove((long) long0);
      longObjectHashMap0.put((-2191L), (String) null);
      longObjectHashMap0.containsValue((Object) null);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8);
      Integer integer0 = new Integer(8);
      BiFunction<Integer, Integer, Integer> biFunction1 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      longObjectHashMap1.merge(long0, integer0, biFunction1);
      BiFunction<Long, Integer, Integer> biFunction2 = (BiFunction<Long, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = longObjectHashMap1.containsValue(long0);
}"
3534,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof LongObjectMap)) {
            return false;
        }
        @SuppressWarnings(""rawtypes"")
        LongObjectMap other = (LongObjectMap) obj;
        if (size != other.size()) {
            return false;
        }
        for (int i = 0; i < values.length; ++i) {
            V value = values[i];
            if (value != null) {
                long key = keys[i];
                Object otherValue = other.get(key);
                if (value == NULL_VALUE) {
                    if (otherValue != null) {
                        return false;
                    }
                } else if (!value.equals(otherValue)) {
                    return false;
                }
            }
        }
        return true;
    }","  public void test1658()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put(31L, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>(8, 0.5F);
      Long long0 = new Long(8);
      longObjectHashMap1.putIfAbsent(long0, (Integer) null);
      longObjectHashMap1.equals(longObjectHashMap0);
      Long long1 = new Long(31L);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
  }"
3535,"    public boolean isEmpty() {
        return size == 0;
    }","  public void test1659()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put((long) 8, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      longObjectHashMap1.putIfAbsent(long0, (Integer) null);
      longObjectHashMap1.equals(longObjectHashMap0);
}"
3536,"    public int size() {
        return size;
    }","  public void test1660()  throws Throwable  {
      LongObjectHashMap<Integer> longObjectHashMap0 = new LongObjectHashMap<Integer>();
      longObjectHashMap0.put((long) 8, (Integer) 8);
      LongObjectHashMap<Integer> longObjectHashMap1 = new LongObjectHashMap<Integer>();
      Long long0 = new Long(8);
      longObjectHashMap1.putIfAbsent(long0, (Integer) null);
      longObjectHashMap1.equals(longObjectHashMap0);
      Long long1 = new Long(8);
      LongObjectHashMap<Object> longObjectHashMap2 = new LongObjectHashMap<Object>();
}"
3537,"    public static byte[] aesEncrypt(byte[] input, byte[] key) {
        return aes(input, key, Cipher.ENCRYPT_MODE);
    }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[9];
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Invalid AES key length: 9 bytes
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil"", e);
      }
  }"
3538,"    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {
        byte[] actual = hmacSha1(input, key);
        return Arrays.equals(expected, actual);
    }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      boolean boolean0 = CryptoUtil.isMacValid(byteArray0, (byte[]) null, byteArray0);
}"
3539,"    public static byte[] hmacSha1(byte[] input, byte[] key) {
        try {
            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1_ALG);
            Mac mac = Mac.getInstance(HMACSHA1_ALG);
            mac.init(secretKey);
            return mac.doFinal(input);
        } catch (GeneralSecurityException e) {
            throw ExceptionUtil.unchecked(e);
        }
    }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      byte[] byteArray1 = CryptoUtil.generateHmacSha1Key();
      CryptoUtil.hmacSha1(byteArray1, byteArray0);
}"
3540,"    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {
        byte[] actual = hmacSha1(input, key);
        return Arrays.equals(expected, actual);
    }","  public void test3()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      byte[] byteArray1 = CryptoUtil.hmacSha1(byteArray0, byteArray0);
      boolean boolean0 = CryptoUtil.isMacValid(byteArray1, byteArray0, byteArray0);
}"
3541,"    public static String aesDecrypt(byte[] input, byte[] key) {
        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);
        return new String(decryptResult);
    }","  public void test4()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      byte[] byteArray1 = new byte[0];
      String string0 = CryptoUtil.aesDecrypt(byteArray1, byteArray0, byteArray0);
}"
3542,"    public static String aesDecrypt(byte[] input, byte[] key) {
        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);
        return new String(decryptResult);
    }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      byte[] byteArray1 = new byte[0];
      String string0 = CryptoUtil.aesDecrypt(byteArray1, byteArray0);
}"
3543,"    public static boolean isMacValid(byte[] expected, byte[] input, byte[] key) {
        byte[] actual = hmacSha1(input, key);
        return Arrays.equals(expected, actual);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.isMacValid((byte[]) null, (byte[]) null, (byte[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException(""javax.crypto.spec.SecretKeySpec"", e);
      }
  }"
3544,"    public static byte[] hmacSha1(byte[] input, byte[] key) {
        try {
            SecretKey secretKey = new SecretKeySpec(key, HMACSHA1_ALG);
            Mac mac = Mac.getInstance(HMACSHA1_ALG);
            mac.init(secretKey);
            return mac.doFinal(input);
        } catch (GeneralSecurityException e) {
            throw ExceptionUtil.unchecked(e);
        }
    }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.hmacSha1(byteArray0, byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException(""javax.crypto.spec.SecretKeySpec"", e);
      }
  }"
3545,"    public static byte[] generateAesKey() {
        return generateAesKey(DEFAULT_AES_KEYSIZE);
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.generateAesKey((-3051));
        fail(""Expecting exception: InvalidParameterException"");
      } catch(InvalidParameterException e) {
      }
  }"
3546,"    public static byte[] aesEncrypt(byte[] input, byte[] key) {
        return aes(input, key, Cipher.ENCRYPT_MODE);
    }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      byte[] byteArray1 = CryptoUtil.hmacSha1(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray1, byteArray0, byteArray1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Wrong IV length: must be 16 bytes long
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil"", e);
      }
  }"
3547,"    public static byte[] aesEncrypt(byte[] input, byte[] key) {
        return aes(input, key, Cipher.ENCRYPT_MODE);
    }","  public void test10()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray0, (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3548,"    public static byte[] aesEncrypt(byte[] input, byte[] key) {
        return aes(input, key, Cipher.ENCRYPT_MODE);
    }","  public void test11()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateHmacSha1Key();
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt(byteArray0, byteArray1, byteArray1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException(""javax.crypto.spec.SecretKeySpec"", e);
      }
  }"
3549,"    public static byte[] aesEncrypt(byte[] input, byte[] key) {
        return aes(input, key, Cipher.ENCRYPT_MODE);
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CryptoUtil.aesEncrypt((byte[]) null, (byte[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException(""javax.crypto.spec.SecretKeySpec"", e);
      }
  }"
3550,"    public static String aesDecrypt(byte[] input, byte[] key) {
        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);
        return new String(decryptResult);
    }","  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt((byte[]) null, byteArray0, (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3551,"    public static String aesDecrypt(byte[] input, byte[] key) {
        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);
        return new String(decryptResult);
    }","  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, byteArray1, byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException(""javax.crypto.spec.SecretKeySpec"", e);
      }
  }"
3552,"    public static String aesDecrypt(byte[] input, byte[] key) {
        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);
        return new String(decryptResult);
    }","  public void test15()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey();
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, (byte[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException(""javax.crypto.spec.SecretKeySpec"", e);
      }
  }"
3553,"    public static String aesDecrypt(byte[] input, byte[] key) {
        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);
        return new String(decryptResult);
    }","  public void test16()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, byteArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Given final block not properly padded. Such issues can arise if a bad key is used during decryption.
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil"", e);
      }
  }"
3554,"    public static byte[] generateAesKey() {
        return generateAesKey(DEFAULT_AES_KEYSIZE);
    }","  public void test17()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateAesKey(128);
}"
3555,,"  public void test18()  throws Throwable  {
      CryptoUtil cryptoUtil0 = new CryptoUtil();
  }"
3556,"    public static String aesDecrypt(byte[] input, byte[] key) {
        byte[] decryptResult = aes(input, key, Cipher.DECRYPT_MODE);
        return new String(decryptResult);
    }","  public void test19()  throws Throwable  {
      byte[] byteArray0 = CryptoUtil.generateIV();
      // Undeclared exception!
      try { 
        CryptoUtil.aesDecrypt(byteArray0, byteArray0, byteArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Given final block not properly padded. Such issues can arise if a bad key is used during decryption.
         //
         verifyException(""org.springside.modules.utils.base.ExceptionUtil"", e);
      }
  }"
3557,"    public static int gcd(int a, int b) {
        return IntMath.gcd(a, b);
    }","  public void test0()  throws Throwable  {
      int int0 = MathUtil.gcd(3268, 0);
}"
3558,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test1()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      long long0 = MathUtil.sqrt((long) 1, roundingMode0);
}"
3559,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test2()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      int int0 = MathUtil.sqrt(0, roundingMode0);
}"
3560,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test3()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = MathUtil.sqrt(869, roundingMode0);
}"
3561,"    public static int pow(int b, int k) {
        return IntMath.pow(b, k);
    }","  public void test4()  throws Throwable  {
      long long0 = MathUtil.pow(0L, 6);
}"
3562,"    public static int pow(int b, int k) {
        return IntMath.pow(b, k);
    }","  public void test5()  throws Throwable  {
      long long0 = MathUtil.pow((-4006L), 1);
}"
3563,"    public static int pow(int b, int k) {
        return IntMath.pow(b, k);
    }","  public void test6()  throws Throwable  {
      int int0 = MathUtil.pow(58, 58);
}"
3564,"    public static int pow(int b, int k) {
        return IntMath.pow(b, k);
    }","  public void test7()  throws Throwable  {
      int int0 = MathUtil.pow(0, 0);
}"
3565,"    public static int modByPowerOfTwo(int value, int mod) {
        return value & mod - 1;
    }","  public void test8()  throws Throwable  {
      int int0 = MathUtil.modByPowerOfTwo(749, 6);
}"
3566,"    public static int modByPowerOfTwo(int value, int mod) {
        return value & mod - 1;
    }","  public void test9()  throws Throwable  {
      int int0 = MathUtil.modByPowerOfTwo((-143), (-143));
}"
3567,"    public static int mod(int x, int m) {
        return IntMath.mod(x, m);
    }","  public void test10()  throws Throwable  {
      long long0 = MathUtil.mod(1896L, 2429L);
}"
3568,"    public static int mod(int x, int m) {
        return IntMath.mod(x, m);
    }","  public void test11()  throws Throwable  {
      long long0 = MathUtil.mod(100000000000L, 892);
}"
3569,"    public static int mod(int x, int m) {
        return IntMath.mod(x, m);
    }","  public void test12()  throws Throwable  {
      int int0 = MathUtil.mod(3345, 25);
}"
3570,"    public static boolean isPowerOfTwo(int value) {
        return IntMath.isPowerOfTwo(value);
    }","  public void test13()  throws Throwable  {
      boolean boolean0 = MathUtil.isPowerOfTwo(1L);
}"
3571,"    public static boolean isPowerOfTwo(int value) {
        return IntMath.isPowerOfTwo(value);
    }","  public void test14()  throws Throwable  {
      boolean boolean0 = MathUtil.isPowerOfTwo(40);
}"
3572,"    public static int gcd(int a, int b) {
        return IntMath.gcd(a, b);
    }","  public void test15()  throws Throwable  {
      long long0 = MathUtil.gcd(2090L, 2090L);
}"
3573,"    public static int gcd(int a, int b) {
        return IntMath.gcd(a, b);
    }","  public void test16()  throws Throwable  {
      int int0 = MathUtil.gcd(0, 0);
}"
3574,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test17()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      long long0 = MathUtil.divide(0L, 1L, roundingMode0);
}"
3575,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test18()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      long long0 = MathUtil.divide(2283L, 2283L, roundingMode0);
}"
3576,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test19()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      long long0 = MathUtil.divide(3717L, (-538L), roundingMode0);
}"
3577,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test20()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      int int0 = MathUtil.divide(5, (-702), roundingMode0);
}"
3578,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test21()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      int int0 = MathUtil.divide((-3), 117, roundingMode0);
}"
3579,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.sqrt(2083L, (RoundingMode) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.math.IntMath"", e);
      }
  }"
3580,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test23()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      // Undeclared exception!
      try { 
        MathUtil.sqrt((long) (-3), roundingMode0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // x (-3) must be >= 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3581,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test24()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        MathUtil.sqrt((long) 2248, roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3582,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test25()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      // Undeclared exception!
      try { 
        MathUtil.sqrt((-1072), roundingMode0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // x (-1072) must be >= 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3583,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test26()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        MathUtil.sqrt(3, roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3584,"    public static int previousPowerOfTwo(int value) {
        return IntMath.floorPowerOfTwo(value);
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.previousPowerOfTwo(0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // x (0) must be > 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3585,"    public static int previousPowerOfTwo(int value) {
        return IntMath.floorPowerOfTwo(value);
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.previousPowerOfTwo((-2523));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // x (-2523) must be > 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3586,"    public static int pow(int b, int k) {
        return IntMath.pow(b, k);
    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.pow((long) 12, (-1766153935));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // exponent (-1766153935) must be >= 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3587,"    public static int pow(int b, int k) {
        return IntMath.pow(b, k);
    }","  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.pow(5040, (-3674));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // exponent (-3674) must be >= 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3588,"    public static int nextPowerOfTwo(int value) {
        return IntMath.ceilingPowerOfTwo(value);
    }","  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.nextPowerOfTwo((-4006L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // x (-4006) must be > 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3589,"    public static int nextPowerOfTwo(int value) {
        return IntMath.ceilingPowerOfTwo(value);
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.nextPowerOfTwo(7753736572610479205L);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(7753736572610479205) is not representable as a long
         //
         verifyException(""com.google.common.math.LongMath"", e);
      }
  }"
3590,"    public static int nextPowerOfTwo(int value) {
        return IntMath.ceilingPowerOfTwo(value);
    }","  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.nextPowerOfTwo((-456));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // x (-456) must be > 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3591,"    public static int nextPowerOfTwo(int value) {
        return IntMath.ceilingPowerOfTwo(value);
    }","  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.nextPowerOfTwo(Integer.MAX_VALUE);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // ceilingPowerOfTwo(2147483647) not representable as an int
         //
         verifyException(""com.google.common.math.IntMath"", e);
      }
  }"
3592,"    public static int mod(int x, int m) {
        return IntMath.mod(x, m);
    }","  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.mod((-911L), (-911L));
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Modulus must be positive
         //
         verifyException(""com.google.common.math.LongMath"", e);
      }
  }"
3593,"    public static int mod(int x, int m) {
        return IntMath.mod(x, m);
    }","  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.mod(0L, (-2394));
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Modulus must be positive
         //
         verifyException(""com.google.common.math.LongMath"", e);
      }
  }"
3594,"    public static int mod(int x, int m) {
        return IntMath.mod(x, m);
    }","  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.mod(0, 0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Modulus 0 must be > 0
         //
         verifyException(""com.google.common.math.IntMath"", e);
      }
  }"
3595,"    public static int gcd(int a, int b) {
        return IntMath.gcd(a, b);
    }","  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.gcd((-1557L), (-2678L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // a (-1557) must be >= 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3596,"    public static int gcd(int a, int b) {
        return IntMath.gcd(a, b);
    }","  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.gcd((-615), (-615));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // a (-615) must be >= 0
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3597,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test40()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      // Undeclared exception!
      try { 
        MathUtil.divide((long) 1, 0L, roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""com.google.common.math.LongMath"", e);
      }
  }"
3598,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test41()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        MathUtil.divide(2783L, (-1039L), roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3599,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.divide(0, 869, (RoundingMode) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3600,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test43()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      // Undeclared exception!
      try { 
        MathUtil.divide(3412, 211, roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // mode was UNNECESSARY, but rounding was necessary
         //
         verifyException(""com.google.common.math.MathPreconditions"", e);
      }
  }"
3601,"    public static boolean isPowerOfTwo(int value) {
        return IntMath.isPowerOfTwo(value);
    }","  public void test44()  throws Throwable  {
      boolean boolean0 = MathUtil.isPowerOfTwo(1);
}"
3602,"    public static int previousPowerOfTwo(int value) {
        return IntMath.floorPowerOfTwo(value);
    }","  public void test45()  throws Throwable  {
      long long0 = MathUtil.previousPowerOfTwo((long) 1);
}"
3603,"    public static int previousPowerOfTwo(int value) {
        return IntMath.floorPowerOfTwo(value);
    }","  public void test46()  throws Throwable  {
      int int0 = MathUtil.previousPowerOfTwo(1);
}"
3604,"    public static int nextPowerOfTwo(int value) {
        return IntMath.ceilingPowerOfTwo(value);
    }","  public void test47()  throws Throwable  {
      int int0 = MathUtil.nextPowerOfTwo(24);
}"
3605,"    public static int nextPowerOfTwo(int value) {
        return IntMath.ceilingPowerOfTwo(value);
    }","  public void test48()  throws Throwable  {
      long long0 = MathUtil.nextPowerOfTwo((long) 1);
}"
3606,"    public static int modByPowerOfTwo(int value, int mod) {
        return value & mod - 1;
    }","  public void test49()  throws Throwable  {
      int int0 = MathUtil.modByPowerOfTwo(5382, 1);
}"
3607,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.sqrt(5, (RoundingMode) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.math.IntMath"", e);
      }
  }"
3608,"    public static int gcd(int a, int b) {
        return IntMath.gcd(a, b);
    }","  public void test51()  throws Throwable  {
      long long0 = MathUtil.gcd(0L, 0L);
}"
3609,"    public static int mod(int x, int m) {
        return IntMath.mod(x, m);
    }","  public void test52()  throws Throwable  {
      long long0 = MathUtil.mod((long) 1845, 1845);
}"
3610,"    public static int mod(int x, int m) {
        return IntMath.mod(x, m);
    }","  public void test53()  throws Throwable  {
      int int0 = MathUtil.mod(1, 1);
}"
3611,"    public static int mod(int x, int m) {
        return IntMath.mod(x, m);
    }","  public void test54()  throws Throwable  {
      long long0 = MathUtil.mod((long) 1, (long) 1);
}"
3612,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test55()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      int int0 = MathUtil.divide((-4858), (-4858), roundingMode0);
}"
3613,"    public static int pow(int b, int k) {
        return IntMath.pow(b, k);
    }","  public void test56()  throws Throwable  {
      int int0 = MathUtil.pow((-1491), 12);
}"
3614,"    public static int pow(int b, int k) {
        return IntMath.pow(b, k);
    }","  public void test57()  throws Throwable  {
      long long0 = MathUtil.pow(1L, 1);
}"
3615,"    public static int divide(int p, int q, RoundingMode mode) {
        return IntMath.divide(p, q, mode);
    }","  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtil.divide((long) 2926, (long) 2926, (RoundingMode) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3616,,"  public void test59()  throws Throwable  {
      MathUtil mathUtil0 = new MathUtil();
  }"
3617,"    public static boolean isPowerOfTwo(int value) {
        return IntMath.isPowerOfTwo(value);
    }","  public void test60()  throws Throwable  {
      boolean boolean0 = MathUtil.isPowerOfTwo((long) 0);
}"
3618,"    public static int sqrt(int x, RoundingMode mode) {
        return IntMath.sqrt(x, mode);
    }","  public void test61()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      long long0 = MathUtil.sqrt(0L, roundingMode0);
}"
3619,"    public static long convertSizeBytes(String size) {
        Matcher matcher = NUMBER_AND_UNIT.matcher(size);

        if (matcher.matches()) {
            long number = Long.parseLong(matcher.group(1));

            if (matcher.group(2) != null) {
                char unit = matcher.group(2).toLowerCase().charAt(0);

                switch (unit) {
                    case 'b':
                        return number;
                    case 'k':
                        return number * 1024;
                    case 'm':
                        return number * 1024 * 1024;
                    case 'g':
                        return number * 1024 * 1024 * 1024;
                    case 't':
                        return number * 1024 * 1024 * 1024 * 1024;
                    default:
                        throw new IllegalArgumentException(""unknown size unit :"" + unit);
                }
            } else {
                return number;
            }
        } else {
            throw new IllegalArgumentException(""malformed size string: "" + size);
        }
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnitConverter.convertSizeBytes((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3620,"    public static long convertDurationMillis(String duration) {
        Matcher matcher = NUMBER_AND_UNIT.matcher(duration);

        if (matcher.matches()) {
            long number = Long.parseLong(matcher.group(1));

            if (matcher.group(2) != null) {
                String unitStr = matcher.group(2).toLowerCase();
                char unit = unitStr.charAt(0);

                switch (unit) {
                    case 's':
                        return number * 1000;
                    case 'm':
                        // if it's an m, could be 'minutes' or 'millis'. default minutes
                        if (unitStr.length() >= 2 && unitStr.charAt(1) == 's') {
                            return number;
                        }

                        return number * 60 * 1000;
                    case 'h':
                        return number * 60 * 60 * 1000;
                    case 'd':
                        return number * 60 * 60 * 24 * 1000;
                    default:
                        throw new IllegalArgumentException(""unknown time unit :"" + unit);
                }
            } else {
                return number;
            }
        } else {
            throw new IllegalArgumentException(""malformed duration string: "" + duration);
        }
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnitConverter.convertDurationMillis((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3621,"    public static long convertSizeBytes(String size) {
        Matcher matcher = NUMBER_AND_UNIT.matcher(size);

        if (matcher.matches()) {
            long number = Long.parseLong(matcher.group(1));

            if (matcher.group(2) != null) {
                char unit = matcher.group(2).toLowerCase().charAt(0);

                switch (unit) {
                    case 'b':
                        return number;
                    case 'k':
                        return number * 1024;
                    case 'm':
                        return number * 1024 * 1024;
                    case 'g':
                        return number * 1024 * 1024 * 1024;
                    case 't':
                        return number * 1024 * 1024 * 1024 * 1024;
                    default:
                        throw new IllegalArgumentException(""unknown size unit :"" + unit);
                }
            } else {
                return number;
            }
        } else {
            throw new IllegalArgumentException(""malformed size string: "" + size);
        }
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnitConverter.convertSizeBytes(""=0!8rCMt"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // malformed size string: =0!8rCMt
         //
         verifyException(""org.springside.modules.utils.number.UnitConverter"", e);
      }
  }"
3622,"    public static long convertDurationMillis(String duration) {
        Matcher matcher = NUMBER_AND_UNIT.matcher(duration);

        if (matcher.matches()) {
            long number = Long.parseLong(matcher.group(1));

            if (matcher.group(2) != null) {
                String unitStr = matcher.group(2).toLowerCase();
                char unit = unitStr.charAt(0);

                switch (unit) {
                    case 's':
                        return number * 1000;
                    case 'm':
                        // if it's an m, could be 'minutes' or 'millis'. default minutes
                        if (unitStr.length() >= 2 && unitStr.charAt(1) == 's') {
                            return number;
                        }

                        return number * 60 * 1000;
                    case 'h':
                        return number * 60 * 60 * 1000;
                    case 'd':
                        return number * 60 * 60 * 24 * 1000;
                    default:
                        throw new IllegalArgumentException(""unknown time unit :"" + unit);
                }
            } else {
                return number;
            }
        } else {
            throw new IllegalArgumentException(""malformed duration string: "" + duration);
        }
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        UnitConverter.convertDurationMillis(""{!=iPT"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // malformed duration string: {!=iPT
         //
         verifyException(""org.springside.modules.utils.number.UnitConverter"", e);
      }
  }"
3623,,"  public void test4()  throws Throwable  {
      UnitConverter unitConverter0 = new UnitConverter();
  }"
3624,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test0()  throws Throwable  {
      RandomUtil.nextInt(3809, 3809);
      // Undeclared exception!
      RandomUtil.randomLetterRandomLength(55296, 56191);
  }"
3625,"    public static String randomStringRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, true, null, threadLocalRandom());
    }","  public void test1()  throws Throwable  {
      int int0 = 0;
      RandomUtil.randomAsciiRandomLength(0, 0);
      RandomUtil.nextDouble((double) 0);
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextInt(random0);
      // Undeclared exception!
      RandomUtil.randomStringRandomLength(0, 1297702057);
  }"
3626,"    public static String randomAsciiRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 32, 127, false, false, null,
                threadLocalRandom());
    }","  public void test2()  throws Throwable  {
      Random random0 = null;
      int int0 = 3;
      // Undeclared exception!
      try { 
        RandomUtil.randomAsciiRandomLength((Random) null, 3, 3);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3627,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test3()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextDouble((Random) secureRandom0);
      RandomUtil.nextLong();
      RandomUtil.nextInt((Random) secureRandom0);
      RandomUtil.nextInt();
      RandomUtil.nextLong();
      RandomUtil.nextLong((Random) secureRandom0, 2711823761200807602L);
      RandomUtil.nextLong(2711823761200807602L, 2711823761200807602L);
      RandomUtil randomUtil0 = new RandomUtil();
      // Undeclared exception!
      RandomUtil.randomStringFixLength((Random) secureRandom0, 563521819);
  }"
3628,"    public static String randomLetterFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, false, null, threadLocalRandom());
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.randomLetterFixLength((Random) null, (-2112));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -2112 is less than 0.
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3629,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test5()  throws Throwable  {
      RandomUtil.secureRandom();
      RandomUtil.nextLong(967L);
      int int0 = 329;
      RandomUtil.randomAsciiFixLength(329);
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.nextLong();
      // Undeclared exception!
      try { 
        RandomUtil.nextDouble((Random) null, (double) 522L, (double) 967L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3630,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test6()  throws Throwable  {
      RandomUtil.nextDouble(1.0);
      RandomUtil.nextLong(0L);
  }"
3631,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test7()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      RandomUtil.nextLong((Random) mockRandom0);
  }"
3632,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test8()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.randomLetterFixLength(random0, 3256);
      // Undeclared exception!
      try { 
        RandomUtil.nextInt((-262));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException(""java.util.concurrent.ThreadLocalRandom"", e);
      }
  }"
3633,"    public static String randomStringRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, true, null, threadLocalRandom());
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      RandomUtil.randomStringRandomLength(1034, 56192);
  }"
3634,"    public static String randomAsciiRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 32, 127, false, false, null,
                threadLocalRandom());
    }","  public void test10()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      int int0 = 56319;
      // Undeclared exception!
      RandomUtil.randomAsciiRandomLength((Random) secureRandom0, 56319, 56319);
  }"
3635,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test11()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      int int0 = 55296;
      RandomUtil.nextInt(55296);
      RandomUtil.nextLong();
      RandomUtil.nextLong(random0, 1311L);
      RandomUtil.nextLong(random0);
      Random random1 = null;
      // Undeclared exception!
      try { 
        RandomUtil.randomLetterRandomLength((Random) null, 55296, 55296);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3636,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test12()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextDouble(random0);
      int int0 = 55296;
      // Undeclared exception!
      RandomUtil.randomStringFixLength(55296);
  }"
3637,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test13()  throws Throwable  {
      int int0 = 1435;
      int int1 = 1860;
      RandomUtil.randomAsciiFixLength(1860);
      RandomUtil.threadLocalRandom();
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextLong((Random) secureRandom0, (long) 1860, (long) 1860);
      RandomUtil.nextLong();
      // Undeclared exception!
      try { 
        RandomUtil.nextLong((Random) null, (long) 1860);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3638,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test14()  throws Throwable  {
      RandomUtil.nextInt();
      MockRandom mockRandom0 = new MockRandom();
      RandomUtil.nextInt((Random) mockRandom0, 2117569878);
  }"
3639,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test15()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextLong(random0, 196L);
      // Undeclared exception!
      RandomUtil.randomLetterRandomLength(random0, 659, 2146996137);
  }"
3640,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test16()  throws Throwable  {
      RandomUtil.randomLetterFixLength(0);
      // Undeclared exception!
      try { 
        RandomUtil.nextDouble(3104.1188297073, (-847.08926));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3641,"    public static String randomStringRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, true, null, threadLocalRandom());
    }","  public void test17()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextDouble(random0);
      int int0 = 55296;
      // Undeclared exception!
      RandomUtil.randomStringRandomLength(random0, 55296, 55296);
  }"
3642,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.randomStringFixLength((Random) null, 1146);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3643,"    public static String randomAsciiFixLength(int length) {
        return RandomStringUtils.random(length, 32, 127, false, false, null, threadLocalRandom());
    }","  public void test19()  throws Throwable  {
      RandomUtil.nextLong(1649L);
      RandomUtil.randomStringRandomLength(2, 2);
      // Undeclared exception!
      try { 
        RandomUtil.randomAsciiFixLength((Random) null, 1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3644,"    public static String randomAsciiFixLength(int length) {
        return RandomStringUtils.random(length, 32, 127, false, false, null, threadLocalRandom());
    }","  public void test20()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextInt(random0);
      // Undeclared exception!
      RandomUtil.randomAsciiFixLength(1715279914);
  }"
3645,"    public static String randomLetterFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, false, null, threadLocalRandom());
    }","  public void test21()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextInt(random0);
      // Undeclared exception!
      RandomUtil.randomLetterFixLength(710991742);
  }"
3646,"    public static String randomAsciiRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 32, 127, false, false, null,
                threadLocalRandom());
    }","  public void test22()  throws Throwable  {
      RandomUtil.nextLong();
      MockRandom mockRandom0 = new MockRandom((-1L));
      RandomUtil.nextInt((Random) mockRandom0);
      mockRandom0.longs();
      RandomUtil.nextInt((Random) mockRandom0, 55296, 55296);
      RandomUtil.nextDouble((double) 0, (double) 0);
      // Undeclared exception!
      RandomUtil.randomAsciiRandomLength(2002, 55296);
  }"
3647,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test23()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextLong(random0, 0L);
      RandomUtil.nextLong(0L, 0L);
      // Undeclared exception!
      try { 
        RandomUtil.nextLong((Random) null, 0L, 4404L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3648,"    public static String randomLetterFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, false, null, threadLocalRandom());
    }","  public void test24()  throws Throwable  {
      int int0 = 128;
      RandomUtil.randomStringRandomLength(128, 128);
      // Undeclared exception!
      RandomUtil.randomLetterFixLength(56191);
  }"
3649,"    public static String randomAsciiRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 32, 127, false, false, null,
                threadLocalRandom());
    }","  public void test25()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextLong(random0, 0L);
      RandomUtil.nextLong(0L, 0L);
      RandomUtil.nextLong(random0, 0L, 4404L);
      RandomUtil.nextInt();
      // Undeclared exception!
      RandomUtil.randomAsciiRandomLength(1870379656, 1870379656);
  }"
3650,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test26()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.randomLetterRandomLength(519, 519);
      RandomUtil.nextLong();
      RandomUtil.nextLong((Random) secureRandom0, (long) 519, (long) 519);
      RandomUtil.nextLong();
      RandomUtil.randomStringFixLength((Random) secureRandom0, 519);
      // Undeclared exception!
      try { 
        RandomUtil.nextDouble((Random) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3651,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test27()  throws Throwable  {
      RandomUtil.nextLong(1649L);
      RandomUtil.nextDouble();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      mockRandom0.nextInt();
      mockRandom0.nextLong();
      RandomUtil.nextLong((Random) mockRandom0, 1361L, 1361L);
      RandomUtil.nextLong((Random) mockRandom0);
      // Undeclared exception!
      RandomUtil.randomLetterRandomLength((Random) mockRandom0, 127, 2809);
  }"
3652,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      RandomUtil.randomStringFixLength(2140253063);
  }"
3653,"    public static String randomLetterFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, false, null, threadLocalRandom());
    }","  public void test29()  throws Throwable  {
      RandomUtil randomUtil0 = new RandomUtil();
      MockRandom mockRandom0 = new MockRandom((-1L));
      // Undeclared exception!
      RandomUtil.randomLetterFixLength((Random) mockRandom0, 2146274479);
  }"
3654,"    public static String randomAsciiFixLength(int length) {
        return RandomStringUtils.random(length, 32, 127, false, false, null, threadLocalRandom());
    }","  public void test30()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.randomAsciiFixLength(random0, 0);
  }"
3655,"    public static String randomAsciiFixLength(int length) {
        return RandomStringUtils.random(length, 32, 127, false, false, null, threadLocalRandom());
    }","  public void test31()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomUtil.randomAsciiFixLength(random0, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3656,"    public static String randomStringRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, true, null, threadLocalRandom());
    }","  public void test32()  throws Throwable  {
      Random random0 = null;
      int int0 = 1435;
      int int1 = 1860;
      // Undeclared exception!
      try { 
        RandomUtil.randomStringRandomLength((Random) null, 1435, 1860);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3657,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test33()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.ints(0L);
      mockRandom0.longs(772L);
      mockRandom0.nextBoolean();
      RandomUtil.nextDouble((Random) mockRandom0);
      RandomUtil.nextInt((Random) mockRandom0);
      RandomUtil.nextDouble((Random) mockRandom0, (double) 0L);
      // Undeclared exception!
      try { 
        RandomUtil.nextLong((long) 1, (-2595L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3658,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test34()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextInt(random0);
      // Undeclared exception!
      RandomUtil.randomLetterRandomLength(1320257437, 1320257437);
  }"
3659,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test35()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextDouble(random0);
      RandomUtil.threadLocalRandom();
      RandomUtil.randomAsciiRandomLength(random0, 5, 5);
      RandomUtil.nextLong();
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      // Undeclared exception!
      try { 
        RandomUtil.nextDouble((Random) secureRandom0, 1.5225382634107136E308, (double) 6263472997288439031L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3660,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test36()  throws Throwable  {
      RandomUtil.randomAsciiRandomLength(0, 0);
      RandomUtil.nextLong();
      RandomUtil.nextInt();
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        RandomUtil.nextInt((Random) mockRandom0, 0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3661,"    public static String randomLetterFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, false, null, threadLocalRandom());
    }","  public void test37()  throws Throwable  {
      Random random0 = null;
      int int0 = 4185;
      // Undeclared exception!
      try { 
        RandomUtil.randomLetterFixLength((Random) null, 4185);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3662,"    public static String randomLetterFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, false, null, threadLocalRandom());
    }","  public void test38()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextLong(random0, 2903L, 2903L);
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.nextLong(random0, 894L);
      RandomUtil.secureRandom();
      RandomUtil.nextDouble(random0, (double) 2903L);
      int int0 = 4956;
      RandomUtil.randomAsciiFixLength(4956);
      // Undeclared exception!
      RandomUtil.randomLetterFixLength(random0, 4956);
  }"
3663,"    public static String randomAsciiRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 32, 127, false, false, null,
                threadLocalRandom());
    }","  public void test39()  throws Throwable  {
      RandomUtil.nextLong(0L, 160L);
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.randomStringRandomLength((Random) secureRandom0, 329, 329);
      RandomUtil.nextInt(1328);
      // Undeclared exception!
      try { 
        RandomUtil.randomAsciiRandomLength(1, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3664,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test40()  throws Throwable  {
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.nextDouble((Random) null, 0.0);
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextLong((Random) secureRandom0, 453L, 453L);
      RandomUtil.randomLetterRandomLength(0, 32);
      RandomUtil.nextLong((Random) secureRandom0, (long) 0, (long) 0);
      RandomUtil.randomAsciiFixLength(32);
      RandomUtil.randomLetterFixLength((Random) secureRandom0, 0);
      // Undeclared exception!
      try { 
        RandomUtil.nextInt((Random) null, 32);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3665,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.nextLong((Random) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3666,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test42()  throws Throwable  {
      RandomUtil.nextDouble();
      Random random0 = null;
      // Undeclared exception!
      try { 
        RandomUtil.nextInt((Random) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3667,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.nextDouble((-819.321022352));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3668,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test44()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      int int0 = (-1034);
      // Undeclared exception!
      try { 
        RandomUtil.nextInt((Random) secureRandom0, 775, (-1034));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3669,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test45()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      int int0 = 1105;
      // Undeclared exception!
      try { 
        RandomUtil.randomLetterRandomLength((Random) secureRandom0, 1105, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3670,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test46()  throws Throwable  {
      RandomUtil.threadLocalRandom();
      // Undeclared exception!
      try { 
        RandomUtil.nextLong((-1L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3671,"    public static String randomAsciiFixLength(int length) {
        return RandomStringUtils.random(length, 32, 127, false, false, null, threadLocalRandom());
    }","  public void test47()  throws Throwable  {
      int int0 = 0;
      RandomUtil.randomStringFixLength(0);
      RandomUtil.nextInt(0, 0);
      Random random0 = RandomUtil.threadLocalRandom();
      int int1 = 2593;
      RandomUtil.randomAsciiRandomLength(random0, 1, 2593);
      int int2 = (-3988);
      // Undeclared exception!
      try { 
        RandomUtil.randomAsciiFixLength((-3988));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -3988 is less than 0.
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3672,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test48()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.randomAsciiRandomLength((Random) secureRandom0, 0, 0);
      RandomUtil.nextInt((Random) secureRandom0, 0, 0);
      RandomUtil.nextInt((Random) secureRandom0);
      RandomUtil.randomStringFixLength((Random) secureRandom0, 0);
  }"
3673,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test49()  throws Throwable  {
      RandomUtil.nextInt(0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      RandomUtil.randomStringFixLength((Random) mockRandom0, 0);
  }"
3674,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test50()  throws Throwable  {
      int int0 = (-252);
      // Undeclared exception!
      try { 
        RandomUtil.nextInt((-252), (-252));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // min (-252) must be >= 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
3675,"    public static String randomStringRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, true, null, threadLocalRandom());
    }","  public void test51()  throws Throwable  {
      RandomUtil.nextInt();
      RandomUtil.nextDouble((double) 1204794308, (double) 1204794308);
      int int0 = (-590);
      // Undeclared exception!
      try { 
        RandomUtil.randomStringRandomLength(1204794308, (-590));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3676,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test52()  throws Throwable  {
      RandomUtil.nextLong(2697L, 2697L);
      MockRandom mockRandom0 = new MockRandom((-1975L));
      // Undeclared exception!
      try { 
        RandomUtil.nextLong((Random) mockRandom0, (-320L), (-3395L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3677,"    public static String randomStringRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, true, null, threadLocalRandom());
    }","  public void test53()  throws Throwable  {
      RandomUtil.nextDouble(0.0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      mockRandom0.nextBytes(byteArray0);
      int int0 = (-404);
      // Undeclared exception!
      try { 
        RandomUtil.randomStringRandomLength((Random) mockRandom0, (-404), (-404));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // min (-404) must be >= 0
         //
         verifyException(""org.springside.modules.utils.base.MoreValidate"", e);
      }
  }"
3678,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-1);
      mockRandom0.setSeed((-219L));
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)104;
      byte byte0 = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        RandomUtil.randomStringFixLength((Random) mockRandom0, (-1720));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1720 is less than 0.
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3679,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test55()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1666);
      // Undeclared exception!
      try { 
        RandomUtil.randomLetterRandomLength(0, (-1666));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3680,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test56()  throws Throwable  {
      int int0 = 2607;
      RandomUtil.nextInt(2607, 2607);
      Random random0 = null;
      // Undeclared exception!
      try { 
        RandomUtil.nextDouble((Random) null, (double) 2607);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3681,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test57()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try { 
        RandomUtil.randomStringFixLength((-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3682,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test58()  throws Throwable  {
      RandomUtil.randomStringFixLength(2445);
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextInt(random0, 2445, 2445);
      RandomUtil.nextDouble();
      RandomUtil.nextLong(random0);
      org.evosuite.runtime.Random.setNextRandom(2445);
      RandomUtil.randomLetterRandomLength(random0, 33, 33);
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextLong((Random) secureRandom0, 1L, 1088193035458566341L);
      RandomUtil.nextDouble(random0);
  }"
3683,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test59()  throws Throwable  {
      RandomUtil.randomStringFixLength(1918);
  }"
3684,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test60()  throws Throwable  {
      RandomUtil.randomLetterRandomLength(0, 0);
  }"
3685,"    public static Random threadLocalRandom() {
        return java.util.concurrent.ThreadLocalRandom.current();
    }","  public void test61()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.randomStringRandomLength((Random) secureRandom0, 0, 0);
      RandomUtil.nextDouble((Random) secureRandom0, (double) 0, 0.0);
      RandomUtil.threadLocalRandom();
  }"
3686,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test62()  throws Throwable  {
      RandomUtil.nextInt(1473, 1473);
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextLong((Random) secureRandom0, 1L, (long) 1473);
      RandomUtil.randomLetterFixLength((Random) secureRandom0, 1);
      RandomUtil.randomStringRandomLength(1473, 1473);
      RandomUtil.randomLetterFixLength(1);
      RandomUtil.nextDouble((Random) secureRandom0, (double) 1473);
      RandomUtil.nextDouble(399.08084382068);
  }"
3687,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test63()  throws Throwable  {
      RandomUtil.nextLong();
      RandomUtil.nextLong(3442719305266370418L, 3442719305266370418L);
      RandomUtil.nextInt(127, 127);
      Random random0 = RandomUtil.threadLocalRandom();
      // Undeclared exception!
      try { 
        RandomUtil.nextDouble(random0, (-3430.68));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3688,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test64()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextInt((Random) secureRandom0);
      RandomUtil.nextDouble();
      RandomUtil.nextLong();
      // Undeclared exception!
      try { 
        RandomUtil.nextInt((Random) secureRandom0, (-1225));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // bound must be positive
         //
         verifyException(""java.util.Random"", e);
      }
  }"
3689,"    public static String randomLetterFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, false, null, threadLocalRandom());
    }","  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.randomLetterFixLength((-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -1 is less than 0.
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3690,"    public static String randomAsciiFixLength(int length) {
        return RandomStringUtils.random(length, 32, 127, false, false, null, threadLocalRandom());
    }","  public void test66()  throws Throwable  {
      RandomUtil.randomLetterFixLength(4626);
      RandomUtil.nextInt();
      // Undeclared exception!
      RandomUtil.randomAsciiFixLength(4626);
  }"
3691,"    public static String randomAsciiRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 32, 127, false, false, null,
                threadLocalRandom());
    }","  public void test67()  throws Throwable  {
      RandomUtil.nextInt();
      RandomUtil.threadLocalRandom();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomUtil.randomAsciiRandomLength((Random) mockRandom0, 1680996266, 1680996266);
  }"
3692,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test68()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      RandomUtil.randomLetterRandomLength((Random) mockRandom0, 0, 0);
  }"
3693,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomUtil.randomStringFixLength((-750));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Requested random string length -750 is less than 0.
         //
         verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
      }
  }"
3694,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test70()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextDouble((Random) secureRandom0, 0.0);
  }"
3695,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test71()  throws Throwable  {
      int int0 = 566;
      RandomUtil.randomAsciiRandomLength(566, 566);
      RandomUtil.secureRandom();
      int int1 = 0;
      // Undeclared exception!
      try { 
        RandomUtil.nextInt((Random) null, 0, 2768);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.RandomUtil"", e);
      }
  }"
3696,"    public static String randomAsciiRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 32, 127, false, false, null,
                threadLocalRandom());
    }","  public void test72()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextLong(967L);
      RandomUtil.randomAsciiFixLength(329);
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.nextLong();
      RandomUtil.nextDouble((Random) secureRandom0, (double) 463L, 921.179631);
      RandomUtil.randomLetterFixLength(329);
      RandomUtil.nextInt((Random) secureRandom0, 329);
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.randomStringFixLength(random0, 128);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      RandomUtil.randomAsciiRandomLength((Random) mockRandom0, 128, 329);
      RandomUtil.nextInt((Random) secureRandom0, 128);
      RandomUtil.nextInt((Random) mockRandom0);
      RandomUtil.randomAsciiFixLength(329);
      // Undeclared exception!
      try { 
        RandomUtil.randomAsciiRandomLength((Random) mockRandom0, 3056, 329);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3697,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test73()  throws Throwable  {
      RandomUtil.randomAsciiRandomLength(1, 1);
      RandomUtil.nextInt(1);
  }"
3698,"    public static String randomAsciiFixLength(int length) {
        return RandomStringUtils.random(length, 32, 127, false, false, null, threadLocalRandom());
    }","  public void test74()  throws Throwable  {
      RandomUtil.randomAsciiFixLength(0);
  }"
3699,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test75()  throws Throwable  {
      RandomUtil.nextInt(668);
  }"
3700,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test76()  throws Throwable  {
      RandomUtil.nextInt();
      RandomUtil.nextDouble();
  }"
3701,"    public static String randomStringFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, true, null, threadLocalRandom());
    }","  public void test77()  throws Throwable  {
      RandomUtil randomUtil0 = new RandomUtil();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      RandomUtil.randomStringFixLength((Random) mockRandom0, 2363);
  }"
3702,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test78()  throws Throwable  {
      RandomUtil.nextInt(127, 127);
      RandomUtil.nextDouble((double) 127);
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.nextDouble(random0);
  }"
3703,"    public static String randomAsciiFixLength(int length) {
        return RandomStringUtils.random(length, 32, 127, false, false, null, threadLocalRandom());
    }","  public void test79()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      // Undeclared exception!
      RandomUtil.randomAsciiFixLength((Random) secureRandom0, 55280);
  }"
3704,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test80()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      // Undeclared exception!
      try { 
        RandomUtil.nextLong(random0, (-1L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3705,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test81()  throws Throwable  {
      RandomUtil.randomStringRandomLength(0, 0);
      RandomUtil.nextLong((long) 0, (long) 0);
  }"
3706,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test82()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextDouble((Random) secureRandom0);
      // Undeclared exception!
      try { 
        RandomUtil.nextDouble(1.5117351229002655E308, (-3496.0));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3707,"    public static int nextInt() {
        return nextInt(threadLocalRandom());
    }","  public void test83()  throws Throwable  {
      RandomUtil.secureRandom();
      RandomUtil.nextInt();
  }"
3708,"    public static long nextLong() {
        return nextLong(threadLocalRandom());
    }","  public void test84()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      int int0 = 1047;
      RandomUtil.randomStringRandomLength((Random) secureRandom0, 1047, 1047);
      RandomUtil.nextLong();
      RandomUtil.randomLetterFixLength(1047);
      RandomUtil.nextLong(7938411704637062081L);
      RandomUtil.randomAsciiFixLength((Random) secureRandom0, 1047);
      RandomUtil.nextDouble();
      RandomUtil.nextDouble((Random) secureRandom0, 1307.656);
      int int1 = 1;
      RandomUtil.randomLetterRandomLength(1, 1047);
      RandomUtil.nextLong();
      long long0 = (-61L);
      // Undeclared exception!
      try { 
        RandomUtil.nextLong((Random) secureRandom0, (-61L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3709,"    public static String randomLetterRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, false, null, threadLocalRandom());
    }","  public void test85()  throws Throwable  {
      Random random0 = RandomUtil.threadLocalRandom();
      int int0 = 55296;
      RandomUtil.nextLong();
      RandomUtil.nextLong(random0, 1311L);
      RandomUtil.nextLong(random0);
      // Undeclared exception!
      RandomUtil.randomLetterRandomLength(random0, 55296, 55296);
  }"
3710,"    public static double nextDouble() {
        return nextDouble(threadLocalRandom(), 0, Double.MAX_VALUE);
    }","  public void test86()  throws Throwable  {
      int int0 = 566;
      RandomUtil.randomAsciiRandomLength(566, 566);
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      int int1 = 0;
      RandomUtil.randomAsciiFixLength(0);
      RandomUtil.randomStringFixLength(0);
      int int2 = (-11);
      // Undeclared exception!
      try { 
        RandomUtil.nextDouble((Random) secureRandom0, (double) 566, (-1244.133967191));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3711,"    public static String randomAsciiRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 32, 127, false, false, null,
                threadLocalRandom());
    }","  public void test87()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.randomAsciiFixLength(329);
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.nextDouble((double) 329, (double) 329);
      RandomUtil.nextDouble((Random) secureRandom0, (double) 329);
      RandomUtil.nextLong();
      RandomUtil.nextDouble();
      RandomUtil.nextInt((Random) secureRandom0, 329);
      Random random0 = RandomUtil.threadLocalRandom();
      RandomUtil.randomStringFixLength(random0, 265);
      MockRandom mockRandom0 = new MockRandom();
      RandomUtil.randomAsciiRandomLength((Random) mockRandom0, 265, 329);
      RandomUtil.nextInt((Random) secureRandom0, 265);
      RandomUtil.nextInt((Random) mockRandom0);
      RandomUtil.nextInt(13);
      RandomUtil.secureRandom();
      // Undeclared exception!
      try { 
        RandomUtil.randomAsciiRandomLength((Random) mockRandom0, 3056, 329);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3712,"    public static String randomLetterFixLength(int length) {
        return RandomStringUtils.random(length, 0, 0, true, false, null, threadLocalRandom());
    }","  public void test88()  throws Throwable  {
      int int0 = 2594;
      RandomUtil.secureRandom();
      RandomUtil.secureRandom();
      RandomUtil.nextDouble(1.870911608E9);
      RandomUtil.nextDouble();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(2594);
      mockRandom0.doubles();
      mockRandom0.nextDouble();
      // Undeclared exception!
      RandomUtil.randomLetterFixLength((Random) mockRandom0, 2594);
  }"
3713,"    public static String randomStringRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 0, 0, true, true, null, threadLocalRandom());
    }","  public void test89()  throws Throwable  {
      SecureRandom secureRandom0 = RandomUtil.secureRandom();
      RandomUtil.nextDouble((Random) secureRandom0);
      RandomUtil.nextLong();
      RandomUtil.nextInt((Random) secureRandom0);
      RandomUtil.nextInt();
      RandomUtil.nextLong((long) 1223453543, (long) 1223453543);
      RandomUtil randomUtil0 = new RandomUtil();
      RandomUtil.nextDouble();
      RandomUtil.nextLong((Random) secureRandom0, (long) 886108941, 8973564732577560054L);
      // Undeclared exception!
      try { 
        RandomUtil.randomStringRandomLength(1223453543, 886108941);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Start value must be smaller or equal to end value.
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3714,"    public static String randomAsciiRandomLength(int minLength, int maxLength) {
        return RandomStringUtils.random(nextInt(minLength, maxLength), 32, 127, false, false, null,
                threadLocalRandom());
    }","  public void test90()  throws Throwable  {
      RandomUtil.nextLong();
      MockRandom mockRandom0 = new MockRandom(4531295166176539277L);
      mockRandom0.longs();
      RandomUtil.nextInt((Random) mockRandom0, 55296, 55296);
      // Undeclared exception!
      RandomUtil.randomAsciiRandomLength(2002, 55296);
  }"
3715,"    public static int toInt32(long x) {
        if ((int) x == x) {
            return (int) x;
        }
        throw new IllegalArgumentException(""Int "" + x + "" out of range"");
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toInt32(9223372036854775801L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Int 9223372036854775801 out of range
         //
         verifyException(""org.springside.modules.utils.number.NumberUtil"", e);
      }
  }"
3716,"    public static String toString(int i) {
        return Integer.toString(i);
    }","  public void test1()  throws Throwable  {
      Long long0 = new Long(963L);
      String string0 = NumberUtil.toString(long0);
}"
3717,"    public static Long toLongObject(String str) {
        return toLongObject(str, null);
    }","  public void test2()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject(""10.10"", (Long) null);
}"
3718,"    public static Long toLongObject(String str) {
        return toLongObject(str, null);
    }","  public void test3()  throws Throwable  {
      Long long0 = new Long((-2097L));
      Long long1 = NumberUtil.toLongObject((String) null, long0);
}"
3719,"    public static Long toLongObject(String str) {
        return toLongObject(str, null);
    }","  public void test4()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject(""0"");
      Long long1 = NumberUtil.toLongObject("""", long0);
}"
3720,"    public static Long toLongObject(String str) {
        return toLongObject(str, null);
    }","  public void test5()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject(""16"");
}"
3721,"    public static Long toLongObject(String str) {
        return toLongObject(str, null);
    }","  public void test6()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject(""-1"");
}"
3722,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)1;
      long long0 = NumberUtil.toLong(byteArray0);
}"
3723,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-14);
      long long0 = NumberUtil.toLong(byteArray0);
}"
3724,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test9()  throws Throwable  {
      long long0 = NumberUtil.toLong("",ZlaE&=aK8wd,|"", 0L);
}"
3725,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test10()  throws Throwable  {
      long long0 = NumberUtil.toLong("""", (long) 101);
}"
3726,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test11()  throws Throwable  {
      long long0 = NumberUtil.toLong(""963"");
}"
3727,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test12()  throws Throwable  {
      long long0 = NumberUtil.toLong(""-4824"");
}"
3728,"    public static Integer toIntObject(String str) {
        return toIntObject(str, null);
    }","  public void test13()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject(""#"", (Integer) null);
}"
3729,"    public static Integer toIntObject(String str) {
        return toIntObject(str, null);
    }","  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = NumberUtil.toIntObject(""fF/lG6h"", integer0);
}"
3730,"    public static Integer toIntObject(String str) {
        return toIntObject(str, null);
    }","  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(2602);
      Integer integer1 = NumberUtil.toIntObject("""", integer0);
}"
3731,"    public static Integer toIntObject(String str) {
        return toIntObject(str, null);
    }","  public void test16()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject(""0"");
}"
3732,"    public static Integer toIntObject(String str) {
        return toIntObject(str, null);
    }","  public void test17()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject(""375"");
}"
3733,"    public static Integer toIntObject(String str) {
        return toIntObject(str, null);
    }","  public void test18()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject(""-18"");
}"
3734,"    public static int toInt32(long x) {
        if ((int) x == x) {
            return (int) x;
        }
        throw new IllegalArgumentException(""Int "" + x + "" out of range"");
    }","  public void test19()  throws Throwable  {
      int int0 = NumberUtil.toInt32(3013L);
}"
3735,"    public static int toInt32(long x) {
        if ((int) x == x) {
            return (int) x;
        }
        throw new IllegalArgumentException(""Int "" + x + "" out of range"");
    }","  public void test20()  throws Throwable  {
      int int0 = NumberUtil.toInt32((-2558L));
}"
3736,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = NumberUtil.toInt(byteArray0);
}"
3737,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      int int0 = NumberUtil.toInt(byteArray0);
}"
3738,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      int int0 = NumberUtil.toInt(byteArray0);
}"
3739,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test24()  throws Throwable  {
      int int0 = NumberUtil.toInt("""", 2444);
}"
3740,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test25()  throws Throwable  {
      int int0 = NumberUtil.toInt(""-1"", (-1));
}"
3741,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test26()  throws Throwable  {
      int int0 = NumberUtil.toInt(""1"");
}"
3742,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test27()  throws Throwable  {
      int int0 = NumberUtil.toInt(""-1"");
}"
3743,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test28()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject(""c'?EX"", (Double) null);
}"
3744,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test29()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject(""0.0"", (Double) null);
}"
3745,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test30()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      Double double1 = NumberUtil.toDoubleObject(""-1"", double0);
}"
3746,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test31()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double double1 = NumberUtil.toDoubleObject(""0X"", double0);
}"
3747,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test32()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject(""NaN"");
}"
3748,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test33()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject(""0"");
}"
3749,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test34()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject(""-821"");
      Double double1 = NumberUtil.toDoubleObject(""3508.52"", double0);
}"
3750,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test35()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes((double) 0L);
      double double0 = NumberUtil.toDouble(byteArray0);
}"
3751,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test36()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes(943.6282657801108);
      double double0 = NumberUtil.toDouble(byteArray0);
}"
3752,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      double double0 = NumberUtil.toDouble(byteArray0);
}"
3753,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test38()  throws Throwable  {
      double double0 = NumberUtil.toDouble("""", 163.7503210956698);
}"
3754,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test39()  throws Throwable  {
      double double0 = NumberUtil.toDouble("""", (-1.0));
}"
3755,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test40()  throws Throwable  {
      double double0 = NumberUtil.toDouble(""773"");
}"
3756,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test41()  throws Throwable  {
      double double0 = NumberUtil.toDouble(""-2570.03"");
}"
3757,"    public static boolean isNumber(String str) {
        return NumberUtils.isNumber(str);
    }","  public void test42()  throws Throwable  {
      boolean boolean0 = NumberUtil.isNumber(""#"");
}"
3758,"    public static Long hexToLongObject(String str) {
        return hexToLongObject(str, null);
    }","  public void test43()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = NumberUtil.hexToLongObject("""", long0);
}"
3759,"    public static Long hexToLongObject(String str) {
        return hexToLongObject(str, null);
    }","  public void test44()  throws Throwable  {
      Long long0 = new Long(1594L);
      Long long1 = NumberUtil.hexToLongObject("""", long0);
}"
3760,"    public static Long hexToLongObject(String str) {
        return hexToLongObject(str, null);
    }","  public void test45()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject(""7"");
}"
3761,"    public static Long hexToLongObject(String str) {
        return hexToLongObject(str, null);
    }","  public void test46()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject(""-1"");
}"
3762,"    public static Integer hexToIntObject(String str) {
        return hexToIntObject(str, null);
    }","  public void test47()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject("""", (Integer) null);
}"
3763,"    public static Integer hexToIntObject(String str) {
        return hexToIntObject(str, null);
    }","  public void test48()  throws Throwable  {
      Integer integer0 = new Integer((-1111));
      Integer integer1 = NumberUtil.hexToIntObject("""", integer0);
}"
3764,"    public static Integer hexToIntObject(String str) {
        return hexToIntObject(str, null);
    }","  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(491);
      Integer integer1 = NumberUtil.hexToIntObject(""qi&/o\""SZ{KvEZP}"", integer0);
}"
3765,"    public static Integer hexToIntObject(String str) {
        return hexToIntObject(str, null);
    }","  public void test50()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject(""0"");
}"
3766,"    public static Integer hexToIntObject(String str) {
        return hexToIntObject(str, null);
    }","  public void test51()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject(""375"");
}"
3767,"    public static Integer hexToIntObject(String str) {
        return hexToIntObject(str, null);
    }","  public void test52()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject(""-821"");
}"
3768,"    public static String toString(int i) {
        return Integer.toString(i);
    }","  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toString((Integer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.NumberUtil"", e);
      }
  }"
3769,"    public static String toString(int i) {
        return Integer.toString(i);
    }","  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toString((Double) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.NumberUtil"", e);
      }
  }"
3770,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toLong((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.primitives.Longs"", e);
      }
  }"
3771,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toInt((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.primitives.Ints"", e);
      }
  }"
3772,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        NumberUtil.toDouble(byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // array too small: 6 < 8
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3773,"    public static boolean isHexNumber(String value) {
        int index = value.startsWith(""-"") ? 1 : 0;
        return value.startsWith(""0x"", index) || value.startsWith(""0X"", index) || value.startsWith(""#"", index);
    }","  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.isHexNumber((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
3774,"    public static Long hexToLongObject(String str) {
        return hexToLongObject(str, null);
    }","  public void test59()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject(""0X"", (Long) null);
}"
3775,"    public static Long hexToLongObject(String str) {
        return hexToLongObject(str, null);
    }","  public void test60()  throws Throwable  {
      Long long0 = new Long((-5228L));
      Long long1 = NumberUtil.hexToLongObject("""", long0);
}"
3776,"    public static Integer hexToIntObject(String str) {
        return hexToIntObject(str, null);
    }","  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(1347);
      Integer integer1 = NumberUtil.hexToIntObject("""", integer0);
}"
3777,"    public static Integer hexToIntObject(String str) {
        return hexToIntObject(str, null);
    }","  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = NumberUtil.hexToIntObject(""org.apache.commons.lang3.math.NumberUtils"", integer0);
}"
3778,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test63()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double double1 = NumberUtil.toDoubleObject(""X}%^}S|RP[PR:z0~1%"", double0);
}"
3779,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test64()  throws Throwable  {
      Double double0 = new Double(4110.31);
      Double double1 = NumberUtil.toDoubleObject("""", double0);
}"
3780,"    public static Long toLongObject(String str) {
        return toLongObject(str, null);
    }","  public void test65()  throws Throwable  {
      Long long0 = new Long(2366L);
      Long long1 = NumberUtil.toLongObject(""8\""AAw"", long0);
}"
3781,"    public static Integer toIntObject(String str) {
        return toIntObject(str, null);
    }","  public void test66()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = NumberUtil.toIntObject(""org.springside.modules.utils.number.NumberUtil"", integer0);
}"
3782,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test67()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes(0L);
      long long0 = NumberUtil.toLong(byteArray0);
}"
3783,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        NumberUtil.toLong(byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // array too small: 5 < 8
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3784,"    public static int toInt32(long x) {
        if ((int) x == x) {
            return (int) x;
        }
        throw new IllegalArgumentException(""Int "" + x + "" out of range"");
    }","  public void test69()  throws Throwable  {
      int int0 = NumberUtil.toInt32(0L);
}"
3785,"    public static int toInt32(long x) {
        if ((int) x == x) {
            return (int) x;
        }
        throw new IllegalArgumentException(""Int "" + x + "" out of range"");
    }","  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toInt32((-9223372036854775808L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Int -9223372036854775808 out of range
         //
         verifyException(""org.springside.modules.utils.number.NumberUtil"", e);
      }
  }"
3786,"    public static Long hexToLongObject(String str) {
        return hexToLongObject(str, null);
    }","  public void test71()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject(""0"");
}"
3787,"    public static Integer hexToIntObject(String str) {
        return hexToIntObject(str, null);
    }","  public void test72()  throws Throwable  {
      Integer integer0 = NumberUtil.hexToIntObject(""8C)10P5Peb$sz,R%FF:"");
}"
3788,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test73()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject("""");
}"
3789,"    public static Long toLongObject(String str) {
        return toLongObject(str, null);
    }","  public void test74()  throws Throwable  {
      Long long0 = NumberUtil.toLongObject(""8C)10P5Peb$sz,R%FF:"");
}"
3790,"    public static boolean isHexNumber(String value) {
        int index = value.startsWith(""-"") ? 1 : 0;
        return value.startsWith(""0x"", index) || value.startsWith(""0X"", index) || value.startsWith(""#"", index);
    }","  public void test75()  throws Throwable  {
      boolean boolean0 = NumberUtil.isHexNumber(""#WCyb(zhQZaOrD"");
}"
3791,"    public static boolean isHexNumber(String value) {
        int index = value.startsWith(""-"") ? 1 : 0;
        return value.startsWith(""0x"", index) || value.startsWith(""0X"", index) || value.startsWith(""#"", index);
    }","  public void test76()  throws Throwable  {
      boolean boolean0 = NumberUtil.isHexNumber(""0XE*C.QNJC/zTr3i*>"");
}"
3792,"    public static boolean isHexNumber(String value) {
        int index = value.startsWith(""-"") ? 1 : 0;
        return value.startsWith(""0x"", index) || value.startsWith(""0X"", index) || value.startsWith(""#"", index);
    }","  public void test77()  throws Throwable  {
      boolean boolean0 = NumberUtil.isHexNumber(""0x"");
}"
3793,"    public static boolean isHexNumber(String value) {
        int index = value.startsWith(""-"") ? 1 : 0;
        return value.startsWith(""0x"", index) || value.startsWith(""0X"", index) || value.startsWith(""#"", index);
    }","  public void test78()  throws Throwable  {
      boolean boolean0 = NumberUtil.isHexNumber(""-,nZ]}qBG7C8c(I@1K"");
}"
3794,"    public static String toString(int i) {
        return Integer.toString(i);
    }","  public void test79()  throws Throwable  {
      Integer integer0 = Integer.valueOf(282);
      String string0 = NumberUtil.toString(integer0);
}"
3795,,"  public void test80()  throws Throwable  {
      NumberUtil numberUtil0 = new NumberUtil();
  }"
3796,"    public static String to2DigitString(double d) {
        return String.format(Locale.ROOT, ""%.2f"", d);
    }","  public void test81()  throws Throwable  {
      String string0 = NumberUtil.to2DigitString(0);
}"
3797,"    public static Double toDoubleObject(String str) {
        return toDoubleObject(str, null);
    }","  public void test82()  throws Throwable  {
      Double double0 = NumberUtil.toDoubleObject(""99.0"");
}"
3798,"    public static String toString(int i) {
        return Integer.toString(i);
    }","  public void test83()  throws Throwable  {
      Double double0 = new Double(0);
      String string0 = NumberUtil.toString(double0);
}"
3799,"    public static Integer toIntObject(String str) {
        return toIntObject(str, null);
    }","  public void test84()  throws Throwable  {
      Integer integer0 = NumberUtil.toIntObject(""m@F~BbS*'~p'_"");
}"
3800,"    public static Long hexToLongObject(String str) {
        return hexToLongObject(str, null);
    }","  public void test85()  throws Throwable  {
      Long long0 = NumberUtil.hexToLongObject("""");
}"
3801,"    public static boolean isNumber(String str) {
        return NumberUtils.isNumber(str);
    }","  public void test86()  throws Throwable  {
      boolean boolean0 = NumberUtil.isNumber(""282"");
}"
3802,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test87()  throws Throwable  {
      int int0 = NumberUtil.toInt("""", 0);
}"
3803,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test88()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toDouble((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.primitives.Longs"", e);
      }
  }"
3804,"    public static String toString(int i) {
        return Integer.toString(i);
    }","  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtil.toString((Long) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.number.NumberUtil"", e);
      }
  }"
3805,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test90()  throws Throwable  {
      long long0 = NumberUtil.toLong("""", (-1161L));
}"
3806,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test91()  throws Throwable  {
      double double0 = NumberUtil.toDouble(""0"");
}"
3807,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        NumberUtil.toInt(byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // array too small: 2 < 4
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3808,"    public static String toString(int i) {
        return Integer.toString(i);
    }","  public void test93()  throws Throwable  {
      String string0 = NumberUtil.toString(0L);
}"
3809,"    public static double toDouble(byte[] bytes) {
        return Double.longBitsToDouble(toLong(bytes));
    }","  public void test94()  throws Throwable  {
      double double0 = NumberUtil.toDouble((String) null, 0.0);
}"
3810,"    public static String toString(int i) {
        return Integer.toString(i);
    }","  public void test95()  throws Throwable  {
      String string0 = NumberUtil.toString(0.0);
}"
3811,"    public static byte[] toBytes(int value) {
        return Ints.toByteArray(value);
    }","  public void test96()  throws Throwable  {
      byte[] byteArray0 = NumberUtil.toBytes(14);
}"
3812,"    public static String toString(int i) {
        return Integer.toString(i);
    }","  public void test97()  throws Throwable  {
      String string0 = NumberUtil.toString(10);
}"
3813,"    public static long toLong(byte[] bytes) {
        return Longs.fromByteArray(bytes);
    }","  public void test98()  throws Throwable  {
      long long0 = NumberUtil.toLong(""0.0"");
}"
3814,"    public static int toInt(byte[] bytes) {
        return Ints.fromByteArray(bytes);
    }","  public void test99()  throws Throwable  {
      int int0 = NumberUtil.toInt("""");
}"
3815,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test0()  throws Throwable  {
      FileUtil.getFileName(""/.."");
      FileUtil.makesureDirExists("".."");
      File file0 = FileUtil.createTempFile(""A^s]q%"", ""A^s]q%"");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, file0);
        fail(""Expecting exception: MissingFormatWidthException"");
      } catch(MissingFormatWidthException e) {
         //
         // %0A
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3816,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test1()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""D/`NKkH*"");
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(file0, ""."");
      FileUtil.moveDir(file0, mockFile0);
      FileUtil.asOututStream(""."");
      FileUtil.createTempDir();
  }"
3817,"    public static void makesureDirExists(String dirPath) throws IOException {
        makesureDirExists(getFileByPath(dirPath));
    }","  public void test2()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(""/.."");
      MockFile.createTempFile(""/.."", ""/.."", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("".."");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ""/.."");
      FileUtil.moveDir(mockFile0, file0);
      FileUtil.getFileName(""/.."");
      try { 
        FileUtil.makesureDirExists("".."");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // There is a file exists ..
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
3818,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test3()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      File file1 = FileUtil.createTempFile();
      file1.delete();
      FileUtil.moveDir(file0, file1);
}"
3819,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test4()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      File file1 = FileUtil.createTempFile();
      file1.delete();
      FileUtil.moveDir(file0, file1);
}"
3820,"    public static void touch(String filePath) throws IOException {
        Files.touch(getFileByPath(filePath));
    }","  public void test5()  throws Throwable  {
      FileUtil.asOututStream("" is exist but it is a dir"");
      FileUtil.isFileExists("" is exist but it is a dir"");
      FileUtil.touch("" to a subdirectory of itself: "");
  }"
3821,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test6()  throws Throwable  {
      String string0 = ""eD2G5%"";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string1 = ""com.google.common.io.ByteStreams$LimitedInputStream"";
      File file0 = null;
      File file1 = MockFile.createTempFile(""eD2G5%"", ""com.google.common.io.ByteStreams$LimitedInputStream"", (File) null);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file1, file1);
        fail(""Expecting exception: FormatFlagsConversionMismatchException"");
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = c, Flags = 0
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3822,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test7()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(""<((X|7xJO"");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/1392409281320-0/tEp/132409281320-0"");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(""/tmp/1392409281320-0/tEp/132409281320-0/S$(zP]a18SGTYMu/0"");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-62);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      File file1 = MockFile.createTempFile(""<((X|7xJO"", ""<((X|7xJO"", (File) mockFile0);
      FileUtil.moveDir(mockFile0, file0);
      try { 
        FileUtil.copyDir(file0, file1);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3823,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test8()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(""<((X|7xJO"", ""<((X|7xJO"");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/1392409281320-0/tEp/132409281320-0"");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile(""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils"");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      File file1 = MockFile.createTempFile(""<((X|7xJO"", ""<((X|7xJO"", (File) mockFile0);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      FileUtil.moveDir(mockFile0, file0);
      try { 
        FileUtil.copyDir(file0, file1);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
3824,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test9()  throws Throwable  {
      String string0 = ""eD2G5%"";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string1 = ""ovO\""fsA#n9"";
      File file0 = null;
      File file1 = MockFile.createTempFile(""eD2G5%"", ""ovO\""fsA#n9"", (File) null);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file1, file1);
        fail(""Expecting exception: MissingFormatWidthException"");
      } catch(MissingFormatWidthException e) {
         //
         // %0o
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3825,"    public static void makesureDirExists(String dirPath) throws IOException {
        makesureDirExists(getFileByPath(dirPath));
    }","  public void test10()  throws Throwable  {
      FileUtil.createTempDir();
      FileUtil.createTempDir();
      // Undeclared exception!
      try { 
        FileUtil.makesureDirExists("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3826,"    public static void deleteDir(File dir) {
        Validate.isTrue(isDirExists(dir), dir + "" is not exist or not a dir"");

        // 后序遍历，先删掉子目录中的文件/目录
        Iterator<File> iterator = Files.fileTreeTraverser().postOrderTraversal(dir).iterator();
        while (iterator.hasNext()) {
            iterator.next().delete();
        }
    }","  public void test11()  throws Throwable  {
      String string0 = ""ynl"";
      File file0 = MockFile.createTempFile(""ynl"", ""ynl"");
      FileUtil.makesureParentDirExists(file0);
      // Undeclared exception!
      try { 
        FileUtil.deleteDir(file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/ynl0ynl is not exist or not a dir
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3827,"    public static BufferedReader asBufferedReader(String fileName) throws FileNotFoundException {
        return Files.newReader(getFileByPath(fileName), Charsets.UTF_8);
    }","  public void test12()  throws Throwable  {
      String string0 = ""_BkOL neE%~VxO;"";
      FileUtil.getFileExtension(""_BkOL neE%~VxO;"");
      MockFile mockFile0 = new MockFile("""", """");
      FileUtil.copy(mockFile0, mockFile0);
      FileUtil.isDirExists(""_BkOL neE%~VxO;"");
      try { 
        FileUtil.asBufferedReader(""_BkOL neE%~VxO;"");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3828,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test13()  throws Throwable  {
      String string0 = """";
      // Undeclared exception!
      try { 
        FileUtil.createTempFile("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3829,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test14()  throws Throwable  {
      String string0 = """";
      MockFile mockFile0 = new MockFile("""", """");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(mockFile0, mockFile0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3830,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test15()  throws Throwable  {
      String string0 = """";
      // Undeclared exception!
      try { 
        FileUtil.asInputStream("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3831,"    public static List<String> toLines(final File file) throws IOException {
        return Files.readLines(file, Charsets.UTF_8);
    }","  public void test16()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      try { 
        FileUtil.toLines(file0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3832,"    public static List<String> toLines(final File file) throws IOException {
        return Files.readLines(file, Charsets.UTF_8);
    }","  public void test17()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.toLines((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3833,"    public static void deleteFile(@Nullable File file) throws IOException {
        Validate.isTrue(isFileExists(file), file + "" is not exist or not a file"");
        file.delete();
    }","  public void test18()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.makesureDirExists(file0);
      // Undeclared exception!
      try { 
        FileUtil.deleteFile(file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/1392409281320-0 is not exist or not a file
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3834,"    public static OutputStream asOututStream(String fileName) throws IOException {
        return new FileOutputStream(getFileByPath(fileName));
    }","  public void test19()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.asOututStream((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
3835,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test20()  throws Throwable  {
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.asInputStream((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3836,"    public static void copy(@NotNull File from, @NotNull File to) throws IOException {
        Validate.notNull(from);
        Validate.notNull(to);

        if (from.isDirectory()) {
            copyDir(from, to);
        } else {
            copyFile(from, to);
        }
    }","  public void test21()  throws Throwable  {
      String string0 = ""Mac OS X"";
      File file0 = FileUtil.createTempFile(""Mac OS X"", ""(l5@a*V!L"");
      FileUtil.toLines(file0);
      // Undeclared exception!
      try { 
        FileUtil.copy(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/Mac OS X0(l5@a*V!L and destination /tmp/Mac OS X0(l5@a*V!L must be different
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3837,"    public static BufferedWriter asBufferedWriter(String fileName) throws FileNotFoundException {
        return Files.newWriter(getFileByPath(fileName), Charsets.UTF_8);
    }","  public void test22()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      FileUtil.asOututStream(file0);
      String string0 = """";
      // Undeclared exception!
      try { 
        FileUtil.asBufferedWriter("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3838,"    public static void append(final CharSequence from, final File to) throws IOException {
        Files.append(from, to, Charsets.UTF_8);
    }","  public void test23()  throws Throwable  {
      CharSequence charSequence0 = null;
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.append((CharSequence) null, (File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3839,"    public static void deleteDir(File dir) {
        Validate.isTrue(isDirExists(dir), dir + "" is not exist or not a dir"");

        // 后序遍历，先删掉子目录中的文件/目录
        Iterator<File> iterator = Files.fileTreeTraverser().postOrderTraversal(dir).iterator();
        while (iterator.hasNext()) {
            iterator.next().delete();
        }
    }","  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile(""erNiKctW%"", ""erNiKctW%"");
      // Undeclared exception!
      try { 
        FileUtil.deleteDir(file0);
        fail(""Expecting exception: MissingFormatWidthException"");
      } catch(MissingFormatWidthException e) {
         //
         // %0e
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3840,"    public static void touch(String filePath) throws IOException {
        Files.touch(getFileByPath(filePath));
    }","  public void test25()  throws Throwable  {
      String string0 = """";
      // Undeclared exception!
      try { 
        FileUtil.touch("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3841,"    public static void copyFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!FileUtil.isDirExists(to), to + "" is exist but it is a dir"");
        Files.copy(from, to);
    }","  public void test26()  throws Throwable  {
      File file0 = MockFile.createTempFile(""+D"", """");
      MockFile mockFile0 = new MockFile(""+D"", ""com.google.common.io.ByteSource"");
      mockFile0.mkdirs();
      // Undeclared exception!
      try { 
        FileUtil.copyFile(file0, mockFile0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/+D/com.google.common.io.ByteSource is exist but it is a dir
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3842,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test27()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      MockFile mockFile0 = new MockFile("""");
      try { 
        FileUtil.toString((File) mockFile0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3843,"    public static void write(final CharSequence data, final File file) throws IOException {
        Files.write(data, file, Charsets.UTF_8);
    }","  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      File file0 = FileUtil.createTempFile();
      MockFile mockFile0 = new MockFile(file0, ""pT@j`Q>N=7H#*"");
      try { 
        FileUtil.write(charBuffer0, mockFile0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
3844,"    public static byte[] toByteArray(final File file) throws IOException {
        return Files.toByteArray(file);
    }","  public void test29()  throws Throwable  {
      File file0 = FileUtil.createTempFile(""org.springside.modules.utils.io.FileUtil"", """");
      FileUtil.getFileExtension(file0);
      FileUtil.deleteFile(file0);
      FileUtil.write("""", file0);
      File file1 = FileUtil.createTempDir();
      try { 
        FileUtil.toByteArray(file1);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3845,"    public static void copy(@NotNull File from, @NotNull File to) throws IOException {
        Validate.notNull(from);
        Validate.notNull(to);

        if (from.isDirectory()) {
            copyDir(from, to);
        } else {
            copyFile(from, to);
        }
    }","  public void test30()  throws Throwable  {
      String string0 = ""org.springside.modules.utils.io.FileUtil"";
      FileUtil.isDirExists(""org.springside.modules.utils.io.FileUtil"");
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.copy((File) null, (File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3846,"    public static void moveFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!isDirExists(to), to + "" is  exist but it is a dir"");

        Files.move(from, to);
    }","  public void test31()  throws Throwable  {
      String string0 = ""4il(5}R_>D?{P|"";
      MockFile mockFile0 = new MockFile(""4il(5}R_>D?{P|"", ""4il(5}R_>D?{P|"");
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile(""4il(5}R_>D?{P|"");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, mockFile1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // 4il(5}R_>D?{P| is  exist but it is a dir
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3847,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test32()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      String string0 = null;
      // Undeclared exception!
      try { 
        FileUtil.createTempFile((String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3848,"    public static void makesureDirExists(String dirPath) throws IOException {
        makesureDirExists(getFileByPath(dirPath));
    }","  public void test33()  throws Throwable  {
      File file0 = null;
      FileUtil.isDirExists((File) null);
      // Undeclared exception!
      try { 
        FileUtil.makesureDirExists((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3849,"    public static String getFileExtension(File file) {
        return Files.getFileExtension(file.getName());
    }","  public void test34()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      String string0 = FileUtil.getFileExtension(file0);
}"
3850,"    public static void deleteDir(File dir) {
        Validate.isTrue(isDirExists(dir), dir + "" is not exist or not a dir"");

        // 后序遍历，先删掉子目录中的文件/目录
        Iterator<File> iterator = Files.fileTreeTraverser().postOrderTraversal(dir).iterator();
        while (iterator.hasNext()) {
            iterator.next().delete();
        }
    }","  public void test35()  throws Throwable  {
      String string0 = ""%bQj$!+|QfUG;ie"";
      File file0 = FileUtil.createTempFile(""%bQj$!+|QfUG;ie"", ""%bQj$!+|QfUG;ie"");
      // Undeclared exception!
      try { 
        FileUtil.deleteDir(file0);
        fail(""Expecting exception: MissingFormatArgumentException"");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%b'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
3851,"    public static void write(final CharSequence data, final File file) throws IOException {
        Files.write(data, file, Charsets.UTF_8);
    }","  public void test36()  throws Throwable  {
      FileUtil.asOututStream(""com.google.common.io.Files"");
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.write(""com.google.common.io.Files"", (File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3852,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/mzJYB80"");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = ""LHD"";
      FileUtil.touch(""LHD"");
      String string1 = ""mzJYB8"";
      String string2 = """";
      File file0 = FileUtil.createTempFile(""mzJYB8"", """");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/mzJYB80 is not exist or not a dir
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3853,"    public static String getFileName(@NotNull String fullName) {
        Validate.notEmpty(fullName);
        int last = fullName.lastIndexOf(Platforms.FILE_PATH_SEPARATOR_CHAR);
        return fullName.substring(last + 1);
    }","  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.getFileName("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The validated character sequence is empty
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3854,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test39()  throws Throwable  {
      FileUtil.isFileExists(""' after copy to '"");
      MockFile mockFile0 = new MockFile(""n/|UB@ZmaJxtKp%O7"", ""&'hJNh9=4uaT?"");
      // Undeclared exception!
      try { 
        FileUtil.copyDir(mockFile0, mockFile0);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'O'
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3855,"    public static void makesureDirExists(String dirPath) throws IOException {
        makesureDirExists(getFileByPath(dirPath));
    }","  public void test40()  throws Throwable  {
      FileUtil.getFileExtension("" is not exist or not a dir"");
      FileUtil.asBufferedWriter(""e6^O;-lCH&/DV.q=b;Q"");
      try { 
        FileUtil.makesureDirExists(""e6^O;-lCH&/DV.q=b;Q"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // There is a file exists e6^O;-lCH&/DV.q=b;Q
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
3856,"    public static void makesureDirExists(String dirPath) throws IOException {
        makesureDirExists(getFileByPath(dirPath));
    }","  public void test41()  throws Throwable  {
      FileUtil.getFileName(""toga-eval-FSE_USER-2023"");
      MockFile mockFile0 = new MockFile(""toga-eval-FSE_USER-2023"");
      mockFile0.mkdir();
      FileUtil.asOututStream((File) mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFile0.toURL();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-1L));
      File file0 = FileUtil.createTempFile(""toga-eval-FSE_USER-2023"", ""toga-eval-FSE_USER-2023"");
      FileUtil.getFileName(""toga-eval-FSE_USER-2023"");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        FileUtil.makesureDirExists(file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // There is a file exists /tmp/toga-eval-FSE_USER-20230toga-eval-FSE_USER-2023
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
3857,"    public static List<String> toLines(final File file) throws IOException {
        return Files.readLines(file, Charsets.UTF_8);
    }","  public void test42()  throws Throwable  {
      String string0 = "" is exist but it is a dir"";
      FileUtil.getFileExtension("" is exist but it is a dir"");
      File file0 = FileUtil.createTempFile();
      FileUtil.isDirExists(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.isFileExists(file0);
      FileUtil.getFileExtension("""");
      try { 
        FileUtil.toLines(file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3858,"    public static String getFileExtension(File file) {
        return Files.getFileExtension(file.getName());
    }","  public void test43()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileUtil.asOututStream(""G:VNU{7LK5~3+`$FQ,e"");
      FileUtil.moveDir(file0, file0);
      FileUtil.isDirExists((String) null);
      FileUtil.getFileExtension(""G:VNU{7LK5~3+`$FQ,e"");
      FileUtil.createTempDir();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""/tmp/1392409281320-0/S$(z% P]a18SGTYMu//tmp/1392409281320-0"");
      // Undeclared exception!
      try { 
        FileUtil.getFileExtension((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3859,"    public static void makesureDirExists(String dirPath) throws IOException {
        makesureDirExists(getFileByPath(dirPath));
    }","  public void test44()  throws Throwable  {
      FileUtil.asBufferedWriter(""e6^O;-lCH&/DV.q=b;Q"");
      try { 
        FileUtil.makesureDirExists(""e6^O;-lCH&/DV.q=b;Q"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // There is a file exists e6^O;-lCH&/DV.q=b;Q
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
3860,"    public static void write(final CharSequence data, final File file) throws IOException {
        Files.write(data, file, Charsets.UTF_8);
    }","  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""LINUX"", ""java.runtime.version"");
      mockFile0.setWritable(true);
      mockFile0.deleteOnExit();
      MockFile.createTempFile(""LINUX"", ""java.runtime.version"");
      mockFile0.getAbsoluteFile();
      mockFile0.setExecutable(true);
      FileUtil.isFileExists((File) mockFile0);
      FileUtil.write(""LINUX"", mockFile0);
  }"
3861,"    public static void makesureParentDirExists(File file) throws IOException {
        Files.createParentDirs(file);
    }","  public void test46()  throws Throwable  {
      FileUtil.isDirExists("" to a subdirectory of itself: "");
      FileUtil.isFileExists((File) null);
      // Undeclared exception!
      try { 
        FileUtil.makesureParentDirExists((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3862,"    public static void deleteDir(File dir) {
        Validate.isTrue(isDirExists(dir), dir + "" is not exist or not a dir"");

        // 后序遍历，先删掉子目录中的文件/目录
        Iterator<File> iterator = Files.fileTreeTraverser().postOrderTraversal(dir).iterator();
        while (iterator.hasNext()) {
            iterator.next().delete();
        }
    }","  public void test47()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""erNiKctW%"", ""erNiKctW%"");
      // Undeclared exception!
      try { 
        FileUtil.deleteDir(mockFile0);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '/'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
3863,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      File file0 = FileUtil.createTempDir();
      FileUtil.makesureDirExists(file0);
      FileUtil.isDirExists(file0);
      System.setCurrentTimeMillis(0L);
      String string0 = null;
      FileUtil.createTempFile(""S_B`0sSK@^Rn!"", (String) null);
      try { 
        FileUtil.asInputStream(""3+iRD&L_7"");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3864,"    public static String getFileExtension(File file) {
        return Files.getFileExtension(file.getName());
    }","  public void test49()  throws Throwable  {
      String string0 = ""media"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""media"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""media"");
      File file0 = null;
      FileUtil.asOututStream(""media"");
      FileUtil.asBufferedReader(""media"");
      FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.getFileExtension((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
3865,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test50()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/' after copy to '0*H|_ e1BJv!~`:"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileUtil.asOututStream(""zource %s and destination %s must be differet"");
      FileUtil.asBufferedWriter(""zource %s and destination %s must be differet"");
      File file0 = FileUtil.createTempDir();
      FileUtil.moveDir(file0, file0);
      File file1 = FileUtil.createTempDir();
      FileUtil.copy(file1, file0);
      FileUtil fileUtil0 = new FileUtil();
      FileUtil.deleteDir(file0);
      String string0 = ""*L@;oRJl[]cS)r^k0d"";
      FileUtil.isDirExists(""*L@;oRJl[]cS)r^k0d"");
      File file2 = FileUtil.createTempFile(""' after copy to '"", ""*H|_ e1BJv!~`:"");
      try { 
        FileUtil.asInputStream(file2);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3866,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test51()  throws Throwable  {
      String string0 = ""pP78BA>"";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.getFileExtension(""pP78BA>"");
      String string1 = ""[MPKjEc"";
      String string2 = """";
      String string3 = ""i=Qma1"";
      try { 
        FileUtil.createTempFile(""pP78BA>"", ""i=Qma1"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3867,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test52()  throws Throwable  {
      String string0 = ""..."";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File file0 = FileUtil.createTempFile(""..."", ""..."");
      byte[] byteArray0 = FileUtil.toByteArray(file0);
      FileUtil.isDirExists(file0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileUtil.asInputStream(file0);
      FileUtil.isDirExists(""..."");
      FileUtil.createTempDir();
      File file1 = MockFile.createTempFile("":s%@`m8n|Bo;[V++$j"", ""..."");
      FileUtil.toLines(file1);
      FileUtil.createTempDir();
      FileUtil.asBufferedWriter(""u.npS9e 1Q9x4b-:6 "");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file1, file1);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '@'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
3868,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test53()  throws Throwable  {
      File file0 = null;
      FileUtil.isFileExists((File) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.createTempFile();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3869,"    public static void moveFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!isDirExists(to), to + "" is  exist but it is a dir"");

        Files.move(from, to);
    }","  public void test54()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isFileExists(file0);
      MockFile mockFile0 = new MockFile(""S$(z% P]a18SGTYMu"", ""S$(z% P]a18SGTYMu"");
      String string0 = ""javautil.prefs.PreferencesFactory"";
      MockFile.createTempFile(""javautil.prefs.PreferencesFactory"", ""S$(z% P]a18SGTYMu"", (File) mockFile0);
      FileUtil.moveDir(mockFile0, file0);
      mockFile0.mkdir();
      FileUtil.makesureDirExists(""0X"");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, mockFile0);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3870,"    public static byte[] toByteArray(final File file) throws IOException {
        return Files.toByteArray(file);
    }","  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.toByteArray((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3871,"    public static void makesureDirExists(String dirPath) throws IOException {
        makesureDirExists(getFileByPath(dirPath));
    }","  public void test56()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", ""{s6"");
      FileUtil.makesureDirExists((File) mockFile0);
  }"
3872,"    public static List<String> toLines(final File file) throws IOException {
        return Files.readLines(file, Charsets.UTF_8);
    }","  public void test57()  throws Throwable  {
      FileUtil.asOututStream(""+&|98'HS!OZ3"");
      File file0 = FileUtil.createTempDir();
      System.setCurrentTimeMillis(0L);
      FileUtil.isDirExists(file0);
      File file1 = FileUtil.createTempFile();
      FileUtil.asInputStream(file1);
      FileUtil.toLines(file1);
  }"
3873,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test58()  throws Throwable  {
      FileUtil.getFileName(""' after copy to '"");
      FileUtil.asOututStream(""' after copy to '"");
      FileUtil.asBufferedReader(""' after copy to '"");
      File file0 = FileUtil.createTempDir();
      System.setCurrentTimeMillis((-5L));
      FileUtil.isDirExists(file0);
      FileUtil.isDirExists(file0);
      File file1 = FileUtil.createTempFile();
      FileUtil.asInputStream(file1);
  }"
3874,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test59()  throws Throwable  {
      FileUtil.createTempFile();
      System.setCurrentTimeMillis((-5851L));
      FileUtil.createTempDir();
  }"
3875,"    public static boolean isDirExists(String dirPath) {
        return isDirExists(getFileByPath(dirPath));
    }","  public void test60()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""n#Nr8g$`wT6#(;t"", ""n#Nr8g$`wT6#(;t"");
      mockFile0.toURL();
      mockFile0.toURL();
      mockFile0.mkdir();
      mockFile0.deleteOnExit();
      FileUtil.isDirExists((File) mockFile0);
  }"
3876,"    public static String getFileName(@NotNull String fullName) {
        Validate.notEmpty(fullName);
        int last = fullName.lastIndexOf(Platforms.FILE_PATH_SEPARATOR_CHAR);
        return fullName.substring(last + 1);
    }","  public void test61()  throws Throwable  {
      String string0 = ""~"";
      FileUtil.isFileExists(""~"");
      // Undeclared exception!
      try { 
        FileUtil.getFileName((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated character sequence is empty
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3877,"    public static void append(final CharSequence from, final File to) throws IOException {
        Files.append(from, to, Charsets.UTF_8);
    }","  public void test62()  throws Throwable  {
      String string0 = ""nM]|=:3T"";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""nM]|=:3T"");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""nM]|=:3T"");
      FileUtil.isDirExists(""nM]|=:3T"");
      MockFile mockFile0 = new MockFile(""nM]|=:3T"");
      try { 
        FileUtil.append(""nM]|=:3T"", mockFile0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3878,"    public static void moveFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!isDirExists(to), to + "" is  exist but it is a dir"");

        Files.move(from, to);
    }","  public void test63()  throws Throwable  {
      String string0 = ""4Xi&l(5}R_K>D?{e|"";
      MockFile mockFile0 = new MockFile(""4Xi&l(5}R_K>D?{e|"");
      mockFile0.setReadOnly();
      mockFile0.setExecutable(true, true);
      mockFile0.createNewFile();
      mockFile0.toURI();
      FileUtil.asInputStream((File) mockFile0);
      String string1 = ""Cannot move directory: "";
      String string2 = """";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""4Xi&l(5}R_K>D?{e|"");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      File file0 = FileUtil.createTempFile(""Cannot move directory: "", """");
      try { 
        FileUtil.moveFile(mockFile0, file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unable to delete 4Xi&l(5}R_K>D?{e|
         //
         verifyException(""com.google.common.io.Files"", e);
      }
  }"
3879,"    public static void touch(String filePath) throws IOException {
        Files.touch(getFileByPath(filePath));
    }","  public void test64()  throws Throwable  {
      String string0 = "".tmp"";
      FileUtil.asBufferedWriter("".tmp"");
      FileUtil.createTempFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.touch(""^uk*`"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3880,"    public static void copy(@NotNull File from, @NotNull File to) throws IOException {
        Validate.notNull(from);
        Validate.notNull(to);

        if (from.isDirectory()) {
            copyDir(from, to);
        } else {
            copyFile(from, to);
        }
    }","  public void test65()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isFileExists(file0);
      MockFile mockFile0 = new MockFile(file0, ""S$(z% P]a18SGTYMu"");
      String string0 = ""java.util.prefs.PreferencesFactory"";
      MockFile.createTempFile(""java.util.prefs.PreferencesFactory"", ""S$(z% P]a18SGTYMu"", (File) mockFile0);
      FileUtil.moveDir(mockFile0, file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        FileUtil.copy(file0, mockFile0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3881,"    public static OutputStream asOututStream(String fileName) throws IOException {
        return new FileOutputStream(getFileByPath(fileName));
    }","  public void test66()  throws Throwable  {
      String string0 = ""nM]|=:3T"";
      FileUtil.isDirExists(""nM]|=:3T"");
      MockFile mockFile0 = new MockFile(""nM]|=:3T"");
      FileUtil.append(""nM]|=:3T"", mockFile0);
      FileUtil.append(""nM]|=:3T"", mockFile0);
      MockFile mockFile1 = new MockFile(""nM]|=:3T"", ""nM]|=:3T"");
      mockFile0.setExecutable(false);
      FileUtil.toByteArray(mockFile0);
      // Undeclared exception!
      try { 
        FileUtil.asOututStream((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
3882,"    public static BufferedReader asBufferedReader(String fileName) throws FileNotFoundException {
        return Files.newReader(getFileByPath(fileName), Charsets.UTF_8);
    }","  public void test67()  throws Throwable  {
      String string0 = ""nM]|=:3T"";
      FileUtil.isDirExists(""nM]|=:3T"");
      MockFile mockFile0 = new MockFile(""nM]|=:3T"");
      FileUtil.append(""nM]|=:3T"", mockFile0);
      FileUtil.append(""nM]|=:3T"", mockFile0);
      FileUtil.createTempDir();
      FileUtil.isDirExists(""nM]|=:3T"");
      FileUtil.toLines(mockFile0);
      String string1 = """";
      // Undeclared exception!
      try { 
        FileUtil.asBufferedReader("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3883,"    public static void write(final CharSequence data, final File file) throws IOException {
        Files.write(data, file, Charsets.UTF_8);
    }","  public void test68()  throws Throwable  {
      File file0 = FileUtil.createTempFile(""org.springside.modules.utils.io.FileUtil"", """");
      FileUtil.getFileExtension(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.deleteFile(file0);
      try { 
        FileUtil.write("""", file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3884,"    public static void append(final CharSequence from, final File to) throws IOException {
        Files.append(from, to, Charsets.UTF_8);
    }","  public void test69()  throws Throwable  {
      FileUtil.getFileExtension(""Cannot move directory: "");
      File file0 = FileUtil.createTempFile();
      FileUtil.append("""", file0);
  }"
3885,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test70()  throws Throwable  {
      String string0 = ""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/S$(z%P]a18SGTYMu/"";
      FileUtil.getFileName(""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/S$(z%P]a18SGTYMu/"");
      FileUtil.isDirExists("""");
      String string1 = ""8OLp&vm"";
      String string2 = null;
      File file0 = MockFile.createTempFile(""8OLp&vm"", (String) null);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/8OLp&vm0.tmp is not exist or not a dir
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3886,"    public static boolean isDirExists(String dirPath) {
        return isDirExists(getFileByPath(dirPath));
    }","  public void test71()  throws Throwable  {
      FileUtil.asOututStream(""S$(z% P]a18SGTYMu0S$(z% P]a18SGTYMu"");
      MockFile mockFile0 = new MockFile(""/tmp/1392409281320-0/S$(z% P]a18SGTYMu/"");
      MockFile.createTempFile(""VGL5n$5;;jEz]C_1.&m"", (String) null, (File) mockFile0);
      mockFile0.setWritable(true);
      mockFile0.getCanonicalPath();
      File file0 = MockFile.createTempFile(""com.google.common.collect.AbstractIterator$1"", ""com.google.common.collect.AbstractIterator$1"", (File) mockFile0);
      FileUtil.toByteArray(file0);
      FileUtil.asOututStream(file0);
      System.setCurrentTimeMillis(375L);
      FileUtil.isDirExists(""com.google.common.collect.UnmodifiableIterator"");
      FileUtil.isDirExists(""/tmp/1392409281320-0/S$(z% P]a18SGTYMu/"");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1313L);
  }"
3887,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test72()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp"");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      File file0 = FileUtil.createTempFile(""org.springside.modules.utils.io.FileUtil"", """");
      FileUtil.getFileExtension(file0);
      FileUtil.deleteFile(file0);
      FileUtil.write("""", file0);
      // Undeclared exception!
      FileUtil.createTempDir();
  }"
3888,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test73()  throws Throwable  {
      FileUtil.isDirExists(""aw~<P]zdmVo<v,"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileUtil.getFileName(""10.11"");
      FileUtil.isDirExists(""cmHVV]L_"");
      File file0 = FileUtil.createTempFile(""org.apache.commons.lang3.Validate"", ""Th|BVPQqKC%aV"");
      file0.getAbsoluteFile();
      FileUtil.getFileExtension(file0);
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, file0);
        fail(""Expecting exception: MissingFormatArgumentException"");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%a'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
3889,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test74()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isFileExists(file0);
      MockFile mockFile0 = new MockFile(file0, ""S$(z% P]a18SGTYMu"");
      String string0 = ""java.util.prefs.PreferencesFactory"";
      MockFile.createTempFile(""java.util.prefs.PreferencesFactory"", ""S$(z% P]a18SGTYMu"", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp"");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      try { 
        FileUtil.moveDir(mockFile0, file0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
3890,"    public static void moveFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!isDirExists(to), to + "" is  exist but it is a dir"");

        Files.move(from, to);
    }","  public void test75()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""4Xi&l(5}R_K>D?{e|"");
      mockFile0.setReadOnly();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""java.util.prefs.PreferencesFactory0p>$z"");
      mockFile0.setExecutable(true, true);
      mockFile0.createNewFile();
      mockFile0.toURI();
      FileUtil.asInputStream((File) mockFile0);
      String string0 = ""Cannot move directory: "";
      File file0 = FileUtil.createTempFile(""Cannot move directory: "", """");
      file0.setWritable(false);
      try { 
        FileUtil.moveFile(mockFile0, file0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
3891,"    public static OutputStream asOututStream(String fileName) throws IOException {
        return new FileOutputStream(getFileByPath(fileName));
    }","  public void test76()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""+&9H'H:!OZ3"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      try { 
        FileUtil.asOututStream(""+&9H'H:!OZ3"");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
3892,"    public static void touch(String filePath) throws IOException {
        Files.touch(getFileByPath(filePath));
    }","  public void test77()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      FileUtil.createTempFile();
      FileUtil.asOututStream(""zG4Mm:Vk'>j{"");
      // Undeclared exception!
      try { 
        FileUtil.touch((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3893,"    public static void makesureParentDirExists(File file) throws IOException {
        Files.createParentDirs(file);
    }","  public void test78()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.asOututStream(""zG4Mm:Vk'>j{"");
      MockFile.createTempFile(""zG4Mm:Vk'>j{"", ""java.til.prefs.PreferencesFatory0S$(z% P]a18SGTYMu"");
      FileUtil.touch(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/tmp-0.tmp"");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        FileUtil.makesureParentDirExists(file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3894,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test79()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.asOututStream(""zG4Mm:Vk'>j{"");
      FileUtil.touch(file0);
      FileUtil.makesureParentDirExists(file0);
      File file1 = file0.getAbsoluteFile();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/tmp-0.tmp"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""zG4Mm:Vk'>j{"");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileUtil.toString(file1);
      FileUtil.isFileExists("""");
      FileUtil.asOututStream(file0);
      // Undeclared exception!
      try { 
        FileUtil.toString((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3895,"    public static byte[] toByteArray(final File file) throws IOException {
        return Files.toByteArray(file);
    }","  public void test80()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      String string0 = ""-v&(Rh'A"";
      FileUtil.getFileName(""-v&(Rh'A"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.asOututStream(file0);
      try { 
        FileUtil.toByteArray(file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3896,"    public static void deleteFile(@Nullable File file) throws IOException {
        Validate.isTrue(isFileExists(file), file + "" is not exist or not a file"");
        file.delete();
    }","  public void test81()  throws Throwable  {
      String string0 = ""/tmp/1392409281320-0/S$(z% P]a58SGTYMu/"";
      MockFile mockFile0 = new MockFile(""/tmp/1392409281320-0/S$(z% P]a58SGTYMu/"");
      FileUtil.getFileExtension((File) mockFile0);
      // Undeclared exception!
      try { 
        FileUtil.deleteFile(mockFile0);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3897,"    public static void touch(String filePath) throws IOException {
        Files.touch(getFileByPath(filePath));
    }","  public void test82()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileUtil.asOututStream(""zG4Mm:Vk'>j{"");
      try { 
        FileUtil.touch(file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3898,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test83()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isDirExists(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/tmp-0.tmp"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file1 = FileUtil.createTempFile();
      FileUtil.moveDir(file0, file1);
  }"
3899,"    public static void touch(String filePath) throws IOException {
        Files.touch(getFileByPath(filePath));
    }","  public void test84()  throws Throwable  {
      String string0 = """";
      MockFile mockFile0 = new MockFile("""", """");
      // Undeclared exception!
      try { 
        FileUtil.touch((File) mockFile0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
3900,"    public static void copyFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!FileUtil.isDirExists(to), to + "" is exist but it is a dir"");
        Files.copy(from, to);
    }","  public void test85()  throws Throwable  {
      File file0 = FileUtil.createTempFile(""org.springside.modules.utils.io.FileUtil"", """");
      FileUtil.getFileExtension(file0);
      FileUtil.deleteFile(file0);
      FileUtil.write("""", file0);
      FileUtil.toByteArray(file0);
      file0.mkdirs();
      FileUtil.touch(""qng@wSWE"");
      MockFile mockFile0 = new MockFile(""qng@wSWE"", """");
      FileUtil.getFileExtension((File) mockFile0);
      FileUtil.asInputStream((File) mockFile0);
      File file1 = null;
      // Undeclared exception!
      try { 
        FileUtil.copyFile(file0, (File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3901,"    public static BufferedWriter asBufferedWriter(String fileName) throws FileNotFoundException {
        return Files.newWriter(getFileByPath(fileName), Charsets.UTF_8);
    }","  public void test86()  throws Throwable  {
      String string0 = ""nQ]|=:3T"";
      FileUtil.isFileExists(""nQ]|=:3T"");
      MockFile mockFile0 = new MockFile(""nQ]|=:3T"");
      FileUtil.asOututStream(""nQ]|=:3T"");
      mockFile0.setWritable(false, false);
      FileUtil.isDirExists(""nQ]|=:3T"");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""H?ob1NC4h5h"");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)1;
      mockFile0.toURL();
      FileUtil.getFileExtension("".."");
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-106);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil.asBufferedReader(""nQ]|=:3T"");
      try { 
        FileUtil.asBufferedWriter(""nQ]|=:3T"");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
3902,"    public static void copyFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!FileUtil.isDirExists(to), to + "" is exist but it is a dir"");
        Files.copy(from, to);
    }","  public void test87()  throws Throwable  {
      String string0 = ""[-pV\""%"";
      MockFile mockFile0 = new MockFile(""[-pV\""%"");
      File file0 = FileUtil.createTempDir();
      file0.setReadOnly();
      // Undeclared exception!
      try { 
        FileUtil.copyFile(mockFile0, file0);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'i'
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3903,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test88()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isDirExists(file0);
      FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, (File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3904,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test89()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.makesureParentDirExists(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileUtil.isFileExists("""");
      try { 
        FileUtil.toString(file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3905,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test90()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.touch(""Linux"");
      FileUtil.asInputStream(""Linux"");
      FileUtil fileUtil0 = new FileUtil();
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, (File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3906,"    public static void write(final CharSequence data, final File file) throws IOException {
        Files.write(data, file, Charsets.UTF_8);
    }","  public void test91()  throws Throwable  {
      File file0 = FileUtil.createTempFile(""M>K&F41<7>!C1v#PB"", ""M>K&F41<7>!C1v#PB"");
      FileUtil.write(""M>K&F41<7>!C1v#PB"", file0);
  }"
3907,"    public static byte[] toByteArray(final File file) throws IOException {
        return Files.toByteArray(file);
    }","  public void test92()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      try { 
        FileUtil.toByteArray(file0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3908,"    public static boolean isDirExists(String dirPath) {
        return isDirExists(getFileByPath(dirPath));
    }","  public void test93()  throws Throwable  {
      FileUtil.getFileExtension(""S$(z% P]a18SGTYu"");
      FileUtil.isDirExists("""");
  }"
3909,"    public static BufferedWriter asBufferedWriter(String fileName) throws FileNotFoundException {
        return Files.newWriter(getFileByPath(fileName), Charsets.UTF_8);
    }","  public void test94()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asBufferedWriter("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3910,"    public static BufferedReader asBufferedReader(String fileName) throws FileNotFoundException {
        return Files.newReader(getFileByPath(fileName), Charsets.UTF_8);
    }","  public void test95()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asBufferedReader((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3911,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test96()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""4Xi&l(5}R_K>D?{e|"", ""4Xi&l(5}R_K>D?{e|"");
      mockFile0.createNewFile();
      FileUtil.asInputStream((File) mockFile0);
      String string0 = ""Cannot move directory: "";
      File file0 = FileUtil.createTempFile(""Cannot move directory: "", ""java.util.prefs.PreferencesFactory0p>$z"");
      file0.toPath();
      FileUtil.moveFile(mockFile0, file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/tmp-1.tmp"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""Cannot move directory: "");
      FileUtil.touch(file0);
      mockFile0.setWritable(true);
      File file1 = FileUtil.createTempFile();
      mockFile0.mkdirs();
      FileUtil.toLines(file1);
      String string1 = ""org.springside.modules.utils.text.Charsets"";
      // Undeclared exception!
      try { 
        FileUtil.copyDir(mockFile0, file1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/tmp-1.tmp is exist but it is a file
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3912,"    public static void copyFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!FileUtil.isDirExists(to), to + "" is exist but it is a dir"");
        Files.copy(from, to);
    }","  public void test97()  throws Throwable  {
      String string0 = "":Hk5rDQ4<gi"";
      File file0 = MockFile.createTempFile("":Hk5rDQ4<gi"", "":Hk5rDQ4<gi"");
      file0.setReadable(false, false);
      file0.getAbsoluteFile();
      MockFile mockFile0 = new MockFile("":Hk5rDQ4<gi"", "":Hk5rDQ4<gi"");
      try { 
        FileUtil.copyFile(file0, mockFile0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3913,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test98()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isDirExists(file0);
      MockFile mockFile0 = new MockFile(""+&9H'H:!O3"", ""+&9H'H:!O3"");
      FileUtil.moveDir(file0, mockFile0);
      FileUtil.copyDir(mockFile0, file0);
      try { 
        FileUtil.asInputStream(""+&9H'H:!O3"");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3914,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test99()  throws Throwable  {
      String string0 = ""4Xi&l(5}R_K>D?{e|"";
      MockFile mockFile0 = new MockFile(""4Xi&l(5}R_K>D?{e|"", ""4Xi&l(5}R_K>D?{e|"");
      mockFile0.createNewFile();
      File file0 = FileUtil.createTempFile(""4Xi&l(5}R_K>D?{e|"", ""4Xi&l(5}R_K>D?{e|"");
      FileUtil.moveFile(mockFile0, file0);
      mockFile0.mkdirs();
      FileUtil.toLines(file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(mockFile0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/4Xi&l(5}R_K>D?{e|04Xi&l(5}R_K>D?{e| is exist but it is a file
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3915,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test100()  throws Throwable  {
      File file0 = FileUtil.createTempFile(""%S)0Kt?&YEuTs?VKb7"", ""%S)0Kt?&YEuTs?VKb7"");
      FileUtil.getFileExtension(file0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""%S)0Kt?&YEuTs?VKb7"");
      System.setCurrentTimeMillis((-1L));
      String string0 = ""/tmp/1392409281320-0/vg0j6c =jJ/"";
      FileUtil.asOututStream(""/tmp/1392409281320-0/vg0j6c =jJ/"");
      FileUtil.asInputStream(file0);
      FileUtil.asOututStream(file0);
      FileUtil.toLines(file0);
      System.setCurrentTimeMillis(0L);
      FileUtil.toLines(file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail(""Expecting exception: MissingFormatArgumentException"");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%S'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
3916,"    public static void copy(@NotNull File from, @NotNull File to) throws IOException {
        Validate.notNull(from);
        Validate.notNull(to);

        if (from.isDirectory()) {
            copyDir(from, to);
        } else {
            copyFile(from, to);
        }
    }","  public void test101()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.isFileExists(file0);
      String string0 = ""/tmp/1392409281320-0/S$(z%P]a18SGTYMu/"";
      MockFile mockFile0 = new MockFile(file0, ""/tmp/1392409281320-0/S$(z%P]a18SGTYMu/"");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/1392409281320-0/tmp/1392409281320-0/S$(z%P]a18SGTYMu/0/tmp/1392409281320-0/S$(z%P]a18SGTYMu"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ""/tmp/1392409281320-0/S$(z%P]a18SGTYMu/"");
      MockFile.createTempFile(""/tmp/1392409281320-0/S$(z%P]a18SGTYMu/"", ""/tmp/1392409281320-0/S$(z%P]a18SGTYMu/"", (File) mockFile0);
      FileUtil.moveDir(mockFile0, file0);
      FileUtil.createTempFile();
      mockFile0.mkdir();
      // Undeclared exception!
      try { 
        FileUtil.copy(file0, file0);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3917,"    public static OutputStream asOututStream(String fileName) throws IOException {
        return new FileOutputStream(getFileByPath(fileName));
    }","  public void test102()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(file0, ""."");
      FileUtil.moveDir(file0, mockFile0);
      FileUtil.createTempFile();
      FileUtil.asOututStream(""."");
      try { 
        FileUtil.asOututStream(file0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
3918,"    public static void moveFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!isDirExists(to), to + "" is  exist but it is a dir"");

        Files.move(from, to);
    }","  public void test103()  throws Throwable  {
      FileUtil.createTempDir();
      FileUtil.createTempDir();
      FileUtil fileUtil0 = new FileUtil();
      FileUtil.createTempFile();
      MockFile mockFile0 = new MockFile("""", "":,krDP4%gi"");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, mockFile0);
        fail(""Expecting exception: MissingFormatArgumentException"");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%g'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
3919,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test104()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3920,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test105()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3921,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test106()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3922,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test107()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3923,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test108()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3924,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test109()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3925,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test110()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3926,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test111()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3927,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test112()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3928,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test113()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3929,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test114()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3930,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test115()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3931,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test116()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3932,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test117()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3933,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test118()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3934,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test119()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3935,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test120()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
}"
3936,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test121()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      String string0 = ""/"";
      MockFile mockFile0 = new MockFile(""/"", ""/"");
}"
3937,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test122()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      String string0 = ""/"";
      MockFile mockFile0 = new MockFile(""/"", ""/"");
}"
3938,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test123()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      String string0 = ""/"";
      MockFile mockFile0 = new MockFile(""/"", ""/"");
      MockFile mockFile1 = new MockFile(""/"", ""/"");
}"
3939,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test124()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      String string0 = ""/"";
      MockFile mockFile0 = new MockFile(""/"", ""/"");
      MockFile mockFile1 = new MockFile(""/"", ""/"");
}"
3940,"    public static File createTempDir() {
        return Files.createTempDir();
    }","  public void test125()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      String string0 = ""/"";
      MockFile mockFile0 = new MockFile(""/"", ""/"");
      MockFile mockFile1 = new MockFile(""/"", ""/"");
}"
3941,,"  public void test126()  throws Throwable  {
      String string0 = ""%s (%s) must be less than size (%s)"";
      MockFile mockFile0 = new MockFile(""%s (%s) must be less than size (%s)"");
}"
3942,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test127()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3943,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test128()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3944,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test129()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3945,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test130()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3946,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test131()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3947,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test132()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3948,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test133()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3949,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test134()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3950,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test135()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3951,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test136()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3952,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test137()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3953,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test138()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3954,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test139()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3955,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test140()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3956,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test141()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3957,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test142()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3958,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test143()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
}"
3959,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test144()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3960,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test145()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3961,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test146()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3962,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test147()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3963,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test148()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3964,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test149()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3965,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test150()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3966,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test151()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3967,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test152()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3968,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test153()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3969,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test154()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3970,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test155()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3971,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test156()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3972,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test157()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3973,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test158()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3974,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test159()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3975,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test160()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3976,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test161()  throws Throwable  {
      File file0 = FileUtil.createTempFile();
      InputStream inputStream0 = FileUtil.asInputStream(file0);
}"
3977,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test162()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(file0, ""U'.*6YTo74K5^C"");
      try { 
        FileUtil.moveDir(file0, mockFile0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Cannot move directory: /tmp/1392409281320-0 to a subdirectory of itself: /tmp/1392409281320-0/U'.*6YTo74K5^C
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
3978,"    public static OutputStream asOututStream(String fileName) throws IOException {
        return new FileOutputStream(getFileByPath(fileName));
    }","  public void test163()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.touch(file0);
      // Undeclared exception!
      try { 
        FileUtil.asOututStream("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
3979,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test164()  throws Throwable  {
      File file0 = FileUtil.createTempFile(""tmp-"", ""Failed to delete original directory '"");
      FileUtil.deleteFile(file0);
}"
3980,"    public static void deleteFile(@Nullable File file) throws IOException {
        Validate.isTrue(isFileExists(file), file + "" is not exist or not a file"");
        file.delete();
    }","  public void test165()  throws Throwable  {
      File file0 = FileUtil.createTempFile(""tmp-"", ""Failed to delete original directory '"");
      FileUtil.deleteFile(file0);
}"
3981,"    public static File createTempFile() throws IOException {
        return File.createTempFile(""tmp-"", "".tmp"");
    }","  public void test166()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      file0.setReadable(false);
      FileUtil.touch(""@M/T"");
      FileUtil.asInputStream(""@M/T"");
      FileUtil.createTempDir();
      try { 
        MockFile.createTempFile(""@M/T"", ""@M/T"", file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3982,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test167()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      file0.setReadOnly();
      File file1 = FileUtil.createTempDir();
      FileUtil.copyDir(file0, file0);
}"
3983,"    public static void moveFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!isDirExists(to), to + "" is  exist but it is a dir"");

        Files.move(from, to);
    }","  public void test168()  throws Throwable  {
      String string0 = ""4il(5}R_>D?{P|"";
      MockFile mockFile0 = new MockFile(""4il(5}R_>D?{P|"", ""4il(5}R_>D?{P|"");
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile(""4il(5}R_>D?{P|"");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, (File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3984,"    public static void copyFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!FileUtil.isDirExists(to), to + "" is exist but it is a dir"");
        Files.copy(from, to);
    }","  public void test169()  throws Throwable  {
      String string0 = "":HkJrD4<z"";
      File file0 = MockFile.createTempFile("":HkJrD4<z"", "":HkJrD4<z"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      file0.getAbsoluteFile();
      MockFile mockFile0 = new MockFile("":HkJrD4<z"", "":HkJrD4<z"");
      try { 
        FileUtil.copyFile(file0, mockFile0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
3985,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)55;
      byte byte0 = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = FileUtil.createTempFile(""_[Or%0STz4(Y<JCm"", ""RgB/"");
      FileUtil.getFileExtension(file0);
      File file1 = FileUtil.createTempFile(""_[Or%0STz4(Y<JCm"", ""4"");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file1, file1);
        fail(""Expecting exception: FormatFlagsConversionMismatchException"");
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = s, Flags = 0
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
3986,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test171()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      String string0 = ""/tmp/132409281320-0/S$(zP]a18SGTYMu/"";
      MockFile mockFile0 = new MockFile(file0, ""/tmp/132409281320-0/S$(zP]a18SGTYMu/"");
      MockFile.createTempFile(""/tmp/132409281320-0/S$(zP]a18SGTYMu/"", ""/tmp/132409281320-0/S$(zP]a18SGTYMu/"", (File) mockFile0);
      try { 
        FileUtil.moveDir(mockFile0, file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Failed to delete original directory '/tmp/1392409281320-0/tmp/132409281320-0/S$(zP]a18SGTYMu' after copy to '/tmp/1392409281320-0'
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
3987,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test172()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      File file1 = FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.moveDir(file0, file1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/tmp-0.tmp is exist but it is a file
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3988,"    public static void touch(String filePath) throws IOException {
        Files.touch(getFileByPath(filePath));
    }","  public void test173()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      // Undeclared exception!
      try { 
        FileUtil.touch(""//"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
3989,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test174()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      file0.setExecutable(false, false);
      FileUtil.touch(""@M/T"");
      FileUtil.asInputStream(""@M/T"");
      FileUtil.createTempDir();
      MockFile.createTempFile(""@M/T"", ""@M/T"", file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/1392409281320-0/@M/T0@M/T and destination /tmp/1392409281320-0/@M/T0@M/T must be different
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3990,"    public static void moveFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!isDirExists(to), to + "" is  exist but it is a dir"");

        Files.move(from, to);
    }","  public void test175()  throws Throwable  {
      File file0 = FileUtil.createTempFile(""QF#G!mI9?"", ""wzx"");
      // Undeclared exception!
      try { 
        FileUtil.moveFile(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/QF#G!mI9?0wzx and destination /tmp/QF#G!mI9?0wzx must be different
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3991,"    public static void copyFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!FileUtil.isDirExists(to), to + "" is exist but it is a dir"");
        Files.copy(from, to);
    }","  public void test176()  throws Throwable  {
      File file0 = MockFile.createTempFile(""+D"", """");
      File file1 = FileUtil.createTempFile(""com.google.common.io.ByteSource"", "">9L/4|"");
      FileUtil.copyFile(file0, file1);
      // Undeclared exception!
      try { 
        FileUtil.copyFile(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/+D0 and destination /tmp/+D0 must be different
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3992,"    public static List<String> toLines(final File file) throws IOException {
        return Files.readLines(file, Charsets.UTF_8);
    }","  public void test177()  throws Throwable  {
      String string0 = null;
      File file0 = FileUtil.createTempDir();
      FileUtil.copy(file0, file0);
      FileUtil.isFileExists(file0);
      try { 
        FileUtil.toLines(file0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3993,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test178()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.touch(""@M/T"");
      FileUtil.asInputStream(""@M/T"");
      MockFile.createTempFile(""@M/T"", ""@M/T"", file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/1392409281320-0/@M/T0@M/T and destination /tmp/1392409281320-0/@M/T0@M/T must be different
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3994,"    public static void copy(@NotNull File from, @NotNull File to) throws IOException {
        Validate.notNull(from);
        Validate.notNull(to);

        if (from.isDirectory()) {
            copyDir(from, to);
        } else {
            copyFile(from, to);
        }
    }","  public void test179()  throws Throwable  {
      String string0 = ""os.arch"";
      FileUtil.getFileExtension(""os.arch"");
      File file0 = FileUtil.createTempFile();
      // Undeclared exception!
      try { 
        FileUtil.copy(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/tmp-0.tmp and destination /tmp/tmp-0.tmp must be different
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3995,"    public static InputStream asInputStream(String fileName) throws IOException {
        return new FileInputStream(getFileByPath(fileName));
    }","  public void test180()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""+&9H'H:!O3"");
      try { 
        FileUtil.asInputStream(""+&9H'H:!O3"");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
3996,"    public static void copyFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!FileUtil.isDirExists(to), to + "" is exist but it is a dir"");
        Files.copy(from, to);
    }","  public void test181()  throws Throwable  {
      File file0 = MockFile.createTempFile(""+D"", ""+D"");
      MockFile mockFile0 = new MockFile(""+D"", ""+D"");
      mockFile0.mkdirs();
      // Undeclared exception!
      try { 
        FileUtil.copyFile(file0, mockFile0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/+D/+D is exist but it is a dir
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
3997,"    public static void makesureDirExists(String dirPath) throws IOException {
        makesureDirExists(getFileByPath(dirPath));
    }","  public void test182()  throws Throwable  {
      FileUtil.getFileName(""/$q"");
      FileUtil.makesureDirExists(""$q"");
  }"
3998,"    public static void copy(@NotNull File from, @NotNull File to) throws IOException {
        Validate.notNull(from);
        Validate.notNull(to);

        if (from.isDirectory()) {
            copyDir(from, to);
        } else {
            copyFile(from, to);
        }
    }","  public void test183()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/1392409281320-0/tEp/132409281320-0/S$(zP]a18SGTYMu/0"");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      // Undeclared exception!
      try { 
        FileUtil.copy(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/1392409281320-0/tEp/132409281320-0/S$(zP]a18SGTYMu/0 and destination /tmp/1392409281320-0/tEp/132409281320-0/S$(zP]a18SGTYMu/0 must be different
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3999,"    public static OutputStream asOututStream(String fileName) throws IOException {
        return new FileOutputStream(getFileByPath(fileName));
    }","  public void test184()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(file0, ""."");
      FileUtil.moveDir(file0, mockFile0);
      try { 
        FileUtil.asOututStream(file0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
4000,"    public static void deleteFile(@Nullable File file) throws IOException {
        Validate.isTrue(isFileExists(file), file + "" is not exist or not a file"");
        file.delete();
    }","  public void test185()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      // Undeclared exception!
      try { 
        FileUtil.deleteFile(file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/1392409281320-0 is not exist or not a file
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4001,"    public static BufferedReader asBufferedReader(String fileName) throws FileNotFoundException {
        return Files.newReader(getFileByPath(fileName), Charsets.UTF_8);
    }","  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileUtil.asBufferedReader("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4002,"    public static void moveFile(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isFileExists(from), from + "" is not exist or not a file"");
        Validate.notNull(to);
        Validate.isTrue(!isDirExists(to), to + "" is  exist but it is a dir"");

        Files.move(from, to);
    }","  public void test187()  throws Throwable  {
      String string0 = "".."";
      MockFile mockFile0 = new MockFile("".."", "".."");
      MockFile mockFile1 = new MockFile("".."");
      mockFile0.createNewFile();
      // Undeclared exception!
      try { 
        FileUtil.moveFile(mockFile0, mockFile1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // .. is  exist but it is a dir
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4003,"    public static void makesureDirExists(String dirPath) throws IOException {
        makesureDirExists(getFileByPath(dirPath));
    }","  public void test188()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      MockFile mockFile0 = new MockFile(""/.."", ""/.."");
      MockFile.createTempFile(""/.."", ""/.."", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("".."");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ""/.."");
      FileUtil.moveDir(mockFile0, file0);
      FileUtil.getFileName(""/.."");
      try { 
        FileUtil.makesureDirExists("".."");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // There is a file exists ..
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
4004,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test189()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""X.&"");
      File file0 = MockFile.createTempFile(""X.&"", ""X.&"", (File) mockFile0);
      FileUtil.getFileName(""X.&"");
      FileUtil.makesureDirExists(""X.&"");
      // Undeclared exception!
      try { 
        FileUtil.moveDir(mockFile0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/X.&/X.&0X.& is exist but it is a file
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4005,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test190()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      FileUtil.touch(""/6U/6"");
      FileUtil.asInputStream(""/6U/6"");
      MockFile.createTempFile(""/6U/6"", ""/6U/6"", file0);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(file0, file0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Source /tmp/1392409281320-0/6U/60/6U/6 and destination /tmp/1392409281320-0/6U/60/6U/6 must be different
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4006,"    public static boolean isFileExists(String fileName) {
        return isFileExists(getFileByPath(fileName));
    }","  public void test191()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.makesureParentDirExists(file0);
      boolean boolean0 = FileUtil.isFileExists("""");
}"
4007,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test192()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.makesureParentDirExists(file0);
      boolean boolean0 = FileUtil.isFileExists("""");
      FileUtil.toString(file0);
}"
4008,"    public static String toString(final File file) throws IOException {
        return Files.toString(file, Charsets.UTF_8);
    }","  public void test193()  throws Throwable  {
      FileUtil fileUtil0 = new FileUtil();
      File file0 = FileUtil.createTempFile();
      FileUtil.makesureParentDirExists(file0);
      boolean boolean0 = FileUtil.isFileExists("""");
      FileUtil.toString(file0);
}"
4009,"    public static void copyDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);

        if (to.exists()) {
            Validate.isTrue(!to.isFile(), to + "" is exist but it is a file"");
        } else {
            to.mkdirs();
        }

        File[] files = from.listFiles();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {
                String name = files[i].getName();
                if (""."".equals(name) || "".."".equals(name)) {
                    continue;
                }
                copy(files[i], new File(to, name));
            }
        }
    }","  public void test194()  throws Throwable  {
      String string0 = ""4Xi&l(5}R_K>D?{e|"";
      MockFile mockFile0 = new MockFile(""4Xi&l(5}R_K>D?{e|"", ""4Xi&l(5}R_K>D?{e|"");
      mockFile0.createNewFile();
      MockFile mockFile1 = new MockFile("",8Mdv"", ""4Xi&l(5}R_K>D?{e|"");
      FileUtil.isDirExists(""4Xi&l(5}R_K>D?{e|"");
      FileUtil.moveFile(mockFile0, mockFile1);
      FileUtil.touch((File) mockFile1);
      mockFile0.mkdirs();
      FileUtil.toLines(mockFile1);
      // Undeclared exception!
      try { 
        FileUtil.copyDir(mockFile0, mockFile1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/,8Mdv/4Xi&l(5}R_K>D?{e| is exist but it is a file
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4010,"    public static String getFileExtension(File file) {
        return Files.getFileExtension(file.getName());
    }","  public void test195()  throws Throwable  {
      File file0 = FileUtil.createTempFile(""org.springside.modules.utils.i1.FileUti#"", ""org.springside.modules.utils.i1.FileUti#"");
      FileUtil.getFileExtension(""org.springside.modules.utils.i1.FileUti#"");
      FileUtil.write(""org.springside.modules.utils.i1.FileUti#"", file0);
      FileUtil.toByteArray(file0);
      FileUtil.asInputStream(file0);
      String string0 = FileUtil.getFileExtension(file0);
}"
4011,"    public static void deleteDir(File dir) {
        Validate.isTrue(isDirExists(dir), dir + "" is not exist or not a dir"");

        // 后序遍历，先删掉子目录中的文件/目录
        Iterator<File> iterator = Files.fileTreeTraverser().postOrderTraversal(dir).iterator();
        while (iterator.hasNext()) {
            iterator.next().delete();
        }
    }","  public void test196()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""nQ]|=:3T"");
      FileUtil.asOututStream(""nQ]|=:3T"");
      FileUtil.asBufferedWriter(""nQ]|=:3T"");
      FileUtil.append(""nQ]|=:3T"", mockFile0);
      File file0 = null;
      // Undeclared exception!
      try { 
        FileUtil.deleteDir((File) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // null is not exist or not a dir
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4012,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test197()  throws Throwable  {
      File file0 = FileUtil.createTempDir();
      file0.setReadOnly();
      try { 
        FileUtil.moveDir(file0, file0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Failed to delete original directory '/tmp/1392409281320-0' after copy to '/tmp/1392409281320-0'
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
4013,"    public static void moveDir(@NotNull File from, @NotNull File to) throws IOException {
        Validate.isTrue(isDirExists(from), from + "" is not exist or not a dir"");
        Validate.notNull(to);
        Validate.isTrue(!isFileExists(to), to + "" is exist but it is a file"");

        final boolean rename = from.renameTo(to);
        if (!rename) {
            if (to.getCanonicalPath().startsWith(from.getCanonicalPath() + File.separator)) {
                throw new IOException(""Cannot move directory: "" + from + "" to a subdirectory of itself: "" + to);
            }
            copyDir(from, to);
            deleteDir(from);
            if (from.exists()) {
                throw new IOException(""Failed to delete original directory '"" + from + ""' after copy to '"" + to + '\'');
            }
        }
    }","  public void test198()  throws Throwable  {
      String string0 = ""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/"";
      MockFile mockFile0 = new MockFile(""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/"");
      MockFile mockFile1 = new MockFile(""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/"", ""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/"");
      try { 
        FileUtil.moveDir(mockFile0, mockFile1);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Cannot move directory: /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils to a subdirectory of itself: /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils
         //
         verifyException(""org.springside.modules.utils.io.FileUtil"", e);
      }
  }"
4014,"    public static String getParentPath(String path) {
        String parentPath = path;

        if (Platforms.FILE_PATH_SEPARATOR.equals(parentPath)) {
            return parentPath;
        }

        parentPath = MoreStringUtil.removeEnd(parentPath, Platforms.FILE_PATH_SEPARATOR_CHAR);

        int idx = parentPath.lastIndexOf(Platforms.FILE_PATH_SEPARATOR_CHAR);
        if (idx >= 0) {
            parentPath = parentPath.substring(0, idx + 1);
        } else {
            parentPath = Platforms.FILE_PATH_SEPARATOR;
        }

        return parentPath;
    }","  public void test0()  throws Throwable  {
      String string0 = FilePathUtil.getParentPath(""/fCHrLiynpiy"");
}"
4015,"    public static String getParentPath(String path) {
        String parentPath = path;

        if (Platforms.FILE_PATH_SEPARATOR.equals(parentPath)) {
            return parentPath;
        }

        parentPath = MoreStringUtil.removeEnd(parentPath, Platforms.FILE_PATH_SEPARATOR_CHAR);

        int idx = parentPath.lastIndexOf(Platforms.FILE_PATH_SEPARATOR_CHAR);
        if (idx >= 0) {
            parentPath = parentPath.substring(0, idx + 1);
        } else {
            parentPath = Platforms.FILE_PATH_SEPARATOR;
        }

        return parentPath;
    }","  public void test1()  throws Throwable  {
      String string0 = FilePathUtil.getParentPath(""[!c1Fu(D/2Ne2mTR/x/[!c1Fu(D/"");
}"
4016,"    public static String normalizePath(String path) {
        if (Platforms.FILE_PATH_SEPARATOR_CHAR == Platforms.WINDOWS_FILE_PATH_SEPARATOR_CHAR
                && StringUtils.indexOf(path, Platforms.LINUX_FILE_PATH_SEPARATOR_CHAR) != -1) {
            return StringUtils.replaceChars(path, Platforms.LINUX_FILE_PATH_SEPARATOR_CHAR,
                    Platforms.WINDOWS_FILE_PATH_SEPARATOR_CHAR);
        }
        return path;

    }","  public void test2()  throws Throwable  {
      String string0 = FilePathUtil.normalizePath((String) null);
}"
4017,"    public static String normalizePath(String path) {
        if (Platforms.FILE_PATH_SEPARATOR_CHAR == Platforms.WINDOWS_FILE_PATH_SEPARATOR_CHAR
                && StringUtils.indexOf(path, Platforms.LINUX_FILE_PATH_SEPARATOR_CHAR) != -1) {
            return StringUtils.replaceChars(path, Platforms.LINUX_FILE_PATH_SEPARATOR_CHAR,
                    Platforms.WINDOWS_FILE_PATH_SEPARATOR_CHAR);
        }
        return path;

    }","  public void test3()  throws Throwable  {
      String string0 = FilePathUtil.normalizePath("""");
}"
4018,"    public static String contact(String baseName, String... appendName) {
        if (appendName.length == 0) {
            return baseName;
        }

        String contactName;
        if (MoreStringUtil.endWith(baseName, Platforms.FILE_PATH_SEPARATOR_CHAR)) {
            contactName = baseName + appendName[0];
        } else {
            contactName = baseName + Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[0];
        }

        if (appendName.length > 1) {
            for (int i = 1; i < appendName.length; i++) {
                contactName += Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[i];
            }
        }

        return contactName;
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = FilePathUtil.contact("""", stringArray0);
}"
4019,"    public static String simplifyPath(String path) {
        return Files.simplifyPath(path);
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilePathUtil.simplifyPath((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4020,"    public static String getParentPath(String path) {
        String parentPath = path;

        if (Platforms.FILE_PATH_SEPARATOR.equals(parentPath)) {
            return parentPath;
        }

        parentPath = MoreStringUtil.removeEnd(parentPath, Platforms.FILE_PATH_SEPARATOR_CHAR);

        int idx = parentPath.lastIndexOf(Platforms.FILE_PATH_SEPARATOR_CHAR);
        if (idx >= 0) {
            parentPath = parentPath.substring(0, idx + 1);
        } else {
            parentPath = Platforms.FILE_PATH_SEPARATOR;
        }

        return parentPath;
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilePathUtil.getParentPath((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.io.FilePathUtil"", e);
      }
  }"
4021,"    public static String contact(String baseName, String... appendName) {
        if (appendName.length == 0) {
            return baseName;
        }

        String contactName;
        if (MoreStringUtil.endWith(baseName, Platforms.FILE_PATH_SEPARATOR_CHAR)) {
            contactName = baseName + appendName[0];
        } else {
            contactName = baseName + Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[0];
        }

        if (appendName.length > 1) {
            for (int i = 1; i < appendName.length; i++) {
                contactName += Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[i];
            }
        }

        return contactName;
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        FilePathUtil.contact((String) null, (String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.io.FilePathUtil"", e);
      }
  }"
4022,"    public static String getParentPath(String path) {
        String parentPath = path;

        if (Platforms.FILE_PATH_SEPARATOR.equals(parentPath)) {
            return parentPath;
        }

        parentPath = MoreStringUtil.removeEnd(parentPath, Platforms.FILE_PATH_SEPARATOR_CHAR);

        int idx = parentPath.lastIndexOf(Platforms.FILE_PATH_SEPARATOR_CHAR);
        if (idx >= 0) {
            parentPath = parentPath.substring(0, idx + 1);
        } else {
            parentPath = Platforms.FILE_PATH_SEPARATOR;
        }

        return parentPath;
    }","  public void test8()  throws Throwable  {
      String string0 = FilePathUtil.getParentPath(""/"");
}"
4023,"    public static String getParentPath(String path) {
        String parentPath = path;

        if (Platforms.FILE_PATH_SEPARATOR.equals(parentPath)) {
            return parentPath;
        }

        parentPath = MoreStringUtil.removeEnd(parentPath, Platforms.FILE_PATH_SEPARATOR_CHAR);

        int idx = parentPath.lastIndexOf(Platforms.FILE_PATH_SEPARATOR_CHAR);
        if (idx >= 0) {
            parentPath = parentPath.substring(0, idx + 1);
        } else {
            parentPath = Platforms.FILE_PATH_SEPARATOR;
        }

        return parentPath;
    }","  public void test9()  throws Throwable  {
      String string0 = FilePathUtil.getParentPath(""V|7H"");
}"
4024,"    public static String contact(String baseName, String... appendName) {
        if (appendName.length == 0) {
            return baseName;
        }

        String contactName;
        if (MoreStringUtil.endWith(baseName, Platforms.FILE_PATH_SEPARATOR_CHAR)) {
            contactName = baseName + appendName[0];
        } else {
            contactName = baseName + Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[0];
        }

        if (appendName.length > 1) {
            for (int i = 1; i < appendName.length; i++) {
                contactName += Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[i];
            }
        }

        return contactName;
    }","  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = FilePathUtil.contact(""org.spingside.modules.utilsko.:lePathil"", stringArray0);
}"
4025,"    public static String contact(String baseName, String... appendName) {
        if (appendName.length == 0) {
            return baseName;
        }

        String contactName;
        if (MoreStringUtil.endWith(baseName, Platforms.FILE_PATH_SEPARATOR_CHAR)) {
            contactName = baseName + appendName[0];
        } else {
            contactName = baseName + Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[0];
        }

        if (appendName.length > 1) {
            for (int i = 1; i < appendName.length; i++) {
                contactName += Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[i];
            }
        }

        return contactName;
    }","  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = FilePathUtil.contact("""", stringArray0);
}"
4026,"    public static String contact(String baseName, String... appendName) {
        if (appendName.length == 0) {
            return baseName;
        }

        String contactName;
        if (MoreStringUtil.endWith(baseName, Platforms.FILE_PATH_SEPARATOR_CHAR)) {
            contactName = baseName + appendName[0];
        } else {
            contactName = baseName + Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[0];
        }

        if (appendName.length > 1) {
            for (int i = 1; i < appendName.length; i++) {
                contactName += Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[i];
            }
        }

        return contactName;
    }","  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = FilePathUtil.contact((String) null, stringArray0);
}"
4027,"    public static String contact(String baseName, String... appendName) {
        if (appendName.length == 0) {
            return baseName;
        }

        String contactName;
        if (MoreStringUtil.endWith(baseName, Platforms.FILE_PATH_SEPARATOR_CHAR)) {
            contactName = baseName + appendName[0];
        } else {
            contactName = baseName + Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[0];
        }

        if (appendName.length > 1) {
            for (int i = 1; i < appendName.length; i++) {
                contactName += Platforms.FILE_PATH_SEPARATOR_CHAR + appendName[i];
            }
        }

        return contactName;
    }","  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = FilePathUtil.contact(""/"", stringArray0);
}"
4028,"    public static String normalizePath(String path) {
        if (Platforms.FILE_PATH_SEPARATOR_CHAR == Platforms.WINDOWS_FILE_PATH_SEPARATOR_CHAR
                && StringUtils.indexOf(path, Platforms.LINUX_FILE_PATH_SEPARATOR_CHAR) != -1) {
            return StringUtils.replaceChars(path, Platforms.LINUX_FILE_PATH_SEPARATOR_CHAR,
                    Platforms.WINDOWS_FILE_PATH_SEPARATOR_CHAR);
        }
        return path;

    }","  public void test14()  throws Throwable  {
      String string0 = FilePathUtil.normalizePath(""/"");
}"
4029,"    public static String simplifyPath(String path) {
        return Files.simplifyPath(path);
    }","  public void test15()  throws Throwable  {
      String string0 = FilePathUtil.simplifyPath(""org.springside.modules.utils.io.FilePathUtil"");
}"
4030,,"  public void test16()  throws Throwable  {
      FilePathUtil filePathUtil0 = new FilePathUtil();
  }"
4031,"    public static List<URL> getResources(String resourceName) {
        return getResources(resourceName, ClassUtil.getDefaultClassLoader());
    }","  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      List<URL> list0 = ResourceUtil.getResources(""%X9"", classLoader0);
}"
4032,"    public static URL asUrl(String resourceName) {
        return Resources.getResource(resourceName);
    }","  public void test1()  throws Throwable  {
      URL uRL0 = ResourceUtil.asUrl("""");
}"
4033,"    public static InputStream asStream(String resourceName) throws IOException {
        return Resources.getResource(resourceName).openStream();
    }","  public void test2()  throws Throwable  {
      InputStream inputStream0 = ResourceUtil.asStream("""");
}"
4034,"    public static String toString(String resourceName) throws IOException {
        return Resources.toString(Resources.getResource(resourceName), Charsets.UTF_8);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.toString((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4035,"    public static String toString(String resourceName) throws IOException {
        return Resources.toString(Resources.getResource(resourceName), Charsets.UTF_8);
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.toString("" &2~&b!bfQ,T5@9?6K"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // resource  &2~&b!bfQ,T5@9?6K not found.
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4036,"    public static List<String> toLines(String resourceName) throws IOException {
        return Resources.readLines(Resources.getResource(resourceName), Charsets.UTF_8);
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.toLines((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4037,"    public static List<String> toLines(String resourceName) throws IOException {
        return Resources.readLines(Resources.getResource(resourceName), Charsets.UTF_8);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.toLines(""^3a@ZR(Vk"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // resource ^3a@ZR(Vk not found.
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4038,"    public static List<URL> getResources(String resourceName) {
        return getResources(resourceName, ClassUtil.getDefaultClassLoader());
    }","  public void test7()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        ResourceUtil.getResources((String) null, classLoader0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4039,"    public static List<URL> getResources(String resourceName) {
        return getResources(resourceName, ClassUtil.getDefaultClassLoader());
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.getResources((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4040,"    public static URL asUrl(String resourceName) {
        return Resources.getResource(resourceName);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.asUrl((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4041,"    public static InputStream asStream(String resourceName) throws IOException {
        return Resources.getResource(resourceName).openStream();
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.asStream((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4042,"    public static List<URL> getResources(String resourceName) {
        return getResources(resourceName, ClassUtil.getDefaultClassLoader());
    }","  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      List<URL> list0 = ResourceUtil.getResources("""", classLoader0);
}"
4043,"    public static List<URL> getResources(String resourceName) {
        return getResources(resourceName, ClassUtil.getDefaultClassLoader());
    }","  public void test12()  throws Throwable  {
      List<URL> list0 = ResourceUtil.getResources("""");
}"
4044,"    public static List<URL> getResources(String resourceName) {
        return getResources(resourceName, ClassUtil.getDefaultClassLoader());
    }","  public void test13()  throws Throwable  {
      List<URL> list0 = ResourceUtil.getResources(""?vYOP^s!4'+nn'^]ir"");
}"
4045,"    public static URL asUrl(String resourceName) {
        return Resources.getResource(resourceName);
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.asUrl(""application.properties\nlogback.xml\norg\ntest.txt\n"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // resource application.properties
         // logback.xml
         // org
         // test.txt
         //  not found.
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4046,"    public static InputStream asStream(String resourceName) throws IOException {
        return Resources.getResource(resourceName).openStream();
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ResourceUtil.asStream(""/"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // resource / not found.
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4047,,"  public void test16()  throws Throwable  {
      ResourceUtil resourceUtil0 = new ResourceUtil();
  }"
4048,"    public static List<String> toLines(String resourceName) throws IOException {
        return Resources.readLines(Resources.getResource(resourceName), Charsets.UTF_8);
    }","  public void test17()  throws Throwable  {
      List<String> list0 = ResourceUtil.toLines("""");
}"
4049,"    public static String toString(String resourceName) throws IOException {
        return Resources.toString(Resources.getResource(resourceName), Charsets.UTF_8);
    }","  public void test18()  throws Throwable  {
      String string0 = ResourceUtil.toString("""");
}"
4050,"    public static URI toURI(String location) throws URISyntaxException {
        return new URI(StringUtils.replace(location, "" "", ""%20""));
    }","  public void test0()  throws Throwable  {
      URI uRI0 = URLResourceUtil.toURI(""D."");
}"
4051,"    public static URI toURI(String location) throws URISyntaxException {
        return new URI(StringUtils.replace(location, "" "", ""%20""));
    }","  public void test1()  throws Throwable  {
      URI uRI0 = URLResourceUtil.toURI(""UZUt6:,X"");
}"
4052,"    public static File asFile(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return getFileByURL(ResourceUtil.asUrl(resourceName));
        }
        try {
            // try URL
            return getFileByURL(new URL(generalPath));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return new File(generalPath);
        }
    }","  public void test2()  throws Throwable  {
      File file0 = URLResourceUtil.asFile("".-kZ\u0000n%>%Dj"");
}"
4053,"    public static File asFile(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return getFileByURL(ResourceUtil.asUrl(resourceName));
        }
        try {
            // try URL
            return getFileByURL(new URL(generalPath));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return new File(generalPath);
        }
    }","  public void test3()  throws Throwable  {
      File file0 = URLResourceUtil.asFile("""");
}"
4054,"    public static File asFile(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return getFileByURL(ResourceUtil.asUrl(resourceName));
        }
        try {
            // try URL
            return getFileByURL(new URL(generalPath));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return new File(generalPath);
        }
    }","  public void test4()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("" nJ'"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, """");
      File file0 = URLResourceUtil.asFile("" nJ'"");
}"
4055,"    public static URI toURI(String location) throws URISyntaxException {
        return new URI(StringUtils.replace(location, "" "", ""%20""));
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLResourceUtil.toURI((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URI$Parser"", e);
      }
  }"
4056,"    public static InputStream asStream(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return ResourceUtil.asStream(resourceName);
        }

        try {
            // try URL
            return FileUtil.asInputStream(getFileByURL(new URL(generalPath)));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return FileUtil.asInputStream(generalPath);
        }
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLResourceUtil.asStream("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
4057,"    public static InputStream asStream(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return ResourceUtil.asStream(resourceName);
        }

        try {
            // try URL
            return FileUtil.asInputStream(getFileByURL(new URL(generalPath)));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return FileUtil.asInputStream(generalPath);
        }
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLResourceUtil.asStream(""classpath:///"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // resource / not found.
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4058,"    public static File asFile(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return getFileByURL(ResourceUtil.asUrl(resourceName));
        }
        try {
            // try URL
            return getFileByURL(new URL(generalPath));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return new File(generalPath);
        }
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLResourceUtil.asFile((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
4059,"    public static File asFile(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return getFileByURL(ResourceUtil.asUrl(resourceName));
        }
        try {
            // try URL
            return getFileByURL(new URL(generalPath));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return new File(generalPath);
        }
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        URLResourceUtil.asFile(""classpath:///"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // resource / not found.
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4060,"    public static InputStream asStream(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return ResourceUtil.asStream(resourceName);
        }

        try {
            // try URL
            return FileUtil.asInputStream(getFileByURL(new URL(generalPath)));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return FileUtil.asInputStream(generalPath);
        }
    }","  public void test10()  throws Throwable  {
      InputStream inputStream0 = URLResourceUtil.asStream(""classpath://"");
}"
4061,"    public static InputStream asStream(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return ResourceUtil.asStream(resourceName);
        }

        try {
            // try URL
            return FileUtil.asInputStream(getFileByURL(new URL(generalPath)));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return FileUtil.asInputStream(generalPath);
        }
    }","  public void test11()  throws Throwable  {
      try { 
        URLResourceUtil.asStream(""eZOzm/#1!{r#5-"");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
4062,"    public static File asFile(String generalPath) throws IOException {
        if (StringUtils.startsWith(generalPath, CLASSPATH_PREFIX)) {
            String resourceName = StringUtils.substringAfter(generalPath, CLASSPATH_PREFIX);
            return getFileByURL(ResourceUtil.asUrl(resourceName));
        }
        try {
            // try URL
            return getFileByURL(new URL(generalPath));
        } catch (MalformedURLException ex) {
            // no URL -> treat as file path
            return new File(generalPath);
        }
    }","  public void test12()  throws Throwable  {
      File file0 = URLResourceUtil.asFile(""classpath://"");
}"
4063,,"  public void test13()  throws Throwable  {
      URLResourceUtil uRLResourceUtil0 = new URLResourceUtil();
  }"
4064,"    public static URI toURI(String location) throws URISyntaxException {
        return new URI(StringUtils.replace(location, "" "", ""%20""));
    }","  public void test14()  throws Throwable  {
      try { 
        URLResourceUtil.toURI("".-kZ\u0000n%>%Dj"");
        fail(""Expecting exception: URISyntaxException"");
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 4: .-kZ\u0000n%>%Dj
         //
         verifyException(""java.net.URI$Parser"", e);
      }
  }"
4065,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-674), (byte)15);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        IOUtil.copy((InputStream) sequenceInputStream0, (OutputStream) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
4066,"    public static List<String> toLines(final InputStream input) throws IOException {
        return toLines(new InputStreamReader(input, Charsets.UTF_8));
    }","  public void test1()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)3, 1948);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charsetDecoder0);
      try { 
        IOUtil.toLines((Reader) inputStreamReader0);
        fail(""Expecting exception: MalformedInputException"");
      } catch(MalformedInputException e) {
         //
         // Input length = 1
         //
         verifyException(""java.nio.charset.CoderResult"", e);
      }
  }"
4067,"    public static void write(final String data, final OutputStream output) throws IOException {
        if (data != null) {
            output.write(data.getBytes(Charsets.UTF_8));
        }
    }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      byteArrayInputStream0.skip(0L);
      IOUtil.toLines((InputStream) pushbackInputStream0);
      byteArrayInputStream0.mark(0);
      MockFile mockFile0 = new MockFile(""lZO@V%]"");
      mockFile0.setExecutable(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      mockFileOutputStream0.flush();
      IOUtil.copy((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'r';
      charArray0[2] = 'm';
      charArray0[3] = 'S';
      charArray0[4] = 'o';
      charArray0[5] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtil.toLines((Reader) charArrayReader0);
      IOUtil iOUtil0 = new IOUtil();
      mockFileOutputStream0.flush();
      try { 
        IOUtil.write("""", (OutputStream) mockFileOutputStream0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
      }
  }"
4068,"    public static BufferedReader toBufferedReader(final Reader reader) {
        return reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);
    }","  public void test3()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      BufferedReader bufferedReader0 = IOUtil.toBufferedReader(mockFileReader0);
      IOUtil.toBufferedReader(bufferedReader0);
      try { 
        fileDescriptor0.sync();
        fail(""Expecting exception: SyncFailedException"");
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException(""java.io.FileDescriptor"", e);
      }
  }"
4069,"    public static List<String> toLines(final InputStream input) throws IOException {
        return toLines(new InputStreamReader(input, Charsets.UTF_8));
    }","  public void test4()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        IOUtil.toLines((InputStream) mockFileInputStream0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
      }
  }"
4070,"    public static List<String> toLines(final InputStream input) throws IOException {
        return toLines(new InputStreamReader(input, Charsets.UTF_8));
    }","  public void test5()  throws Throwable  {
      IOUtil iOUtil0 = new IOUtil();
      IOUtil.closeQuietly((Closeable) null);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        IOUtil.toLines((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
4071,"    public static void write(final String data, final OutputStream output) throws IOException {
        if (data != null) {
            output.write(data.getBytes(Charsets.UTF_8));
        }
    }","  public void test6()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        IOUtil.write(""K>t2&-F2gJ1I:'w"", (Writer) pipedWriter0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedWriter"", e);
      }
  }"
4072,"    public static void write(final String data, final OutputStream output) throws IOException {
        if (data != null) {
            output.write(data.getBytes(Charsets.UTF_8));
        }
    }","  public void test7()  throws Throwable  {
      IOUtil iOUtil0 = new IOUtil();
      IOUtil.write((String) null, (Writer) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-800), (-800));
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.CharBuffer"", e);
      }
  }"
4073,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOUtil.toString((InputStream) byteArrayInputStream0);
      String string0 = """";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
4074,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      objectArray0[3] = object0;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedWriter0.write((-3301));
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0);
      // Undeclared exception!
      IOUtil.copy((Reader) bufferedReader0, (Writer) pipedWriter0);
  }"
4075,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)121;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile(""UUpVElZbBRr`aDo"", ""A[G1s+tez"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.close();
      try { 
        IOUtil.copy((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
4076,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      File file0 = MockFile.createTempFile(""Lr<3+ly5H|N"", ""A4"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      long long0 = IOUtil.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0);
}"
4077,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      File file0 = MockFile.createTempFile(""Lr<3+ly5H|N"", ""A4"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      long long0 = IOUtil.copy((InputStream) byteArrayInputStream0, (OutputStream) mockPrintStream0);
}"
4078,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byte byte0 = (byte)17;
      byteArray0[1] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-83), (byte)17);
      // Undeclared exception!
      try { 
        IOUtil.toString((InputStream) byteArrayInputStream0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
4079,"    public static List<String> toLines(final InputStream input) throws IOException {
        return toLines(new InputStreamReader(input, Charsets.UTF_8));
    }","  public void test14()  throws Throwable  {
      IOUtil iOUtil0 = new IOUtil();
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '\""';
      charArray0[2] = '6';
      charArray0[3] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtil.toLines((Reader) charArrayReader0);
      IOUtil.closeQuietly(charArrayReader0);
      try { 
        IOUtil.toLines((Reader) charArrayReader0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException(""java.io.CharArrayReader"", e);
      }
  }"
4080,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test15()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      try { 
        IOUtil.toString((InputStream) pipedInputStream0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
4081,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test16()  throws Throwable  {
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        IOUtil.toString((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
4082,"    public static void write(final String data, final OutputStream output) throws IOException {
        if (data != null) {
            output.write(data.getBytes(Charsets.UTF_8));
        }
    }","  public void test17()  throws Throwable  {
      String string0 = ""95@w{ZpGP"";
      // Undeclared exception!
      try { 
        IOUtil.write(""95@w{ZpGP"", (Writer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.io.IOUtil"", e);
      }
  }"
4083,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test18()  throws Throwable  {
      File file0 = MockFile.createTempFile(""ISO-8859-1"", ""ISO-8859-1"");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      IOUtil.toString((Reader) mockFileReader0);
      IOUtil iOUtil0 = new IOUtil();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1685);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      long long0 = IOUtil.copy((Reader) mockFileReader0, (Writer) mockPrintWriter0);
}"
4084,"    public static void closeQuietly(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException e) {
                logger.warn(CLOSE_ERROR_MESSAGE, e);
            }
        }
    }","  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      stringReader0.skip(2444L);
      stringReader0.ready();
      stringReader0.skip(1463L);
      stringReader0.reset();
      IOUtil.toLines((Reader) stringReader0);
      IOUtil.toString((Reader) stringReader0);
      IOUtil.closeQuietly(stringReader0);
  }"
4085,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""&?p'0$"");
      IOUtil.toBufferedReader(stringReader0);
      IOUtil iOUtil0 = new IOUtil();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      long long0 = IOUtil.copy((Reader) stringReader0, (Writer) mockPrintWriter0);
}"
4086,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      IOUtil.toLines((Reader) charArrayReader0);
      String string0 = IOUtil.toString((Reader) charArrayReader0);
}"
4087,"    public static List<String> toLines(final InputStream input) throws IOException {
        return toLines(new InputStreamReader(input, Charsets.UTF_8));
    }","  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      List<String> list0 = IOUtil.toLines((InputStream) byteArrayInputStream0);
}"
4088,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtil.toString((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
4089,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile(""[>h'FyGyW5wn}v6,fO"", ""nkRwj\"""");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      IOUtil.write(""[>h'FyGyW5wn}v6,fO"", (Writer) mockPrintWriter0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      String string0 = IOUtil.toString((InputStream) mockFileInputStream0);
}"
4090,"    public static BufferedReader toBufferedReader(final Reader reader) {
        return reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);
    }","  public void test25()  throws Throwable  {
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        IOUtil.toBufferedReader((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
4091,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test26()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      BufferedReader bufferedReader0 = new BufferedReader(pipedReader0, 869);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      try { 
        IOUtil.toString((Reader) bufferedReader1);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedReader"", e);
      }
  }"
4092,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test27()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      pipedReader0.close();
      try { 
        IOUtil.copy((Reader) pipedReader0, (Writer) pipedWriter0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException(""java.io.PipedReader"", e);
      }
  }"
4093,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'i';
      charArray0[2] = ']';
      charArray0[3] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      Writer writer0 = null;
      // Undeclared exception!
      try { 
        IOUtil.copy((Reader) charArrayReader0, (Writer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4094,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""L QpR6:':<LP5}89"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        IOUtil.copy((InputStream) null, (OutputStream) mockPrintStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.io.IOUtil"", e);
      }
  }"
4095,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""{=f"");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      String string0 = IOUtil.toString((Reader) pushbackReader0);
}"
4096,"    public static List<String> toLines(final InputStream input) throws IOException {
        return toLines(new InputStreamReader(input, Charsets.UTF_8));
    }","  public void test31()  throws Throwable  {
      String string0 = ""5S9aLqUQwD$Z"";
      MockPrintStream mockPrintStream0 = new MockPrintStream(""5S9aLqUQwD$Z"");
      IOUtil.closeQuietly(mockPrintStream0);
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        IOUtil.toLines((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
4097,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test32()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-76);
      pipedOutputStream0.write(byteArray0);
      pipedOutputStream0.close();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charsetDecoder0);
      IOUtil.toBufferedReader(inputStreamReader0);
      inputStreamReader0.getEncoding();
      IOUtil iOUtil0 = new IOUtil();
      try { 
        IOUtil.toString((Reader) inputStreamReader0);
        fail(""Expecting exception: MalformedInputException"");
      } catch(MalformedInputException e) {
         //
         // Input length = 1
         //
         verifyException(""java.nio.charset.CoderResult"", e);
      }
  }"
4098,"    public static List<String> toLines(final InputStream input) throws IOException {
        return toLines(new InputStreamReader(input, Charsets.UTF_8));
    }","  public void test33()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      try { 
        IOUtil.toLines((Reader) pipedReader0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedReader"", e);
      }
  }"
4099,"    public static void closeQuietly(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException e) {
                logger.warn(CLOSE_ERROR_MESSAGE, e);
            }
        }
    }","  public void test34()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""org.springside.modules.utils.text.Charsets"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      IOUtil.write(""org.springside.modules.utils.text.Charsets"", (Writer) mockFileWriter0);
      IOUtil.closeQuietly(mockFileWriter0);
}"
4100,"    public static void closeQuietly(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException e) {
                logger.warn(CLOSE_ERROR_MESSAGE, e);
            }
        }
    }","  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        IOUtil.closeQuietly(mockFileReader0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileReader"", e);
      }
  }"
4101,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4096);
      try { 
        IOUtil.toString((Reader) pipedReader0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedReader"", e);
      }
  }"
4102,"    public static void closeQuietly(Closeable closeable) {
        if (closeable != null) {
            try {
                closeable.close();
            } catch (IOException e) {
                logger.warn(CLOSE_ERROR_MESSAGE, e);
            }
        }
    }","  public void test37()  throws Throwable  {
      IOUtil.closeQuietly((Closeable) null);
      String string0 = """";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""org.springside.modules.utils.io.IOUtil"", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, """");
        fail(""Expecting exception: UnsupportedEncodingException"");
      } catch(Throwable e) {
         //
         // 
         //
         verifyException(""java.io.PrintStream"", e);
      }
  }"
4103,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = IOUtil.toString((InputStream) byteArrayInputStream0);
}"
4104,"    public static long copy(final Reader input, final Writer output) throws IOException {
        final char[] buffer = new char[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n;
        while (EOF != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }","  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFile mockFile0 = new MockFile(""UUpVElZbBRr`aDo"", ""UUpVElZbBRr`aDo"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      long long0 = IOUtil.copy((InputStream) byteArrayInputStream0, (OutputStream) mockFileOutputStream0);
}"
4105,"    public static List<String> toLines(final InputStream input) throws IOException {
        return toLines(new InputStreamReader(input, Charsets.UTF_8));
    }","  public void test40()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '}';
      charArray0[2] = ']';
      charArray0[3] = '3';
      charArray0[4] = '`';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 1);
      IOUtil.toLines((Reader) lineNumberReader0);
}"
4106,"    public static List<String> toLines(final InputStream input) throws IOException {
        return toLines(new InputStreamReader(input, Charsets.UTF_8));
    }","  public void test41()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1811);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        IOUtil.toLines((InputStream) sequenceInputStream0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
4107,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test42()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) ""org.springside.modules.utils.io.IOUtil"");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) ""org.springside.modules.utils.io.IOUtil"");
      IOUtil.write(""org.springside.modules.utils.io.IOUtil"", (Writer) charArrayWriter0);
      IOUtil iOUtil0 = new IOUtil();
      IOUtil.closeQuietly(charArrayWriter1);
}"
4108,"    public static String toString(InputStream input) throws IOException {
        InputStreamReader reader = new InputStreamReader(input, Charsets.UTF_8);
        return toString(reader);
    }","  public void test43()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) ""org.springside.modules.utils.io.IOUtil"");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) ""org.springside.modules.utils.io.IOUtil"");
      IOUtil.write(""org.springside.modules.utils.io.IOUtil"", (Writer) charArrayWriter0);
      IOUtil iOUtil0 = new IOUtil();
      IOUtil.closeQuietly(charArrayWriter1);
}"
4109,"    public static void write(final String data, final OutputStream output) throws IOException {
        if (data != null) {
            output.write(data.getBytes(Charsets.UTF_8));
        }
    }","  public void test44()  throws Throwable  {
      OutputStream outputStream0 = null;
      IOUtil.write((String) null, (OutputStream) null);
      // Undeclared exception!
      try { 
        IOUtil.write(""3w"", (OutputStream) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.io.IOUtil"", e);
      }
  }"
4110,"    public static List<File> listFileWithWildcardFileName(final File rootDir, final String fileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(new WildcardFileNameFilter(fileNamePattern))
                .toList();
    }","  public void test0()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithWildcardFileName(mockFile0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.text.WildcardMatcher"", e);
      }
  }"
4111,"    public static List<File> listFileWithWildcardFileName(final File rootDir, final String fileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(new WildcardFileNameFilter(fileNamePattern))
                .toList();
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithWildcardFileName((File) null, ""dA][:e!{`Ffc|"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4112,"    public static List<File> listFileWithRegexFileName(final File rootDir, final String regexFileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir)
                .filter(new RegexFileNameFilter(regexFileNamePattern)).toList();
    }","  public void test2()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithRegexFileName(mockFile0, ""a*_B{:+O3a&q<nc`+\""z"");
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // a*_B{:+O3a&q<nc`+\""z
         //    ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
4113,"    public static List<File> listFileWithRegexFileName(final File rootDir, final String regexFileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir)
                .filter(new RegexFileNameFilter(regexFileNamePattern)).toList();
    }","  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""org.springside.modules.utils.io.FileTreeWalker$1"", """");
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithRegexFileName(mockFile0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4114,"    public static List<File> listFileWithRegexFileName(final File rootDir, final String regexFileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir)
                .filter(new RegexFileNameFilter(regexFileNamePattern)).toList();
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithRegexFileName((File) null, ""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/springside4/modules/utils/yrYnK+%w/^w(v@bHS"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4115,"    public static List<File> listFileWithExtension(final File rootDir, final String extension) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(new FileExtensionFilter(extension)).toList();
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithExtension((File) null, ""+j^_,v'-;.Z|67"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4116,"    public static List<File> listFileWithAntPath(final File rootDir, final String antPathPattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir)
                .filter(new AntPathFilter(FilePathUtil.contact(rootDir.getAbsolutePath(), antPathPattern))).toList();
    }","  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", """");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""_3xaf/_3xaf"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, """");
      // Undeclared exception!
      FileTreeWalker.listFileWithAntPath(mockFile0, ""_13{b:[YjjVlF"");
  }"
4117,"    public static List<File> listFileWithAntPath(final File rootDir, final String antPathPattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir)
                .filter(new AntPathFilter(FilePathUtil.contact(rootDir.getAbsolutePath(), antPathPattern))).toList();
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithAntPath((File) null, ""'g'bX>s5st;M12"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4118,"    public static List<File> listFile(File rootDir) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(Files.isFile()).toList();
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listFile((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4119,"    public static List<File> listAll(File rootDir) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).toList();
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileTreeWalker.listAll((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4120,"    public static List<File> listFileWithAntPath(final File rootDir, final String antPathPattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir)
                .filter(new AntPathFilter(FilePathUtil.contact(rootDir.getAbsolutePath(), antPathPattern))).toList();
    }","  public void test10()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile(""com.google.common.io.Files$FilePredicate"", ""sOA*w7rG`c"", (File) mockFile0);
      List<File> list0 = FileTreeWalker.listFileWithAntPath(mockFile0, (String) null);
}"
4121,"    public static List<File> listFileWithExtension(final File rootDir, final String extension) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(new FileExtensionFilter(extension)).toList();
    }","  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""*dh-~,4j`+J{fU>&#p)"", ""*dh-~,4j`+J{fU>&#p)"");
      List<File> list0 = FileTreeWalker.listFileWithExtension(mockFile0, """");
}"
4122,"    public static List<File> listFileWithExtension(final File rootDir, final String extension) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(new FileExtensionFilter(extension)).toList();
    }","  public void test12()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile(""com.google.common.io.Files$FilePredicate"", ""sOA*w7rG`c"", (File) mockFile0);
      List<File> list0 = FileTreeWalker.listFileWithExtension(mockFile0, """");
}"
4123,"    public static List<File> listFileWithWildcardFileName(final File rootDir, final String fileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(new WildcardFileNameFilter(fileNamePattern))
                .toList();
    }","  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""org.springside.modules.utils.io.FileTreeWalker$AntPathFilter"", ""org.springside.modules.utils.io.FileTreeWalker$AntPathFilter"");
      List<File> list0 = FileTreeWalker.listFileWithWildcardFileName(mockFile0, ""org.springside.modules.utils.io.FileTreeWalker$AntPathFilter"");
}"
4124,"    public static List<File> listFileWithWildcardFileName(final File rootDir, final String fileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(new WildcardFileNameFilter(fileNamePattern))
                .toList();
    }","  public void test14()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      List<File> list0 = FileTreeWalker.listFileWithWildcardFileName(mockFile0, """");
}"
4125,"    public static List<File> listFileWithRegexFileName(final File rootDir, final String regexFileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir)
                .filter(new RegexFileNameFilter(regexFileNamePattern)).toList();
    }","  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""]2\""Sctg:q:"");
      List<File> list0 = FileTreeWalker.listFileWithRegexFileName(mockFile0, ""]2\""Sctg:q:"");
}"
4126,"    public static List<File> listFileWithRegexFileName(final File rootDir, final String regexFileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir)
                .filter(new RegexFileNameFilter(regexFileNamePattern)).toList();
    }","  public void test16()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile.createTempFile(""com.google.common.io.Files$FilePredicate"", ""sOA*w7rG`c"", (File) mockFile0);
      List<File> list0 = FileTreeWalker.listFileWithRegexFileName(mockFile0, """");
}"
4127,,"  public void test17()  throws Throwable  {
      FileTreeWalker fileTreeWalker0 = new FileTreeWalker();
  }"
4128,"    public static TreeTraverser<File> fileTreeTraverser() {
        return Files.fileTreeTraverser();
    }","  public void test18()  throws Throwable  {
      TreeTraverser<File> treeTraverser0 = FileTreeWalker.fileTreeTraverser();
}"
4129,"    public static List<File> listFileWithAntPath(final File rootDir, final String antPathPattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir)
                .filter(new AntPathFilter(FilePathUtil.contact(rootDir.getAbsolutePath(), antPathPattern))).toList();
    }","  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""org.springside.modules.utils.io.FileTreeWalker$AntPathFilter"", ""org.springside.modules.utils.io.FileTreeWalker$AntPathFilter"");
      List<File> list0 = FileTreeWalker.listFileWithAntPath(mockFile0, """");
}"
4130,"    public static List<File> listFileWithExtension(final File rootDir, final String extension) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(new FileExtensionFilter(extension)).toList();
    }","  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""org.springside.modules.utils.io.FileTreeWalker$AntPathFilter"", ""org.springside.modules.utils.io.FileTreeWalker$AntPathFilter"");
      // Undeclared exception!
      try { 
        FileTreeWalker.listFileWithExtension(mockFile0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
4131,"    public static List<File> listAll(File rootDir) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).toList();
    }","  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""org.springside.modules.utils.io.FileTreeWalker$AntPathFilter"", ""org.springside.modules.utils.io.FileTreeWalker$AntPathFilter"");
      List<File> list0 = FileTreeWalker.listAll(mockFile0);
}"
4132,"    public static List<File> listFileWithWildcardFileName(final File rootDir, final String fileNamePattern) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(new WildcardFileNameFilter(fileNamePattern))
                .toList();
    }","  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", """");
      List<File> list0 = FileTreeWalker.listFileWithWildcardFileName(mockFile0, """");
}"
4133,"    public static List<File> listFile(File rootDir) {
        return Files.fileTreeTraverser().preOrderTraversal(rootDir).filter(Files.isFile()).toList();
    }","  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", """");
      List<File> list0 = FileTreeWalker.listFile(mockFile0);
}"
4134,"    public String toString() {
        return builder.toString();
    }","  public void test0()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1);
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(stringBuilder0);
      stringBuilderWriter0.append('v');
      stringBuilderWriter0.append((CharSequence) stringBuilder0, 1, 1);
}"
4135,"    public void write(final String value) {
        if (value != null) {
            builder.append(value);
        }
    }","  public void test1()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        stringBuilderWriter0.write(charArray0, (-3018), 1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.lang.AbstractStringBuilder"", e);
      }
  }"
4136,"    public StringBuilderWriter() {
        this.builder = new StringBuilder();
    }","  public void test2()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = null;
      try {
        stringBuilderWriter0 = new StringBuilderWriter((-711));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.lang.AbstractStringBuilder"", e);
      }
  }"
4137,"    public String toString() {
        return builder.toString();
    }","  public void test3()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(35);
      stringBuilderWriter0.write(35);
}"
4138,"    public String toString() {
        return builder.toString();
    }","  public void test4()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(945);
      stringBuilderWriter0.write((char[]) null, 945, 945);
}"
4139,"    public String toString() {
        return builder.toString();
    }","  public void test5()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      stringBuilderWriter0.write("""");
}"
4140,"    public String toString() {
        return builder.toString();
    }","  public void test6()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      stringBuilderWriter0.write((String) null);
}"
4141,"    public String toString() {
        return builder.toString();
    }","  public void test7()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter((StringBuilder) null);
}"
4142,"    public String toString() {
        return builder.toString();
    }","  public void test8()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(1);
      stringBuilderWriter0.close();
}"
4143,"    public String toString() {
        return builder.toString();
    }","  public void test9()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(1);
      stringBuilderWriter0.append('m');
      stringBuilderWriter0.toString();
}"
4144,"    public Writer append(final char value) {
        builder.append(value);
        return this;
    }","  public void test10()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(1);
      // Undeclared exception!
      try { 
        stringBuilderWriter0.append((CharSequence) ""m"", (-1), (-3433));
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // start -1, end -3433, s.length() 1
         //
         verifyException(""java.lang.AbstractStringBuilder"", e);
      }
  }"
4145,"    public String toString() {
        return builder.toString();
    }","  public void test11()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(1);
      String string0 = stringBuilderWriter0.toString();
}"
4146,"    public StringBuilder getBuilder() {
        return builder;
    }","  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1);
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(stringBuilder0);
      StringBuilder stringBuilder1 = stringBuilderWriter0.getBuilder();
}"
4147,"    public String toString() {
        return builder.toString();
    }","  public void test13()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter();
      stringBuilderWriter0.flush();
}"
4148,"    public Writer append(final char value) {
        builder.append(value);
        return this;
    }","  public void test14()  throws Throwable  {
      StringBuilderWriter stringBuilderWriter0 = new StringBuilderWriter(1);
      Writer writer0 = stringBuilderWriter0.append((CharSequence) ""m"");
}"
4149,"    public boolean isWarnEnabled() {
        return delegate.isWarnEnabled();
    }","  public void test0()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled((Marker) null);
}"
4150,"    public boolean isWarnEnabled() {
        return delegate.isWarnEnabled();
    }","  public void test1()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""0g5GQ"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 998L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled();
}"
4151,"    public boolean isWarnEnabled() {
        return delegate.isWarnEnabled();
    }","  public void test2()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled();
}"
4152,"    public boolean isTraceEnabled() {
        return delegate.isTraceEnabled();
    }","  public void test3()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""aapW.!={.m"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1575L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled((Marker) null);
}"
4153,"    public boolean isTraceEnabled() {
        return delegate.isTraceEnabled();
    }","  public void test4()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""iq&[R2"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 22L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled();
}"
4154,"    public boolean isInfoEnabled() {
        return delegate.isInfoEnabled();
    }","  public void test5()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 213L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled((Marker) null);
}"
4155,"    public boolean isInfoEnabled() {
        return delegate.isInfoEnabled();
    }","  public void test6()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled();
}"
4156,"    public boolean isErrorEnabled() {
        return delegate.isErrorEnabled();
    }","  public void test7()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-1L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled((Marker) null);
}"
4157,"    public boolean isErrorEnabled() {
        return delegate.isErrorEnabled();
    }","  public void test8()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""MTm?)JM|d"", (Queue<SubstituteLoggingEvent>) null, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled();
}"
4158,"    public boolean isDebugEnabled() {
        return delegate.isDebugEnabled();
    }","  public void test9()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled((Marker) null);
}"
4159,"    public boolean isDebugEnabled() {
        return delegate.isDebugEnabled();
    }","  public void test10()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled();
}"
4160,"    public String getName() {
        return delegate.getName();
    }","  public void test11()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1093L, timeUnit0);
      String string0 = throttledSlf4jLogger0.getName();
}"
4161,"    public String getName() {
        return delegate.getName();
    }","  public void test12()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      String string0 = throttledSlf4jLogger0.getName();
}"
4162,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test13()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, "";gxy2_-"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4163,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test14()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error(""wQ"");
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, """", objectArray0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4164,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test15()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, (String) null, (Throwable) mockThrowable0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4165,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test16()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, """");
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, """", (Throwable) mockThrowable0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4166,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test17()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, ""z"", object0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4167,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test18()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error(""wQ"");
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, ""D_"", (Object) null, (Object) substituteLoggingEvent0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4168,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test19()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, """", (Object) substituteLoggingEvent0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4169,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test20()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      MockThrowable mockThrowable0 = new MockThrowable(""org.springside.modules.utils.log.ThrottledSlf4jLogger"");
      eventRecodingLogger0.info((Marker) null, ""org.springside.modules.utils.log.ThrottledSlf4jLogger"", (Throwable) mockThrowable0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, ""org.springside.modules.utils.log.ThrottledSlf4jLogger"", (Object) eventRecodingLogger0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4170,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test21()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 276L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, ""org.springside.modules.utils.time.ClockUtil"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4171,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test22()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-3121L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable(""T]'Wgl_"");
      throttledSlf4jLogger0.error((String) null, (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((Marker) null, (String) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4172,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test23()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""MTm?)JM|d"", (Queue<SubstituteLoggingEvent>) null, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4173,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test24()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-3121L), timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((String) null, objectArray0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4174,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test25()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 266L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("""", (Throwable) mockThrowable0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4175,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test26()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 15L, timeUnit0);
      throttledSlf4jLogger0.error(""wQ"");
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("""", (Throwable) mockThrowable0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4176,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test27()  throws Throwable  {
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-2317L), timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", object0, (Object) substituteLoggingEvent0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4177,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test28()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""o#VaPq"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      priorityQueue0.add(substituteLoggingEvent0);
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 2122L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn(""&Th"", (Object) timeUnit0, (Object) substituteLogger0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4178,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test29()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn(""#Um"", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4179,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test30()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      priorityQueue0.add(substituteLoggingEvent0);
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""}W8sR:g7Ar+f\""yJ+IRo"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3584L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn(""}W8sR:g7Ar+f\""yJ+IRo"", (Object) substituteLoggingEvent0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4180,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test31()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4181,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test32()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      substituteLogger0.trace((Marker) null, "":+?M=Cp\u0002"");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.warn("""");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4182,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test33()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable(""1I]p~^K6i"");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, ""1I]p~^K6i"", (Throwable) mockThrowable0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4183,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test34()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      substituteLogger0.info(""b91$>Dy?[)}n"");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, (String) null, (Throwable) mockThrowable0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4184,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test35()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-38L), timeUnit0);
      Integer integer0 = new Integer((-1590));
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, """", (Object) """", (Object) integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4185,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test36()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error(""wQ"");
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, ""org.springside.modules.utils.time.ClockUtil"", (Object) substituteLoggingEvent0, object0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4186,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test37()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-463L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, """", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4187,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test38()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, ""BhInOm/VPYLB|'!e"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4188,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test39()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.trace((Marker) null, (String) null, (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, (String) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4189,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test40()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-820L), timeUnit0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("".oUb >4ASe}hY"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4190,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test41()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""}W8sR:g7Ar+f\""yJ+IRo"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3518L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn(""}W8sR:g7Ar+f\""yJ+IRo"", (Object) substituteLoggingEvent0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("""", objectArray0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4191,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test42()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 25L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("""", (Throwable) mockThrowable0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4192,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test43()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("""");
      throttledSlf4jLogger0.debug(""Y"", (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace("""", (Throwable) mockThrowable0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4193,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test44()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((String) null, object0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4194,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test45()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""J"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-4L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn((Marker) null, ""J"", (Object) null, (Object) substituteLoggingEvent0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace(""J"", (Object) integer0, (Object) priorityQueue0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4195,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test46()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace(""GH. Ew/(y9"", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4196,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test47()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace(""org.springside.modules.utils.time.ClockUtil"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4197,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test48()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""|a"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error("""");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace(""@Vi f8K{"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4198,"    public boolean isWarnEnabled() {
        return delegate.isWarnEnabled();
    }","  public void test49()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isWarnEnabled((Marker) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4199,"    public boolean isTraceEnabled() {
        return delegate.isTraceEnabled();
    }","  public void test50()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isTraceEnabled((Marker) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4200,"    public boolean isTraceEnabled() {
        return delegate.isTraceEnabled();
    }","  public void test51()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isTraceEnabled();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4201,"    public boolean isInfoEnabled() {
        return delegate.isInfoEnabled();
    }","  public void test52()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-862L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isInfoEnabled((Marker) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4202,"    public boolean isInfoEnabled() {
        return delegate.isInfoEnabled();
    }","  public void test53()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 25L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isInfoEnabled();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4203,"    public boolean isErrorEnabled() {
        return delegate.isErrorEnabled();
    }","  public void test54()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-38L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isErrorEnabled((Marker) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4204,"    public boolean isErrorEnabled() {
        return delegate.isErrorEnabled();
    }","  public void test55()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1917L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isErrorEnabled();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4205,"    public boolean isDebugEnabled() {
        return delegate.isDebugEnabled();
    }","  public void test56()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isDebugEnabled((Marker) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4206,"    public boolean isDebugEnabled() {
        return delegate.isDebugEnabled();
    }","  public void test57()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isDebugEnabled();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4207,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test58()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, ""a*|^("", (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4208,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test59()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""iukZFh;;*sD"", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-2899L), timeUnit0);
      eventRecodingLogger0.error((Marker) null, ""#_d.Tv=/-!<"");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, ""O\""s@S2GD6)#0Xq<{'3V"", (Object[]) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4209,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test60()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, ""org.springside.modules.utils.time.ClockUtil$DefaultClock"", (Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4210,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test61()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""b8A"", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      substituteLogger0.info("":X~)oP~NU =3"");
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 800L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, ""b8A"", (Throwable) mockThrowable0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4211,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test62()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1966L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, """", (Object) timeUnit0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4212,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test63()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""aapW.!={.m"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      priorityQueue0.add(substituteLoggingEvent0);
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1575L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, ""aapW.!={.m"", object0, (Object) substituteLogger0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4213,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test64()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, (String) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4214,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test65()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, ""Wqwfck3K:_&NZFF,??"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4215,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test66()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-5252L), timeUnit0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info(""EC"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4216,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test67()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""3:Yx#8b9aJ|.<Y:-E"", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      substituteLogger0.trace((Marker) null, ""?["");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info(""3:Yx#8b9aJ|.<Y:-E"", objectArray0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4217,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test68()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("""", (Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4218,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test69()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error(""wQ"");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info(""wQ"", (Throwable) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4219,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test70()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info(""r9 y(timt,"", (Object) timeUnit0, (Object) timeUnit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4220,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test71()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-726), timeUnit0);
      Object[] objectArray0 = new Object[9];
      throttledSlf4jLogger0.error((String) null, objectArray0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((String) null, (Object) null, objectArray0[2]);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4221,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test72()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("""", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4222,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test73()  throws Throwable  {
      Comparator<SubstituteLoggingEvent> comparator0 = (Comparator<SubstituteLoggingEvent>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-726), timeUnit0);
      eventRecodingLogger0.warn((String) null, (Object) comparator0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("""", (Object) substituteLoggingEvent0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4223,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test74()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-900L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4224,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test75()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""iq&[R2"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 22L, timeUnit0);
      Object[] objectArray0 = new Object[3];
      substituteLogger0.warn((Marker) null, ""iq&[R2"", objectArray0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info("""");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4225,"    public String getName() {
        return delegate.getName();
    }","  public void test76()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.getName();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4226,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test77()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4227,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test78()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn((Marker) null, ""wQ"", (Object) null, (Object) substituteLoggingEvent0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, ""org.springside.modules.utils.time.ClockUtil"", objectArray0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4228,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test79()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, (String) null, (Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4229,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test80()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-726), timeUnit0);
      Object[] objectArray0 = new Object[9];
      throttledSlf4jLogger0.error((String) null, objectArray0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, ""com.google.common.io.PatternFilenameFilter"", (Throwable) mockThrowable0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4230,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test81()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, ""n+\""gAVuHSK/?"", object0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4231,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test82()  throws Throwable  {
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 783L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, ""]![Of@RN_~pd&]"", (Object) substituteLoggingEvent0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4232,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test83()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-726), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      MockThrowable mockThrowable0 = new MockThrowable(""org.springside.modules.utils.time.ClockUtil$DefaultClock"", (Throwable) null);
      eventRecodingLogger0.info((Marker) null, (String) null, (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, (String) null, (Object) substituteLoggingEvent0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4233,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test84()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, ""org.springside.modules.utils.time.ClockUtil$DefaultClock"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4234,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test85()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-58L), timeUnit0);
      substituteLogger0.trace((Marker) null, """", (Object) null);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((Marker) null, """");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4235,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test86()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("""", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4236,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test87()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-704), timeUnit0);
      Object[] objectArray0 = new Object[11];
      eventRecodingLogger0.warn((String) null, objectArray0[2]);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((String) null, objectArray0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4237,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test88()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-5809L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable(""org.springside.modules.utils.log.ThrottledSlf4jLogger"");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error(""B5r:@H5FCk"", (Throwable) mockThrowable0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4238,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test89()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""Imi_k: Xx<"", priorityQueue0, false);
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-1039L), timeUnit0);
      Object object0 = new Object();
      substituteLogger0.warn((Marker) null, ""Imi_k: Xx<"", object0, (Object) arrayDeque0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error("""", (Throwable) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4239,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test90()  throws Throwable  {
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((String) null, object0, (Object) substituteLoggingEvent0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4240,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test91()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""u#)zA0Sr{LT+{g"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn("""", objectArray0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error(""N%_]9]u[N<$H[mG"", (Object) null, (Object) substituteLoggingEvent0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4241,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test92()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-2000L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error((String) null, (Object) timeUnit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4242,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test93()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>(277);
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>(priorityQueue0);
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""G/&$gK%>_-@'U"", arrayDeque0, true);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.debug((Marker) null, ""sW2@dUPqP[}K8nA"");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error(""G/&$gK%>_-@'U"", (Object) eventRecodingLogger0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4243,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test94()  throws Throwable  {
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""I"", (Queue<SubstituteLoggingEvent>) null, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error(""RRtGzNVN>"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4244,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test95()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""}W8sR:g7Ar+f\""yJ+IRo"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3584L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      throttledSlf4jLogger0.debug((Marker) null, ""}W8sR:g7Ar+f\""yJ+IRo"", (Object) substituteLoggingEvent0, object0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.error(""WK*7=&S7"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4245,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test96()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4246,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test97()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""}W8sR:g7Ar+f\""yJ+IRo"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3584L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn(""}W8sR:g7Ar+f\""yJ+IRo"", (Object) substituteLoggingEvent0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, """", objectArray0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4247,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test98()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, """", (Throwable) mockThrowable0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4248,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test99()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""iq&[R2"", priorityQueue0, false);
      Object object0 = new Object();
      substituteLogger0.error(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", object0, object0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 57L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable(""iq&[R2"");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, """", (Throwable) mockThrowable0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4249,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test100()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, ""n+\""gAVuHSK/?"", object0, (Object) substituteLoggingEvent0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4250,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test101()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, """", object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4251,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test102()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-4203L), timeUnit0);
      throttledSlf4jLogger0.debug("""", (Throwable) null);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, ""org.springside.modules.utils.log.ThrottledSlf4jLogger"", (Object) priorityQueue0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4252,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test103()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, ""n+\""gAVuHSK/?"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4253,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test104()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      MockThrowable mockThrowable0 = new MockThrowable(""org.springside.modules.utils.log.ThrottledSlf4jLogger"");
      eventRecodingLogger0.info((Marker) null, ""org.springside.modules.utils.log.ThrottledSlf4jLogger"", (Throwable) mockThrowable0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, ""org.springside.modules.utils.log.ThrottledSlf4jLogger"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4254,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test105()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-4181L), timeUnit0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4255,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test106()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""=8R)?S{Y.<e)dyJE"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-4L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn((Marker) null, ""=8R)?S{Y.<e)dyJE"", (Object) null, (Object) substituteLoggingEvent0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug(""=8R)?S{Y.<e)dyJE"", objectArray0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4256,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test107()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("""");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("""", (Throwable) mockThrowable0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4257,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test108()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("":m?#"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-923L), timeUnit0);
      throttledSlf4jLogger0.error((Marker) null, "":m?#"", (Throwable) null);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("":m?#"", (Throwable) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4258,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test109()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug(""*W`-3zglT<FoW"", (Object) null, (Object) timeUnit0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4259,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test110()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      Object[] objectArray0 = new Object[8];
      substituteLogger0.warn("""", objectArray0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1250L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug("""", objectArray0[3], (Object) priorityQueue0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4260,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test111()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug(""-&G&XRa[~A5N,EZ(<"", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4261,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test112()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("""");
      throttledSlf4jLogger0.debug(""Y"", (Throwable) mockThrowable0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug(""Y"", (Object) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4262,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test113()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4263,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test114()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""=4\""NCes"", priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      substituteLogger0.error((Marker) null, ""=4\""NCes"", (Object) ""=4\""NCes"", (Object) """");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, (-1L), timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((String) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4264,"    public ThrottledSlf4jLogger(Logger logger, long time, TimeUnit timeUnit) {
        this.delegate = logger;
        windowSizeMillis = timeUnit.toMillis(time);
    }","  public void test115()  throws Throwable  {
      ThrottledSlf4jLogger throttledSlf4jLogger0 = null;
      try {
        throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, (-345L), (TimeUnit) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4265,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test116()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      throttledSlf4jLogger0.trace((Marker) null, (String) null, (Throwable) mockThrowable0);
}"
4266,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test117()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 2695L, timeUnit0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.trace((Marker) null, """", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4267,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test118()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 3969L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, ""j_RuE.UC(UNN"", (Object) nOPLogger0, (Object) nOPLogger0);
      Object[] objectArray0 = new Object[8];
      throttledSlf4jLogger0.trace((Marker) null, ""j_RuE.UC(UNN"", objectArray0);
}"
4268,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test119()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.debug((Marker) null, ""HbewhxVChCLJ"", (Throwable) mockThrowable0);
      Object object0 = new Object();
      throttledSlf4jLogger0.trace((Marker) null, ""HbewhxVChCLJ"", object0, object0);
  }"
4269,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test120()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, ""-3n;8y"", (Object) timeUnit0);
  }"
4270,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test121()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Object) nOPLogger0);
      throttledSlf4jLogger0.trace((Marker) null, ""o}7Ov0~3/<UwaS"", (Object) timeUnit0);
  }"
4271,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test122()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""u#)zA0Sr{LT+{g"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn(""u#)zA0Sr{LT+{g"", objectArray0);
      throttledSlf4jLogger0.trace((Marker) null, ""u#)zA0Sr{LT+{g"");
}"
4272,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test123()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("""");
      throttledSlf4jLogger0.trace("""", (Throwable) mockThrowable0);
}"
4273,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test124()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      throttledSlf4jLogger0.trace((String) null, (Throwable) mockThrowable0);
}"
4274,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test125()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""}W8sR:g7Ar+f\""yJ+IRo"", priorityQueue0, true);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3537L), timeUnit0);
      Object[] objectArray0 = new Object[7];
      throttledSlf4jLogger0.trace(""}W8sR:g7Ar+f\""yJ+IRo"", objectArray0);
}"
4275,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test126()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.trace((String) null, objectArray0);
}"
4276,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test127()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.trace(""-3n;8y"", (Object) ""-3n;8y"", (Object) ""-3n;8y"");
  }"
4277,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test128()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Object) nOPLogger0);
      throttledSlf4jLogger0.trace(""o}7Ov0~3/<UwaS"", (Object) ""o}7Ov0~3/<UwaS"", (Object) ""o}7Ov0~3/<UwaS"");
  }"
4278,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test129()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-38L), timeUnit0);
      throttledSlf4jLogger0.trace(""Y92\""_IGSYG_5|Ax9z7?"", (Object) throttledSlf4jLogger0);
  }"
4279,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test130()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2467L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.error(""wDBZg53"", (Object) nOPLogger0);
      throttledSlf4jLogger0.trace(""wDBZg53"", (Object) substituteLoggingEvent0);
  }"
4280,"    public void trace(String msg) {
        if (shouldLog()) {
            delegate.trace(msg);
        }
    }","  public void test131()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      throttledSlf4jLogger0.trace((String) null);
  }"
4281,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test132()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Object) nOPLogger0);
      throttledSlf4jLogger0.error((Marker) null, ""o}7Ov0~3/<UwaS"", (Throwable) null);
  }"
4282,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test133()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[18];
      throttledSlf4jLogger0.error((Marker) null, ""Gon"", objectArray0);
}"
4283,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test134()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.info((Marker) null, ""IN^`l lY"", (Throwable) mockThrowable0);
      Object[] objectArray0 = new Object[18];
      throttledSlf4jLogger0.error((Marker) null, ""IN^`l lY"", objectArray0);
}"
4284,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test135()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 9000L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      throttledSlf4jLogger0.error((Marker) null, ""N2Hj6"", (Object) substituteLoggingEvent0, object0);
      throttledSlf4jLogger0.error((Marker) null, ""N2Hj6"", (Object) ""N2Hj6"", (Object) substituteLoggingEvent0);
  }"
4285,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test136()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-38L), timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.error((Marker) null, ""Y92\""_IGSYG_5|Ax9z7?"", object0);
  }"
4286,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test137()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Object) nOPLogger0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.error((Marker) null, ""o}7Ov0~3/<UwaS"", (Object) substituteLoggingEvent0);
  }"
4287,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test138()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1266L), timeUnit0);
      throttledSlf4jLogger0.error((Marker) null, (String) null);
  }"
4288,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test139()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      throttledSlf4jLogger0.error((Marker) null, (String) null);
}"
4289,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test140()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Object) nOPLogger0);
      throttledSlf4jLogger0.error(""o}7Ov0~3/<UwaS"", (Throwable) null);
  }"
4290,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test141()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.error((String) null, objectArray0);
}"
4291,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test142()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Throwable) mockThrowable0);
}"
4292,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test143()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      throttledSlf4jLogger0.warn((Marker) null, (String) null, (Throwable) mockThrowable0);
}"
4293,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test144()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-38L), timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.warn((Marker) null, ""Y92\""_IGSYG_5|Ax9z7?"", objectArray0);
}"
4294,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test145()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""u#)zA0Sr{LT+{g"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn(""u#)zA0Sr{LT+{g"", objectArray0);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn((Marker) null, ""u#)zA0Sr{LT+{g"", (Object) ""u#)zA0Sr{LT+{g"", object0);
}"
4295,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test146()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable("""");
      throttledSlf4jLogger0.warn((Marker) null, """", (Object) mockThrowable0);
}"
4296,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test147()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""u#)zA0Sr{LT+{g"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn(""u#)zA0Sr{LT+{g"", objectArray0);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn((Marker) null, ""u#)zA0Sr{LT+{g"", object0);
}"
4297,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test148()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.warn(""-3n;8y"", (Throwable) mockThrowable0);
}"
4298,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test149()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      throttledSlf4jLogger0.warn((String) null, (Throwable) mockThrowable0);
}"
4299,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test150()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.warn("""", (Object) """", (Object) throttledSlf4jLogger0);
  }"
4300,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test151()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn((String) null, object0, (Object) eventRecodingLogger0);
}"
4301,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test152()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1201L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.info(""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", objectArray0);
      throttledSlf4jLogger0.warn(""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", (Object[]) null);
}"
4302,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test153()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.info((Marker) null, ""IN^`l lY"", (Throwable) mockThrowable0);
      throttledSlf4jLogger0.warn((Marker) null, ""IN^`l lY"");
  }"
4303,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test154()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 3969L, timeUnit0);
      throttledSlf4jLogger0.trace((Marker) null, ""j_RuE.UC(UNN"", (Object) nOPLogger0, (Object) nOPLogger0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.info((Marker) null, ""j_RuE.UC(UNN"", (Throwable) mockThrowable0);
}"
4304,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test155()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[6];
      throttledSlf4jLogger0.info((Marker) null, (String) null, objectArray0);
}"
4305,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test156()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      Object[] objectArray0 = new Object[6];
      throttledSlf4jLogger0.info((Marker) null, (String) null, objectArray0);
}"
4306,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test157()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.info((Marker) null, ""-3n;8y"", (Object) null, object0);
  }"
4307,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test158()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 2467L, timeUnit0);
      throttledSlf4jLogger0.error(""wDBZg53"", (Object) nOPLogger0);
      throttledSlf4jLogger0.info((Marker) null, ""wDBZg53"", (Object) ""wDBZg53"", (Object) throttledSlf4jLogger0);
  }"
4308,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test159()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.info((Marker) null, """", (Object) arrayDeque0);
}"
4309,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test160()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.error("""", objectArray0);
      ClockUtil.useDummyClock((-1L));
      throttledSlf4jLogger0.info((Marker) null, """", (Object) arrayDeque0);
}"
4310,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test161()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.info((Marker) null, ""-3n;8y"");
  }"
4311,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test162()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Object) nOPLogger0);
      throttledSlf4jLogger0.info((Marker) null, ""o}7Ov0~3/<UwaS"");
  }"
4312,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test163()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.info(""-3n;8y"", (Throwable) mockThrowable0);
}"
4313,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test164()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Object) nOPLogger0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Throwable) mockThrowable0);
}"
4314,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test165()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.info((String) null, objectArray0);
}"
4315,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test166()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 7L, timeUnit0);
      throttledSlf4jLogger0.error("""", (Object) substituteLoggingEvent0, (Object) null);
      Object[] objectArray0 = new Object[2];
      throttledSlf4jLogger0.warn((Marker) null, """", objectArray0);
}"
4316,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test167()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.error("""", objectArray0);
      ClockUtil.useDummyClock((-1L));
      throttledSlf4jLogger0.error("""", (Object) """", (Object) arrayDeque0);
}"
4317,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test168()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""=a"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.error("""");
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.info((Marker) null, """");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4318,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test169()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.debug((Marker) null, ""HbewhxVChCLJ"", (Throwable) mockThrowable0);
      throttledSlf4jLogger0.error(""HbewhxVChCLJ"");
  }"
4319,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test170()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""}W8sR:g7Ar+f\""yJ+IRo"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-3584L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.warn(""}W8sR:g7Ar+f\""yJ+IRo"", (Object) substituteLoggingEvent0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.debug((Marker) null, ""}W8sR:g7Ar+f\""yJ+IRo"", (Object) substituteLoggingEvent0, object0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4320,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test171()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""u#)zA0Sr{LT+{g"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn(""u#)zA0Sr{LT+{g"", objectArray0);
      Object object0 = new Object();
      throttledSlf4jLogger0.warn(""u#)zA0Sr{LT+{g"", object0);
}"
4321,"    public void warn(String msg) {
        if (shouldLog()) {
            delegate.warn(msg);
        }
    }","  public void test172()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      throttledSlf4jLogger0.warn((String) null);
      throttledSlf4jLogger0.warn("""");
  }"
4322,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test173()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 10, timeUnit0);
      throttledSlf4jLogger0.info((String) null, (Object) null, (Object) priorityQueue0);
}"
4323,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test174()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger((String) null, priorityQueue0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, priorityQueue0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1, timeUnit0);
      throttledSlf4jLogger0.warn((Marker) null, (String) null);
      throttledSlf4jLogger0.info((String) null, (Object) null, (Object) eventRecodingLogger0);
}"
4324,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test175()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-1L), timeUnit0);
      Stream<SubstituteLoggingEvent> stream0 = arrayDeque0.parallelStream();
      Object[] objectArray0 = new Object[3];
      throttledSlf4jLogger0.error("""", objectArray0);
      ClockUtil.useDummyClock((-1L));
      throttledSlf4jLogger0.info("""", (Object) stream0);
  }"
4325,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test176()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.info("""");
  }"
4326,"    public void info(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test177()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""u#)zA0Sr{LT+{g"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.warn(""u#)zA0Sr{LT+{g"", objectArray0);
      throttledSlf4jLogger0.info(""u#)zA0Sr{LT+{g"");
}"
4327,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test178()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Object) nOPLogger0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      throttledSlf4jLogger0.debug((Marker) null, ""o}7Ov0~3/<UwaS"", (Throwable) mockThrowable0);
}"
4328,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test179()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      Object[] objectArray0 = new Object[0];
      throttledSlf4jLogger0.debug((Marker) null, ""-3n;8y"", objectArray0);
}"
4329,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test180()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1201L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.info(""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", objectArray0);
      throttledSlf4jLogger0.debug((Marker) null, ""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", objectArray0);
}"
4330,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test181()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1201L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.info(""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", objectArray0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.debug((Marker) null, ""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", (Object) substituteLoggingEvent0, (Object) ""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"");
}"
4331,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test182()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      throttledSlf4jLogger0.debug((Marker) null, (String) null, (Object) substituteLoggingEvent0);
  }"
4332,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test183()  throws Throwable  {
      LinkedList<SubstituteLoggingEvent> linkedList0 = new LinkedList<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", linkedList0, false);
      EventRecodingLogger eventRecodingLogger0 = new EventRecodingLogger(substituteLogger0, linkedList0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(eventRecodingLogger0, 1201L, timeUnit0);
      Object[] objectArray0 = new Object[1];
      throttledSlf4jLogger0.info(""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", objectArray0);
      throttledSlf4jLogger0.debug((Marker) null, ""org.sprinQside.modules.utils.time.ClockUcil$DefaultClock"", (Object) null);
}"
4333,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test184()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable();
      throttledSlf4jLogger0.debug((Marker) null, ""HbewhxVChCLJ"", (Throwable) mockThrowable0);
      throttledSlf4jLogger0.debug((Marker) null, ""HbewhxVChCLJ"");
  }"
4334,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test185()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 9000L, timeUnit0);
      MockThrowable mockThrowable0 = new MockThrowable(""N2Hj6"");
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      throttledSlf4jLogger0.error((Marker) null, ""N2Hj6"", (Object) substituteLoggingEvent0, object0);
      throttledSlf4jLogger0.debug(""N2Hj6"", (Throwable) mockThrowable0);
}"
4335,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test186()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      Object[] objectArray0 = new Object[14];
      throttledSlf4jLogger0.debug("""", objectArray0);
}"
4336,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test187()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 9000L, timeUnit0);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      Object object0 = new Object();
      throttledSlf4jLogger0.error((Marker) null, ""N2Hj6"", (Object) substituteLoggingEvent0, object0);
      Object[] objectArray0 = new Object[4];
      throttledSlf4jLogger0.debug(""N2Hj6"", objectArray0);
}"
4337,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test188()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      throttledSlf4jLogger0.debug("""", (Object) throttledSlf4jLogger0, (Object) """");
  }"
4338,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test189()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""rq&I(^2"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 39L, timeUnit0);
      throttledSlf4jLogger0.trace(""rq&I(^2"");
      throttledSlf4jLogger0.debug(""rq&I(^2"", (Object) ""rq&I(^2"", (Object) ""rq&I(^2"");
}"
4339,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test190()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-1L), timeUnit0);
      throttledSlf4jLogger0.debug(""-3n;8y"", (Object) ""-3n;8y"");
  }"
4340,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test191()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 10L, timeUnit0);
      throttledSlf4jLogger0.info(""o}7Ov0~3/<UwaS"", (Object) nOPLogger0);
      throttledSlf4jLogger0.debug(""o}7Ov0~3/<UwaS"", (Object) ""o}7Ov0~3/<UwaS"");
  }"
4341,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test192()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, (-38L), timeUnit0);
      throttledSlf4jLogger0.debug(""Y92\""_IGSYG_5|Ax9z7?"");
  }"
4342,"    public void debug(String msg) {
        if (shouldLog()) {
            delegate.debug(msg);
        }
    }","  public void test193()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""RRVA(CeQ_ohx)"", arrayDeque0, true);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 181L, timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.debug((Marker) null, ""RRVA(CeQ_ohx)"", (Object) substituteLoggingEvent0, object0);
      throttledSlf4jLogger0.debug(""RRVA(CeQ_ohx)"");
  }"
4343,"    public void error(String msg) {
        if (shouldLog()) {
            delegate.error(msg);
        }
    }","  public void test194()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""RRVA(CeQ_ohx)"", arrayDeque0, true);
      SubstituteLoggingEvent substituteLoggingEvent0 = new SubstituteLoggingEvent();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 181L, timeUnit0);
      Object object0 = new Object();
      throttledSlf4jLogger0.debug((Marker) null, ""RRVA(CeQ_ohx)"", (Object) substituteLoggingEvent0, object0);
      throttledSlf4jLogger0.error(""RRVA(CeQ_ohx)"", (Object) ""RRVA(CeQ_ohx)"");
  }"
4344,"    public boolean isDebugEnabled() {
        return delegate.isDebugEnabled();
    }","  public void test195()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""=a"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled((Marker) null);
}"
4345,"    public boolean isErrorEnabled() {
        return delegate.isErrorEnabled();
    }","  public void test196()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""RRVA(CeQ_ohx)"", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 181L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled((Marker) null);
}"
4346,"    public boolean isInfoEnabled() {
        return delegate.isInfoEnabled();
    }","  public void test197()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""u#)zA0Sr{LT+{g"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 1L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled((Marker) null);
}"
4347,"    public boolean isDebugEnabled() {
        return delegate.isDebugEnabled();
    }","  public void test198()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isDebugEnabled();
}"
4348,"    public boolean isWarnEnabled() {
        return delegate.isWarnEnabled();
    }","  public void test199()  throws Throwable  {
      PriorityQueue<SubstituteLoggingEvent> priorityQueue0 = new PriorityQueue<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""=a"", priorityQueue0, false);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isWarnEnabled((Marker) null);
}"
4349,"    public boolean isInfoEnabled() {
        return delegate.isInfoEnabled();
    }","  public void test200()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 0L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isInfoEnabled();
}"
4350,"    public boolean isWarnEnabled() {
        return delegate.isWarnEnabled();
    }","  public void test201()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger((Logger) null, 0L, timeUnit0);
      // Undeclared exception!
      try { 
        throttledSlf4jLogger0.isWarnEnabled();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.log.ThrottledSlf4jLogger"", e);
      }
  }"
4351,"    public boolean isTraceEnabled() {
        return delegate.isTraceEnabled();
    }","  public void test202()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 1731L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled((Marker) null);
}"
4352,"    public boolean isTraceEnabled() {
        return delegate.isTraceEnabled();
    }","  public void test203()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger("""", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, (-22L), timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isTraceEnabled();
}"
4353,"    public String getName() {
        return delegate.getName();
    }","  public void test204()  throws Throwable  {
      NOPLogger nOPLogger0 = NOPLogger.NOP_LOGGER;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(nOPLogger0, 9000L, timeUnit0);
      String string0 = throttledSlf4jLogger0.getName();
}"
4354,"    public boolean isErrorEnabled() {
        return delegate.isErrorEnabled();
    }","  public void test205()  throws Throwable  {
      ArrayDeque<SubstituteLoggingEvent> arrayDeque0 = new ArrayDeque<SubstituteLoggingEvent>();
      SubstituteLogger substituteLogger0 = new SubstituteLogger(""RRVA(CeQ_ohx)"", arrayDeque0, true);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ThrottledSlf4jLogger throttledSlf4jLogger0 = new ThrottledSlf4jLogger(substituteLogger0, 181L, timeUnit0);
      boolean boolean0 = throttledSlf4jLogger0.isErrorEnabled();
}"
4355,"    public static Method getAccessibleMethodByName(final Class clazz, final String methodName) {
        Validate.notNull(clazz, ""clazz can't be null"");
        Validate.notEmpty(methodName, ""methodName can't be blank"");

        for (Class<?> searchType = clazz; searchType != Object.class; searchType = searchType.getSuperclass()) {
            Method[] methods = searchType.getDeclaredMethods();
            for (Method method : methods) {
                if (method.getName().equals(methodName)) {
                    ClassUtil.makeAccessible(method);
                    return method;
                }
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method method0 = ClassUtil.getAccessibleMethodByName(class0, "",](wcz;%n!+ R?KRo"");
}"
4356,"    public static Field getAccessibleField(final Class clazz, final String fieldName) {
        Validate.notNull(clazz, ""clazz can't be null"");
        Validate.notEmpty(fieldName, ""fieldName can't be blank"");
        for (Class<?> superClass = clazz; superClass != Object.class; superClass = superClass.getSuperclass()) {
            try {
                Field field = superClass.getDeclaredField(fieldName);
                ClassUtil.makeAccessible(field);
                return field;
            } catch (NoSuchFieldException e) {// NOSONAR
                // Field不在当前类定义,继续向上转型
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Field field0 = ClassUtil.getAccessibleField(class0, ""A1G<4*GzezaOi:p"");
}"
4357,"    public static <T extends Annotation> Set<Method> getAnnotatedPublicMethods(Class<?> clazz, Class<T> annotation) {
        // 已递归到Objebt.class, 停止递归
        if (Object.class.equals(clazz)) {
            return Collections.emptySet();
        }

        List<Class<?>> ifcs = ClassUtils.getAllInterfaces(clazz);
        Set<Method> annotatedMethods = new HashSet<Method>();

        // 遍历当前类的所有公共方法
        Method[] methods = clazz.getMethods();

        for (Method method : methods) {
            // 如果当前方法有标注，或定义了该方法的所有接口有标注
            if (method.getAnnotation(annotation) != null || searchOnInterfaces(method, annotation, ifcs)) {
                annotatedMethods.add(method);
            }
        }

        return annotatedMethods;
    }","  public void test2()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Method> set0 = ClassUtil.getAnnotatedPublicMethods((Class<?>) class0, class1);
}"
4358,"    public static <T extends Annotation> Set<Field> getAnnotatedFields(Class<? extends Object> clazz,
                                                                       Class<T> annotation) {
        if (Object.class.equals(clazz)) {
            return Collections.emptySet();
        }
        Set<Field> annotatedFields = new HashSet<Field>();
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            if (field.getAnnotation(annotation) != null) {
                annotatedFields.add(field);
            }
        }
        annotatedFields.addAll(getAnnotatedFields(clazz.getSuperclass(), annotation));
        return annotatedFields;
    }","  public void test3()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Field> set0 = ClassUtil.getAnnotatedFields((Class<?>) class0, class1);
}"
4359,"    public static Class<?> unwrapCglib(Object instance) {
        Validate.notNull(instance, ""Instance must not be null"");
        Class<?> clazz = instance.getClass();
        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {
            Class<?> superClass = clazz.getSuperclass();
            if ((superClass != null) && !Object.class.equals(superClass)) {
                return superClass;
            }
        }
        return clazz;
    }","  public void test4()  throws Throwable  {
      ClassUtils.Interfaces classUtils_Interfaces0 = ClassUtils.Interfaces.INCLUDE;
      Class<?> class0 = ClassUtil.unwrapCglib(classUtils_Interfaces0);
}"
4360,"    public static String getShortClassName(final Class<?> cls) {
        return ClassUtils.getShortClassName(cls);
    }","  public void test5()  throws Throwable  {
      String string0 = ClassUtil.getShortClassName(""lAW3"");
}"
4361,"    public static String getShortClassName(final Class<?> cls) {
        return ClassUtils.getShortClassName(cls);
    }","  public void test6()  throws Throwable  {
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 4);
      String string0 = ClassUtil.getShortClassName(classArray0[1]);
}"
4362,"    public static String getPackageName(final Class<?> cls) {
        return ClassUtils.getPackageName(cls);
    }","  public void test7()  throws Throwable  {
      String string0 = ClassUtil.getPackageName(""{.SB1~n:zcSP`r?Iaxk"");
}"
4363,"    public static String getPackageName(final Class<?> cls) {
        return ClassUtils.getPackageName(cls);
    }","  public void test8()  throws Throwable  {
      String string0 = ClassUtil.getPackageName((Class<?>) null);
}"
4364,"    public static List<Class<?>> getAllInterfaces(final Class<?> cls) {
        return ClassUtils.getAllInterfaces(cls);
    }","  public void test9()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.getAllInterfaces(class0);
}"
4365,"    public static Class<?> unwrapCglib(Object instance) {
        Validate.notNull(instance, ""Instance must not be null"");
        Class<?> clazz = instance.getClass();
        if ((clazz != null) && clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) {
            Class<?> superClass = clazz.getSuperclass();
            if ((superClass != null) && !Object.class.equals(superClass)) {
                return superClass;
            }
        }
        return clazz;
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapCglib((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Instance must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4366,"    public static void makeAccessible(Method method) {
        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers()))
                && !method.isAccessible()) {
            method.setAccessible(true);
        }
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.makeAccessible((Method) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ClassUtil"", e);
      }
  }"
4367,"    public static void makeAccessible(Method method) {
        if ((!Modifier.isPublic(method.getModifiers()) || !Modifier.isPublic(method.getDeclaringClass().getModifiers()))
                && !method.isAccessible()) {
            method.setAccessible(true);
        }
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.makeAccessible((Field) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ClassUtil"", e);
      }
  }"
4368,"    public static String getShortClassName(final Class<?> cls) {
        return ClassUtils.getShortClassName(cls);
    }","  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getShortClassName(""["");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
4369,"    public static String getPackageName(final Class<?> cls) {
        return ClassUtils.getPackageName(cls);
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName(""["");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
4370,"    public static Method getGetterMethod(Class<?> clazz, String propertyName) {
        String getterMethodName = ClassUtil.GETTER_PREFIX + StringUtils.capitalize(propertyName);

        Method method = ClassUtil.getAccessibleMethod(clazz, getterMethodName);

        // retry on another name
        if (method == null) {
            getterMethodName = ClassUtil.IS_PREFIX + StringUtils.capitalize(propertyName);
            method = ClassUtil.getAccessibleMethod(clazz, getterMethodName);
        }
        return method;
    }","  public void test15()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.getGetterMethod(class0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ClassUtil"", e);
      }
  }"
4371,"    public static Method getGetterMethod(Class<?> clazz, String propertyName) {
        String getterMethodName = ClassUtil.GETTER_PREFIX + StringUtils.capitalize(propertyName);

        Method method = ClassUtil.getAccessibleMethod(clazz, getterMethodName);

        // retry on another name
        if (method == null) {
            getterMethodName = ClassUtil.IS_PREFIX + StringUtils.capitalize(propertyName);
            method = ClassUtil.getAccessibleMethod(clazz, getterMethodName);
        }
        return method;
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGetterMethod((Class<?>) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // class can't be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4372,"    public static <T> Class<T> getClassGenricType(final Class clazz) {
        return getClassGenricType(clazz, 0);
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassGenricType((Class) null, 66);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ClassUtil"", e);
      }
  }"
4373,"    public static <T extends Annotation> Set<Field> getAnnotatedPublicFields(Class<? extends Object> clazz,
                                                                             Class<T> annotation) {

        if (Object.class.equals(clazz)) {
            return Collections.emptySet();
        }

        Set<Field> annotatedFields = new HashSet<Field>();
        Field[] fields = clazz.getFields();

        for (Field field : fields) {
            if (field.getAnnotation(annotation) != null) {
                annotatedFields.add(field);
            }
        }

        return annotatedFields;
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getAnnotatedPublicFields((Class<?>) null, (Class<Annotation>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.util.ReflectionUtils"", e);
      }
  }"
4374,"    public static <T extends Annotation> Set<Field> getAnnotatedFields(Class<? extends Object> clazz,
                                                                       Class<T> annotation) {
        if (Object.class.equals(clazz)) {
            return Collections.emptySet();
        }
        Set<Field> annotatedFields = new HashSet<Field>();
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            if (field.getAnnotation(annotation) != null) {
                annotatedFields.add(field);
            }
        }
        annotatedFields.addAll(getAnnotatedFields(clazz.getSuperclass(), annotation));
        return annotatedFields;
    }","  public void test19()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.getAnnotatedFields((Class<?>) class0, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.util.ReflectionUtils"", e);
      }
  }"
4375,"    public static Set<Annotation> getAllAnnotations(final Class<?> cls) {
        List<Class<?>> allTypes = getAllSuperclasses(cls);
        allTypes.addAll(getAllInterfaces(cls));
        allTypes.add(cls);

        Set<Annotation> anns = new HashSet<Annotation>();
        for (Class<?> type : allTypes) {
            anns.addAll(Arrays.asList(type.getDeclaredAnnotations()));
        }

        Set<Annotation> superAnnotations = new HashSet<Annotation>();
        for (Annotation ann : anns) {
            getSupperAnnotations(ann.annotationType(), superAnnotations);
        }

        anns.addAll(superAnnotations);

        return anns;
    }","  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getAllAnnotations((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ClassUtil"", e);
      }
  }"
4376,"    public static Method getAccessibleMethodByName(final Class clazz, final String methodName) {
        Validate.notNull(clazz, ""clazz can't be null"");
        Validate.notEmpty(methodName, ""methodName can't be blank"");

        for (Class<?> searchType = clazz; searchType != Object.class; searchType = searchType.getSuperclass()) {
            Method[] methods = searchType.getDeclaredMethods();
            for (Method method : methods) {
                if (method.getName().equals(methodName)) {
                    ClassUtil.makeAccessible(method);
                    return method;
                }
            }
        }
        return null;
    }","  public void test21()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.getAccessibleMethodByName(class0, ""G-$"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4377,"    public static Method getAccessibleMethod(final Class<?> clazz, final String methodName,
                                             Class<?>... parameterTypes) {
        Validate.notNull(clazz, ""class can't be null"");
        Validate.notEmpty(methodName, ""methodName can't be blank"");
        Class[] theParameterTypes = ArrayUtils.nullToEmpty(parameterTypes);

        // 处理原子类型与对象类型的兼容
        ClassUtil.wrapClassses(theParameterTypes);

        for (Class<?> searchType = clazz; searchType != Object.class; searchType = searchType.getSuperclass()) {
            try {
                Method method = searchType.getDeclaredMethod(methodName, theParameterTypes);
                ClassUtil.makeAccessible(method);
                return method;
            } catch (NoSuchMethodException e) {
                // Method不在当前类定义,继续向上转型
            }
        }
        return null;
    }","  public void test22()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 9);
      // Undeclared exception!
      try { 
        ClassUtil.getAccessibleMethod(class0, "">Zu*l-GS5QJT?("", classArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ClassUtil"", e);
      }
  }"
4378,"    public static Field getAccessibleField(final Class clazz, final String fieldName) {
        Validate.notNull(clazz, ""clazz can't be null"");
        Validate.notEmpty(fieldName, ""fieldName can't be blank"");
        for (Class<?> superClass = clazz; superClass != Object.class; superClass = superClass.getSuperclass()) {
            try {
                Field field = superClass.getDeclaredField(fieldName);
                ClassUtil.makeAccessible(field);
                return field;
            } catch (NoSuchFieldException e) {// NOSONAR
                // Field不在当前类定义,继续向上转型
            }
        }
        return null;
    }","  public void test23()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.getAccessibleField(class0, ""G6Ezanl"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ClassUtil"", e);
      }
  }"
4379,"    public static Method getAccessibleMethod(final Class<?> clazz, final String methodName,
                                             Class<?>... parameterTypes) {
        Validate.notNull(clazz, ""class can't be null"");
        Validate.notEmpty(methodName, ""methodName can't be blank"");
        Class[] theParameterTypes = ArrayUtils.nullToEmpty(parameterTypes);

        // 处理原子类型与对象类型的兼容
        ClassUtil.wrapClassses(theParameterTypes);

        for (Class<?> searchType = clazz; searchType != Object.class; searchType = searchType.getSuperclass()) {
            try {
                Method method = searchType.getDeclaredMethod(methodName, theParameterTypes);
                ClassUtil.makeAccessible(method);
                return method;
            } catch (NoSuchMethodException e) {
                // Method不在当前类定义,继续向上转型
            }
        }
        return null;
    }","  public void test24()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      Class<?> class0 = ClassUtil.unwrapCglib(classUtils0);
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 6);
      Method method0 = ClassUtil.getAccessibleMethod(class0, ""KKjZ]*/"", classArray0);
}"
4380,"    public static <T extends Annotation> Set<Field> getAnnotatedFields(Class<? extends Object> clazz,
                                                                       Class<T> annotation) {
        if (Object.class.equals(clazz)) {
            return Collections.emptySet();
        }
        Set<Field> annotatedFields = new HashSet<Field>();
        Field[] fields = clazz.getDeclaredFields();
        for (Field field : fields) {
            if (field.getAnnotation(annotation) != null) {
                annotatedFields.add(field);
            }
        }
        annotatedFields.addAll(getAnnotatedFields(clazz.getSuperclass(), annotation));
        return annotatedFields;
    }","  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Field> set0 = ClassUtil.getAnnotatedFields((Class<?>) class0, class1);
}"
4381,"    public static List<Class<?>> getAllSuperclasses(final Class<?> cls) {
        return ClassUtils.getAllSuperclasses(cls);
    }","  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Double> class1 = ClassUtil.getClassGenricType((Class) class0);
      List<Class<?>> list0 = ClassUtil.getAllSuperclasses(class1);
}"
4382,"    public static boolean isPresent(String className, ClassLoader classLoader) {
        try {
            classLoader.loadClass(className);
            return true;
        } catch (Throwable ex) {
            // Class or one of its dependencies is not present...
            return false;
        }
    }","  public void test27()  throws Throwable  {
      ClassLoader classLoader0 = ClassUtil.getDefaultClassLoader();
      boolean boolean0 = ClassUtil.isPresent(""org.springside.modules.utils.reflect.ClassUtil"", classLoader0);
}"
4383,"    public static Method getSetterMethod(Class<?> clazz, String propertyName, Class<?> parameterType) {
        String setterMethodName = ClassUtil.SETTER_PREFIX + StringUtils.capitalize(propertyName);
        return ClassUtil.getAccessibleMethod(clazz, setterMethodName, parameterType);
    }","  public void test28()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Method method0 = ClassUtil.getSetterMethod(class0, """", class0);
}"
4384,"    public static <T extends Annotation> Set<Field> getAnnotatedPublicFields(Class<? extends Object> clazz,
                                                                             Class<T> annotation) {

        if (Object.class.equals(clazz)) {
            return Collections.emptySet();
        }

        Set<Field> annotatedFields = new HashSet<Field>();
        Field[] fields = clazz.getFields();

        for (Field field : fields) {
            if (field.getAnnotation(annotation) != null) {
                annotatedFields.add(field);
            }
        }

        return annotatedFields;
    }","  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Field> set0 = ClassUtil.getAnnotatedPublicFields((Class<?>) class0, class1);
}"
4385,"    public static <T extends Annotation> Set<Field> getAnnotatedPublicFields(Class<? extends Object> clazz,
                                                                             Class<T> annotation) {

        if (Object.class.equals(clazz)) {
            return Collections.emptySet();
        }

        Set<Field> annotatedFields = new HashSet<Field>();
        Field[] fields = clazz.getFields();

        for (Field field : fields) {
            if (field.getAnnotation(annotation) != null) {
                annotatedFields.add(field);
            }
        }

        return annotatedFields;
    }","  public void test30()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Annotation> class1 = Annotation.class;
      Set<Field> set0 = ClassUtil.getAnnotatedPublicFields((Class<?>) class0, class1);
}"
4386,"    public static String getPackageName(final Class<?> cls) {
        return ClassUtils.getPackageName(cls);
    }","  public void test31()  throws Throwable  {
      String string0 = ClassUtil.getPackageName("""");
}"
4387,"    public static String getShortClassName(final Class<?> cls) {
        return ClassUtils.getShortClassName(cls);
    }","  public void test32()  throws Throwable  {
      String string0 = ClassUtil.getShortClassName("""");
}"
4388,,"  public void test33()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
  }"
4389,"    public static <T> Class<T> getClassGenricType(final Class clazz) {
        return getClassGenricType(clazz, 0);
    }","  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassGenricType((Class) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ClassUtil"", e);
      }
  }"
4390,"    public static boolean isPresent(String className, ClassLoader classLoader) {
        try {
            classLoader.loadClass(className);
            return true;
        } catch (Throwable ex) {
            // Class or one of its dependencies is not present...
            return false;
        }
    }","  public void test35()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = ClassUtil.isPresent(""g(z}"", classLoader0);
}"
4391,"    public static void setField(final Object obj, Field field, final Object value) {
        try {
            field.set(obj, value);
        } catch (Exception e) {
            throw convertReflectionExceptionToUnchecked(e);
        }
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.setField("""", (Field) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4392,"    public static <T> T invokeConstructor(final Class<T> cls, Object... args) {
        try {
            return ConstructorUtils.invokeConstructor(cls, args);
        } catch (Exception e) {
            throw ExceptionUtil.uncheckedAndWrap(e);
        }
    }","  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ReflectionUtil.invokeConstructor(class0, (Object[]) null);
}"
4393,"    public static void setProperty(Object obj, String propertyName, final Object value) {
        Method method = ClassUtil.getSetterMethod(obj.getClass(), propertyName, value.getClass());
        if (method != null) {
            try {
                method.invoke(obj, value);
            } catch (Exception e) {
                throw convertReflectionExceptionToUnchecked(e);
            }
        } else {
            setFieldValue(obj, propertyName, value);
        }
    }","  public void test2()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        ReflectionUtil.setProperty((Object) null, """", mockIllegalAccessException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4394,"    public static void setProperty(Object obj, String propertyName, final Object value) {
        Method method = ClassUtil.getSetterMethod(obj.getClass(), propertyName, value.getClass());
        if (method != null) {
            try {
                method.invoke(obj, value);
            } catch (Exception e) {
                throw convertReflectionExceptionToUnchecked(e);
            }
        } else {
            setFieldValue(obj, propertyName, value);
        }
    }","  public void test3()  throws Throwable  {
      MockException mockException0 = new MockException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockException0);
      // Undeclared exception!
      try { 
        ReflectionUtil.setProperty(invocationTargetException0, (String) null, mockException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4395,"    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {
        Field field = ClassUtil.getAccessibleField(obj.getClass(), fieldName);
        if (field == null) {
            throw new IllegalArgumentException(""Could not find field ["" + fieldName + ""] on target ["" + obj + ']');
        }
        setField(obj, field, value);
    }","  public void test4()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException((String) null);
      // Undeclared exception!
      try { 
        ReflectionUtil.setFieldValue((Object) null, """", noSuchMethodException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4396,"    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {
        Field field = ClassUtil.getAccessibleField(obj.getClass(), fieldName);
        if (field == null) {
            throw new IllegalArgumentException(""Could not find field ["" + fieldName + ""] on target ["" + obj + ']');
        }
        setField(obj, field, value);
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.setFieldValue("""", (String) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4397,"    public static void invokeSetter(Object obj, String propertyName, Object value) {
        Method method = ClassUtil.getSetterMethod(obj.getClass(), propertyName, value.getClass());
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + obj + ']');
        }
        invokeMethod(obj, method, value);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeSetter((Object) null, """", ""3g`7`Ya"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4398,"    public static <T> T invokeMethodByName(final Object obj, final String methodName, final Object[] args) {
        Method method = ClassUtil.getAccessibleMethodByName(obj.getClass(), methodName);
        if (method == null) {
            throw new IllegalArgumentException(""Could not find method ["" + methodName + ""] on target ["" + obj + ']');
        }
        return invokeMethod(obj, method, args);
    }","  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethodByName((Object) null, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4399,"    public static <T> T invokeMethodByName(final Object obj, final String methodName, final Object[] args) {
        Method method = ClassUtil.getAccessibleMethodByName(obj.getClass(), methodName);
        if (method == null) {
            throw new IllegalArgumentException(""Could not find method ["" + methodName + ""] on target ["" + obj + ']');
        }
        return invokeMethod(obj, method, args);
    }","  public void test8()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("">ie[4;}<'"");
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethodByName((Object) mockRuntimeException0, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // methodName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4400,"    public static <T> T invokeMethod(Object obj, String methodName, Object... args) {
        Object[] theArgs = ArrayUtils.nullToEmpty(args);
        final Class<?>[] parameterTypes = ClassUtils.toClass(theArgs);
        return (T) invokeMethod(obj, methodName, theArgs, parameterTypes);
    }","  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) null, ""diz_KyV{ ;|e"", objectArray0, (Class<?>[]) classArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4401,"    public static <T> T invokeMethod(Object obj, String methodName, Object... args) {
        Object[] theArgs = ArrayUtils.nullToEmpty(args);
        final Class<?>[] parameterTypes = ClassUtils.toClass(theArgs);
        return (T) invokeMethod(obj, methodName, theArgs, parameterTypes);
    }","  public void test10()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException((String) null);
      Object[] objectArray0 = new Object[1];
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) noSuchMethodException0, (String) null, objectArray0, (Class<?>[]) classArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // methodName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4402,"    public static <T> T invokeMethod(Object obj, String methodName, Object... args) {
        Object[] theArgs = ArrayUtils.nullToEmpty(args);
        final Class<?>[] parameterTypes = ClassUtils.toClass(theArgs);
        return (T) invokeMethod(obj, methodName, theArgs, parameterTypes);
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) null, (String) null, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4403,"    public static <T> T invokeMethod(Object obj, String methodName, Object... args) {
        Object[] theArgs = ArrayUtils.nullToEmpty(args);
        final Class<?>[] parameterTypes = ClassUtils.toClass(theArgs);
        return (T) invokeMethod(obj, methodName, theArgs, parameterTypes);
    }","  public void test12()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod(object0, (String) null, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // methodName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4404,"    public static <T> T invokeGetter(Object obj, String propertyName) {
        Method method = ClassUtil.getGetterMethod(obj.getClass(), propertyName);
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + obj + ']');
        }
        return (T) invokeMethod(obj, method);
    }","  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeGetter((Object) null, ""=Xdjh"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4405,"    public static <T> T invokeConstructor(final Class<T> cls, Object... args) {
        try {
            return ConstructorUtils.invokeConstructor(cls, args);
        } catch (Exception e) {
            throw ExceptionUtil.uncheckedAndWrap(e);
        }
    }","  public void test14()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeConstructor(class0, objectArray0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException(""java.lang.Integer"", e);
      }
  }"
4406,"    public static <T> T invokeConstructor(final Class<T> cls, Object... args) {
        try {
            return ConstructorUtils.invokeConstructor(cls, args);
        } catch (Exception e) {
            throw ExceptionUtil.uncheckedAndWrap(e);
        }
    }","  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      Class[] classArray0 = (Class[]) Array.newInstance(Class.class, 10);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeConstructor((Class<String>) classArray0[4], objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // class cannot be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4407,"    public static <T> T getProperty(Object obj, String propertyName) {
        Method method = ClassUtil.getGetterMethod(obj.getClass(), propertyName);
        if (method != null) {
            try {
                return (T) method.invoke(obj, ArrayUtils.EMPTY_OBJECT_ARRAY);
            } catch (Exception e) {
                throw convertReflectionExceptionToUnchecked(e);
            }
        } else {
            return (T) getFieldValue(obj, propertyName);
        }
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.getProperty((Object) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4408,"    public static <T> T getProperty(Object obj, String propertyName) {
        Method method = ClassUtil.getGetterMethod(obj.getClass(), propertyName);
        if (method != null) {
            try {
                return (T) method.invoke(obj, ArrayUtils.EMPTY_OBJECT_ARRAY);
            } catch (Exception e) {
                throw convertReflectionExceptionToUnchecked(e);
            }
        } else {
            return (T) getFieldValue(obj, propertyName);
        }
    }","  public void test17()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.getProperty(object0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4409,"    public static <T> T getFieldValue(final Object obj, final String fieldName) {
        Field field = ClassUtil.getAccessibleField(obj.getClass(), fieldName);
        if (field == null) {
            throw new IllegalArgumentException(""Could not find field ["" + fieldName + ""] on target ["" + obj + ']');
        }
        return getFieldValue(obj, field);
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4410,"    public static <T> T getFieldValue(final Object obj, final String fieldName) {
        Field field = ClassUtil.getAccessibleField(obj.getClass(), fieldName);
        if (field == null) {
            throw new IllegalArgumentException(""Could not find field ["" + fieldName + ""] on target ["" + obj + ']');
        }
        return getFieldValue(obj, field);
    }","  public void test19()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException((String) null);
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) noSuchMethodException0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // fieldName can't be blank
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4411,"    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {
        if ((e instanceof IllegalAccessException) || (e instanceof NoSuchMethodException)) {
            return new IllegalArgumentException(e);
        } else if (e instanceof InvocationTargetException) {
            return new RuntimeException(((InvocationTargetException) e).getTargetException());
        } else if (e instanceof RuntimeException) {
            return (RuntimeException) e;
        }
        return new UncheckedException(e);
    }","  public void test20()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(""10.11"");
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(mockRuntimeException0);
}"
4412,"    public static <T> T invokeMethod(Object obj, String methodName, Object... args) {
        Object[] theArgs = ArrayUtils.nullToEmpty(args);
        final Class<?>[] parameterTypes = ClassUtils.toClass(theArgs);
        return (T) invokeMethod(obj, methodName, theArgs, parameterTypes);
    }","  public void test21()  throws Throwable  {
      Class<NoSuchMethodException>[] classArray0 = (Class<NoSuchMethodException>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) ""%>uG}Y9"", ""%>uG}Y9"", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find method [%>uG}Y9] on target [%>uG}Y9]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4413,"    public static void setFieldValue(final Object obj, final String fieldName, final Object value) {
        Field field = ClassUtil.getAccessibleField(obj.getClass(), fieldName);
        if (field == null) {
            throw new IllegalArgumentException(""Could not find field ["" + fieldName + ""] on target ["" + obj + ']');
        }
        setField(obj, field, value);
    }","  public void test22()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException(""fkP?EY'AEhj~o2`u"");
      // Undeclared exception!
      try { 
        ReflectionUtil.setFieldValue(""fkP?EY'AEhj~o2`u"", ""fkP?EY'AEhj~o2`u"", mockIllegalAccessException0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [fkP?EY'AEhj~o2`u] on target [fkP?EY'AEhj~o2`u]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4414,"    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {
        if ((e instanceof IllegalAccessException) || (e instanceof NoSuchMethodException)) {
            return new IllegalArgumentException(e);
        } else if (e instanceof InvocationTargetException) {
            return new RuntimeException(((InvocationTargetException) e).getTargetException());
        } else if (e instanceof RuntimeException) {
            return (RuntimeException) e;
        }
        return new UncheckedException(e);
    }","  public void test23()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockIllegalAccessException0, """");
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(invocationTargetException0);
}"
4415,"    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {
        if ((e instanceof IllegalAccessException) || (e instanceof NoSuchMethodException)) {
            return new IllegalArgumentException(e);
        } else if (e instanceof InvocationTargetException) {
            return new RuntimeException(((InvocationTargetException) e).getTargetException());
        } else if (e instanceof RuntimeException) {
            return (RuntimeException) e;
        }
        return new UncheckedException(e);
    }","  public void test24()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(noSuchMethodException0);
}"
4416,"    public static RuntimeException convertReflectionExceptionToUnchecked(Exception e) {
        if ((e instanceof IllegalAccessException) || (e instanceof NoSuchMethodException)) {
            return new IllegalArgumentException(e);
        } else if (e instanceof InvocationTargetException) {
            return new RuntimeException(((InvocationTargetException) e).getTargetException());
        } else if (e instanceof RuntimeException) {
            return (RuntimeException) e;
        }
        return new UncheckedException(e);
    }","  public void test25()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(mockIllegalAccessException0);
}"
4417,"    public static <T> T invokeMethodByName(final Object obj, final String methodName, final Object[] args) {
        Method method = ClassUtil.getAccessibleMethodByName(obj.getClass(), methodName);
        if (method == null) {
            throw new IllegalArgumentException(""Could not find method ["" + methodName + ""] on target ["" + obj + ']');
        }
        return invokeMethod(obj, method, args);
    }","  public void test26()  throws Throwable  {
      MockException mockException0 = new MockException(""ItXYDF6<Q,(.4^3g"");
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked(mockException0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethodByName((Object) runtimeException0, ""Mq]OBe/YY:g"", objectArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find method [Mq]OBe/YY:g] on target [org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: ItXYDF6<Q,(.4^3g]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4418,"    public static void setProperty(Object obj, String propertyName, final Object value) {
        Method method = ClassUtil.getSetterMethod(obj.getClass(), propertyName, value.getClass());
        if (method != null) {
            try {
                method.invoke(obj, value);
            } catch (Exception e) {
                throw convertReflectionExceptionToUnchecked(e);
            }
        } else {
            setFieldValue(obj, propertyName, value);
        }
    }","  public void test27()  throws Throwable  {
      RuntimeException runtimeException0 = ReflectionUtil.convertReflectionExceptionToUnchecked((Exception) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ReflectionUtil.setProperty(runtimeException0, ""Could not find field ["", object0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [Could not find field [] on target [org.evosuite.runtime.mock.java.lang.MockThrowable]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4419,"    public static <T> T getProperty(Object obj, String propertyName) {
        Method method = ClassUtil.getGetterMethod(obj.getClass(), propertyName);
        if (method != null) {
            try {
                return (T) method.invoke(obj, ArrayUtils.EMPTY_OBJECT_ARRAY);
            } catch (Exception e) {
                throw convertReflectionExceptionToUnchecked(e);
            }
        } else {
            return (T) getFieldValue(obj, propertyName);
        }
    }","  public void test28()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException(""Could not find getter method ["");
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockIllegalAccessException0, ""-#"");
      // Undeclared exception!
      try { 
        ReflectionUtil.getProperty((Object) invocationTargetException0, ""1.7"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [1.7] on target [java.lang.reflect.InvocationTargetException: -#]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4420,"    public static void invokeSetter(Object obj, String propertyName, Object value) {
        Method method = ClassUtil.getSetterMethod(obj.getClass(), propertyName, value.getClass());
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + obj + ']');
        }
        invokeMethod(obj, method, value);
    }","  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("".d!8"");
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeSetter(class0, "".d!8"", mockRuntimeException0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find getter method [.d!8] on target [class java.lang.Object]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4421,"    public static <T> T invokeGetter(Object obj, String propertyName) {
        Method method = ClassUtil.getGetterMethod(obj.getClass(), propertyName);
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + obj + ']');
        }
        return (T) invokeMethod(obj, method);
    }","  public void test30()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeGetter((Object) noSuchMethodException0, ""L' z7t9\""JL~srxBt20h"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find getter method [L' z7t9\""JL~srxBt20h] on target [java.lang.NoSuchMethodException]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4422,"    public static <T> T invokeMethod(Object obj, String methodName, Object... args) {
        Object[] theArgs = ArrayUtils.nullToEmpty(args);
        final Class<?>[] parameterTypes = ClassUtils.toClass(theArgs);
        return (T) invokeMethod(obj, methodName, theArgs, parameterTypes);
    }","  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) """", (Method) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4423,"    public static <T> T invokeMethod(Object obj, String methodName, Object... args) {
        Object[] theArgs = ArrayUtils.nullToEmpty(args);
        final Class<?>[] parameterTypes = ClassUtils.toClass(theArgs);
        return (T) invokeMethod(obj, methodName, theArgs, parameterTypes);
    }","  public void test32()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        ReflectionUtil.invokeMethod((Object) mockRuntimeException0, ""YtGg}U.*==<nf]U"", objectArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find method [YtGg}U.*==<nf]U] on target [org.evosuite.runtime.mock.java.lang.MockThrowable]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4424,"    public static <T> T getFieldValue(final Object obj, final String fieldName) {
        Field field = ClassUtil.getAccessibleField(obj.getClass(), fieldName);
        if (field == null) {
            throw new IllegalArgumentException(""Could not find field ["" + fieldName + ""] on target ["" + obj + ']');
        }
        return getFieldValue(obj, field);
    }","  public void test33()  throws Throwable  {
      ReflectionUtil reflectionUtil0 = new ReflectionUtil();
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) reflectionUtil0, ""Could not find etter method ["");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find field [Could not find etter method [] on target [org.springside.modules.utils.reflect.ReflectionUtil@1]
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4425,"    public static <T> T getFieldValue(final Object obj, final String fieldName) {
        Field field = ClassUtil.getAccessibleField(obj.getClass(), fieldName);
        if (field == null) {
            throw new IllegalArgumentException(""Could not find field ["" + fieldName + ""] on target ["" + obj + ']');
        }
        return getFieldValue(obj, field);
    }","  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ReflectionUtil.getFieldValue((Object) ""4D]%Rq+C["", (Field) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.ReflectionUtil"", e);
      }
  }"
4426,"    public static MethodInvoker createSetter(final Class<?> clz, final String propertyName, Class<?> parameterType) {
        Method method = ClassUtil.getSetterMethod(clz, propertyName, parameterType);
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + clz + ']');
        }
        return new MethodInvoker(method);
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        MethodInvoker.createSetter(class0, ""<#DUgH}$C"", class1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find getter method [<#DUgH}$C] on target [class java.lang.Object]
         //
         verifyException(""org.springside.modules.utils.reflect.MethodInvoker"", e);
      }
  }"
4427,"    public static MethodInvoker createSetter(final Class<?> clz, final String propertyName, Class<?> parameterType) {
        Method method = ClassUtil.getSetterMethod(clz, propertyName, parameterType);
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + clz + ']');
        }
        return new MethodInvoker(method);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodInvoker.createSetter((Class<?>) null, ""rg.sprhngside.modules.Atils.reflect.@ethodInvZker"", (Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // class can't be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4428,"    public static MethodInvoker createGetter(final Class<?> clz, final String propertyName) {
        Method method = ClassUtil.getGetterMethod(clz, propertyName);
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + clz + ']');
        }
        return new MethodInvoker(method);
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodInvoker.createGetter((Class<?>) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // class can't be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4429,"    public <T> T invoke(final Object obj, Object... args) {
        try {
            return (T) method.invoke(obj, args);
        } catch (Exception e) {
            throw ExceptionUtil.uncheckedAndWrap(e);
        }
    }","  public void test3()  throws Throwable  {
      MethodInvoker methodInvoker0 = new MethodInvoker((Method) null);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        methodInvoker0.invoke((Object) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.MethodInvoker"", e);
      }
  }"
4430,"    public static FastMethodInvoker createSetter(final Class<?> clz, final String propertyName,
                                                 Class<?> parameterType) {
        Method method = ClassUtil.getSetterMethod(clz, propertyName, parameterType);
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + clz + ']');
        }
        return build(clz, method);
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        FastMethodInvoker.createSetter(class0, ""y#dn"", class1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Could not find getter method [y#dn] on target [class java.lang.String]
         //
         verifyException(""org.springside.modules.utils.reflect.FastMethodInvoker"", e);
      }
  }"
4431,"    public static FastMethodInvoker createSetter(final Class<?> clz, final String propertyName,
                                                 Class<?> parameterType) {
        Method method = ClassUtil.getSetterMethod(clz, propertyName, parameterType);
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + clz + ']');
        }
        return build(clz, method);
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMethodInvoker.createSetter((Class<?>) null, (String) null, (Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // class can't be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4432,"    public static FastMethodInvoker createGetter(final Class<?> clz, final String propertyName) {
        Method method = ClassUtil.getGetterMethod(clz, propertyName);
        if (method == null) {
            throw new IllegalArgumentException(
                    ""Could not find getter method ["" + propertyName + ""] on target ["" + clz + ']');
        }
        return build(clz, method);
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMethodInvoker.createGetter((Class<?>) null, ""p51uKl5yicXmgRqij"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // class can't be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4433,"    public <T> T invoke(Object obj, Object... args) {
        try {
            return (T) fastMethod.invoke(obj, args);
        } catch (Exception e) {
            throw ExceptionUtil.uncheckedAndWrap(e);
        }
    }","  public void test3()  throws Throwable  {
      FastMethodInvoker fastMethodInvoker0 = new FastMethodInvoker((FastMethod) null);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        fastMethodInvoker0.invoke((Object) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.reflect.FastMethodInvoker"", e);
      }
  }"
4434,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test0()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""com.google.common.base.CharMatcher"");
}"
4435,"    public static String intToIpv4String(int i) {
        return new StringBuilder(15).append(i >> 24 & 0xff).append('.').append(i >> 16 & 0xff).append('.')
                .append(i >> 8 & 0xff).append('.').append(i & 0xff).toString();
    }","  public void test1()  throws Throwable  {
      String string0 = IPUtil.intToIpv4String((-536870912));
}"
4436,"    public static int toInt(InetAddress address) {
        return InetAddresses.coerceToInteger(address);
    }","  public void test2()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      int int0 = IPUtil.toInt(inetAddress0);
}"
4437,"    public static int toInt(InetAddress address) {
        return InetAddresses.coerceToInteger(address);
    }","  public void test3()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      int int0 = IPUtil.toInt(inetAddress0);
}"
4438,"    public static int ipv4StringToInt(String ipv4Str) {
        byte[] byteAddress = ip4StringToBytes(ipv4Str);
        if (byteAddress == null) {
            return 0;
        } else {
            return NumberUtil.toInt(byteAddress);
        }
    }","  public void test4()  throws Throwable  {
      int int0 = IPUtil.ipv4StringToInt(""255.255.243.62"");
}"
4439,"    public static String toString(InetAddress address) {
        return InetAddresses.toAddrString(address);
    }","  public void test5()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""192.168.1.42"");
}"
4440,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test6()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""192.168.1.42"");
}"
4441,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test7()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""224.0.0.0"");
}"
4442,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test8()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""224.0.0.0"");
}"
4443,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test9()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""230.84.107.102"");
}"
4444,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test10()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""230.84.107.102"");
}"
4445,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test11()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""127.0.0.1"");
}"
4446,"    public static String toString(InetAddress address) {
        return InetAddresses.toAddrString(address);
    }","  public void test12()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""127.0.0.1"");
}"
4447,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test13()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""0.0.0.0"");
}"
4448,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test14()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromIpv4String(""0.0.0.0"");
}"
4449,"    public static InetAddress fromIpString(String address) {
        return InetAddresses.forString(address);
    }","  public void test15()  throws Throwable  {
      InetAddress inetAddress0 = IPUtil.fromIpString(""192.168.1.42"");
}"
4450,"    public static InetAddress fromIpString(String address) {
        return InetAddresses.forString(address);
    }","  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = IPUtil.fromIpString(""230.84.107.100"");
}"
4451,"    public static InetAddress fromIpString(String address) {
        return InetAddresses.forString(address);
    }","  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = IPUtil.fromIpString(""127.0.1.1"");
}"
4452,"    public static String toString(InetAddress address) {
        return InetAddresses.toAddrString(address);
    }","  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = IPUtil.fromIpString(""0.0.0.0"");
}"
4453,"    public static InetAddress fromIpString(String address) {
        return InetAddresses.forString(address);
    }","  public void test19()  throws Throwable  {
      InetAddress inetAddress0 = IPUtil.fromIpString(""224.0.0.0"");
}"
4454,"    public static String toString(InetAddress address) {
        return InetAddresses.toAddrString(address);
    }","  public void test20()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt((-1062731478));
}"
4455,"    public static Inet4Address fromInt(int address) {
        return InetAddresses.fromInteger(address);
    }","  public void test21()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt((-536870912));
}"
4456,"    public static Inet4Address fromInt(int address) {
        return InetAddresses.fromInteger(address);
    }","  public void test22()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt((-430675098));
}"
4457,"    public static Inet4Address fromInt(int address) {
        return InetAddresses.fromInteger(address);
    }","  public void test23()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt(2130706433);
}"
4458,"    public static String toString(InetAddress address) {
        return InetAddresses.toAddrString(address);
    }","  public void test24()  throws Throwable  {
      Inet4Address inet4Address0 = IPUtil.fromInt(0);
}"
4459,"    public static String toString(InetAddress address) {
        return InetAddresses.toAddrString(address);
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.toString((InetAddress) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
4460,"    public static int toInt(InetAddress address) {
        return InetAddresses.coerceToInteger(address);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.toInt((InetAddress) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockInetAddress"", e);
      }
  }"
4461,"    public static int ipv4StringToInt(String ipv4Str) {
        byte[] byteAddress = ip4StringToBytes(ipv4Str);
        if (byteAddress == null) {
            return 0;
        } else {
            return NumberUtil.toInt(byteAddress);
        }
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.ipv4StringToInt(""comgoogle.common.base.CommonPattern"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""comgoogle\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
4462,"    public static Inet4Address fromIpv4String(String address) {
        byte[] bytes = ip4StringToBytes(address);
        if (bytes == null) {
            return null;
        } else {
            try {
                return (Inet4Address) Inet4Address.getByAddress(bytes);
            } catch (UnknownHostException e) {
                throw new AssertionError(e);
            }
        }
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.fromIpv4String(""W*5~.~.f.z>OUC"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""W*5~\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
4463,"    public static InetAddress fromIpString(String address) {
        return InetAddresses.forString(address);
    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.fromIpString((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.google.common.net.InetAddresses"", e);
      }
  }"
4464,"    public static InetAddress fromIpString(String address) {
        return InetAddresses.forString(address);
    }","  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.fromIpString(""::"");
        fail(""Expecting exception: AssertionError"");
      } catch(AssertionError e) {
         //
         // java.net.UnknownHostException: Not IPv4: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         //
      }
  }"
4465,"    public static int ipv4StringToInt(String ipv4Str) {
        byte[] byteAddress = ip4StringToBytes(ipv4Str);
        if (byteAddress == null) {
            return 0;
        } else {
            return NumberUtil.toInt(byteAddress);
        }
    }","  public void test31()  throws Throwable  {
      int int0 = IPUtil.ipv4StringToInt((String) null);
}"
4466,"    public static int ipv4StringToInt(String ipv4Str) {
        byte[] byteAddress = ip4StringToBytes(ipv4Str);
        if (byteAddress == null) {
            return 0;
        } else {
            return NumberUtil.toInt(byteAddress);
        }
    }","  public void test32()  throws Throwable  {
      int int0 = IPUtil.ipv4StringToInt(""Not a valid URI IP literal: '%s'"");
}"
4467,"    public static int ipv4StringToInt(String ipv4Str) {
        byte[] byteAddress = ip4StringToBytes(ipv4Str);
        if (byteAddress == null) {
            return 0;
        } else {
            return NumberUtil.toInt(byteAddress);
        }
    }","  public void test33()  throws Throwable  {
      int int0 = IPUtil.ipv4StringToInt(""0.0.0.255"");
}"
4468,,"  public void test34()  throws Throwable  {
      IPUtil iPUtil0 = new IPUtil();
  }"
4469,"    public static String toString(InetAddress address) {
        return InetAddresses.toAddrString(address);
    }","  public void test35()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      String string0 = IPUtil.toString(inetAddress0);
}"
4470,"    public static InetAddress fromIpString(String address) {
        return InetAddresses.forString(address);
    }","  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        IPUtil.fromIpString(""r_R_PUB"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // 'r_R_PUB' is not an IP string literal.
         //
         verifyException(""com.google.common.net.InetAddresses"", e);
      }
  }"
4471,"    public static int toInt(InetAddress address) {
        return InetAddresses.coerceToInteger(address);
    }","  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress(""r~Ls(M2"", byteArray0);
      int int0 = IPUtil.toInt(inetAddress0);
}"
4472,"    public CachingDateFormatter(String pattern) {
        this(FastDateFormat.getInstance(pattern));
    }","  public void test0()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = null;
      try {
        cachingDateFormatter0 = new CachingDateFormatter((FastDateFormat) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.time.CachingDateFormatter"", e);
      }
  }"
4473,"    public CachingDateFormatter(String pattern) {
        this(FastDateFormat.getInstance(pattern));
    }","  public void test1()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = null;
      try {
        cachingDateFormatter0 = new CachingDateFormatter(""'`A)!ja"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser$StrategyParser"", e);
      }
  }"
4474,"    public String format(final long timestampMillis) {
        CachedTime cached = cachedTime.get();

        long timestamp = onSecond ? timestampMillis / 1000 : timestampMillis;

        if (timestamp != cached.timestamp) {
            final CachedTime newCachedTime = new CachedTime(timestamp, fastDateFormat.format(timestampMillis));
            if (cachedTime.compareAndSet(cached, newCachedTime)) {
                cached = newCachedTime;
            } else {
                cached = cachedTime.get();
            }
        }

        return cached.formatted;
    }","  public void test2()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter(fastDateFormat0);
      String string0 = cachingDateFormatter0.format(1);
}"
4475,"    public String format(final long timestampMillis) {
        CachedTime cached = cachedTime.get();

        long timestamp = onSecond ? timestampMillis / 1000 : timestampMillis;

        if (timestamp != cached.timestamp) {
            final CachedTime newCachedTime = new CachedTime(timestamp, fastDateFormat.format(timestampMillis));
            if (cachedTime.compareAndSet(cached, newCachedTime)) {
                cached = newCachedTime;
            } else {
                cached = cachedTime.get();
            }
        }

        return cached.formatted;
    }","  public void test3()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter(fastDateFormat0);
      String string0 = cachingDateFormatter0.format(1);
      String string1 = cachingDateFormatter0.format(1);
}"
4476,"    public String format(final long timestampMillis) {
        CachedTime cached = cachedTime.get();

        long timestamp = onSecond ? timestampMillis / 1000 : timestampMillis;

        if (timestamp != cached.timestamp) {
            final CachedTime newCachedTime = new CachedTime(timestamp, fastDateFormat.format(timestampMillis));
            if (cachedTime.compareAndSet(cached, newCachedTime)) {
                cached = newCachedTime;
            } else {
                cached = cachedTime.get();
            }
        }

        return cached.formatted;
    }","  public void test4()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter(fastDateFormat0);
      String string0 = cachingDateFormatter0.format(1);
      String string1 = cachingDateFormatter0.format(1);
}"
4477,"    public String format(final long timestampMillis) {
        CachedTime cached = cachedTime.get();

        long timestamp = onSecond ? timestampMillis / 1000 : timestampMillis;

        if (timestamp != cached.timestamp) {
            final CachedTime newCachedTime = new CachedTime(timestamp, fastDateFormat.format(timestampMillis));
            if (cachedTime.compareAndSet(cached, newCachedTime)) {
                cached = newCachedTime;
            } else {
                cached = cachedTime.get();
            }
        }

        return cached.formatted;
    }","  public void test5()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter(""SSS"");
      String string0 = cachingDateFormatter0.format((-1514L));
}"
4478,"    public String format(final long timestampMillis) {
        CachedTime cached = cachedTime.get();

        long timestamp = onSecond ? timestampMillis / 1000 : timestampMillis;

        if (timestamp != cached.timestamp) {
            final CachedTime newCachedTime = new CachedTime(timestamp, fastDateFormat.format(timestampMillis));
            if (cachedTime.compareAndSet(cached, newCachedTime)) {
                cached = newCachedTime;
            } else {
                cached = cachedTime.get();
            }
        }

        return cached.formatted;
    }","  public void test6()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter(""SSS"");
      String string0 = cachingDateFormatter0.format((-1514L));
}"
4479,"    public String format(final long timestampMillis) {
        CachedTime cached = cachedTime.get();

        long timestamp = onSecond ? timestampMillis / 1000 : timestampMillis;

        if (timestamp != cached.timestamp) {
            final CachedTime newCachedTime = new CachedTime(timestamp, fastDateFormat.format(timestampMillis));
            if (cachedTime.compareAndSet(cached, newCachedTime)) {
                cached = newCachedTime;
            } else {
                cached = cachedTime.get();
            }
        }

        return cached.formatted;
    }","  public void test7()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter("""");
      cachingDateFormatter0.format((-2923L));
      String string0 = cachingDateFormatter0.format(1L);
}"
4480,"    public CachingDateFormatter(String pattern) {
        this(FastDateFormat.getInstance(pattern));
    }","  public void test8()  throws Throwable  {
      Locale locale0 = new Locale(""SSS"", ""SSS"", """");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""SSS"", locale0);
      CachingDateFormatter cachingDateFormatter0 = new CachingDateFormatter(fastDateFormat0);
  }"
4481,"    public CachingDateFormatter(String pattern) {
        this(FastDateFormat.getInstance(pattern));
    }","  public void test9()  throws Throwable  {
      CachingDateFormatter cachingDateFormatter0 = null;
      try {
        cachingDateFormatter0 = new CachingDateFormatter((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException(""org.apache.commons.lang3.time.FormatCache"", e);
      }
  }"
4482,"    public CachingDateFormatter(String pattern) {
        this(FastDateFormat.getInstance(pattern));
    }","  public void test10()  throws Throwable  {
      CachingDateFormatter.CachedTime cachingDateFormatter_CachedTime0 = new CachingDateFormatter.CachedTime(795L, (String) null);
  }"
4483,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis((-152668800000L));
      String string0 = DateFormatUtil.formatFriendlyTimeSpanByNow(9223372036854775763L);
}"
4484,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test1()  throws Throwable  {
      System.setCurrentTimeMillis(60052L);
      String string0 = DateFormatUtil.formatFriendlyTimeSpanByNow(23L);
}"
4485,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test2()  throws Throwable  {
      String string0 = DateFormatUtil.formatFriendlyTimeSpanByNow(1392405681320L);
}"
4486,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test3()  throws Throwable  {
      System.setCurrentTimeMillis(676L);
      String string0 = DateFormatUtil.formatFriendlyTimeSpanByNow((-324L));
}"
4487,"    public static String formatDurationOnSecond(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDuration(endDate.getTime() - startDate.getTime(), ""HH:mm:ss"");
    }","  public void test4()  throws Throwable  {
      String string0 = DateFormatUtil.formatDurationOnSecond(1L);
}"
4488,"    public static String formatDate(@NotNull String pattern, @NotNull Date date) {
        return FastDateFormat.getInstance(pattern).format(date);
    }","  public void test5()  throws Throwable  {
      MockDate mockDate0 = new MockDate(378, 378, (-663), 378, 80);
      String string0 = DateFormatUtil.formatDate("""", (Date) mockDate0);
}"
4489,"    public static String formatDate(@NotNull String pattern, @NotNull Date date) {
        return FastDateFormat.getInstance(pattern).format(date);
    }","  public void test6()  throws Throwable  {
      String string0 = DateFormatUtil.formatDate(""1\u5206\u949F\u524D"", 60052L);
}"
4490,"    public static Date pareDate(@NotNull String pattern, @NotNull String dateString) throws ParseException {
        return FastDateFormat.getInstance(pattern).parse(dateString);
    }","  public void test7()  throws Throwable  {
      try { 
        DateFormatUtil.pareDate(""yyyy-MM-dd'T'HH:mm:ssZZ"", ""yyyy-MM-dd"");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable date: yyyy-MM-dd
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }"
4491,"    public static Date pareDate(@NotNull String pattern, @NotNull String dateString) throws ParseException {
        return FastDateFormat.getInstance(pattern).parse(dateString);
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.pareDate(""M=zh"", ""2562047788015java.lang.StringBuilder@000000000612java.lang.StringBuilder@000000000755"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""2562047788015\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
4492,"    public static Date pareDate(@NotNull String pattern, @NotNull String dateString) throws ParseException {
        return FastDateFormat.getInstance(pattern).parse(dateString);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.pareDate(""yyy-MM-dd'T'HHmm:ss.SSSZZ"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser$NumberStrategy"", e);
      }
  }"
4493,"    public static Date pareDate(@NotNull String pattern, @NotNull String dateString) throws ParseException {
        return FastDateFormat.getInstance(pattern).parse(dateString);
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.pareDate((String) null, ""-f*SQ*1{1L=M"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException(""org.apache.commons.lang3.time.FormatCache"", e);
      }
  }"
4494,"    public static Date pareDate(@NotNull String pattern, @NotNull String dateString) throws ParseException {
        return FastDateFormat.getInstance(pattern).parse(dateString);
    }","  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.pareDate(""00java.lang.StringBuilder@000000000600java.lang.StringBuilder@000000000700"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
      }
  }"
4495,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.formatFriendlyTimeSpanByNow((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.time.DateFormatUtil"", e);
      }
  }"
4496,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test13()  throws Throwable  {
      Date date0 = DateFormatUtil.pareDate("""", ""z+mJ-::e!UTSL}1LE "");
      System.setCurrentTimeMillis((-9223372036854773995L));
      // Undeclared exception!
      try { 
        DateFormatUtil.formatFriendlyTimeSpanByNow(date0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4497,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test14()  throws Throwable  {
      ClockUtil.useDummyClock(9223372036854775807L);
      // Undeclared exception!
      try { 
        DateFormatUtil.formatFriendlyTimeSpanByNow((long) 60);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4498,"    public static String formatDurationOnSecond(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDuration(endDate.getTime() - startDate.getTime(), ""HH:mm:ss"");
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDurationOnSecond((Date) null, (Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.time.DateFormatUtil"", e);
      }
  }"
4499,"    public static String formatDurationOnSecond(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDuration(endDate.getTime() - startDate.getTime(), ""HH:mm:ss"");
    }","  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(749, 62, (-1), (-2182), 62, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDurationOnSecond((Date) mockDate1, (Date) mockDate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4500,"    public static String formatDuration(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDurationHMS(endDate.getTime() - startDate.getTime());
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDuration((Date) null, (Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.time.DateFormatUtil"", e);
      }
  }"
4501,"    public static String formatDuration(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDurationHMS(endDate.getTime() - startDate.getTime());
    }","  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(749, 62, (-1), (-2182), 62, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDuration((Date) mockDate1, (Date) mockDate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4502,"    public static String formatDuration(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDurationHMS(endDate.getTime() - startDate.getTime());
    }","  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDuration((-674L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4503,"    public static String formatDate(@NotNull String pattern, @NotNull Date date) {
        return FastDateFormat.getInstance(pattern).format(date);
    }","  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDate(""1969-12-31"", (Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4504,"    public static String formatDate(@NotNull String pattern, @NotNull Date date) {
        return FastDateFormat.getInstance(pattern).format(date);
    }","  public void test21()  throws Throwable  {
      Date date0 = DateFormatUtil.pareDate("""", """");
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDate((String) null, date0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException(""org.apache.commons.lang3.time.FormatCache"", e);
      }
  }"
4505,"    public static String formatDate(@NotNull String pattern, @NotNull Date date) {
        return FastDateFormat.getInstance(pattern).format(date);
    }","  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDate(""org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral"", (Date) mockDate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
      }
  }"
4506,"    public static String formatDate(@NotNull String pattern, @NotNull Date date) {
        return FastDateFormat.getInstance(pattern).format(date);
    }","  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDate((String) null, 224L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // pattern must not be null
         //
         verifyException(""org.apache.commons.lang3.time.FormatCache"", e);
      }
  }"
4507,"    public static String formatDate(@NotNull String pattern, @NotNull Date date) {
        return FastDateFormat.getInstance(pattern).format(date);
    }","  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDate(""Sun Aug 17 07:12:55 GMT 292278994"", 0L);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
      }
  }"
4508,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(1801L);
      String string0 = DateFormatUtil.formatFriendlyTimeSpanByNow(1801L);
}"
4509,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(60000L);
      String string0 = DateFormatUtil.formatFriendlyTimeSpanByNow(0L);
}"
4510,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test27()  throws Throwable  {
      String string0 = DateFormatUtil.formatFriendlyTimeSpanByNow((-1792L));
}"
4511,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test28()  throws Throwable  {
      String string0 = DateFormatUtil.formatFriendlyTimeSpanByNow(9223372036854775807L);
}"
4512,,"  public void test29()  throws Throwable  {
      DateFormatUtil dateFormatUtil0 = new DateFormatUtil();
  }"
4513,"    public static String formatDurationOnSecond(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDuration(endDate.getTime() - startDate.getTime(), ""HH:mm:ss"");
    }","  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(363, 363, 363, 363, (-1149), (-1149));
      String string0 = DateFormatUtil.formatDurationOnSecond((Date) mockDate0, (Date) mockDate0);
}"
4514,"    public static String formatDuration(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDurationHMS(endDate.getTime() - startDate.getTime());
    }","  public void test31()  throws Throwable  {
      String string0 = DateFormatUtil.formatDuration(363L);
}"
4515,"    public static String formatDuration(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDurationHMS(endDate.getTime() - startDate.getTime());
    }","  public void test32()  throws Throwable  {
      Date date0 = DateFormatUtil.pareDate("""", ""z+mJ-::e!UTSL}1LE "");
      String string0 = DateFormatUtil.formatDuration(date0, date0);
}"
4516,"    public static String formatDurationOnSecond(@NotNull Date startDate, @NotNull Date endDate) {
        return DurationFormatUtils.formatDuration(endDate.getTime() - startDate.getTime(), ""HH:mm:ss"");
    }","  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateFormatUtil.formatDurationOnSecond((-3289L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // durationMillis must not be negative
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4517,"    public static String formatDate(@NotNull String pattern, @NotNull Date date) {
        return FastDateFormat.getInstance(pattern).format(date);
    }","  public void test34()  throws Throwable  {
      String string0 = DateFormatUtil.formatDate("""", (-1792L));
}"
4518,"    public static String formatFriendlyTimeSpanByNow(@NotNull Date date) {
        return formatFriendlyTimeSpanByNow(date.getTime());
    }","  public void test35()  throws Throwable  {
      Date date0 = DateFormatUtil.pareDate("""", ""z+mJ-::e!UTSL}1LE "");
      String string0 = DateFormatUtil.formatFriendlyTimeSpanByNow(date0);
}"
4519,"    public static String formatDate(@NotNull String pattern, @NotNull Date date) {
        return FastDateFormat.getInstance(pattern).format(date);
    }","  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(363, 363, 363, 363, (-1149), (-1149));
      String string0 = DateFormatUtil.formatDate(""1969-12-31"", (Date) mockDate0);
}"
4520,"    public static int getMonthLength(@NotNull final Date date) {
        int year = get(date, Calendar.YEAR);
        int month = get(date, Calendar.MONTH);
        return getMonthLength(year, month);
    }","  public void test0()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      int int0 = DateUtil.getMonthLength((Date) mockDate0);
}"
4521,"    public static int getMonthLength(@NotNull final Date date) {
        int year = get(date, Calendar.YEAR);
        int month = get(date, Calendar.MONTH);
        return getMonthLength(year, month);
    }","  public void test1()  throws Throwable  {
      int int0 = DateUtil.getMonthLength(0, 12);
}"
4522,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test2()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), (-11), (-11));
      Date date0 = DateUtil.nextYear(mockDate0);
      Date date1 = DateUtil.nextHour(date0);
      boolean boolean0 = DateUtil.isBetween(mockDate0, date1, mockDate0);
}"
4523,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test3()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), (-11), (-11));
      Date date0 = DateUtil.nextYear(mockDate0);
      Date date1 = DateUtil.nextHour(date0);
      boolean boolean0 = DateUtil.isBetween(mockDate0, date1, mockDate0);
}"
4524,"    public static Date subSeconds(@NotNull final Date date, int amount) {
        return DateUtils.addSeconds(date, -amount);
    }","  public void test4()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(3600000L);
      Date date0 = Date.from(instant0);
      Date date1 = DateUtil.subSeconds(date0, 775);
}"
4525,"    public static Date subDays(@NotNull final Date date, int amount) {
        return DateUtils.addDays(date, -amount);
    }","  public void test5()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.subDays(mockDate0, 8);
}"
4526,"    public static Date nextWeek(@NotNull final Date date) {
        return DateUtils.truncate(DateUtil.addDays(date, 8 - DateUtil.getDayOfWeek(date)), Calendar.DATE);
    }","  public void test6()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.nextWeek(mockDate0);
}"
4527,"    public static Date nextMonth(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.MONTH);
    }","  public void test7()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.nextMonth(mockDate0);
}"
4528,"    public static Date nextMinute(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.MINUTE);
    }","  public void test8()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.nextMinute(mockDate0);
}"
4529,"    public static Date nextDate(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.DATE);
    }","  public void test9()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-19), (-19), (-19));
      Date date0 = DateUtil.nextDate(mockDate0);
}"
4530,"    public static boolean isSameDay(@NotNull final Date date1, @NotNull final Date date2) {
        return DateUtils.isSameDay(date1, date2);
    }","  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-18), (-18), (-2358));
      Date date0 = DateUtil.endOfWeek(mockDate0);
      boolean boolean0 = DateUtil.isSameDay(date0, mockDate0);
}"
4531,"    public static boolean isSameDay(@NotNull final Date date1, @NotNull final Date date2) {
        return DateUtils.isSameDay(date1, date2);
    }","  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-18), (-18), (-2358));
      Date date0 = DateUtil.endOfWeek(mockDate0);
      boolean boolean0 = DateUtil.isSameDay(date0, mockDate0);
}"
4532,"    public static int getMonthLength(@NotNull final Date date) {
        int year = get(date, Calendar.YEAR);
        int month = get(date, Calendar.MONTH);
        return getMonthLength(year, month);
    }","  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1163), 653, (-1163));
      int int0 = DateUtil.getMonthLength((Date) mockDate0);
}"
4533,"    public static Date endOfYear(@NotNull final Date date) {
        return new Date(nextYear(date).getTime() - 1);
    }","  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-18), (-18), (-2358));
      Date date0 = DateUtil.endOfYear(mockDate0);
}"
4534,"    public static Date endOfMonth(@NotNull final Date date) {
        return new Date(nextMonth(date).getTime() - 1);
    }","  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3519), (-3519), (-3519));
      Date date0 = DateUtil.endOfMonth(mockDate0);
}"
4535,"    public static Date addDays(@NotNull final Date date, final int amount) {
        return DateUtils.addDays(date, amount);
    }","  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.addDays(mockDate0, 0);
}"
4536,"    public static Date subWeeks(@NotNull final Date date, int amount) {
        return DateUtils.addWeeks(date, -amount);
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subWeeks((Date) null, 939);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4537,"    public static Date subMonths(@NotNull final Date date, int amount) {
        return DateUtils.addMonths(date, -amount);
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subMonths((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4538,"    public static Date subMinutes(@NotNull final Date date, int amount) {
        return DateUtils.addMinutes(date, -amount);
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subMinutes((Date) null, 1779);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4539,"    public static Date subHours(@NotNull final Date date, int amount) {
        return DateUtils.addHours(date, -amount);
    }","  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subHours((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4540,"    public static Date setYears(@NotNull final Date date, int amount) {
        return DateUtils.setYears(date, amount);
    }","  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setYears((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4541,"    public static Date setSeconds(@NotNull final Date date, int amount) {
        return DateUtils.setSeconds(date, amount);
    }","  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setSeconds((Date) null, 1644);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4542,"    public static Date setMonths(@NotNull final Date date, int amount) {
        return DateUtils.setMonths(date, amount);
    }","  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setMonths((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4543,"    public static Date setMinutes(@NotNull final Date date, int amount) {
        return DateUtils.setMinutes(date, amount);
    }","  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setMinutes((Date) null, 1582);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4544,"    public static Date setMilliseconds(@NotNull final Date date, int amount) {
        return DateUtils.setMilliseconds(date, amount);
    }","  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setMilliseconds((Date) null, 812);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4545,"    public static Date setHours(@NotNull final Date date, int amount) {
        return DateUtils.setHours(date, amount);
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setHours((Date) null, 2);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4546,"    public static Date setDays(@NotNull final Date date, int amount) {
        return DateUtils.setDays(date, amount);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.setDays((Date) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4547,"    public static Date nextYear(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.YEAR);
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextYear((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4548,"    public static Date nextYear(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.YEAR);
    }","  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 883, 280000000, 883, 883);
      // Undeclared exception!
      try { 
        DateUtil.nextYear(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4549,"    public static Date nextWeek(@NotNull final Date date) {
        return DateUtils.truncate(DateUtil.addDays(date, 8 - DateUtil.getDayOfWeek(date)), Calendar.DATE);
    }","  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 280000000, 7, 2661);
      // Undeclared exception!
      try { 
        DateUtil.nextWeek(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4550,"    public static Date nextMonth(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.MONTH);
    }","  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(279999992, 279999992, (-1749), 132, (-828));
      // Undeclared exception!
      try { 
        DateUtil.nextMonth(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4551,"    public static Date nextMinute(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.MINUTE);
    }","  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate(279999980, (-1), (-1222));
      // Undeclared exception!
      try { 
        DateUtil.nextMinute(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4552,"    public static Date nextHour(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.HOUR_OF_DAY);
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextHour((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4553,"    public static Date nextHour(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.HOUR_OF_DAY);
    }","  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate(279999980, 279999980, 500);
      // Undeclared exception!
      try { 
        DateUtil.nextHour(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4554,"    public static Date nextDate(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.DATE);
    }","  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 9, 280000000, 9, 280000000, 9);
      // Undeclared exception!
      try { 
        DateUtil.nextDate(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4555,"    public static boolean isSameTime(@NotNull final Date date1, @NotNull final Date date2) {
        // date.getMillisOf() 比date.getTime()快
        return date1.compareTo(date2) == 0;
    }","  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.isSameTime((Date) null, (Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.time.DateUtil"", e);
      }
  }"
4556,"    public static boolean isSameDay(@NotNull final Date date1, @NotNull final Date date2) {
        return DateUtils.isSameDay(date1, date2);
    }","  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtil.isSameDay((Date) null, mockDate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4557,"    public static boolean isLeapYear(@NotNull final Date date) {
        return isLeapYear(get(date, Calendar.YEAR));
    }","  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.isLeapYear((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4558,"    public static int getWeekOfYear(@NotNull final Date date) {
        return getWithMondayFirst(date, Calendar.WEEK_OF_YEAR);
    }","  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getWeekOfYear((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4559,"    public static int getWeekOfMonth(@NotNull final Date date) {
        return getWithMondayFirst(date, Calendar.WEEK_OF_MONTH);
    }","  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getWeekOfMonth((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4560,"    public static int getMonthLength(@NotNull final Date date) {
        int year = get(date, Calendar.YEAR);
        int month = get(date, Calendar.MONTH);
        return getMonthLength(year, month);
    }","  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getMonthLength((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4561,"    public static int getDayOfYear(@NotNull final Date date) {
        return get(date, Calendar.DAY_OF_YEAR);
    }","  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getDayOfYear((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4562,"    public static int getDayOfWeek(@NotNull final Date date) {
        int result = get(date, Calendar.DAY_OF_WEEK);
        return result == 1 ? 7 : result - 1;
    }","  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getDayOfWeek((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4563,"    public static Date endOfYear(@NotNull final Date date) {
        return new Date(nextYear(date).getTime() - 1);
    }","  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000020, 280000020, 48);
      // Undeclared exception!
      try { 
        DateUtil.endOfYear(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4564,"    public static Date endOfWeek(@NotNull final Date date) {
        return new Date(nextWeek(date).getTime() - 1);
    }","  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfWeek((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4565,"    public static Date endOfWeek(@NotNull final Date date) {
        return new Date(nextWeek(date).getTime() - 1);
    }","  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 280000000, 280000000, 280000000);
      // Undeclared exception!
      try { 
        DateUtil.endOfWeek(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4566,"    public static Date endOfMonth(@NotNull final Date date) {
        return new Date(nextMonth(date).getTime() - 1);
    }","  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 588, (-1121), (-755), (-588));
      // Undeclared exception!
      try { 
        DateUtil.endOfMonth(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4567,"    public static Date endOfMinute(@NotNull final Date date) {
        return new Date(nextMinute(date).getTime() - 1);
    }","  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfMinute((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4568,"    public static Date endOfHour(@NotNull final Date date) {
        return new Date(nextHour(date).getTime() - 1);
    }","  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfHour((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4569,"    public static Date endOfHour(@NotNull final Date date) {
        return new Date(nextHour(date).getTime() - 1);
    }","  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, (-973), 23);
      // Undeclared exception!
      try { 
        DateUtil.endOfHour(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4570,"    public static Date endOfDate(@NotNull final Date date) {
        return new Date(nextDate(date).getTime() - 1);
    }","  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfDate((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4571,"    public static Date endOfDate(@NotNull final Date date) {
        return new Date(nextDate(date).getTime() - 1);
    }","  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 822, 822);
      // Undeclared exception!
      try { 
        DateUtil.endOfDate(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4572,"    public static Date beginOfYear(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.YEAR);
    }","  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfYear((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4573,"    public static Date beginOfYear(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.YEAR);
    }","  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 10, 280000000, 280000000, (-855));
      // Undeclared exception!
      try { 
        DateUtil.beginOfYear(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4574,"    public static Date beginOfWeek(@NotNull final Date date) {
        return DateUtils.truncate(DateUtil.subDays(date, DateUtil.getDayOfWeek(date) - 1), Calendar.DATE);
    }","  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfWeek((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4575,"    public static Date beginOfWeek(@NotNull final Date date) {
        return DateUtils.truncate(DateUtil.subDays(date, DateUtil.getDayOfWeek(date) - 1), Calendar.DATE);
    }","  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 8, 8, 8);
      // Undeclared exception!
      try { 
        DateUtil.beginOfWeek(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4576,"    public static Date beginOfMonth(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.MONTH);
    }","  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfMonth((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4577,"    public static Date beginOfMonth(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.MONTH);
    }","  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, (-2), (-2), (-2), (-2));
      // Undeclared exception!
      try { 
        DateUtil.beginOfMonth(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4578,"    public static Date beginOfMinute(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.MINUTE);
    }","  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfMinute((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4579,"    public static Date beginOfMinute(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.MINUTE);
    }","  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 280000000, (-192), (-192));
      // Undeclared exception!
      try { 
        DateUtil.beginOfMinute(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4580,"    public static Date beginOfHour(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.HOUR_OF_DAY);
    }","  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfHour((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4581,"    public static Date beginOfHour(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.HOUR_OF_DAY);
    }","  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, 7, 280000000, (-2934));
      // Undeclared exception!
      try { 
        DateUtil.beginOfHour(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4582,"    public static Date beginOfDate(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.DATE);
    }","  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.beginOfDate((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4583,"    public static Date beginOfDate(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.DATE);
    }","  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, (-851), (-3008), (-540), (-909));
      // Undeclared exception!
      try { 
        DateUtil.beginOfDate(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4584,"    public static Date addWeeks(@NotNull final Date date, int amount) {
        return DateUtils.addWeeks(date, amount);
    }","  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addWeeks((Date) null, (-2732));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4585,"    public static Date addSeconds(@NotNull final Date date, int amount) {
        return DateUtils.addSeconds(date, amount);
    }","  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addSeconds((Date) null, 2265);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4586,"    public static Date addMonths(@NotNull final Date date, int amount) {
        return DateUtils.addMonths(date, amount);
    }","  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addMonths((Date) null, (-2667));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4587,"    public static Date addMinutes(@NotNull final Date date, int amount) {
        return DateUtils.addMinutes(date, amount);
    }","  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addMinutes((Date) null, 5);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4588,"    public static Date addHours(@NotNull final Date date, int amount) {
        return DateUtils.addHours(date, amount);
    }","  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addHours((Date) null, 628);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4589,"    public static int getMonthLength(@NotNull final Date date) {
        int year = get(date, Calendar.YEAR);
        int month = get(date, Calendar.MONTH);
        return getMonthLength(year, month);
    }","  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getMonthLength(0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 0
         //
         verifyException(""org.springside.modules.utils.time.DateUtil"", e);
      }
  }"
4590,"    public static boolean isLeapYear(@NotNull final Date date) {
        return isLeapYear(get(date, Calendar.YEAR));
    }","  public void test70()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear(279999980);
}"
4591,"    public static boolean isLeapYear(@NotNull final Date date) {
        return isLeapYear(get(date, Calendar.YEAR));
    }","  public void test71()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear((-1301));
}"
4592,"    public static boolean isLeapYear(@NotNull final Date date) {
        return isLeapYear(get(date, Calendar.YEAR));
    }","  public void test72()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear(812);
}"
4593,"    public static int getDayOfWeek(@NotNull final Date date) {
        int result = get(date, Calendar.DAY_OF_WEEK);
        return result == 1 ? 7 : result - 1;
    }","  public void test73()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      int int0 = DateUtil.getDayOfWeek(mockDate0);
}"
4594,"    public static int getDayOfWeek(@NotNull final Date date) {
        int result = get(date, Calendar.DAY_OF_WEEK);
        return result == 1 ? 7 : result - 1;
    }","  public void test74()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      int int0 = DateUtil.getDayOfWeek(mockDate0);
}"
4595,"    public static Date nextMinute(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.MINUTE);
    }","  public void test75()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextMinute((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4596,"    public static Date nextDate(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.DATE);
    }","  public void test76()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextDate((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4597,"    public static Date nextWeek(@NotNull final Date date) {
        return DateUtils.truncate(DateUtil.addDays(date, 8 - DateUtil.getDayOfWeek(date)), Calendar.DATE);
    }","  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextWeek((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
4598,"    public static Date nextMonth(@NotNull final Date date) {
        return DateUtils.ceiling(date, Calendar.MONTH);
    }","  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.nextMonth((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4599,"    public static int getMonthLength(@NotNull final Date date) {
        int year = get(date, Calendar.YEAR);
        int month = get(date, Calendar.MONTH);
        return getMonthLength(year, month);
    }","  public void test79()  throws Throwable  {
      int int0 = DateUtil.getMonthLength(2, 2);
}"
4600,"    public static int getMonthLength(@NotNull final Date date) {
        int year = get(date, Calendar.YEAR);
        int month = get(date, Calendar.MONTH);
        return getMonthLength(year, month);
    }","  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.getMonthLength(0, 1582);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 1582
         //
         verifyException(""org.springside.modules.utils.time.DateUtil"", e);
      }
  }"
4601,"    public static boolean isLeapYear(@NotNull final Date date) {
        return isLeapYear(get(date, Calendar.YEAR));
    }","  public void test81()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear(1700);
}"
4602,"    public static boolean isLeapYear(@NotNull final Date date) {
        return isLeapYear(get(date, Calendar.YEAR));
    }","  public void test82()  throws Throwable  {
      boolean boolean0 = DateUtil.isLeapYear(280000000);
}"
4603,"    public static int getMonthLength(@NotNull final Date date) {
        int year = get(date, Calendar.YEAR);
        int month = get(date, Calendar.MONTH);
        return getMonthLength(year, month);
    }","  public void test83()  throws Throwable  {
      int int0 = DateUtil.getMonthLength(28, 2);
}"
4604,"    public static boolean isLeapYear(@NotNull final Date date) {
        return isLeapYear(get(date, Calendar.YEAR));
    }","  public void test84()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-11), (-11), (-11), (-11), (-11), (-11));
      boolean boolean0 = DateUtil.isLeapYear((Date) mockDate0);
}"
4605,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test85()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1739, (-1872), 0);
      Date date0 = DateUtil.nextYear(mockDate0);
      boolean boolean0 = DateUtil.isBetween(mockDate0, date0, date0);
}"
4606,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test86()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1739, (-1872), 0);
      Date date0 = DateUtil.nextYear(mockDate0);
      boolean boolean0 = DateUtil.isBetween(mockDate0, date0, date0);
}"
4607,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test87()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      // Undeclared exception!
      try { 
        DateUtil.isBetween(mockDate0, mockDate0, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // some date parameters is null or dateBein after dateEnd
         //
         verifyException(""org.springside.modules.utils.time.DateUtil"", e);
      }
  }"
4608,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test88()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        DateUtil.isBetween(mockDate0, (Date) null, mockDate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // some date parameters is null or dateBein after dateEnd
         //
         verifyException(""org.springside.modules.utils.time.DateUtil"", e);
      }
  }"
4609,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.isBetween((Date) null, (Date) null, (Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // some date parameters is null or dateBein after dateEnd
         //
         verifyException(""org.springside.modules.utils.time.DateUtil"", e);
      }
  }"
4610,"    public static boolean isSameTime(@NotNull final Date date1, @NotNull final Date date2) {
        // date.getMillisOf() 比date.getTime()快
        return date1.compareTo(date2) == 0;
    }","  public void test90()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = DateUtil.isSameTime(mockDate0, mockDate0);
}"
4611,"    public static boolean isSameTime(@NotNull final Date date1, @NotNull final Date date2) {
        // date.getMillisOf() 比date.getTime()快
        return date1.compareTo(date2) == 0;
    }","  public void test91()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.endOfMinute(mockDate0);
      boolean boolean0 = DateUtil.isSameTime(mockDate0, date0);
}"
4612,"    public static boolean isSameTime(@NotNull final Date date1, @NotNull final Date date2) {
        // date.getMillisOf() 比date.getTime()快
        return date1.compareTo(date2) == 0;
    }","  public void test92()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.endOfMinute(mockDate0);
      boolean boolean0 = DateUtil.isSameTime(mockDate0, date0);
}"
4613,"    public static Date setSeconds(@NotNull final Date date, int amount) {
        return DateUtils.setSeconds(date, amount);
    }","  public void test93()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.setSeconds(mockDate0, (-907));
}"
4614,"    public static Date setMilliseconds(@NotNull final Date date, int amount) {
        return DateUtils.setMilliseconds(date, amount);
    }","  public void test94()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1959L);
      Date date0 = DateUtil.setMilliseconds(mockDate0, 1747);
}"
4615,"    public static Date addHours(@NotNull final Date date, int amount) {
        return DateUtils.addHours(date, amount);
    }","  public void test95()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.addHours(mockDate0, 5);
}"
4616,"    public static Date subWeeks(@NotNull final Date date, int amount) {
        return DateUtils.addWeeks(date, -amount);
    }","  public void test96()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.subWeeks(mockDate0, 3);
}"
4617,"    public static Date subMonths(@NotNull final Date date, int amount) {
        return DateUtils.addMonths(date, -amount);
    }","  public void test97()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1739, (-1872), 0);
      Date date0 = DateUtil.subMonths(mockDate0, (-1872));
}"
4618,"    public static Date addWeeks(@NotNull final Date date, int amount) {
        return DateUtils.addWeeks(date, amount);
    }","  public void test98()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.addWeeks(mockDate0, 621);
}"
4619,"    public static Date endOfHour(@NotNull final Date date) {
        return new Date(nextHour(date).getTime() - 1);
    }","  public void test99()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.endOfHour(mockDate0);
}"
4620,"    public static Date setHours(@NotNull final Date date, int amount) {
        return DateUtils.setHours(date, amount);
    }","  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.setHours(mockDate0, (-3975));
}"
4621,,"  public void test101()  throws Throwable  {
      DateUtil dateUtil0 = new DateUtil();
}"
4622,"    public static int getDayOfYear(@NotNull final Date date) {
        return get(date, Calendar.DAY_OF_YEAR);
    }","  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      int int0 = DateUtil.getDayOfYear(mockDate0);
}"
4623,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.beginOfWeek(mockDate0);
      boolean boolean0 = DateUtil.isBetween(date0, mockDate0, mockDate0);
}"
4624,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test104()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.beginOfWeek(mockDate0);
      boolean boolean0 = DateUtil.isBetween(date0, mockDate0, mockDate0);
}"
4625,"    public static int getWeekOfYear(@NotNull final Date date) {
        return getWithMondayFirst(date, Calendar.WEEK_OF_YEAR);
    }","  public void test105()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1318, 1318, 1318);
      int int0 = DateUtil.getWeekOfYear(mockDate0);
}"
4626,"    public static boolean isBetween(@NotNull final Date date, @NotNull final Date start, @NotNull final Date end) {
        if (date == null || start == null || end == null || start.after(end)) {
            throw new IllegalArgumentException(""some date parameters is null or dateBein after dateEnd"");
        }
        return !date.before(start) && !date.after(end);
    }","  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.nextHour(mockDate0);
      // Undeclared exception!
      try { 
        DateUtil.isBetween(date0, date0, mockDate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // some date parameters is null or dateBein after dateEnd
         //
         verifyException(""org.springside.modules.utils.time.DateUtil"", e);
      }
  }"
4627,"    public static boolean isSameTime(@NotNull final Date date1, @NotNull final Date date2) {
        // date.getMillisOf() 比date.getTime()快
        return date1.compareTo(date2) == 0;
    }","  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.addSeconds(mockDate0, (-22));
      boolean boolean0 = DateUtil.isSameTime(mockDate0, date0);
}"
4628,"    public static boolean isSameTime(@NotNull final Date date1, @NotNull final Date date2) {
        // date.getMillisOf() 比date.getTime()快
        return date1.compareTo(date2) == 0;
    }","  public void test108()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.addSeconds(mockDate0, (-22));
      boolean boolean0 = DateUtil.isSameTime(mockDate0, date0);
}"
4629,"    public static Date subMinutes(@NotNull final Date date, int amount) {
        return DateUtils.addMinutes(date, -amount);
    }","  public void test109()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.subMinutes(mockDate0, 5);
}"
4630,"    public static Date addMonths(@NotNull final Date date, int amount) {
        return DateUtils.addMonths(date, amount);
    }","  public void test110()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.addMonths(mockDate0, 1900);
}"
4631,"    public static Date setDays(@NotNull final Date date, int amount) {
        return DateUtils.setDays(date, amount);
    }","  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.setDays(mockDate0, 621);
}"
4632,"    public static Date setMonths(@NotNull final Date date, int amount) {
        return DateUtils.setMonths(date, amount);
    }","  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1959L);
      Date date0 = DateUtil.setMonths(mockDate0, 1747);
}"
4633,"    public static Date beginOfMinute(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.MINUTE);
    }","  public void test113()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      Date date0 = Date.from(instant0);
      Date date1 = DateUtil.endOfMinute(date0);
      Date date2 = DateUtil.beginOfMinute(date1);
}"
4634,"    public static Date beginOfMinute(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.MINUTE);
    }","  public void test114()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      Date date0 = Date.from(instant0);
      Date date1 = DateUtil.endOfMinute(date0);
      Date date2 = DateUtil.beginOfMinute(date1);
}"
4635,"    public static Date setYears(@NotNull final Date date, int amount) {
        return DateUtils.setYears(date, amount);
    }","  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1318, 1318, 1318);
      Date date0 = DateUtil.setYears(mockDate0, 23);
}"
4636,"    public static boolean isLeapYear(@NotNull final Date date) {
        return isLeapYear(get(date, Calendar.YEAR));
    }","  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = DateUtil.isLeapYear((Date) mockDate0);
}"
4637,"    public static Date setMinutes(@NotNull final Date date, int amount) {
        return DateUtils.setMinutes(date, amount);
    }","  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      Date date0 = DateUtil.setMinutes(mockDate0, 6);
}"
4638,"    public static Date beginOfDate(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.DATE);
    }","  public void test118()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      Date date0 = Date.from(instant0);
      Date date1 = DateUtil.beginOfDate(date0);
}"
4639,"    public static boolean isSameDay(@NotNull final Date date1, @NotNull final Date date2) {
        return DateUtils.isSameDay(date1, date2);
    }","  public void test119()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = DateUtil.isSameDay(mockDate0, mockDate0);
}"
4640,"    public static Date beginOfHour(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.HOUR_OF_DAY);
    }","  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.beginOfHour(mockDate0);
}"
4641,"    public static Date beginOfYear(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.YEAR);
    }","  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.beginOfYear(mockDate0);
}"
4642,"    public static Date beginOfMonth(@NotNull final Date date) {
        return DateUtils.truncate(date, Calendar.MONTH);
    }","  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      Date date0 = DateUtil.beginOfMonth(mockDate0);
}"
4643,"    public static Date endOfYear(@NotNull final Date date) {
        return new Date(nextYear(date).getTime() - 1);
    }","  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfYear((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4644,"    public static int getMonthLength(@NotNull final Date date) {
        int year = get(date, Calendar.YEAR);
        int month = get(date, Calendar.MONTH);
        return getMonthLength(year, month);
    }","  public void test124()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(3600000L);
      Date date0 = Date.from(instant0);
      // Undeclared exception!
      try { 
        DateUtil.getMonthLength(date0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid month: 0
         //
         verifyException(""org.springside.modules.utils.time.DateUtil"", e);
      }
  }"
4645,"    public static int getWeekOfMonth(@NotNull final Date date) {
        return getWithMondayFirst(date, Calendar.WEEK_OF_MONTH);
    }","  public void test125()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      int int0 = DateUtil.getWeekOfMonth(mockDate0);
}"
4646,"    public static Date subSeconds(@NotNull final Date date, int amount) {
        return DateUtils.addSeconds(date, -amount);
    }","  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subSeconds((Date) null, (-3276));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4647,"    public static Date endOfDate(@NotNull final Date date) {
        return new Date(nextDate(date).getTime() - 1);
    }","  public void test127()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-22), (-22), (-22), (-22), (-22), (-22));
      Date date0 = DateUtil.endOfDate(mockDate0);
}"
4648,"    public static Date endOfMonth(@NotNull final Date date) {
        return new Date(nextMonth(date).getTime() - 1);
    }","  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.endOfMonth((Date) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4649,"    public static Date endOfMinute(@NotNull final Date date) {
        return new Date(nextMinute(date).getTime() - 1);
    }","  public void test129()  throws Throwable  {
      MockDate mockDate0 = new MockDate(280000000, 280000000, (-471), (-1173), (-939), (-1002));
      // Undeclared exception!
      try { 
        DateUtil.endOfMinute(mockDate0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Calendar value too large for accurate calculations
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4650,"    public static Date subHours(@NotNull final Date date, int amount) {
        return DateUtils.addHours(date, -amount);
    }","  public void test130()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date date0 = DateUtil.subHours(mockDate0, 5);
}"
4651,"    public static Date addDays(@NotNull final Date date, final int amount) {
        return DateUtils.addDays(date, amount);
    }","  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.addDays((Date) null, 8);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4652,"    public static Date addMinutes(@NotNull final Date date, int amount) {
        return DateUtils.addMinutes(date, amount);
    }","  public void test132()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      Date date0 = DateUtil.addMinutes(mockDate0, 0);
}"
4653,"    public static Date subDays(@NotNull final Date date, int amount) {
        return DateUtils.addDays(date, -amount);
    }","  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateUtil.subDays((Date) null, (-2049));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException(""org.apache.commons.lang3.time.DateUtils"", e);
      }
  }"
4654,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test0()  throws Throwable  {
      ClockUtil.DefaultClock clockUtil_DefaultClock0 = new ClockUtil.DefaultClock();
      long long0 = clockUtil_DefaultClock0.currentTimeMillis();
}"
4655,"    public static long nanoTime() {
        return INSTANCE.nanoTime();
    }","  public void test1()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
      long long0 = clockUtil_DummyClock0.nanoTime();
}"
4656,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test2()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
      long long0 = clockUtil_DummyClock0.nanoTime();
}"
4657,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test3()  throws Throwable  {
      ClockUtil.DefaultClock clockUtil_DefaultClock0 = new ClockUtil.DefaultClock();
      long long0 = clockUtil_DefaultClock0.currentTimeMillis();
}"
4658,"    public static synchronized DummyClock useDummyClock() {
        INSTANCE = new DummyClock();
        return (DummyClock) INSTANCE;
    }","  public void test4()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
      Date date0 = clockUtil_DummyClock0.currentDate();
      System.setCurrentTimeMillis(0L);
      ClockUtil.useDummyClock(date0);
}"
4659,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test5()  throws Throwable  {
      ClockUtil.DefaultClock clockUtil_DefaultClock0 = new ClockUtil.DefaultClock();
      Date date0 = clockUtil_DefaultClock0.currentDate();
      System.setCurrentTimeMillis((-384L));
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock(date0);
}"
4660,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test6()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock((Date) mockDate0);
}"
4661,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test7()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock(0L);
      clockUtil_DummyClock0.increaseTime((-1));
      Date date0 = clockUtil_DummyClock0.currentDate();
      ClockUtil.useDummyClock(date0);
}"
4662,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test8()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock(0L);
}"
4663,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test9()  throws Throwable  {
      System.setCurrentTimeMillis((-384L));
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock(2452L);
}"
4664,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
}"
4665,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-384L));
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
}"
4666,"    public static long nanoTime() {
        return INSTANCE.nanoTime();
    }","  public void test12()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
      clockUtil_DummyClock0.setNanoTime(0L);
      long long0 = ClockUtil.nanoTime();
}"
4667,"    public static long nanoTime() {
        return INSTANCE.nanoTime();
    }","  public void test13()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock((-1L));
      clockUtil_DummyClock0.setNanoTime((-1L));
}"
4668,"    public static long nanoTime() {
        return INSTANCE.nanoTime();
    }","  public void test14()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock((-1L));
      clockUtil_DummyClock0.setNanoTime((-1L));
      long long0 = ClockUtil.nanoTime();
}"
4669,"    public static long elapsedTime(long beginTime) {
        return currentTimeMillis() - beginTime;
    }","  public void test15()  throws Throwable  {
      long long0 = ClockUtil.elapsedTime(1392409281320L);
}"
4670,"    public static long elapsedTime(long beginTime) {
        return currentTimeMillis() - beginTime;
    }","  public void test16()  throws Throwable  {
      long long0 = ClockUtil.elapsedTime(1392409281320000L);
}"
4671,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test17()  throws Throwable  {
      ClockUtil.useDummyClock(0L);
      long long0 = ClockUtil.currentTimeMillis();
}"
4672,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test18()  throws Throwable  {
      ClockUtil.useDummyClock((-1L));
      long long0 = ClockUtil.currentTimeMillis();
}"
4673,"    public static synchronized DummyClock useDummyClock() {
        INSTANCE = new DummyClock();
        return (DummyClock) INSTANCE;
    }","  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClockUtil.useDummyClock((Date) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.utils.time.ClockUtil$DummyClock"", e);
      }
  }"
4674,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test20()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = new ClockUtil.DummyClock((-1015L));
}"
4675,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test21()  throws Throwable  {
      long long0 = ClockUtil.currentTimeMillis();
}"
4676,"    public static Date currentDate() {
        return INSTANCE.currentDate();
    }","  public void test22()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock((-1L));
      Date date0 = clockUtil_DummyClock0.currentDate();
      ClockUtil.DummyClock clockUtil_DummyClock1 = new ClockUtil.DummyClock(date0);
}"
4677,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test23()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock((-1L));
      Date date0 = clockUtil_DummyClock0.currentDate();
      ClockUtil.DummyClock clockUtil_DummyClock1 = new ClockUtil.DummyClock(date0);
}"
4678,"    public static long nanoTime() {
        return INSTANCE.nanoTime();
    }","  public void test24()  throws Throwable  {
      long long0 = ClockUtil.nanoTime();
}"
4679,"    public static long nanoTime() {
        return INSTANCE.nanoTime();
    }","  public void test25()  throws Throwable  {
      ClockUtil clockUtil0 = new ClockUtil();
}"
4680,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test26()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = new ClockUtil.DummyClock();
      clockUtil_DummyClock0.updateNow((-792L));
}"
4681,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test27()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = new ClockUtil.DummyClock();
      long long0 = clockUtil_DummyClock0.currentTimeMillis();
}"
4682,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test28()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = new ClockUtil.DummyClock();
      clockUtil_DummyClock0.decreaseTime((-20));
}"
4683,"    public static Date currentDate() {
        return INSTANCE.currentDate();
    }","  public void test29()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
      Date date0 = clockUtil_DummyClock0.currentDate();
      clockUtil_DummyClock0.updateNow(date0);
}"
4684,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test30()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
      Date date0 = clockUtil_DummyClock0.currentDate();
      clockUtil_DummyClock0.updateNow(date0);
}"
4685,"    public static long currentTimeMillis() {
        return INSTANCE.currentTimeMillis();
    }","  public void test31()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
      long long0 = clockUtil_DummyClock0.nanoTime();
}"
4686,"    public static long nanoTime() {
        return INSTANCE.nanoTime();
    }","  public void test32()  throws Throwable  {
      ClockUtil.DummyClock clockUtil_DummyClock0 = ClockUtil.useDummyClock();
      long long0 = clockUtil_DummyClock0.nanoTime();
}"
4687,"    public static long elapsedTime(long beginTime) {
        return currentTimeMillis() - beginTime;
    }","  public void test33()  throws Throwable  {
      long long0 = ClockUtil.elapsedTime((-792L));
}"
4688,"    public static long nanoTime() {
        return INSTANCE.nanoTime();
    }","  public void test34()  throws Throwable  {
      ClockUtil.DefaultClock clockUtil_DefaultClock0 = new ClockUtil.DefaultClock();
      long long0 = clockUtil_DefaultClock0.nanoTime();
}"
4689,"    public static synchronized void useDefaultClock() {
        INSTANCE = new DefaultClock();
    }","  public void test35()  throws Throwable  {
      ClockUtil.useDefaultClock();
  }"
4690,"    public static Date currentDate() {
        return INSTANCE.currentDate();
    }","  public void test36()  throws Throwable  {
      Date date0 = ClockUtil.currentDate();
}"
4691,"	public void report() {

		// 取出所有Metrics, 未按名称排序.
		Map<String, Gauge> gaugeMap = metricRegistry.getGauges();
		Map<String, Counter> counterMap = metricRegistry.getCounters();
		Map<String, Histogram> histogramMap = metricRegistry.getHistograms();
		Map<String, Timer> timerMap = metricRegistry.getTimers();

		// 调度每个Metrics的caculateMetrics()方法
		// 计算单位时间内的metrics值, 存入该Metrics的Snapshot中，并清零原始数据
		for (Gauge gauge : gaugeMap.values()) {
			gauge.calculateMetric();
		}

		for (Counter counter : counterMap.values()) {
			counter.calculateMetric();
		}

		for (Histogram histogram : histogramMap.values()) {
			histogram.calculateMetric();
		}

		for (Timer timer : timerMap.values()) {
			timer.calculateMetric();
		}

		// 调度所有Reporters 输出 metrics值
		for (Reporter reporter : reporters) {
			reporter.report(gaugeMap, counterMap, histogramMap, timerMap);
		}
	}","  public void test0()  throws Throwable  {
      Reporter[] reporterArray0 = new Reporter[1];
      Slf4jReporter slf4jReporter0 = new Slf4jReporter();
      reporterArray0[0] = (Reporter) slf4jReporter0;
      MetricRegistry metricRegistry0 = new MetricRegistry();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      reportScheduler0.report();
  }"
4692,"	public void report() {

		// 取出所有Metrics, 未按名称排序.
		Map<String, Gauge> gaugeMap = metricRegistry.getGauges();
		Map<String, Counter> counterMap = metricRegistry.getCounters();
		Map<String, Histogram> histogramMap = metricRegistry.getHistograms();
		Map<String, Timer> timerMap = metricRegistry.getTimers();

		// 调度每个Metrics的caculateMetrics()方法
		// 计算单位时间内的metrics值, 存入该Metrics的Snapshot中，并清零原始数据
		for (Gauge gauge : gaugeMap.values()) {
			gauge.calculateMetric();
		}

		for (Counter counter : counterMap.values()) {
			counter.calculateMetric();
		}

		for (Histogram histogram : histogramMap.values()) {
			histogram.calculateMetric();
		}

		for (Timer timer : timerMap.values()) {
			timer.calculateMetric();
		}

		// 调度所有Reporters 输出 metrics值
		for (Reporter reporter : reporters) {
			reporter.report(gaugeMap, counterMap, histogramMap, timerMap);
		}
	}","  public void test1()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[0];
      metricRegistry0.timer("""", doubleArray0);
      System.setCurrentTimeMillis(1376L);
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      reportScheduler0.report();
  }"
4693,"	public void report() {

		// 取出所有Metrics, 未按名称排序.
		Map<String, Gauge> gaugeMap = metricRegistry.getGauges();
		Map<String, Counter> counterMap = metricRegistry.getCounters();
		Map<String, Histogram> histogramMap = metricRegistry.getHistograms();
		Map<String, Timer> timerMap = metricRegistry.getTimers();

		// 调度每个Metrics的caculateMetrics()方法
		// 计算单位时间内的metrics值, 存入该Metrics的Snapshot中，并清零原始数据
		for (Gauge gauge : gaugeMap.values()) {
			gauge.calculateMetric();
		}

		for (Counter counter : counterMap.values()) {
			counter.calculateMetric();
		}

		for (Histogram histogram : histogramMap.values()) {
			histogram.calculateMetric();
		}

		for (Timer timer : timerMap.values()) {
			timer.calculateMetric();
		}

		// 调度所有Reporters 输出 metrics值
		for (Reporter reporter : reporters) {
			reporter.report(gaugeMap, counterMap, histogramMap, timerMap);
		}
	}","  public void test2()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      metricRegistry0.counter(""G"");
      Reporter[] reporterArray0 = new Reporter[1];
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      System.setCurrentTimeMillis((-3110L));
      // Undeclared exception!
      try { 
        reportScheduler0.report();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.ReportScheduler"", e);
      }
  }"
4694,"	public void start(long period, TimeUnit unit) {
		if (started) {
			throw new IllegalStateException(""Scheduler had been started before"");
		}
		executor.scheduleAtFixedRate(new Runnable() {
			@Override
			public void run() {
				try {
					report();
				} catch (Throwable e) {
					logger.error(e.getMessage(), e);
				}
			}
		}, period, period, unit);
		started = true;
		logger.info(""metric reporters started."");
	}","  public void test3()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Reporter[] reporterArray0 = new Reporter[2];
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      // Undeclared exception!
      try { 
        reportScheduler0.start(0L, timeUnit0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ScheduledThreadPoolExecutor"", e);
      }
  }"
4695,"	public void report() {

		// 取出所有Metrics, 未按名称排序.
		Map<String, Gauge> gaugeMap = metricRegistry.getGauges();
		Map<String, Counter> counterMap = metricRegistry.getCounters();
		Map<String, Histogram> histogramMap = metricRegistry.getHistograms();
		Map<String, Timer> timerMap = metricRegistry.getTimers();

		// 调度每个Metrics的caculateMetrics()方法
		// 计算单位时间内的metrics值, 存入该Metrics的Snapshot中，并清零原始数据
		for (Gauge gauge : gaugeMap.values()) {
			gauge.calculateMetric();
		}

		for (Counter counter : counterMap.values()) {
			counter.calculateMetric();
		}

		for (Histogram histogram : histogramMap.values()) {
			histogram.calculateMetric();
		}

		for (Timer timer : timerMap.values()) {
			timer.calculateMetric();
		}

		// 调度所有Reporters 输出 metrics值
		for (Reporter reporter : reporters) {
			reporter.report(gaugeMap, counterMap, histogramMap, timerMap);
		}
	}","  public void test4()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Reporter[] reporterArray0 = new Reporter[1];
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved(""qcS>e#c7"", 2718);
      GraphiteReporter graphiteReporter0 = new GraphiteReporter(inetSocketAddress0, ""qcS>e#c7"");
      reporterArray0[0] = (Reporter) graphiteReporter0;
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      // Undeclared exception!
      try { 
        reportScheduler0.report();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.Socket"", e);
      }
  }"
4696,"	public void removeReporter(Reporter reporter) {
		reporters.remove(reporter);
	}","  public void test5()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, (List<Reporter>) null);
      Slf4jReporter slf4jReporter0 = new Slf4jReporter();
      // Undeclared exception!
      try { 
        reportScheduler0.removeReporter(slf4jReporter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.ReportScheduler"", e);
      }
  }"
4697,"	public void addReporter(Reporter reporter) {
		reporters.add(reporter);
	}","  public void test6()  throws Throwable  {
      ReportScheduler reportScheduler0 = new ReportScheduler((MetricRegistry) null, (List<Reporter>) null);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(80);
      GraphiteReporter graphiteReporter0 = new GraphiteReporter(mockInetSocketAddress0, (String) null);
      // Undeclared exception!
      try { 
        reportScheduler0.addReporter(graphiteReporter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.ReportScheduler"", e);
      }
  }"
4698,"	public ReportScheduler(MetricRegistry metricRegistry, Reporter... reporters) {
		this(metricRegistry, new ArrayList<Reporter>());
		for (Reporter reporter : reporters) {
			this.addReporter(reporter);
		}
	}","  public void test7()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      ReportScheduler reportScheduler0 = null;
      try {
        reportScheduler0 = new ReportScheduler(metricRegistry0, (Reporter[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.ReportScheduler"", e);
      }
  }"
4699,"	public void report() {

		// 取出所有Metrics, 未按名称排序.
		Map<String, Gauge> gaugeMap = metricRegistry.getGauges();
		Map<String, Counter> counterMap = metricRegistry.getCounters();
		Map<String, Histogram> histogramMap = metricRegistry.getHistograms();
		Map<String, Timer> timerMap = metricRegistry.getTimers();

		// 调度每个Metrics的caculateMetrics()方法
		// 计算单位时间内的metrics值, 存入该Metrics的Snapshot中，并清零原始数据
		for (Gauge gauge : gaugeMap.values()) {
			gauge.calculateMetric();
		}

		for (Counter counter : counterMap.values()) {
			counter.calculateMetric();
		}

		for (Histogram histogram : histogramMap.values()) {
			histogram.calculateMetric();
		}

		for (Timer timer : timerMap.values()) {
			timer.calculateMetric();
		}

		// 调度所有Reporters 输出 metrics值
		for (Reporter reporter : reporters) {
			reporter.report(gaugeMap, counterMap, histogramMap, timerMap);
		}
	}","  public void test8()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double0;
      metricRegistry0.timer("""", doubleArray0);
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      // Undeclared exception!
      try { 
        reportScheduler0.report();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.springside.modules.metrics.metric.Counter"", e);
      }
  }"
4700,"	public void report() {

		// 取出所有Metrics, 未按名称排序.
		Map<String, Gauge> gaugeMap = metricRegistry.getGauges();
		Map<String, Counter> counterMap = metricRegistry.getCounters();
		Map<String, Histogram> histogramMap = metricRegistry.getHistograms();
		Map<String, Timer> timerMap = metricRegistry.getTimers();

		// 调度每个Metrics的caculateMetrics()方法
		// 计算单位时间内的metrics值, 存入该Metrics的Snapshot中，并清零原始数据
		for (Gauge gauge : gaugeMap.values()) {
			gauge.calculateMetric();
		}

		for (Counter counter : counterMap.values()) {
			counter.calculateMetric();
		}

		for (Histogram histogram : histogramMap.values()) {
			histogram.calculateMetric();
		}

		for (Timer timer : timerMap.values()) {
			timer.calculateMetric();
		}

		// 调度所有Reporters 输出 metrics值
		for (Reporter reporter : reporters) {
			reporter.report(gaugeMap, counterMap, histogramMap, timerMap);
		}
	}","  public void test9()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[1];
      metricRegistry0.histogram("""", doubleArray0);
      Reporter[] reporterArray0 = new Reporter[0];
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      reportScheduler0.report();
  }"
4701,"	public void stop() {
		if (!started) {
			throw new IllegalStateException(""Scheduler hadn't been started before"");
		}
		executor.shutdownNow();
		try {
			if (executor.awaitTermination(5, TimeUnit.SECONDS)) {
				logger.info(""metric reporters stopped."");
			} else {
				logger.info(""metric reporters can't stop in 5 seconds, force stopped."");
			}
			started = false;
		} catch (InterruptedException ignored) {
			// do nothing
		}
	}","  public void test10()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      // Undeclared exception!
      try { 
        reportScheduler0.stop();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Scheduler hadn't been started before
         //
         verifyException(""org.springside.modules.metrics.ReportScheduler"", e);
      }
  }"
4702,"	public void report() {

		// 取出所有Metrics, 未按名称排序.
		Map<String, Gauge> gaugeMap = metricRegistry.getGauges();
		Map<String, Counter> counterMap = metricRegistry.getCounters();
		Map<String, Histogram> histogramMap = metricRegistry.getHistograms();
		Map<String, Timer> timerMap = metricRegistry.getTimers();

		// 调度每个Metrics的caculateMetrics()方法
		// 计算单位时间内的metrics值, 存入该Metrics的Snapshot中，并清零原始数据
		for (Gauge gauge : gaugeMap.values()) {
			gauge.calculateMetric();
		}

		for (Counter counter : counterMap.values()) {
			counter.calculateMetric();
		}

		for (Histogram histogram : histogramMap.values()) {
			histogram.calculateMetric();
		}

		for (Timer timer : timerMap.values()) {
			timer.calculateMetric();
		}

		// 调度所有Reporters 输出 metrics值
		for (Reporter reporter : reporters) {
			reporter.report(gaugeMap, counterMap, histogramMap, timerMap);
		}
	}","  public void test11()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Reporter[] reporterArray0 = new Reporter[1];
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge(""200.42.42.0"", gauge0);
      // Undeclared exception!
      try { 
        reportScheduler0.report();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.ReportScheduler"", e);
      }
  }"
4703,"	public void addReporter(Reporter reporter) {
		reporters.add(reporter);
	}","  public void test12()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      Slf4jReporter slf4jReporter0 = new Slf4jReporter("""");
      reportScheduler0.addReporter(slf4jReporter0);
  }"
4704,"	public void removeReporter(Reporter reporter) {
		reporters.remove(reporter);
	}","  public void test13()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      LinkedList<Reporter> linkedList0 = new LinkedList<Reporter>();
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, linkedList0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      GraphiteReporter graphiteReporter0 = new GraphiteReporter(mockInetSocketAddress0, (String) null);
      reportScheduler0.removeReporter(graphiteReporter0);
  }"
4705,"	public void start(long period, TimeUnit unit) {
		if (started) {
			throw new IllegalStateException(""Scheduler had been started before"");
		}
		executor.scheduleAtFixedRate(new Runnable() {
			@Override
			public void run() {
				try {
					report();
				} catch (Throwable e) {
					logger.error(e.getMessage(), e);
				}
			}
		}, period, period, unit);
		started = true;
		logger.info(""metric reporters started."");
	}","  public void test14()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      Reporter[] reporterArray0 = new Reporter[0];
      ReportScheduler reportScheduler0 = new ReportScheduler(metricRegistry0, reporterArray0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      reportScheduler0.start(1000L, timeUnit0);
      // Undeclared exception!
      try { 
        reportScheduler0.start(0L, timeUnit0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Scheduler had been started before
         //
         verifyException(""org.springside.modules.metrics.ReportScheduler"", e);
      }
  }"
4706,"	public String toString() {
		return ""TimerMetric [counterMetric="" + counterMetric + "", histogramMetric="" + histogramMetric + ""]"";
	}","  public void test0()  throws Throwable  {
      TimerMetric timerMetric0 = new TimerMetric();
      String string0 = timerMetric0.toString();
}"
4707,"	public TimerMetric calculateMetric() {
		TimerMetric metric = new TimerMetric();
		metric.counterMetric = counter.calculateMetric();
		metric.histogramMetric = histogram.calculateMetric();
		latestMetric = metric;
		return metric;
	}","  public void test0()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      Timer timer0 = new Timer(doubleArray0);
      System.setCurrentTimeMillis(1129L);
      TimerMetric timerMetric0 = timer0.calculateMetric();
}"
4708,"	public void update(long start) {
		histogram.update(clock.getCurrentTime() - start);
		counter.inc();
	}","  public void test1()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      Timer timer0 = new Timer(doubleArray0);
      Timer.clock = null;
      // Undeclared exception!
      try { 
        timer0.update(1129L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.metric.Timer"", e);
      }
  }"
4709,"	public void update(long start) {
		histogram.update(clock.getCurrentTime() - start);
		counter.inc();
	}","  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = double0;
      Timer timer0 = new Timer(integer0, doubleArray0);
      // Undeclared exception!
      try { 
        timer0.update(0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.springside.modules.metrics.metric.Histogram"", e);
      }
  }"
4710,"	public TimerContext start() {
		return new TimerContext(this, clock.getCurrentTime());
	}","  public void test3()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      Timer timer0 = new Timer(doubleArray0);
      Timer.clock = null;
      // Undeclared exception!
      try { 
        timer0.start();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.metric.Timer"", e);
      }
  }"
4711,"	public Timer(Double... pcts) {
		this(1, pcts);
	}","  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(2133);
      Timer timer0 = null;
      try {
        timer0 = new Timer(integer0, (Double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.metric.Histogram"", e);
      }
  }"
4712,"	public void update(long start) {
		histogram.update(clock.getCurrentTime() - start);
		counter.inc();
	}","  public void test5()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      Timer timer0 = new Timer(doubleArray0);
      timer0.update(1129L);
  }"
4713,"	public void reset(){
		counter.reset();
		histogram.reset();
	}","  public void test6()  throws Throwable  {
      Integer integer0 = new Integer((-15));
      Double[] doubleArray0 = new Double[0];
      Timer timer0 = new Timer(integer0, doubleArray0);
      timer0.reset();
  }"
4714,"	public TimerContext start() {
		return new TimerContext(this, clock.getCurrentTime());
	}","  public void test7()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = double0;
      Timer timer0 = new Timer(doubleArray0);
      Timer.TimerContext timer_TimerContext0 = timer0.start();
      timer_TimerContext0.stop();
  }"
4715,"	public String toString() {
		return ""Timer [latestMetric="" + latestMetric + "", counter="" + counter + "", histogram="" + histogram + ""]"";
	}","  public void test8()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      Timer timer0 = new Timer(doubleArray0);
      String string0 = timer0.toString();
}"
4716,"	public TimerMetric calculateMetric() {
		TimerMetric metric = new TimerMetric();
		metric.counterMetric = counter.calculateMetric();
		metric.histogramMetric = histogram.calculateMetric();
		latestMetric = metric;
		return metric;
	}","  public void test9()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      Timer timer0 = new Timer(doubleArray0);
      // Undeclared exception!
      try { 
        timer0.calculateMetric();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.springside.modules.metrics.metric.Counter"", e);
      }
  }"
4717,"	public Timer(Double... pcts) {
		this(1, pcts);
	}","  public void test10()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Timer timer0 = null;
      try {
        timer0 = new Timer(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4718,"	public String toString() {
		return ""CounterMetric [totalCount="" + totalCount + "", avgRate="" + avgRate + "", latestCount="" + latestCount
				+ "", latestRate="" + latestRate + ""]"";
	}","  public void test0()  throws Throwable  {
      CounterMetric counterMetric0 = new CounterMetric();
      counterMetric0.latestCount = (-1487L);
      String string0 = counterMetric0.toString();
}"
4719,"	public String toString() {
		return ""CounterMetric [totalCount="" + totalCount + "", avgRate="" + avgRate + "", latestCount="" + latestCount
				+ "", latestRate="" + latestRate + ""]"";
	}","  public void test1()  throws Throwable  {
      CounterMetric counterMetric0 = new CounterMetric();
      counterMetric0.totalCount = 1L;
      String string0 = counterMetric0.toString();
}"
4720,"	public String toString() {
		return ""CounterMetric [totalCount="" + totalCount + "", avgRate="" + avgRate + "", latestCount="" + latestCount
				+ "", latestRate="" + latestRate + ""]"";
	}","  public void test2()  throws Throwable  {
      CounterMetric counterMetric0 = new CounterMetric();
      counterMetric0.avgRate = (-4085L);
      String string0 = counterMetric0.toString();
}"
4721,"	public String toString() {
		return ""HistogramMetric [min="" + min + "", max="" + max + "", avg="" + avg + "", pcts="" + pcts + ""]"";
	}","  public void test0()  throws Throwable  {
      HistogramMetric histogramMetric0 = new HistogramMetric();
      histogramMetric0.min = (-857L);
      String string0 = histogramMetric0.toString();
}"
4722,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test0()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-1392409282871L));
      CounterMetric counterMetric0 = counter0.calculateMetric();
}"
4723,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test1()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-1392409282871L));
      CounterMetric counterMetric0 = counter0.calculateMetric();
      System.setCurrentTimeMillis(0L);
      CounterMetric counterMetric1 = counter0.calculateMetric();
}"
4724,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test2()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-1392409282871L));
      CounterMetric counterMetric0 = counter0.calculateMetric();
      System.setCurrentTimeMillis(0L);
      CounterMetric counterMetric1 = counter0.calculateMetric();
}"
4725,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test3()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis((-1392409282871L));
      CounterMetric counterMetric0 = counter0.calculateMetric();
      System.setCurrentTimeMillis(0L);
      CounterMetric counterMetric1 = counter0.calculateMetric();
}"
4726,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test4()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis(1392409282854L);
      counter0.dec(1392409282854L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
}"
4727,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test5()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis(1392409282854L);
      counter0.dec(1392409282854L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
}"
4728,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test6()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis(1392409282854L);
      counter0.dec(1392409282854L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
}"
4729,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test7()  throws Throwable  {
      Counter counter0 = new Counter();
      System.setCurrentTimeMillis(1392409282854L);
      counter0.dec(1392409282854L);
      CounterMetric counterMetric0 = counter0.calculateMetric();
}"
4730,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test8()  throws Throwable  {
      Counter counter0 = new Counter();
      Clock.MockClock clock_MockClock0 = new Clock.MockClock(1L);
      Counter.clock = (Clock) clock_MockClock0;
      counter0.calculateMetric();
      CounterMetric counterMetric0 = counter0.calculateMetric();
}"
4731,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test9()  throws Throwable  {
      Counter counter0 = new Counter();
      Clock.MockClock clock_MockClock0 = new Clock.MockClock(1L);
      Counter.clock = (Clock) clock_MockClock0;
      counter0.calculateMetric();
      CounterMetric counterMetric0 = counter0.calculateMetric();
}"
4732,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test10()  throws Throwable  {
      Counter counter0 = new Counter();
      Clock.MockClock clock_MockClock0 = new Clock.MockClock(1L);
      Counter.clock = (Clock) clock_MockClock0;
      counter0.calculateMetric();
      CounterMetric counterMetric0 = counter0.calculateMetric();
}"
4733,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test11()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.dec(1L);
      // Undeclared exception!
      try { 
        counter0.calculateMetric();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.springside.modules.metrics.metric.Counter"", e);
      }
  }"
4734,"	public void reset() {
		latestMetric = new CounterMetric();
		counter.set(0);
		totalCount = 0L;
		startTime = clock.getCurrentTime();
		lastReportTime = startTime;
	}","  public void test12()  throws Throwable  {
      Counter counter0 = new Counter();
      Counter.clock = counter0.clock;
      Clock.MockClock clock_MockClock0 = new Clock.MockClock();
      Counter.clock = (Clock) clock_MockClock0;
      Counter.clock = null;
      // Undeclared exception!
      try { 
        counter0.reset();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.metric.Counter"", e);
      }
  }"
4735,"	public CounterMetric calculateMetric() {
		long latestCount = counter.getAndSet(0);
		long currentTime = clock.getCurrentTime();

		CounterMetric metric = new CounterMetric();

		totalCount += latestCount;
		long totalElapsed = currentTime - startTime;
		metric.avgRate = (totalCount * 1000) / totalElapsed;

		metric.latestCount = latestCount;
		metric.totalCount = totalCount;

		long elapsed = currentTime - lastReportTime;
		if (elapsed > 0) {
			metric.latestRate = (latestCount * 1000) / elapsed;
		}

		lastReportTime = currentTime;

		latestMetric = metric;

		return metric;
	}","  public void test13()  throws Throwable  {
      Counter counter0 = new Counter();
      Counter.clock = null;
      // Undeclared exception!
      try { 
        counter0.calculateMetric();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.metric.Counter"", e);
      }
  }"
4736,"	public Counter() {
		reset();
	}","  public void test14()  throws Throwable  {
      Counter.clock = null;
      Counter counter0 = null;
      try {
        counter0 = new Counter();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.metric.Counter"", e);
      }
  }"
4737,"	public void reset() {
		latestMetric = new CounterMetric();
		counter.set(0);
		totalCount = 0L;
		startTime = clock.getCurrentTime();
		lastReportTime = startTime;
	}","  public void test15()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.reset();
  }"
4738,"	public void dec() {
		counter.decrementAndGet();
	}","  public void test16()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.dec();
  }"
4739,"	public void inc() {
		counter.incrementAndGet();
	}","  public void test17()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.inc(0L);
  }"
4740,"	public void inc() {
		counter.incrementAndGet();
	}","  public void test18()  throws Throwable  {
      Counter counter0 = new Counter();
      counter0.inc();
  }"
4741,"	public String toString() {
		return ""Counter [latestMetric="" + latestMetric + "", counter="" + counter + "", totalCount="" + totalCount
				+ "", startTime="" + startTime + "", lastReportTime="" + lastReportTime + ""]"";
	}","  public void test19()  throws Throwable  {
      Counter counter0 = new Counter();
      String string0 = counter0.toString();
}"
4742,"	public void setSampleRate(int sampleRate) {
		if (sampleRate <= 0) {
			sampleRate = 1;
		} else {
			this.sampleRate = sampleRate;
		}
	}","  public void test0()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.setSampleRate(0);
  }"
4743,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test1()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(75.9264);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update(0L);
      histogram0.update(1704L);
      histogram0.update((-1L));
      histogram0.update(1704L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4744,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test2()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(75.9264);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update(0L);
      histogram0.update(1704L);
      histogram0.update((-1L));
      histogram0.update(1704L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4745,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test3()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(75.9264);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update(0L);
      histogram0.update(1704L);
      histogram0.update((-1L));
      histogram0.update(1704L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4746,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test4()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(75.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update(0L);
      histogram0.update(0L);
      histogram0.update(0L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4747,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test5()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(25.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update(0L);
      histogram0.update(0L);
      histogram0.update(0L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4748,"	public void update(long value) {
		if (sampleRate == 1) {
			//没有采样率
			synchronized (this) {
				measurements.add(value);
			}
		} else if (sampleCounter.incrementAndGet() % sampleRate == 0) {
			//有采样率且命中采样
			synchronized (this) {
				measurements.add(value);
			}
		}
	}","  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = double0;
      doubleArray0[7] = doubleArray0[4];
      Histogram histogram0 = new Histogram(integer0, doubleArray0);
      // Undeclared exception!
      try { 
        histogram0.update((-1669L));
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException(""org.springside.modules.metrics.metric.Histogram"", e);
      }
  }"
4749,"	public void reset() {
		synchronized (this) {
			this.measurements = new LinkedList<Long>();
		}
		this.sampleCounter.set(0);
		this.latestMetric = createEmptyMetric();
	}","  public void test7()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = doubleArray0[5];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.setPcts((Double[]) null);
      // Undeclared exception!
      try { 
        histogram0.reset();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.metric.Histogram"", e);
      }
  }"
4750,"	public Histogram(Double... pcts) {
		this(1, pcts);
	}","  public void test8()  throws Throwable  {
      Histogram histogram0 = null;
      try {
        histogram0 = new Histogram((Double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.metric.Histogram"", e);
      }
  }"
4751,"	public Histogram(Double... pcts) {
		this(1, pcts);
	}","  public void test9()  throws Throwable  {
      Histogram histogram0 = null;
      try {
        histogram0 = new Histogram((Integer) null, (Double[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.metric.Histogram"", e);
      }
  }"
4752,"	public void reset() {
		synchronized (this) {
			this.measurements = new LinkedList<Long>();
		}
		this.sampleCounter.set(0);
		this.latestMetric = createEmptyMetric();
	}","  public void test10()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = doubleArray0[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.reset();
  }"
4753,"	public void setSampleRate(int sampleRate) {
		if (sampleRate <= 0) {
			sampleRate = 1;
		} else {
			this.sampleRate = sampleRate;
		}
	}","  public void test11()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(346.0427139301808);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.setSampleRate((-2343));
  }"
4754,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test12()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(346.0427139301808);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      Double double1 = new Double(22.87921056590264);
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update((-2343));
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4755,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test13()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(346.0427139301808);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      Double double1 = new Double(22.87921056590264);
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update((-2343));
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4756,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test14()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(346.0427139301808);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      Double double1 = new Double(22.87921056590264);
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update((-2343));
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4757,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test15()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update(1604L);
      histogram0.update(4394L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4758,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.update(1604L);
      histogram0.update(0L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4759,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test17()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-22.150011022224938));
      doubleArray0[0] = double0;
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.setPcts((Double[]) null);
      histogram0.update(0L);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4760,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test18()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-22.150011022224938));
      doubleArray0[0] = double0;
      Histogram histogram0 = new Histogram(doubleArray0);
      HistogramMetric histogramMetric0 = histogram0.calculateMetric();
}"
4761,"	public void update(long value) {
		if (sampleRate == 1) {
			//没有采样率
			synchronized (this) {
				measurements.add(value);
			}
		} else if (sampleCounter.incrementAndGet() % sampleRate == 0) {
			//有采样率且命中采样
			synchronized (this) {
				measurements.add(value);
			}
		}
	}","  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(integer0, doubleArray0);
      histogram0.update((-1));
  }"
4762,"	public void update(long value) {
		if (sampleRate == 1) {
			//没有采样率
			synchronized (this) {
				measurements.add(value);
			}
		} else if (sampleCounter.incrementAndGet() % sampleRate == 0) {
			//有采样率且命中采样
			synchronized (this) {
				measurements.add(value);
			}
		}
	}","  public void test20()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      histogram0.setSampleRate(1366);
      histogram0.update(2423L);
  }"
4763,"	public HistogramMetric calculateMetric() {
		// 快照当前的数据，在计算时不阻塞新的metrics update.
		List<Long> snapshotList = null;
		synchronized (this) {
			snapshotList = measurements;
			measurements = new LinkedList<Long>();
		}

		if (snapshotList.isEmpty()) {
			return createEmptyMetric();
		}

		HistogramMetric metric = new HistogramMetric();
		int count = snapshotList.size();
		double sum = 0;

		if ((pcts != null) && (pcts.length > 0)) {
			// 按数值大小排序，以快速支持百分比
			Collections.sort(snapshotList);

			metric.min = snapshotList.get(0);
			metric.max = snapshotList.get(count - 1);

			for (long value : snapshotList) {
				sum += value;
			}

			for (Double pct : pcts) {
				metric.pcts.put(pct, getPercent(snapshotList, count, pct));
			}
		} else {
			// 不排序的算法，因为不需要支持百分位数
			metric.min = snapshotList.get(0);
			metric.max = metric.min;

			for (long value : snapshotList) {
				if (value < metric.min) {
					metric.min = value;
				}
				if (value > metric.max) {
					metric.max = value;
				}
				sum += value;
			}
		}

		metric.avg = sum / count;

		latestMetric = metric;
		return metric;
	}","  public void test21()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      Double[] doubleArray1 = new Double[5];
      histogram0.setPcts(doubleArray1);
      // Undeclared exception!
      try { 
        histogram0.calculateMetric();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4764,"	public String toString() {
		return ""Histogram [latestMetric="" + latestMetric + "", measurements="" + measurements + "", pcts=""
				+ Arrays.toString(pcts) + ""]"";
	}","  public void test22()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(346.0427139301808);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[3];
      doubleArray0[7] = doubleArray0[0];
      Histogram histogram0 = new Histogram(doubleArray0);
      String string0 = histogram0.toString();
}"
4765,"	public void onTimerRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test0()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      jmxExporter0.onTimerRemoved("""");
  }"
4766,"	public void onGaugeRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test1()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""nobX.0u"", metricRegistry0);
      jmxExporter0.onGaugeRemoved(""jF#?y)*;5n"");
  }"
4767,"	public void destroyMBeans() {
		Map<String, Gauge> gauges = registry.getGauges();
		for (String key : gauges.keySet()) {
			onGaugeRemoved(key);
		}

		Map<String, Counter> counters = registry.getCounters();
		for (String key : counters.keySet()) {
			onCounterRemoved(key);
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (String key : histograms.keySet()) {
			onHistogramRemoved(key);
		}

		Map<String, Timer> timers = registry.getTimers();
		for (String key : timers.keySet()) {
			onTimerRemoved(key);
		}
	}","  public void test2()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge("""", gauge0);
      jmxExporter0.destroyMBeans();
  }"
4768,"	public void onTimerRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test3()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""@':O[+k"", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerRemoved("""");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: @':O[+k
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4769,"	public void onTimerAdded(String name, Timer timer) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxTimer(timer, objectName));
	}","  public void test4()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""}Y4a%l9sR(ZX*PY"", metricRegistry0);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(1236.358854);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = doubleArray0[0];
      doubleArray0[8] = doubleArray0[1];
      Timer timer0 = new Timer(doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerAdded("""", timer0);
        fail(""Expecting exception: RuntimeOperationsException"");
      } catch(RuntimeOperationsException e) {
      }
  }"
4770,"	public void onTimerAdded(String name, Timer timer) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxTimer(timer, objectName));
	}","  public void test5()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""@':O[+k"", metricRegistry0);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(1549.5);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[3];
      doubleArray0[7] = doubleArray0[0];
      Timer timer0 = new Timer(doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerAdded(""Unable to register {}"", timer0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: @':O[+k
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4771,"	public void onTimerAdded(String name, Timer timer) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxTimer(timer, objectName));
	}","  public void test6()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""Q+Cm~N"", metricRegistry0);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1664.813102));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = doubleArray0[0];
      Timer timer0 = new Timer(doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerAdded((String) null, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException(""javax.management.ObjectName"", e);
      }
  }"
4772,"	public void onTimerAdded(String name, Timer timer) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxTimer(timer, objectName));
	}","  public void test7()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      Timer timer0 = metricRegistry0.timer("""", (Double[]) null);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerAdded(""@vLSF/Ea1lb}\"""", timer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4773,"	public void onHistogramRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test8()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""Unable t registe:"", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramRemoved(""Unable t registe:"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: Unable t registe:
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4774,"	public void onHistogramRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test9()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramRemoved(""vkG;!`0%iq_^2^Q\""H6"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4775,"	public void onHistogramAdded(String name, Histogram histogram) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxHistogram(histogram, objectName));
	}","  public void test10()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""V_%9im)\""1-8"", metricRegistry0);
      Integer integer0 = new Integer(2705);
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(integer0, doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramAdded(""VI[-s?^E!V;D>7${a"", histogram0);
        fail(""Expecting exception: RuntimeOperationsException"");
      } catch(RuntimeOperationsException e) {
      }
  }"
4776,"	public void onHistogramAdded(String name, Histogram histogram) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxHistogram(histogram, objectName));
	}","  public void test11()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""Unable to register already exist mbean:"", metricRegistry0);
      Integer integer0 = new Integer(0);
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(1.0);
      doubleArray0[0] = double0;
      Histogram histogram0 = new Histogram(integer0, doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramAdded(""1DAPeAs$"", histogram0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: Unable to register already exist mbean:
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4777,"	public void onHistogramAdded(String name, Histogram histogram) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxHistogram(histogram, objectName));
	}","  public void test12()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(25.0503);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[2];
      Histogram histogram0 = metricRegistry0.histogram(""-t,yB{Ui-cczL^_Mp/"", doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramAdded((String) null, histogram0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException(""javax.management.ObjectName"", e);
      }
  }"
4778,"	public void onHistogramAdded(String name, Histogram histogram) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxHistogram(histogram, objectName));
	}","  public void test13()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[3];
      Histogram histogram0 = new Histogram(doubleArray0);
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramAdded(""u3GLwJR>#NW\""OBhaT"", histogram0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4779,"	public void onGaugeRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test14()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""@':O[+k"", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeRemoved(""@':O[+k"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: @':O[+k
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4780,"	public void onGaugeRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test15()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter((String) null, metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeRemoved((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException(""javax.management.ObjectName"", e);
      }
  }"
4781,"	public void onGaugeAdded(String name, Gauge gauge) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxGauge(gauge, objectName));
	}","  public void test16()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""j?63AHv[^tz'7|L"", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeAdded(""'aB&OMxH*hGtH*yM@"", (Gauge) null);
        fail(""Expecting exception: RuntimeOperationsException"");
      } catch(RuntimeOperationsException e) {
      }
  }"
4782,"	public void onGaugeAdded(String name, Gauge gauge) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxGauge(gauge, objectName));
	}","  public void test17()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""d3!@g&L:ft"", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeAdded(""/>b"", gauge0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: d3!@g&L:ft
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4783,"	public void onGaugeAdded(String name, Gauge gauge) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxGauge(gauge, objectName));
	}","  public void test18()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""org.springside.modules.metrics.exporter.JmxExporter$JmxGauge"", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeAdded((String) null, gauge0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException(""javax.management.ObjectName"", e);
      }
  }"
4784,"	public void onGaugeAdded(String name, Gauge gauge) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxGauge(gauge, objectName));
	}","  public void test19()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeAdded(""`\""hIK6P7Kt*yps'rZ5*"", gauge0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4785,"	public void onCounterRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test20()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterRemoved((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException(""javax.management.ObjectName"", e);
      }
  }"
4786,"	public void onCounterRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test21()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterRemoved(""]>Z0v\"""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4787,"	public void onCounterAdded(String name, Counter counter) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxCounter(counter, objectName));
	}","  public void test22()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      Counter counter0 = new Counter();
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterAdded(""5sG8@*b"", counter0);
        fail(""Expecting exception: RuntimeOperationsException"");
      } catch(RuntimeOperationsException e) {
      }
  }"
4788,"	public void onCounterAdded(String name, Counter counter) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxCounter(counter, objectName));
	}","  public void test23()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""Unable t registe:"", metricRegistry0);
      Counter counter0 = new Counter();
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterAdded(""8\""G"", counter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: Unable t registe:
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4789,"	public void onCounterAdded(String name, Counter counter) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxCounter(counter, objectName));
	}","  public void test24()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter((String) null, metricRegistry0);
      Counter counter0 = new Counter();
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterAdded((String) null, counter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException(""javax.management.ObjectName"", e);
      }
  }"
4790,"	public void onCounterAdded(String name, Counter counter) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxCounter(counter, objectName));
	}","  public void test25()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterAdded(""u3GLwJR>#NW\""OBhaT"", (Counter) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4791,"	public void initMBeans() {

		Map<String, Gauge> gauges = registry.getGauges();
		for (Entry<String, Gauge> entry : gauges.entrySet()) {
			onGaugeAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Counter> counters = registry.getCounters();
		for (Entry<String, Counter> entry : counters.entrySet()) {
			onCounterAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (Entry<String, Histogram> entry : histograms.entrySet()) {
			onHistogramAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Timer> timers = registry.getTimers();
		for (Entry<String, Timer> entry : timers.entrySet()) {
			onTimerAdded(entry.getKey(), entry.getValue());
		}
	}","  public void test26()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""5((5"", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge(""H @2qD5W/t)?m9d7"", gauge0);
      // Undeclared exception!
      try { 
        jmxExporter0.initMBeans();
        fail(""Expecting exception: RuntimeOperationsException"");
      } catch(RuntimeOperationsException e) {
      }
  }"
4792,"	public void initMBeans() {

		Map<String, Gauge> gauges = registry.getGauges();
		for (Entry<String, Gauge> entry : gauges.entrySet()) {
			onGaugeAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Counter> counters = registry.getCounters();
		for (Entry<String, Counter> entry : counters.entrySet()) {
			onCounterAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (Entry<String, Histogram> entry : histograms.entrySet()) {
			onHistogramAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Timer> timers = registry.getTimers();
		for (Entry<String, Timer> entry : timers.entrySet()) {
			onTimerAdded(entry.getKey(), entry.getValue());
		}
	}","  public void test27()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge(""RfV\""9)G8Xr"", gauge0);
      // Undeclared exception!
      try { 
        jmxExporter0.initMBeans();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4793,"	public void destroyMBeans() {
		Map<String, Gauge> gauges = registry.getGauges();
		for (String key : gauges.keySet()) {
			onGaugeRemoved(key);
		}

		Map<String, Counter> counters = registry.getCounters();
		for (String key : counters.keySet()) {
			onCounterRemoved(key);
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (String key : histograms.keySet()) {
			onHistogramRemoved(key);
		}

		Map<String, Timer> timers = registry.getTimers();
		for (String key : timers.keySet()) {
			onTimerRemoved(key);
		}
	}","  public void test28()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(455.02471755);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = doubleArray0[5];
      doubleArray0[7] = doubleArray0[0];
      metricRegistry0.histogram("""", doubleArray0);
      JmxExporter jmxExporter0 = new JmxExporter((String) null, metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.destroyMBeans();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException(""javax.management.ObjectName"", e);
      }
  }"
4794,"	public void destroyMBeans() {
		Map<String, Gauge> gauges = registry.getGauges();
		for (String key : gauges.keySet()) {
			onGaugeRemoved(key);
		}

		Map<String, Counter> counters = registry.getCounters();
		for (String key : counters.keySet()) {
			onCounterRemoved(key);
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (String key : histograms.keySet()) {
			onHistogramRemoved(key);
		}

		Map<String, Timer> timers = registry.getTimers();
		for (String key : timers.keySet()) {
			onTimerRemoved(key);
		}
	}","  public void test29()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge(""]>Z0v\"""", gauge0);
      // Undeclared exception!
      try { 
        jmxExporter0.destroyMBeans();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4795,"	public JmxExporter(String domain, MetricRegistry registry) {
		this.mBeanServer = ManagementFactory.getPlatformMBeanServer();
		this.registry = registry;
		this.domain = domain;
		this.registered = new ConcurrentHashMap<ObjectName, ObjectName>();

		registry.addListener(this);
	}","  public void test30()  throws Throwable  {
      JmxExporter jmxExporter0 = null;
      try {
        jmxExporter0 = new JmxExporter((String) null, (MetricRegistry) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4796,"	public void onHistogramAdded(String name, Histogram histogram) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxHistogram(histogram, objectName));
	}","  public void test31()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""V_%9im)\""1-8"", metricRegistry0);
      Integer integer0 = new Integer(2705);
      Double[] doubleArray0 = new Double[0];
      Histogram histogram0 = new Histogram(integer0, doubleArray0);
      jmxExporter0.onHistogramAdded("", avgRate="", histogram0);
  }"
4797,"	public void onTimerRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test32()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter((String) null, metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onTimerRemoved(""x raa9(Cc3N"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // domain cannot be null
         //
         verifyException(""javax.management.ObjectName"", e);
      }
  }"
4798,"	public void onTimerAdded(String name, Timer timer) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxTimer(timer, objectName));
	}","  public void test33()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      jmxExporter0.onTimerAdded("""", (Timer) null);
  }"
4799,"	public void onGaugeAdded(String name, Gauge gauge) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxGauge(gauge, objectName));
	}","  public void test34()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""V_%9im)\""1-8"", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      jmxExporter0.onGaugeAdded("",JaV 2mUT~<"", gauge0);
  }"
4800,"	public void onCounterAdded(String name, Counter counter) {
		ObjectName objectName = createObjectName(name);
		registerMBean(objectName, new JmxCounter(counter, objectName));
	}","  public void test35()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      Counter counter0 = metricRegistry0.counter(""mW'{dF%"");
      JmxExporter jmxExporter0 = new JmxExporter(""org.springside.modules.metrics.exporter.JmxExporter$JmxGauge"", metricRegistry0);
      jmxExporter0.onCounterAdded(""mW'{dF%"", counter0);
  }"
4801,"	public void destroyMBeans() {
		Map<String, Gauge> gauges = registry.getGauges();
		for (String key : gauges.keySet()) {
			onGaugeRemoved(key);
		}

		Map<String, Counter> counters = registry.getCounters();
		for (String key : counters.keySet()) {
			onCounterRemoved(key);
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (String key : histograms.keySet()) {
			onHistogramRemoved(key);
		}

		Map<String, Timer> timers = registry.getTimers();
		for (String key : timers.keySet()) {
			onTimerRemoved(key);
		}
	}","  public void test36()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""GwD_r`.,T5j/AfY/Y"", metricRegistry0);
      metricRegistry0.counter(""GwD_r`.,T5j/AfY/Y"");
      jmxExporter0.destroyMBeans();
  }"
4802,"	public void destroyMBeans() {
		Map<String, Gauge> gauges = registry.getGauges();
		for (String key : gauges.keySet()) {
			onGaugeRemoved(key);
		}

		Map<String, Counter> counters = registry.getCounters();
		for (String key : counters.keySet()) {
			onCounterRemoved(key);
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (String key : histograms.keySet()) {
			onHistogramRemoved(key);
		}

		Map<String, Timer> timers = registry.getTimers();
		for (String key : timers.keySet()) {
			onTimerRemoved(key);
		}
	}","  public void test37()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""kpp:,yXdb]hc"", metricRegistry0);
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge(""kpp:,yXdb]hc"", gauge0);
      // Undeclared exception!
      try { 
        jmxExporter0.destroyMBeans();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: kpp:,yXdb]hc
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4803,"	public void initMBeans() {

		Map<String, Gauge> gauges = registry.getGauges();
		for (Entry<String, Gauge> entry : gauges.entrySet()) {
			onGaugeAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Counter> counters = registry.getCounters();
		for (Entry<String, Counter> entry : counters.entrySet()) {
			onCounterAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (Entry<String, Histogram> entry : histograms.entrySet()) {
			onHistogramAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Timer> timers = registry.getTimers();
		for (Entry<String, Timer> entry : timers.entrySet()) {
			onTimerAdded(entry.getKey(), entry.getValue());
		}
	}","  public void test38()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""GwD_r`.,T5j/AfY/Y"", metricRegistry0);
      metricRegistry0.timer(""GwD_r`.,T5j/AfY/Y"", (Double[]) null);
      jmxExporter0.initMBeans();
  }"
4804,"	public void initMBeans() {

		Map<String, Gauge> gauges = registry.getGauges();
		for (Entry<String, Gauge> entry : gauges.entrySet()) {
			onGaugeAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Counter> counters = registry.getCounters();
		for (Entry<String, Counter> entry : counters.entrySet()) {
			onCounterAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (Entry<String, Histogram> entry : histograms.entrySet()) {
			onHistogramAdded(entry.getKey(), entry.getValue());
		}

		Map<String, Timer> timers = registry.getTimers();
		for (Entry<String, Timer> entry : timers.entrySet()) {
			onTimerAdded(entry.getKey(), entry.getValue());
		}
	}","  public void test39()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""GwD_r`.,T5j/AfY/Y"", metricRegistry0);
      metricRegistry0.counter(""GwD_r`.,T5j/AfY/Y"");
      jmxExporter0.initMBeans();
  }"
4805,"	public void onGaugeRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test40()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter("""", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onGaugeRemoved("".O9es5U\""M"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4806,"	public void destroyMBeans() {
		Map<String, Gauge> gauges = registry.getGauges();
		for (String key : gauges.keySet()) {
			onGaugeRemoved(key);
		}

		Map<String, Counter> counters = registry.getCounters();
		for (String key : counters.keySet()) {
			onCounterRemoved(key);
		}

		Map<String, Histogram> histograms = registry.getHistograms();
		for (String key : histograms.keySet()) {
			onHistogramRemoved(key);
		}

		Map<String, Timer> timers = registry.getTimers();
		for (String key : timers.keySet()) {
			onTimerRemoved(key);
		}
	}","  public void test41()  throws Throwable  {
      MetricRegistry metricRegistry0 = new MetricRegistry();
      JmxExporter jmxExporter0 = new JmxExporter(""5((5"", metricRegistry0);
      metricRegistry0.timer(""5((5"", (Double[]) null);
      jmxExporter0.destroyMBeans();
  }"
4807,"	public void onHistogramRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test42()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""h<"", metricRegistry0);
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      MetricRegistry.getSortedMetrics((Map<String, Integer>) hashtable0);
      Integer integer0 = new Integer(0);
      Integer.min(0, 0);
      Integer.getInteger(""h<"", integer0);
      Integer.min(155, 0);
      hashtable0.put(""Y}"", integer0);
      MetricRegistry.getSortedMetrics((Map<String, Integer>) hashtable0);
      jmxExporter0.destroyMBeans();
      Gauge<Integer> gauge0 = (Gauge<Integer>) mock(Gauge.class, new ViolatedAssumptionAnswer());
      metricRegistry0.registerGauge(""h<"", gauge0);
      jmxExporter0.onHistogramRemoved(""h<"");
      jmxExporter0.initMBeans();
      String string0 = ""Unable to unregister:"";
      jmxExporter0.onCounterRemoved(""Unable to unregister:"");
      String string1 = ""CpV=fR;:W"";
      // Undeclared exception!
      try { 
        jmxExporter0.onHistogramRemoved((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Invalid value (null)
         //
         verifyException(""javax.management.ObjectName"", e);
      }
  }"
4808,"	public void onCounterRemoved(String name) {
		ObjectName objectName = createObjectName(name);
		unregisterMBean(objectName);
	}","  public void test43()  throws Throwable  {
      MetricRegistry metricRegistry0 = MetricRegistry.INSTANCE;
      JmxExporter jmxExporter0 = new JmxExporter(""bQs:cN_+2^"", metricRegistry0);
      // Undeclared exception!
      try { 
        jmxExporter0.onCounterRemoved(""f`6r-<.!1E"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // javax.management.MalformedObjectNameException: Invalid domain: bQs:cN_+2^
         //
         verifyException(""org.springside.modules.metrics.exporter.JmxExporter"", e);
      }
  }"
4809,"	public Slf4jReporter() {
		this(DEFAULT_LOGGER_NAME);
	}","  public void test0()  throws Throwable  {
      Slf4jReporter slf4jReporter0 = null;
      try {
        slf4jReporter0 = new Slf4jReporter((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // name argument cannot be null
         //
         verifyException(""ch.qos.logback.classic.LoggerContext"", e);
      }
  }"
4810,"	public Slf4jReporter() {
		this(DEFAULT_LOGGER_NAME);
	}","  public void test1()  throws Throwable  {
      Slf4jReporter slf4jReporter0 = new Slf4jReporter();
  }"
4811,"	public void report(Map<String, Gauge> gauges, Map<String, Counter> counters, Map<String, Histogram> histograms,
			Map<String, Timer> timers) {
		try {
			connect();
			long timestamp = System.currentTimeMillis() / 1000;

			for (Map.Entry<String, Gauge> entry : gauges.entrySet()) {
				reportGauge(entry.getKey(), entry.getValue().latestMetric, timestamp);
			}

			for (Map.Entry<String, Counter> entry : counters.entrySet()) {
				reportCounter(entry.getKey(), entry.getValue().latestMetric, timestamp);
			}

			for (Map.Entry<String, Histogram> entry : histograms.entrySet()) {
				reportHistogram(entry.getKey(), entry.getValue().latestMetric, timestamp);
			}

			for (Map.Entry<String, Timer> entry : timers.entrySet()) {
				reportTimer(entry.getKey(), entry.getValue().latestMetric, timestamp);
			}

			flush();

			onConnSuccess();
		} catch (IOException e) {
			onConnFail(e);
		} finally {
			try {
				close();
			} catch (IOException e) {
				logger.warn(""Error disconnecting from Graphite"", e);
			}
		}
	}","  public void test0()  throws Throwable  {
      HashMap<String, Timer> hashMap0 = new HashMap<String, Timer>();
      GraphiteReporter graphiteReporter0 = new GraphiteReporter((InetSocketAddress) null);
      HashMap<String, Counter> hashMap1 = new HashMap<String, Counter>();
      // Undeclared exception!
      try { 
        graphiteReporter0.report((Map<String, Gauge>) null, hashMap1, (Map<String, Histogram>) null, hashMap0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.springside.modules.metrics.reporter.GraphiteReporter"", e);
      }
  }"
4812,"	public void setPrefix(String prefix) {
		this.prefix = prefix;
	}","  public void test1()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("""", 0);
      GraphiteReporter graphiteReporter0 = new GraphiteReporter(inetSocketAddress0, """");
      graphiteReporter0.setPrefix("""");
  }"
4813,"	public void report(Map<String, Gauge> gauges, Map<String, Counter> counters, Map<String, Histogram> histograms,
			Map<String, Timer> timers) {

		printWithBanner(new Date().toString(), '=');
		output.println();

		if (!gauges.isEmpty()) {
			printWithBanner(""-- Gaugues"", '-');
			for (Map.Entry<String, Gauge> entry : MetricRegistry.getSortedMetrics(gauges).entrySet()) {
				output.println(entry.getKey());
				printGauge(entry.getValue());
			}
			output.println();
		}

		if (!counters.isEmpty()) {
			printWithBanner(""-- Counters"", '-');
			for (Map.Entry<String, Counter> entry : MetricRegistry.getSortedMetrics(counters).entrySet()) {
				output.println(entry.getKey());
				printCounter(entry.getValue().latestMetric);
			}
			output.println();
		}

		if (!histograms.isEmpty()) {
			printWithBanner(""-- Histograms"", '-');
			for (Map.Entry<String, Histogram> entry : MetricRegistry.getSortedMetrics(histograms).entrySet()) {
				output.println(entry.getKey());
				printHistogram(entry.getValue().latestMetric);
			}
			output.println();
		}

		if (!timers.isEmpty()) {
			printWithBanner(""-- Timers"", '-');
			for (Map.Entry<String, Timer> entry : MetricRegistry.getSortedMetrics(timers).entrySet()) {
				output.println(entry.getKey());
				printTimer(entry.getValue().latestMetric);
			}
			output.println();
		}
	}","  public void test0()  throws Throwable  {
      ConsoleReporter consoleReporter0 = new ConsoleReporter();
      HashMap<String, Histogram> hashMap0 = new HashMap<String, Histogram>();
      HashMap<String, Counter> hashMap1 = new HashMap<String, Counter>();
      HashMap<String, Timer> hashMap2 = new HashMap<String, Timer>();
      // Undeclared exception!
      try { 
        consoleReporter0.report((Map<String, Gauge>) null, hashMap1, hashMap0, hashMap2);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
