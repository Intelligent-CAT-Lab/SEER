100649
Test: public void testSetText() { try { ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } }
Code: public long set(long instant, int value) { long localInstant = iZone.convertUTCToLocal(instant); localInstant = iField.set(localInstant, value); long result = iZone.convertLocalToUTC(localInstant, false); if (get(result) != value) { throw new IllegalFieldValueException(iField.getType(), new Integer(value), "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(localInstant)) + " (" + iZone.getID() + ")"); } return result; }
tensor([[0.0152, 0.0248, 0.0232,  ..., 0.0168, 0.0252, 0.0067],
        [0.0110, 0.0229, 0.0230,  ..., 0.0163, 0.0238, 0.0062],
        [0.0107, 0.0228, 0.0256,  ..., 0.0162, 0.0285, 0.0061],
        ...,
        [0.0105, 0.0290, 0.0270,  ..., 0.0152, 0.0275, 0.0056],
        [0.0142, 0.0207, 0.0293,  ..., 0.0199, 0.0276, 0.0057],
        [0.0115, 0.0187, 0.0203,  ..., 0.0247, 0.0216, 0.0061]])