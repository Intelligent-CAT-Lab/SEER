101015
Test: public void test0442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0442"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean2 = iSOChronology0.equals((java.lang.Object) iSOChronology1); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay(); org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfHalfday(); org.joda.time.Chronology chronology5 = iSOChronology0.withUTC(); org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfHour(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField8 = new org.joda.time.field.OffsetDateTimeField(dateTimeField6, 818); int int9 = offsetDateTimeField8.getMinimumValue(); long long11 = offsetDateTimeField8.roundHalfCeiling(0L); long long14 = offsetDateTimeField8.add((long) 2765586, 17); org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); long long17 = julianChronology15.calculateFirstDayOfYearMillis(7); long long20 = julianChronology15.getYearDifference(0L, (long) 870); int int22 = julianChronology15.getWeekOfWeekyear((long) (short) 100); long long23 = julianChronology15.getAverageMillisPerYear(); org.joda.time.chrono.GJYearOfEraDateTimeField gJYearOfEraDateTimeField24 = new org.joda.time.chrono.GJYearOfEraDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField8, (org.joda.time.chrono.BasicChronology) julianChronology15); long long27 = gJYearOfEraDateTimeField24.addWrapField((long) 699807, 97); org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(1969); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone30 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone29); int int32 = cachedDateTimeZone30.getStandardOffset(0L); org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone30); org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.era(); org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now((org.joda.time.Chronology) iSOChronology33); org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay(); org.joda.time.Chronology chronology37 = null; boolean boolean38 = dateTimeFieldType36.isSupported(chronology37); boolean boolean39 = localDate35.isSupported(dateTimeFieldType36); org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean43 = iSOChronology41.equals((java.lang.Object) iSOChronology42); org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField46 = gJChronology45.yearOfCentury(); org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology45); org.joda.time.DurationField durationField48 = gJChronology45.eras(); org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology45); int[] intArray51 = iSOChronology42.get((org.joda.time.ReadablePartial) localDate49, (-1123200000L)); try { int[] intArray53 = gJYearOfEraDateTimeField24.addWrapField((org.joda.time.ReadablePartial) localDate35, 2761873, intArray51, 2762707); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public long add(long instant, int value) { if (instant >= iCutover) { instant = iGregorianField.add(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { if (iConvertByWeekyear) { int wyear = iGregorianChronology.weekyear().get(instant); if (wyear <= 0) { instant = iGregorianChronology.weekyear().add(instant, -1); } } else { int year = iGregorianChronology.year().get(instant); if (year <= 0) { instant = iGregorianChronology.year().add(instant, -1); } } instant = gregorianToJulian(instant); } } } else { instant = iJulianField.add(instant, value); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; }
tensor([[0.0080, 0.0131, 0.0097,  ..., 0.0089, 0.0082, 0.0035],
        [0.0049, 0.0098, 0.0121,  ..., 0.0073, 0.0071, 0.0030],
        [0.0060, 0.0097, 0.0092,  ..., 0.0098, 0.0072, 0.0023],
        ...,
        [0.0051, 0.0137, 0.0110,  ..., 0.0074, 0.0088, 0.0029],
        [0.0065, 0.0110, 0.0090,  ..., 0.0095, 0.0086, 0.0023],
        [0.0057, 0.0092, 0.0083,  ..., 0.0123, 0.0088, 0.0031]])