18859
Test: public void test152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test152"); com.google.javascript.jscomp.CheckLevel checkLevel3 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType6 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError14 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel3, diagnosticType6, strArray13); com.google.javascript.rhino.Node node15 = jSError14.node; com.google.javascript.jscomp.CheckLevel checkLevel16 = jSError14.level; com.google.javascript.jscomp.CheckLevel checkLevel17 = jSError14.level; com.google.javascript.jscomp.DiagnosticType diagnosticType23 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); boolean boolean25 = diagnosticType23.equals((java.lang.Object) (byte) -1); java.lang.String str26 = diagnosticType23.key; com.google.javascript.jscomp.CheckLevel checkLevel30 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean31 = checkLevel30.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType34 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray35 = null; java.lang.String str36 = diagnosticType34.format(objArray35); java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError40 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel30, diagnosticType34, strArray39); com.google.javascript.jscomp.JSError jSError41 = com.google.javascript.jscomp.JSError.make(diagnosticType23, strArray39); java.lang.String[] strArray42 = null; com.google.javascript.jscomp.JSError jSError43 = com.google.javascript.jscomp.JSError.make("", (int) '4', 1, diagnosticType23, strArray42); java.lang.String str44 = jSError43.sourceName; com.google.javascript.jscomp.CheckLevel checkLevel45 = jSError43.level; boolean boolean46 = jSError14.equals((java.lang.Object) jSError43); com.google.javascript.jscomp.DiagnosticType diagnosticType49 = com.google.javascript.jscomp.DiagnosticType.warning("hi!", "hi!"); com.google.javascript.jscomp.CheckLevel checkLevel50 = diagnosticType49.defaultLevel; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter51 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); lightweightMessageFormatter51.setColorize(true); java.lang.String str54 = jSError14.format(checkLevel50, (com.google.javascript.jscomp.MessageFormatter) lightweightMessageFormatter51); com.google.javascript.jscomp.CheckLevel checkLevel55 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean56 = checkLevel55.isOn(); java.lang.String str57 = lightweightMessageFormatter51.getLevelName(checkLevel55); }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0101, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0080, 0.0071, 0.0050,  ..., 0.0066, 0.0127, 0.0027],
        [0.0087, 0.0070, 0.0034,  ..., 0.0057, 0.0145, 0.0021],
        ...,
        [0.0090, 0.0075, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0094, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0085, 0.0043,  ..., 0.0104, 0.0169, 0.0027]])