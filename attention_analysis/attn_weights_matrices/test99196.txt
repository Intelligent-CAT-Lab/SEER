99196
Test: public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.mockito.exceptions.base.MockitoException mockitoException1 = new org.mockito.exceptions.base.MockitoException(""); java.lang.Throwable[] throwableArray2 = mockitoException1.getSuppressed(); java.lang.StackTraceElement[] stackTraceElementArray3 = mockitoException1.getUnfilteredStackTrace(); java.lang.StackTraceElement[] stackTraceElementArray4 = mockitoException1.getUnfilteredStackTrace(); java.lang.Class<?> wildcardClass5 = mockitoException1.getClass(); org.mockito.internal.util.reflection.GenericMetadataSupport genericMetadataSupport6 = org.mockito.internal.util.reflection.GenericMetadataSupport.inferFrom((java.lang.reflect.Type) wildcardClass5); java.lang.reflect.WildcardType wildcardType7 = null; org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType wildCardBoundedType8 = new org.mockito.internal.util.reflection.GenericMetadataSupport.WildCardBoundedType(wildcardType7); org.mockito.exceptions.base.MockitoException mockitoException10 = new org.mockito.exceptions.base.MockitoException(""); boolean boolean11 = wildCardBoundedType8.equals((java.lang.Object) mockitoException10); java.lang.reflect.WildcardType wildcardType12 = wildCardBoundedType8.wildCard(); java.lang.reflect.Type[] typeArray13 = wildCardBoundedType8.interfaceBounds(); java.lang.reflect.WildcardType wildcardType14 = wildCardBoundedType8.wildCard(); genericMetadataSupport6.registerTypeVariablesOn((java.lang.reflect.Type) wildCardBoundedType8); try { java.lang.String str16 = wildCardBoundedType8.getTypeName(); } catch (java.lang.NullPointerException e) { } }
Code: protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType; TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters(); Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument)); } else { contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } }
tensor([[0.0222, 0.0096, 0.0192,  ..., 0.0045, 0.0045, 0.0045],
        [0.0240, 0.0092, 0.0232,  ..., 0.0058, 0.0058, 0.0058],
        [0.0216, 0.0074, 0.0192,  ..., 0.0064, 0.0064, 0.0064],
        ...,
        [0.0221, 0.0091, 0.0195,  ..., 0.0054, 0.0054, 0.0054],
        [0.0221, 0.0091, 0.0195,  ..., 0.0054, 0.0054, 0.0054],
        [0.0221, 0.0091, 0.0195,  ..., 0.0054, 0.0054, 0.0054]])