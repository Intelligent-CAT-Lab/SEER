61559
Test: public void test0512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0512"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote2); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar('\t'); java.lang.String str6 = cSVFormat5.toString(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('\037'); boolean boolean9 = cSVFormat8.getSkipHeaderRecord(); java.lang.String str10 = cSVFormat8.toString(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withNullString("hi!"); cSVFormat13.validate(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withCommentStart('\037'); java.lang.String str19 = cSVFormat13.toString(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withRecordSeparator(' '); java.lang.Character char24 = cSVFormat21.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat21.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withQuoteChar((java.lang.Character) ','); boolean boolean30 = cSVFormat27.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat32.validate(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withIgnoreEmptyLines(true); java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat31.withHeader(strArray38); java.lang.String str41 = cSVFormat27.format((java.lang.Object[]) strArray38); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat21.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withNullString("hi!"); cSVFormat45.validate(); java.lang.Object obj47 = null; boolean boolean48 = cSVFormat45.equals(obj47); org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat49.validate(); org.apache.commons.csv.Quote quote51 = null; org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withQuotePolicy(quote51); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat52.withQuoteChar('\t'); java.lang.Character char55 = cSVFormat54.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat60.validate(); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withIgnoreEmptyLines(true); java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat60.withHeader(strArray66); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat59.withHeader(strArray66); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat45.withHeader(strArray66); java.lang.String str70 = cSVFormat21.format((java.lang.Object[]) strArray66); try { java.lang.String str71 = cSVFormat8.format((java.lang.Object[]) strArray66); } catch (java.lang.IllegalStateException e) { } }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (true) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (getIgnoreSurroundingSpaces()) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0217, 0.0275, 0.0144,  ..., 0.0457, 0.0366, 0.0244],
        [0.0227, 0.0264, 0.0145,  ..., 0.0447, 0.0379, 0.0245],
        [0.0175, 0.0319, 0.0133,  ..., 0.0398, 0.0302, 0.0246],
        ...,
        [0.0209, 0.0325, 0.0169,  ..., 0.0388, 0.0331, 0.0229],
        [0.0162, 0.0284, 0.0131,  ..., 0.0421, 0.0241, 0.0169],
        [0.0219, 0.0307, 0.0145,  ..., 0.0431, 0.0269, 0.0241]])