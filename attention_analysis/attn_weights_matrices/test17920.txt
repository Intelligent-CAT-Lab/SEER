17920
Test: public void testFunctionTypeRelationships() { FunctionType dateMethodEmpty = new FunctionBuilder(registry) .withParamsNode(registry.createParameters()) .withTypeOfThis(DATE_TYPE).build(); FunctionType dateMethodWithParam = new FunctionBuilder(registry) .withParamsNode(registry.createOptionalParameters(NUMBER_TYPE)) .withTypeOfThis(DATE_TYPE).build(); FunctionType dateMethodWithReturn = new FunctionBuilder(registry) .withReturnType(NUMBER_TYPE) .withTypeOfThis(DATE_TYPE).build(); FunctionType stringMethodEmpty = new FunctionBuilder(registry) .withParamsNode(registry.createParameters()) .withTypeOfThis(STRING_OBJECT_TYPE).build(); FunctionType stringMethodWithParam = new FunctionBuilder(registry) .withParamsNode(registry.createOptionalParameters(NUMBER_TYPE)) .withTypeOfThis(STRING_OBJECT_TYPE).build(); FunctionType stringMethodWithReturn = new FunctionBuilder(registry) .withReturnType(NUMBER_TYPE) .withTypeOfThis(STRING_OBJECT_TYPE).build(); List<FunctionType> allFunctions = Lists.newArrayList( dateMethodEmpty, dateMethodWithParam, dateMethodWithReturn, stringMethodEmpty, stringMethodWithParam, stringMethodWithReturn); for (int i = 0; i < allFunctions.size(); i++) { for (int j = 0; j < allFunctions.size(); j++) { FunctionType typeA = allFunctions.get(i); FunctionType typeB = allFunctions.get(j); if (i == j) { } else { } } } }
Code: public boolean isSubtype(JSType other) { if (!(other instanceof ArrowType)) { return false; } ArrowType that = (ArrowType) other; if (!this.returnType.isSubtype(that.returnType)) { return false; } Node thisParam = parameters.getFirstChild(); Node thatParam = that.parameters.getFirstChild(); while (thisParam != null && thatParam != null) { JSType thisParamType = thisParam.getJSType(); JSType thatParamType = thatParam.getJSType(); if (thisParamType != null) { if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) { return false; } } boolean thisIsVarArgs = thisParam.isVarArgs(); boolean thatIsVarArgs = thatParam.isVarArgs(); if (!thisIsVarArgs) { thisParam = thisParam.getNext(); } if (!thatIsVarArgs) { thatParam = thatParam.getNext(); } if (thisIsVarArgs && thatIsVarArgs) { thisParam = null; thatParam = null; } } return true; }
tensor([[0.0070, 0.0171, 0.0061,  ..., 0.0078, 0.0048, 0.0031],
        [0.0048, 0.0251, 0.0036,  ..., 0.0078, 0.0040, 0.0022],
        [0.0053, 0.0208, 0.0050,  ..., 0.0075, 0.0049, 0.0022],
        ...,
        [0.0044, 0.0214, 0.0055,  ..., 0.0063, 0.0035, 0.0025],
        [0.0056, 0.0275, 0.0049,  ..., 0.0073, 0.0053, 0.0022],
        [0.0049, 0.0176, 0.0052,  ..., 0.0105, 0.0066, 0.0026]])