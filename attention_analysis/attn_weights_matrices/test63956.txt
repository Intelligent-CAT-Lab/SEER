63956
Test: public void testSingleMatchFilteringWithPathRawBinary() throws Exception { StringWriter w = new StringWriter(); FilteringGeneratorDelegate gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w), new NameMatchFilter("array"), true, false ); gen.writeStartObject(); gen.writeFieldName("header"); gen.writeStartArray(); gen.writeBinary(new byte[] { 1 }); gen.writeRawValue(new SerializedString("1")); gen.writeRawValue("2"); gen.writeEndArray(); gen.writeFieldName("array"); gen.writeStartArray(); gen.writeBinary(new byte[] { 1 }); gen.writeNumber((short) 1); gen.writeNumber((int) 2); gen.writeNumber((long) 3); gen.writeNumber(BigInteger.valueOf(4)); gen.writeRaw(" "); gen.writeNumber(new BigDecimal("5.0")); gen.writeRaw(new SerializedString(" ")); gen.writeNumber(6.25f); gen.writeNumber(7.5); gen.writeEndArray(); gen.writeArrayFieldStart("extra"); gen.writeNumber((short) 1); gen.writeNumber((int) 2); gen.writeNumber((long) 3); gen.writeNumber(BigInteger.valueOf(4)); gen.writeNumber(new BigDecimal("5.0")); gen.writeNumber(6.25f); gen.writeNumber(7.5); gen.writeEndArray(); gen.writeEndObject(); gen.close(); }
Code: public void writeRaw(String text, int offset, int len) throws IOException { final char[] buf = _charBuffer; while (len > 0) { int len2 = Math.min(buf.length, len); text.getChars(offset, offset+len2, buf, 0); writeRaw(buf, 0, len2); offset += len2; len -= len2; } }
tensor([[0.0175, 0.0144, 0.0112,  ..., 0.0263, 0.0079, 0.0079],
        [0.0135, 0.0125, 0.0123,  ..., 0.0227, 0.0081, 0.0081],
        [0.0137, 0.0104, 0.0127,  ..., 0.0226, 0.0055, 0.0055],
        ...,
        [0.0140, 0.0125, 0.0128,  ..., 0.0232, 0.0085, 0.0085],
        [0.0126, 0.0119, 0.0156,  ..., 0.0248, 0.0072, 0.0072],
        [0.0126, 0.0119, 0.0156,  ..., 0.0248, 0.0072, 0.0072]])