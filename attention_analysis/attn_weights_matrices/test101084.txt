101084
Test: public void test0427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0427"); org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField2 = gJChronology1.yearOfCentury(); org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology1); org.joda.time.DurationField durationField4 = gJChronology1.eras(); org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology1); org.joda.time.ReadablePeriod readablePeriod6 = null; org.joda.time.LocalDate localDate8 = localDate5.withPeriodAdded(readablePeriod6, (-28800000)); org.joda.time.Interval interval9 = localDate5.toInterval(); long long10 = interval9.getStartMillis(); org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField12 = iSOChronology11.yearOfEra(); org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology11); org.joda.time.DateTimeField dateTimeField14 = iSOChronology11.minuteOfHour(); org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField16 = gJChronology15.yearOfCentury(); org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology15); int int18 = dateTime17.getEra(); int int19 = dateTime17.getMillisOfSecond(); org.joda.time.DateTime.Property property20 = dateTime17.year(); org.joda.time.ReadableDuration readableDuration21 = null; org.joda.time.DateTime dateTime22 = dateTime17.plus(readableDuration21); int int23 = dateTime22.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay(); int int25 = dateTime22.get(dateTimeFieldType24); org.joda.time.field.DelegatedDateTimeField delegatedDateTimeField26 = new org.joda.time.field.DelegatedDateTimeField(dateTimeField14, dateTimeFieldType24); java.util.Locale locale27 = null; int int28 = delegatedDateTimeField26.getMaximumShortTextLength(locale27); long long31 = delegatedDateTimeField26.getDifferenceAsLong((long) (byte) 1, (long) (-25200000)); boolean boolean32 = interval9.equals((java.lang.Object) delegatedDateTimeField26); org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology35 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField36 = gJChronology35.yearOfCentury(); org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology35); int int38 = dateTime37.getEra(); int int39 = dateTime37.getYear(); boolean boolean40 = instant34.isBefore((org.joda.time.ReadableInstant) dateTime37); org.joda.time.LocalDate localDate41 = dateTime37.toLocalDate(); org.joda.time.LocalDate localDate43 = localDate41.plusDays(2757764); int int44 = localDate43.getDayOfMonth(); java.lang.String str46 = localDate43.toString("818"); org.joda.time.chrono.JulianChronology julianChronology48 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int50 = julianChronology48.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology48); int int52 = julianChronology48.getMaxYear(); org.joda.time.DateTimeField dateTimeField53 = julianChronology48.centuryOfEra(); org.joda.time.chrono.BasicYearDateTimeField basicYearDateTimeField54 = new org.joda.time.chrono.BasicYearDateTimeField((org.joda.time.chrono.BasicChronology) julianChronology48); long long57 = basicYearDateTimeField54.addWrapField((long) 2759289, 182); org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField60 = gJChronology59.yearOfCentury(); org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology59); org.joda.time.DurationField durationField62 = gJChronology59.eras(); org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology59); org.joda.time.ReadablePeriod readablePeriod64 = null; org.joda.time.LocalDate localDate66 = localDate63.withPeriodAdded(readablePeriod64, (-28800000)); org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology68 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean69 = iSOChronology67.equals((java.lang.Object) iSOChronology68); org.joda.time.chrono.GJChronology gJChronology71 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField72 = gJChronology71.yearOfCentury(); org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology71); org.joda.time.DurationField durationField74 = gJChronology71.eras(); org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology71); int[] intArray77 = iSOChronology68.get((org.joda.time.ReadablePartial) localDate75, (-1123200000L)); int int78 = basicYearDateTimeField54.getMaximumValue((org.joda.time.ReadablePartial) localDate66, intArray77); java.util.Locale locale80 = null; try { int[] intArray81 = delegatedDateTimeField26.set((org.joda.time.ReadablePartial) localDate43, 7, intArray77, "669", locale80); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])