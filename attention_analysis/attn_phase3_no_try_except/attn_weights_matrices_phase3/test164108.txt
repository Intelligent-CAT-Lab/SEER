164108
Test: public void test2947() throws Throwable { LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(true); LinkedBlockingDeque<Object> linkedBlockingDeque1 = new LinkedBlockingDeque<Object>(); Predicate<Integer> predicate0 = Predicate.isEqual((Object) linkedBlockingDeque0); boolean boolean0 = linkedBlockingDeque0.removeIf(predicate0); boolean boolean1 = linkedBlockingDeque1.contains((Object) null); Integer integer0 = new Integer((-2485)); Stream<Object> stream0 = linkedBlockingDeque1.stream(); boolean boolean2 = linkedBlockingDeque0.offer(integer0); TimeUnit timeUnit0 = TimeUnit.NANOSECONDS; Object object0 = linkedBlockingDeque1.pollLast(1L, timeUnit0); Integer integer1 = new Integer((-2485)); ChronoUnit chronoUnit0 = ChronoUnit.MICROS; Duration duration0 = chronoUnit0.getDuration(); boolean boolean3 = linkedBlockingDeque1.offerLast((Object) integer1, duration0); Duration duration1 = duration0.plus((-3932L), (TemporalUnit) chronoUnit0); LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(); LinkedBlockingDeque<String> linkedBlockingDeque3 = new LinkedBlockingDeque<String>(linkedBlockingDeque2); linkedBlockingDeque3.putLast(""); TimeUnit timeUnit1 = TimeUnit.MICROSECONDS; boolean boolean4 = linkedBlockingDeque2.offerFirst("org.apache.commons.pool2.impl.LinkedBlockingDeque", 3574L, timeUnit1); boolean boolean5 = linkedBlockingDeque1.removeFirstOccurrence(integer1); boolean boolean6 = linkedBlockingDeque1.offerFirst((Object) timeUnit1, duration0); Object object1 = linkedBlockingDeque1.pollLast(3574L, timeUnit0); linkedBlockingDeque1.putFirst(timeUnit0); Object object2 = linkedBlockingDeque1.removeFirst(); Integer integer2 = new Integer((-2485)); linkedBlockingDeque0.addLast(integer2); String string0 = linkedBlockingDeque2.toString(); boolean boolean7 = linkedBlockingDeque1.hasTakeWaiters(); boolean boolean8 = linkedBlockingDeque2.offer("&X-'l8S3XTk<f-J5=M$", duration0); String string1 = linkedBlockingDeque3.take(); }
Code: public E take() throws InterruptedException { return takeFirst(); }
[[0.08450632 0.11913636 0.11723647 0.19693184 0.11723647 0.1171706
 0.09355718 0.11723647 0.03698825]
[0.07681777 0.12245089 0.11316563 0.205595   0.11316563 0.14414486
 0.08131739 0.11316563 0.03017726]
[0.06899481 0.13400173 0.1155943  0.22307071 0.1155943  0.10695126
 0.08367646 0.1155943  0.03652215]
[0.05820428 0.09196787 0.10081194 0.28224662 0.10081194 0.14201954
 0.09546329 0.10081194 0.02766256]
[0.06899481 0.13400173 0.1155943  0.22307071 0.1155943  0.10695126
 0.08367646 0.1155943  0.03652215]
[0.08803663 0.11760708 0.11530833 0.15560411 0.11530833 0.14159769
 0.10131131 0.11530833 0.04991824]
[0.06016541 0.11575676 0.12044767 0.22661658 0.12044767 0.11658613
 0.08752908 0.12044767 0.03200304]
[0.06899481 0.13400173 0.1155943  0.22307071 0.1155943  0.10695126
 0.08367646 0.1155943  0.03652215]
[0.05641918 0.08457275 0.10441478 0.23713177 0.10441478 0.15132251
 0.1250507  0.10441478 0.0322588 ]]