45545
Test: public void test4724() throws Throwable { DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder(); DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfYear(44); HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(); HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0); DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap1); DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneShortName(); DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(44, 44); DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay(); DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType0); DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H"); DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0); DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1]; DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0); GJChronology gJChronology0 = GJChronology.getInstance(); StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0); DateTimeZone dateTimeZone0 = gJChronology0.getZone(); ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0); Chronology chronology0 = zonedChronology0.withUTC(); DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0); dateTimeParserArray0[0] = dateTimeParser0; DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.append(dateTimePrinter0, dateTimeParserArray0); DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder4.toFormatter(); DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0); boolean boolean0 = dateTimeFormatterBuilder5.canBuildParser(); DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder3.appendDayOfYear(5); }
Code: public DateTimeFormatterBuilder appendDayOfYear(int minDigits) { return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3); }
[[0.0698197  0.09687142 0.09687142 0.09687142 0.10712565 0.07857197
 0.09687142 0.09687142 0.22730796 0.03281758]
[0.06274673 0.10142803 0.10142803 0.10142803 0.11771128 0.07663836
 0.10142803 0.10142803 0.19707006 0.0386934 ]
[0.06274673 0.10142803 0.10142803 0.10142803 0.11771128 0.07663836
 0.10142803 0.10142803 0.19707006 0.0386934 ]
[0.06274673 0.10142803 0.10142803 0.10142803 0.11771128 0.07663836
 0.10142803 0.10142803 0.19707006 0.0386934 ]
[0.08160464 0.09993955 0.09993955 0.09993955 0.14682254 0.09187476
 0.09993955 0.09993955 0.13072315 0.04927707]
[0.05120113 0.0944068  0.0944068  0.0944068  0.11578437 0.07164448
 0.0944068  0.0944068  0.25840136 0.03093466]
[0.06274673 0.10142803 0.10142803 0.10142803 0.11771128 0.07663836
 0.10142803 0.10142803 0.19707006 0.0386934 ]
[0.06274673 0.10142803 0.10142803 0.10142803 0.11771128 0.07663836
 0.10142803 0.10142803 0.19707006 0.0386934 ]
[0.03360436 0.10096095 0.10096095 0.10096095 0.12494497 0.07279149
 0.10096095 0.10096095 0.24537206 0.01848231]
[0.04849779 0.08428137 0.08428137 0.08428137 0.16168681 0.11663075
 0.08428137 0.08428137 0.2187694  0.0330084 ]]