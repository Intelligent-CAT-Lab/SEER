15298
Test: public void test452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test452"); org.apache.commons.cli2.commandline.DefaultingCommandLine defaultingCommandLine0 = new org.apache.commons.cli2.commandline.DefaultingCommandLine(); java.util.Iterator iterator1 = defaultingCommandLine0.commandLines(); org.apache.commons.cli2.option.PropertyOption propertyOption5 = new org.apache.commons.cli2.option.PropertyOption("", "hi!", (int) 'a'); org.apache.commons.cli2.WriteableCommandLine writeableCommandLine6 = null; propertyOption5.defaults(writeableCommandLine6); java.util.prefs.Preferences preferences8 = null; org.apache.commons.cli2.commandline.PreferencesCommandLine preferencesCommandLine10 = new org.apache.commons.cli2.commandline.PreferencesCommandLine((org.apache.commons.cli2.Option) propertyOption5, preferences8, 'a'); org.apache.commons.cli2.Option option11 = propertyOption5.getParent(); java.lang.String str12 = propertyOption5.getPreferredName(); org.apache.commons.cli2.option.PropertyOption propertyOption16 = new org.apache.commons.cli2.option.PropertyOption("", "hi!", (int) 'a'); java.util.List list17 = null; org.apache.commons.cli2.commandline.WriteableCommandLineImpl writeableCommandLineImpl18 = new org.apache.commons.cli2.commandline.WriteableCommandLineImpl((org.apache.commons.cli2.Option) propertyOption16, list17); org.apache.commons.cli2.option.PropertyOption propertyOption22 = new org.apache.commons.cli2.option.PropertyOption("", "hi!", (int) 'a'); java.util.List list23 = null; org.apache.commons.cli2.commandline.WriteableCommandLineImpl writeableCommandLineImpl24 = new org.apache.commons.cli2.commandline.WriteableCommandLineImpl((org.apache.commons.cli2.Option) propertyOption22, list23); org.apache.commons.cli2.option.PropertyOption propertyOption28 = new org.apache.commons.cli2.option.PropertyOption("", "hi!", (int) 'a'); java.lang.String str29 = propertyOption28.getPreferredName(); writeableCommandLineImpl24.addOption((org.apache.commons.cli2.Option) propertyOption28); java.lang.Boolean boolean32 = writeableCommandLineImpl18.getSwitch((org.apache.commons.cli2.Option) propertyOption28, (java.lang.Boolean) true); org.apache.commons.cli2.option.PropertyOption propertyOption36 = new org.apache.commons.cli2.option.PropertyOption("", "hi!", (int) 'a'); java.lang.Object obj37 = null; boolean boolean38 = propertyOption36.equals(obj37); java.util.List list39 = writeableCommandLineImpl18.getValues((org.apache.commons.cli2.Option) propertyOption36); java.util.List list41 = writeableCommandLineImpl18.getValues("<property>=<value>"); boolean boolean43 = propertyOption5.canProcess((org.apache.commons.cli2.WriteableCommandLine) writeableCommandLineImpl18, "Passes properties and values to the application"); java.lang.Boolean boolean45 = defaultingCommandLine0.getSwitch((org.apache.commons.cli2.Option) propertyOption5, (java.lang.Boolean) false); java.util.Properties properties46 = null; org.apache.commons.cli2.commandline.PropertiesCommandLine propertiesCommandLine48 = new org.apache.commons.cli2.commandline.PropertiesCommandLine((org.apache.commons.cli2.Option) propertyOption5, properties46, '\000'); org.apache.commons.cli2.option.PropertyOption propertyOption52 = new org.apache.commons.cli2.option.PropertyOption("", "hi!", (int) 'a'); java.lang.String str53 = propertyOption52.getPreferredName(); org.apache.commons.cli2.WriteableCommandLine writeableCommandLine54 = null; boolean boolean56 = propertyOption52.canProcess(writeableCommandLine54, "hi!"); java.lang.String str57 = propertyOption52.toString(); try { java.lang.Boolean boolean59 = propertiesCommandLine48.getSwitch((org.apache.commons.cli2.Option) propertyOption52, (java.lang.Boolean) true); } catch (java.lang.NullPointerException e) { } }
Code: public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } Option parent = option.getParent(); while (parent != null && !options.contains(parent)) { options.add(parent); parent = parent.getParent(); } }
tensor([[0.0206, 0.0166, 0.0663,  ..., 0.0497, 0.0087, 0.0087],
        [0.0151, 0.0131, 0.0968,  ..., 0.0666, 0.0079, 0.0079],
        [0.0145, 0.0144, 0.0798,  ..., 0.0517, 0.0077, 0.0077],
        ...,
        [0.0193, 0.0157, 0.0691,  ..., 0.0520, 0.0083, 0.0083],
        [0.0141, 0.0128, 0.0646,  ..., 0.0448, 0.0074, 0.0074],
        [0.0141, 0.0128, 0.0646,  ..., 0.0448, 0.0074, 0.0074]])