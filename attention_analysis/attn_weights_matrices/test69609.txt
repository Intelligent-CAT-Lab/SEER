69609
Test: public void test08() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test08"); org.jsoup.helper.W3CDom w3CDom0 = new org.jsoup.helper.W3CDom(); org.jsoup.nodes.Document document3 = org.jsoup.parser.Parser.parse("hi!", ""); org.jsoup.nodes.Document.OutputSettings outputSettings4 = document3.outputSettings(); java.util.List<org.jsoup.nodes.Node> nodeList5 = document3.siblingNodes(); org.jsoup.nodes.Document.QuirksMode quirksMode6 = document3.quirksMode(); org.w3c.dom.Document document7 = w3CDom0.fromJsoup(document3); org.jsoup.helper.W3CDom.W3CBuilder w3CBuilder8 = new org.jsoup.helper.W3CDom.W3CBuilder(document7); org.jsoup.select.Evaluator.MatchText matchText9 = new org.jsoup.select.Evaluator.MatchText(); org.jsoup.nodes.Element element10 = null; org.jsoup.nodes.Document document13 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("", ""); org.jsoup.nodes.Document document16 = org.jsoup.parser.Parser.parse("hi!", ""); org.jsoup.nodes.Element element19 = document16.attr("", true); java.lang.String str20 = document16.nodeName(); org.jsoup.nodes.Element element21 = document13.prependChild((org.jsoup.nodes.Node) document16); java.util.List<org.jsoup.nodes.Node> nodeList22 = document16.childNodes(); java.lang.String str23 = document16.nodeName(); org.jsoup.nodes.Element element25 = document16.getElementById("hi!"); java.lang.String[] strArray56 = new java.lang.String[] { "SYSTEM", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "", "&amp;lt;hi!&amp;gt;&amp;lt;/hi!&amp;gt;", "<?#document?>", "#data", "&amp;lt;hi!&amp;gt;&amp;lt;/hi!&amp;gt;", "SYSTEM", "*", "#document", ":matchesOwn(null)", "\n<!---->", "#data", ":eq(52)", "\n<!---->", ":matchesOwn(null)", ":empty", "<?#document?>", "&lt;?#document?&gt;", ":eq(52)", "[<hi!></hi!>$=hi!]", ":contains()", "hi!=\"hi!\"", "*", "org.jsoup.SerializationException: *", "", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "", "<??>", "<#root >\n <html>\n <head></head>\n <body>\n hi!\n </body>\n </html>\n</#root>\n<html>\n <head></head>\n <body></body>\n</html>" }; java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56); org.jsoup.nodes.Element element59 = document16.classNames((java.util.Set<java.lang.String>) strSet57); java.lang.StringBuilder stringBuilder60 = org.jsoup.helper.StringUtil.stringBuilder(); java.lang.Appendable appendable61 = document16.html((java.lang.Appendable) stringBuilder60); boolean boolean62 = matchText9.matches(element10, (org.jsoup.nodes.Element) document16); try { w3CBuilder8.head((org.jsoup.nodes.Node) document16, 100); } catch (java.lang.IllegalArgumentException e) { } }
Code: public void head(org.jsoup.nodes.Node source, int depth){if (source instanceof org.jsoup.nodes.Element) {org.jsoup.nodes.Element sourceEl = (org.jsoup.nodes.Element) source;String prefix = updateNamespaces(sourceEl);String namespace = namespaces.get(prefix);Element el = doc.createElementNS(namespace, sourceEl.tagName());copyAttributes(sourceEl, el);if (dest == null) { doc.appendChild(el);} else {;}dest = el; } else if (source instanceof org.jsoup.nodes.TextNode) {org.jsoup.nodes.TextNode sourceText = (org.jsoup.nodes.TextNode) source;Text text = doc.createTextNode(sourceText.getWholeText());;} else if (source instanceof org.jsoup.nodes.Comment) {org.jsoup.nodes.Comment sourceComment = (org.jsoup.nodes.Comment) source;Comment comment = doc.createComment(sourceComment.getData());dest.appendChild(comment);} else if (source instanceof org.jsoup.nodes.DataNode) {org.jsoup.nodes.DataNode sourceData = (org.jsoup.nodes.DataNode) source;Text node = doc.createTextNode(sourceData.getWholeData());dest.appendChild(node);} else {}}
tensor([[0.0100, 0.0084, 0.0154,  ..., 0.0246, 0.0130, 0.0306],
        [0.0075, 0.0072, 0.0120,  ..., 0.0240, 0.0130, 0.0273],
        [0.0105, 0.0086, 0.0127,  ..., 0.0258, 0.0133, 0.0254],
        ...,
        [0.0104, 0.0062, 0.0142,  ..., 0.0199, 0.0094, 0.0255],
        [0.0079, 0.0062, 0.0134,  ..., 0.0237, 0.0137, 0.0263],
        [0.0108, 0.0096, 0.0160,  ..., 0.0193, 0.0129, 0.0244]])