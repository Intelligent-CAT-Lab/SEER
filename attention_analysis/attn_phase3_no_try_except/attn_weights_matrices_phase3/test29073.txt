29073
Test: public void test30() throws Throwable { Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.MINUS_X; Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer()); Line line0 = new Line(vector2D_Unit0, 0.0, precision_DoubleEquivalence0); Segment segment0 = new Segment(line0, vector2D_Unit0, vector2D_Unit0); Precision.DoubleEquivalence precision_DoubleEquivalence1 = segment0.getPrecision(); Line line1 = mock(Line.class, new ViolatedAssumptionAnswer()); doReturn(precision_DoubleEquivalence1).when(line1).getPrecision(); doReturn(Double.NaN, Double.NaN).when(line1).abscissa(any(org.apache.commons.geometry.euclidean.twod.Vector2D.class)); Segment segment1 = new Segment(line1, vector2D_Unit0, vector2D_Unit0); // Undeclared exception!  segment1.getInterval();   }
Code: public Interval getInterval() { return getSubspaceRegion(); }
[[0.13303334 0.14692613 0.18453074 0.15541081 0.14369449 0.18453074
 0.05187378]
[0.10996398 0.16168226 0.17687605 0.17293979 0.15777929 0.17687604
 0.04388262]
[0.10898884 0.17686594 0.18451609 0.15835671 0.13190143 0.1845161
 0.05485491]
[0.12244447 0.15170042 0.16605422 0.18420541 0.14257145 0.16605422
 0.06696977]
[0.09464449 0.1565207  0.1995719  0.16272718 0.14123675 0.19957191
 0.04572713]
[0.10898884 0.17686594 0.18451609 0.15835671 0.13190143 0.1845161
 0.05485491]
[0.08461349 0.18204592 0.1632579  0.18845566 0.17641684 0.16325788
 0.04195227]]