101214
Test: public void test0304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0304"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean2 = iSOChronology0.equals((java.lang.Object) iSOChronology1); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay(); org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfHalfday(); org.joda.time.Chronology chronology5 = iSOChronology0.withUTC(); org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfHour(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField8 = new org.joda.time.field.OffsetDateTimeField(dateTimeField6, 818); int int9 = offsetDateTimeField8.getMinimumValue(); long long11 = offsetDateTimeField8.roundHalfCeiling(0L); long long14 = offsetDateTimeField8.add((long) 2765586, 17); org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); long long17 = julianChronology15.calculateFirstDayOfYearMillis(7); long long20 = julianChronology15.getYearDifference(0L, (long) 870); int int22 = julianChronology15.getWeekOfWeekyear((long) (short) 100); long long23 = julianChronology15.getAverageMillisPerYear(); org.joda.time.chrono.GJYearOfEraDateTimeField gJYearOfEraDateTimeField24 = new org.joda.time.chrono.GJYearOfEraDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField8, (org.joda.time.chrono.BasicChronology) julianChronology15); org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean27 = iSOChronology25.equals((java.lang.Object) iSOChronology26); org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField30 = gJChronology29.yearOfCentury(); org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology29); org.joda.time.DurationField durationField32 = gJChronology29.eras(); org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology29); int[] intArray35 = iSOChronology26.get((org.joda.time.ReadablePartial) localDate33, (-1123200000L)); org.joda.time.LocalDate localDate37 = localDate33.minusDays(100); java.util.Locale locale38 = null; try { java.lang.String str39 = offsetDateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDate37, locale38); } catch (java.lang.IllegalArgumentException e) { } }
Code: public long add(long instant, int value) { if (instant >= iCutover) { instant = iGregorianField.add(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant); } } } else { instant = iJulianField.add(instant, value); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; }
tensor([[0.0123, 0.0201, 0.0151,  ..., 0.0137, 0.0126, 0.0055],
        [0.0082, 0.0163, 0.0198,  ..., 0.0120, 0.0118, 0.0049],
        [0.0095, 0.0154, 0.0148,  ..., 0.0158, 0.0115, 0.0037],
        ...,
        [0.0082, 0.0217, 0.0175,  ..., 0.0117, 0.0139, 0.0045],
        [0.0101, 0.0171, 0.0141,  ..., 0.0148, 0.0134, 0.0036],
        [0.0091, 0.0148, 0.0133,  ..., 0.0197, 0.0141, 0.0049]])