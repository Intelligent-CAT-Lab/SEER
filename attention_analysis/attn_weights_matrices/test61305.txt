61305
Test: public void test0939() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0939"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote2); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar('\t'); java.lang.String str6 = cSVFormat5.toString(); boolean boolean7 = cSVFormat5.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat8.validate(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat10.validate(); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray17 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str18 = cSVFormat8.format(objArray17); boolean boolean19 = cSVFormat8.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat8.withCommentStart((java.lang.Character) ','); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withIgnoreSurroundingSpaces(false); boolean boolean24 = cSVFormat21.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\t'); java.lang.String[] strArray27 = cSVFormat26.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withNullString("hi!"); cSVFormat30.validate(); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat30.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat30.withCommentStart('\037'); java.lang.String str36 = cSVFormat30.toString(); org.apache.commons.csv.CSVFormat cSVFormat38 = cSVFormat30.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withRecordSeparator(' '); java.lang.Character char41 = cSVFormat38.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat38.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat44.withQuoteChar((java.lang.Character) ','); boolean boolean47 = cSVFormat44.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat49.validate(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withIgnoreEmptyLines(true); java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat49.withHeader(strArray55); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat48.withHeader(strArray55); java.lang.String str58 = cSVFormat44.format((java.lang.Object[]) strArray55); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat38.withHeader(strArray55); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat26.withHeader(strArray55); java.lang.String str61 = cSVFormat21.format((java.lang.Object[]) strArray55); try { java.lang.String str62 = cSVFormat5.format((java.lang.Object[]) strArray55); } catch (java.lang.IllegalStateException e) { } }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (false) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0231, 0.0293, 0.0153,  ..., 0.0487, 0.0389, 0.0259],
        [0.0243, 0.0285, 0.0155,  ..., 0.0477, 0.0404, 0.0262],
        [0.0192, 0.0362, 0.0145,  ..., 0.0437, 0.0326, 0.0267],
        ...,
        [0.0234, 0.0366, 0.0186,  ..., 0.0426, 0.0360, 0.0251],
        [0.0179, 0.0319, 0.0141,  ..., 0.0455, 0.0258, 0.0184],
        [0.0238, 0.0338, 0.0157,  ..., 0.0468, 0.0290, 0.0262]])