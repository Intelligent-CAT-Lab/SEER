101284
Test: public void test026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test026"); org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.ReadableInterval readableInterval1 = null; org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1); org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1); org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury(); org.joda.time.DurationField durationField5 = chronology3.millis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5); org.joda.time.ReadableInterval readableInterval7 = null; org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7); org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7); org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury(); org.joda.time.DurationField durationField11 = chronology9.millis(); org.joda.time.DurationField durationField12 = chronology9.centuries(); org.joda.time.Chronology chronology13 = chronology9.withUTC(); org.joda.time.DurationField durationField14 = chronology13.halfdays(); org.joda.time.DateTimeField dateTimeField15 = chronology13.yearOfEra(); org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.field.DividedDateTimeField dividedDateTimeField18 = new org.joda.time.field.DividedDateTimeField(dateTimeField15, dateTimeFieldType16, 10); long long21 = dividedDateTimeField18.set(0L, 100); org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.ReadableInterval readableInterval23 = null; org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23); org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23); org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury(); org.joda.time.DurationField durationField27 = chronology25.millis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField28 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField27); org.joda.time.field.RemainderDateTimeField remainderDateTimeField29 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField18, dateTimeFieldType22); org.joda.time.ReadablePartial readablePartial30 = null; java.util.Locale locale32 = null; java.lang.String str33 = dividedDateTimeField18.getAsShortText(readablePartial30, 29227899, locale32); org.joda.time.field.OffsetDateTimeField offsetDateTimeField35 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField18, 29227899); org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.hourOfDay(); java.lang.String str37 = dateTimeFieldType36.getName(); org.joda.time.ReadableInterval readableInterval39 = null; org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39); org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39); org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury(); org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldType36, (int) (short) 0, chronology41); org.joda.time.ReadableInterval readableInterval44 = null; org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44); org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval44); org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury(); org.joda.time.DurationField durationField48 = chronology46.millis(); org.joda.time.DateTimeField dateTimeField49 = chronology46.centuryOfEra(); org.joda.time.DateTimeField dateTimeField50 = chronology46.clockhourOfDay(); org.joda.time.ReadablePartial readablePartial51 = null; int[] intArray58 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 }; int int59 = dateTimeField50.getMaximumValue(readablePartial51, intArray58); int int60 = dividedDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) partial43, intArray58); org.joda.time.ReadableInterval readableInterval62 = null; org.joda.time.ReadableInterval readableInterval63 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval62); org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval62); org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfCentury(); org.joda.time.DurationField durationField66 = chronology64.millis(); org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfWeek(); org.joda.time.ReadableInterval readableInterval68 = null; org.joda.time.ReadableInterval readableInterval69 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval68); org.joda.time.Chronology chronology70 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval68); org.joda.time.DateTimeField dateTimeField71 = chronology70.yearOfCentury(); org.joda.time.DateTimeField dateTimeField72 = chronology70.minuteOfDay(); org.joda.time.ReadableInterval readableInterval73 = null; org.joda.time.ReadableInterval readableInterval74 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval73); org.joda.time.ReadableInterval readableInterval75 = null; boolean boolean76 = readableInterval74.contains(readableInterval75); org.joda.time.PeriodType periodType77 = null; org.joda.time.Period period78 = readableInterval74.toPeriod(periodType77); int[] intArray80 = chronology70.get((org.joda.time.ReadablePeriod) period78, (-210866846400000L)); int[] intArray83 = chronology64.get((org.joda.time.ReadablePeriod) period78, 2173795348453L, (long) 1439); try { int[] intArray85 = unsupportedDateTimeField6.add((org.joda.time.ReadablePartial) partial43, 53460006, intArray83, (int) (byte) 100); } catch (java.lang.UnsupportedOperationException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])