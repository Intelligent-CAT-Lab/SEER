17578
Test: public void testCallSideEffects() { Node callExpr = getNode("new x().method()"); Node newExpr = callExpr.getFirstChild().getFirstChild(); Preconditions.checkState(newExpr.getType() == Token.NEW); Node.SideEffectFlags flags = new Node.SideEffectFlags(); flags.clearAllFlags(); newExpr.setSideEffectFlags(flags.valueOf()); flags.clearAllFlags(); callExpr.setSideEffectFlags(flags.valueOf()); flags.clearAllFlags(); newExpr.setSideEffectFlags(flags.valueOf()); flags.clearAllFlags(); flags.setMutatesThis(); callExpr.setSideEffectFlags(flags.valueOf()); flags.clearAllFlags(); newExpr.setSideEffectFlags(flags.valueOf()); flags.clearAllFlags(); flags.setMutatesThis(); flags.setReturnsTainted(); callExpr.setSideEffectFlags(flags.valueOf()); flags.clearAllFlags(); newExpr.setSideEffectFlags(flags.valueOf()); flags.clearAllFlags(); flags.setReturnsTainted(); callExpr.setSideEffectFlags(flags.valueOf()); flags.clearAllFlags(); flags.setMutatesGlobalState(); newExpr.setSideEffectFlags(flags.valueOf()); flags.clearAllFlags(); callExpr.setSideEffectFlags(flags.valueOf()); }
Code: static boolean functionCallHasSideEffects( Node callNode, @Nullable AbstractCompiler compiler) { if (callNode.getType() != Token.CALL) { throw new IllegalStateException( "Expected CALL node, got " + Token.name(callNode.getType())); } if (callNode.isNoSideEffectsCall()) { return false; } Node nameNode = callNode.getFirstChild(); if (nameNode.getType() == Token.NAME) { String name = nameNode.getString(); if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) { return false; } } else if (nameNode.getType() == Token.GETPROP) { if (callNode.hasOneChild() && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains( nameNode.getLastChild().getString())) { return false; } if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) { return false; } if (compiler != null && !compiler.hasRegExpGlobalReferences()) { if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) { return false; } else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains( nameNode.getLastChild().getString())) { Node param = nameNode.getNext(); if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) return false; } } } return true; }
tensor([[0.0144, 0.0166, 0.0055,  ..., 0.0051, 0.0039, 0.0026],
        [0.0142, 0.0229, 0.0048,  ..., 0.0063, 0.0034, 0.0017],
        [0.0156, 0.0144, 0.0057,  ..., 0.0062, 0.0046, 0.0021],
        ...,
        [0.0170, 0.0190, 0.0050,  ..., 0.0053, 0.0029, 0.0020],
        [0.0137, 0.0232, 0.0050,  ..., 0.0060, 0.0043, 0.0018],
        [0.0151, 0.0139, 0.0047,  ..., 0.0081, 0.0051, 0.0020]])