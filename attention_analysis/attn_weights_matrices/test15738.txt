15738
Test: public void test069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test069"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.CommandLine commandLine2 = new org.apache.commons.cli.CommandLine(); java.lang.String str5 = commandLine2.getOptionValue('#', ""); java.util.Properties properties7 = commandLine2.getOptionProperties(""); posixParser0.processProperties(properties7); org.apache.commons.cli.Options options9 = posixParser0.getOptions(); java.util.List list10 = posixParser0.getRequiredOptions(); java.util.List list11 = posixParser0.getRequiredOptions(); java.util.List list12 = posixParser0.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine13 = new org.apache.commons.cli.CommandLine(); java.lang.String str16 = commandLine13.getOptionValue('#', ""); java.util.Properties properties18 = commandLine13.getOptionProperties(""); posixParser0.processProperties(properties18); org.apache.commons.cli.Options options20 = new org.apache.commons.cli.Options(); java.util.Collection collection21 = options20.getOptionGroups(); org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine23 = posixParser22.cmd; org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine(); java.lang.String str27 = commandLine24.getOptionValue('#', ""); java.util.Properties properties29 = commandLine24.getOptionProperties(""); posixParser22.processProperties(properties29); posixParser22.burstToken("", true); java.util.List list34 = posixParser22.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine35 = new org.apache.commons.cli.CommandLine(); java.lang.String str38 = commandLine35.getOptionValue('#', ""); boolean boolean40 = commandLine35.hasOption(' '); java.lang.String[] strArray42 = commandLine35.getOptionValues('4'); posixParser22.cmd = commandLine35; org.apache.commons.cli.CommandLine commandLine44 = new org.apache.commons.cli.CommandLine(); java.lang.String str47 = commandLine44.getOptionValue('#', ""); java.lang.String str49 = commandLine44.getOptionValue("hi!"); org.apache.commons.cli.Option[] optionArray50 = commandLine44.getOptions(); java.util.Properties properties52 = commandLine44.getOptionProperties("org.apache.commons.cli.MissingOptionException: hi!"); posixParser22.cmd = commandLine44; java.lang.String[] strArray54 = commandLine44.getArgs(); java.lang.String[] strArray56 = posixParser0.flatten(options20, strArray54, true); org.apache.commons.cli.PosixParser posixParser57 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine58 = posixParser57.cmd; org.apache.commons.cli.CommandLine commandLine59 = new org.apache.commons.cli.CommandLine(); java.lang.String str62 = commandLine59.getOptionValue('#', ""); java.util.Properties properties64 = commandLine59.getOptionProperties(""); posixParser57.processProperties(properties64); posixParser57.burstToken("", true); java.util.List list69 = posixParser57.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine70 = new org.apache.commons.cli.CommandLine(); java.lang.String str73 = commandLine70.getOptionValue('#', ""); boolean boolean75 = commandLine70.hasOption(' '); java.lang.String[] strArray77 = commandLine70.getOptionValues('4'); posixParser57.cmd = commandLine70; java.lang.String[] strArray80 = commandLine70.getOptionValues("arg"); posixParser0.cmd = commandLine70; }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != -1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + 1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (false){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0196, 0.0052, 0.0208,  ..., 0.1040, 0.0197, 0.0213],
        [0.0182, 0.0047, 0.0202,  ..., 0.0917, 0.0173, 0.0195],
        [0.0185, 0.0081, 0.0246,  ..., 0.0753, 0.0221, 0.0230],
        ...,
        [0.0202, 0.0082, 0.0232,  ..., 0.0826, 0.0266, 0.0188],
        [0.0207, 0.0072, 0.0237,  ..., 0.0768, 0.0202, 0.0196],
        [0.0159, 0.0066, 0.0189,  ..., 0.0928, 0.0222, 0.0209]])