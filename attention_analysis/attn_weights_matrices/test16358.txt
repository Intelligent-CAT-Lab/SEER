16358
Test: public void test133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test133"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.Options options2 = posixParser0.getOptions(); java.util.Properties properties3 = null; posixParser0.processProperties(properties3); org.apache.commons.cli.PosixParser posixParser5 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine6 = posixParser5.cmd; org.apache.commons.cli.Options options7 = posixParser5.getOptions(); org.apache.commons.cli.Options options8 = new org.apache.commons.cli.Options(); java.util.List list9 = options8.helpOptions(); java.lang.String[] strArray11 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine12 = posixParser5.parse(options8, strArray11); java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!", "hi!", "", "hi!", "a" }; java.lang.String[] strArray21 = posixParser0.flatten(options8, strArray19, true); org.apache.commons.cli.CommandLine commandLine22 = posixParser0.cmd; org.apache.commons.cli.PosixParser posixParser23 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine24 = posixParser23.cmd; org.apache.commons.cli.CommandLine commandLine25 = new org.apache.commons.cli.CommandLine(); posixParser23.cmd = commandLine25; org.apache.commons.cli.PosixParser posixParser27 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine28 = posixParser27.cmd; org.apache.commons.cli.Options options29 = posixParser27.getOptions(); java.util.Properties properties30 = null; posixParser27.processProperties(properties30); org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine33 = posixParser32.cmd; org.apache.commons.cli.Options options34 = posixParser32.getOptions(); org.apache.commons.cli.Options options35 = new org.apache.commons.cli.Options(); java.util.List list36 = options35.helpOptions(); java.lang.String[] strArray38 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine39 = posixParser32.parse(options35, strArray38); java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "", "hi!", "a" }; java.lang.String[] strArray48 = posixParser27.flatten(options35, strArray46, true); org.apache.commons.cli.PosixParser posixParser49 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine50 = posixParser49.cmd; org.apache.commons.cli.Options options51 = posixParser49.getOptions(); org.apache.commons.cli.Options options52 = new org.apache.commons.cli.Options(); java.util.List list53 = options52.helpOptions(); java.lang.String[] strArray55 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine56 = posixParser49.parse(options52, strArray55); org.apache.commons.cli.CommandLine commandLine58 = posixParser23.parse(options35, strArray55, false); java.lang.String[] strArray65 = new java.lang.String[] { "[ Options: [ short {} ] [ long {} ]", "org.apache.commons.cli.MissingArgumentException: a", "org.apache.commons.cli.ParseException: org.apache.commons.cli.MissingArgumentException: a", "arg", "org.apache.commons.cli.MissingArgumentException: a", "[ option: a :: null ]" }; org.apache.commons.cli.CommandLine commandLine66 = posixParser0.parse(options35, strArray65); org.apache.commons.cli.Option option68 = org.apache.commons.cli.OptionBuilder.create('a'); java.lang.Object obj69 = option68.getType(); char char70 = option68.getValueSeparator(); java.lang.String str71 = option68.getOpt(); java.lang.String[] strArray72 = option68.getValues(); boolean boolean73 = option68.hasArg(); boolean boolean74 = option68.hasArgName(); int int75 = option68.getArgs(); org.apache.commons.cli.PosixParser posixParser76 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine77 = posixParser76.cmd; org.apache.commons.cli.CommandLine commandLine78 = new org.apache.commons.cli.CommandLine(); posixParser76.cmd = commandLine78; option68.setType((java.lang.Object) posixParser76); java.lang.String str81 = option68.getOpt(); org.apache.commons.cli.Options options82 = options35.addOption(option68); org.apache.commons.cli.Option option84 = org.apache.commons.cli.OptionBuilder.create('a'); java.lang.Object obj85 = option84.getType(); char char86 = option84.getValueSeparator(); int int87 = option84.getArgs(); java.lang.String str89 = option84.getValue((-1)); option84.setValueSeparator('a'); option84.clearValues(); org.apache.commons.cli.Options options93 = options82.addOption(option84); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init(); this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); while (iter.hasNext()) { String token = (String) iter.next(); if (false) { int pos = token.indexOf('='); String opt = pos <= 1 ? token : token.substring(0, pos); if (!options.hasOption(opt)) { processNonOptionToken(token, stopAtNonOption); } else { currentOption = options.getOption(opt); tokens.add(opt); if (pos != -1) { ; } } } else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() == 2 || options.hasOption(token)) { ; } else { burstToken(token, stopAtNonOption); } } else { processNonOptionToken(token, stopAtNonOption); } gobble(iter); } return (String[]) tokens.toArray(new String[tokens.size()]); }
tensor([[0.0102, 0.0026, 0.0108,  ..., 0.0101, 0.0068, 0.0022],
        [0.0094, 0.0024, 0.0104,  ..., 0.0089, 0.0073, 0.0024],
        [0.0091, 0.0040, 0.0121,  ..., 0.0108, 0.0071, 0.0031],
        ...,
        [0.0101, 0.0036, 0.0116,  ..., 0.0099, 0.0069, 0.0027],
        [0.0103, 0.0020, 0.0145,  ..., 0.0125, 0.0084, 0.0019],
        [0.0100, 0.0024, 0.0103,  ..., 0.0131, 0.0077, 0.0025]])