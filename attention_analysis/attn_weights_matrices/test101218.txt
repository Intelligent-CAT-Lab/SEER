101218
Test: public void test0360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0360"); org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField2 = gJChronology1.yearOfCentury(); org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology1); org.joda.time.DurationField durationField4 = gJChronology1.eras(); org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology1); org.joda.time.ReadablePeriod readablePeriod6 = null; org.joda.time.LocalDate localDate8 = localDate5.withPeriodAdded(readablePeriod6, (-28800000)); org.joda.time.Interval interval9 = localDate5.toInterval(); org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField13 = gJChronology12.yearOfCentury(); org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology12); int int15 = dateTime14.getEra(); int int16 = dateTime14.getYear(); boolean boolean17 = instant11.isBefore((org.joda.time.ReadableInstant) dateTime14); org.joda.time.LocalDate localDate18 = dateTime14.toLocalDate(); org.joda.time.LocalDate localDate20 = localDate18.plusDays(2757764); int int21 = localDate20.getDayOfMonth(); org.joda.time.LocalDate.Property property22 = localDate20.dayOfMonth(); org.joda.time.Interval interval23 = localDate20.toInterval(); boolean boolean24 = interval9.overlaps((org.joda.time.ReadableInterval) interval23); org.joda.time.chrono.GJChronology gJChronology26 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField27 = gJChronology26.yearOfCentury(); org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology26); org.joda.time.DurationField durationField29 = gJChronology26.eras(); org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology26); org.joda.time.ReadablePeriod readablePeriod31 = null; org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, (-28800000)); org.joda.time.LocalDate.Property property34 = localDate30.dayOfMonth(); org.joda.time.LocalDate localDate36 = property34.addWrapFieldToCopy(818); org.joda.time.DateTimeZone dateTimeZone37 = null; org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeUtils.getZone(dateTimeZone37); org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField40 = iSOChronology39.yearOfEra(); org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology39); int int42 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime41); org.joda.time.DateTime dateTime43 = localDate36.toDateTimeAtMidnight(dateTimeZone38); boolean boolean44 = interval9.contains((org.joda.time.ReadableInstant) dateTime43); org.joda.time.DateTime dateTime46 = dateTime43.plusWeeks(0); }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])