101188
Test: public void test0062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0062"); org.joda.time.chrono.BasicChronology basicChronology0 = null; org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField2 = gJChronology1.yearOfCentury(); org.joda.time.DateTimeField dateTimeField3 = gJChronology1.yearOfEra(); org.joda.time.DurationField durationField4 = gJChronology1.hours(); long long7 = durationField4.getMillis((long) (byte) 100, (long) 100); org.joda.time.chrono.BasicDayOfYearDateTimeField basicDayOfYearDateTimeField8 = new org.joda.time.chrono.BasicDayOfYearDateTimeField(basicChronology0, durationField4); long long10 = basicDayOfYearDateTimeField8.roundFloor((long) (-28800000)); int int11 = basicDayOfYearDateTimeField8.getMinimumValue(); org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean14 = iSOChronology12.equals((java.lang.Object) iSOChronology13); org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField17 = gJChronology16.yearOfCentury(); org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology16); org.joda.time.DurationField durationField19 = gJChronology16.eras(); org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology16); int[] intArray22 = iSOChronology13.get((org.joda.time.ReadablePartial) localDate20, (-1123200000L)); org.joda.time.LocalDate localDate24 = localDate20.minusDays(100); org.joda.time.LocalDate localDate26 = localDate24.withYearOfCentury(9); try { int int27 = basicDayOfYearDateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDate24); } catch (java.lang.NullPointerException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])