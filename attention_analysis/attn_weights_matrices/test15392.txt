15392
Test: public void test052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test052"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = new org.apache.commons.cli.CommandLine(); java.lang.Object obj3 = commandLine1.getParsedOptionValue(""); java.util.Properties properties5 = commandLine1.getOptionProperties("hi!"); posixParser0.processProperties(properties5); posixParser0.burstToken("", true); org.apache.commons.cli.GnuParser gnuParser10 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.CommandLine commandLine11 = new org.apache.commons.cli.CommandLine(); java.lang.Object obj13 = commandLine11.getParsedOptionValue(""); java.util.Properties properties15 = commandLine11.getOptionProperties("hi!"); java.lang.Object obj17 = commandLine11.getOptionObject("hi!"); java.lang.Object obj19 = commandLine11.getOptionObject("hi!"); gnuParser10.cmd = commandLine11; org.apache.commons.cli.CommandLine commandLine21 = new org.apache.commons.cli.CommandLine(); java.lang.Object obj23 = commandLine21.getParsedOptionValue(""); java.util.Properties properties25 = commandLine21.getOptionProperties("hi!"); gnuParser10.processProperties(properties25); org.apache.commons.cli.Options options27 = new org.apache.commons.cli.Options(); org.apache.commons.cli.GnuParser gnuParser28 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); org.apache.commons.cli.GnuParser gnuParser30 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.CommandLine commandLine31 = new org.apache.commons.cli.CommandLine(); java.lang.Object obj33 = commandLine31.getParsedOptionValue(""); java.util.Properties properties35 = commandLine31.getOptionProperties("hi!"); java.lang.Object obj37 = commandLine31.getOptionObject("hi!"); java.lang.Object obj39 = commandLine31.getOptionObject("hi!"); gnuParser30.cmd = commandLine31; org.apache.commons.cli.Options options41 = null; org.apache.commons.cli.CommandLine commandLine42 = new org.apache.commons.cli.CommandLine(); java.lang.Object obj44 = commandLine42.getParsedOptionValue(""); java.util.Properties properties46 = commandLine42.getOptionProperties("hi!"); java.lang.String[] strArray47 = commandLine42.getArgs(); java.lang.String[] strArray49 = gnuParser30.flatten(options41, strArray47, true); java.lang.String[] strArray51 = gnuParser28.flatten(options29, strArray49, true); org.apache.commons.cli.CommandLine commandLine53 = gnuParser10.parse(options27, strArray49, true); java.util.List list55 = options27.getMatchingOptions("hi!"); boolean boolean57 = options27.hasLongOption("hi!"); java.util.List list58 = options27.getRequiredOptions(); org.apache.commons.cli.Option option62 = new org.apache.commons.cli.Option("", true, ""); java.lang.String str63 = option62.getLongOpt(); org.apache.commons.cli.OptionGroup optionGroup64 = options27.getOptionGroup(option62); java.lang.String str65 = options27.toString(); posixParser0.setOptions(options27); org.apache.commons.cli.CommandLine commandLine67 = null; posixParser0.cmd = commandLine67; } ] [ long {} ]" + "'", str65, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected void processProperties(Properties properties) throws ParseException { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) { continue; } cmd.addOption(opt); updateRequiredOptions(opt); } } }
tensor([[0.0175, 0.0067, 0.0304,  ..., 0.0029, 0.0029, 0.0029],
        [0.0204, 0.0063, 0.0325,  ..., 0.0036, 0.0036, 0.0036],
        [0.0168, 0.0062, 0.0272,  ..., 0.0036, 0.0036, 0.0036],
        ...,
        [0.0163, 0.0060, 0.0346,  ..., 0.0032, 0.0032, 0.0032],
        [0.0163, 0.0060, 0.0346,  ..., 0.0032, 0.0032, 0.0032],
        [0.0163, 0.0060, 0.0346,  ..., 0.0032, 0.0032, 0.0032]])