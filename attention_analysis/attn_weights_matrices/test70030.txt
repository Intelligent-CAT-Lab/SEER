70030
Test: public void test04() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test04"); java.io.InputStream inputStream0 = null; org.jsoup.parser.Parser parser3 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document4 = org.jsoup.helper.DataUtil.parseInputStream(inputStream0, "", " ", parser3); boolean boolean5 = parser3.isTrackErrors(); }
Code: static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException { if (input == null) return new Document(baseUri); ; Document doc = null; boolean fullyRead = true; input.mark(bufferSize); ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize + 1); fullyRead = input.read() == -1; input.reset(); BomCharset bomCharset = detectCharsetFromBom(firstBytes); if (bomCharset != null) { charsetName = bomCharset.charset; input.skip(bomCharset.offset); } if (false) { String docData = Charset.forName(defaultCharset).decode(firstBytes).toString(); doc = parser.parseInput(docData, baseUri); Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]"); String foundCharset = null; for (Element meta : metaElements) { if (meta.hasAttr("http-equiv")) foundCharset = getCharsetFromContentType(meta.attr("content")); if (foundCharset == null && meta.hasAttr("charset")) foundCharset = meta.attr("charset"); if (foundCharset != null) break; } if (foundCharset == null && false && doc.childNode(0) instanceof XmlDeclaration) { XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0); if (prolog.name().equals("xml")) foundCharset = prolog.attr("encoding"); } foundCharset = validateCharset(foundCharset); if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", ""); charsetName = foundCharset; doc = null; } else if (!fullyRead) { doc = null; } } else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"); } if (doc == null) { if (charsetName == null) charsetName = defaultCharset; BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize); try { doc = parser.parseInput(reader, baseUri); } catch (UncheckedIOException e) { throw e.ioException(); } doc.outputSettings().charset(charsetName); } input.close(); return doc; }
tensor([[0.0099, 0.0131, 0.0052,  ..., 0.0034, 0.0030, 0.0018],
        [0.0090, 0.0127, 0.0062,  ..., 0.0036, 0.0024, 0.0011],
        [0.0099, 0.0141, 0.0061,  ..., 0.0041, 0.0023, 0.0012],
        ...,
        [0.0112, 0.0130, 0.0074,  ..., 0.0033, 0.0025, 0.0013],
        [0.0111, 0.0140, 0.0057,  ..., 0.0043, 0.0028, 0.0010],
        [0.0104, 0.0110, 0.0052,  ..., 0.0054, 0.0032, 0.0014]])