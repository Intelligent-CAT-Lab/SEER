101578
Test: public void test38() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test38"); org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth(); org.joda.time.format.DateTimeFormatterBuilder.FixedNumber fixedNumber3 = new org.joda.time.format.DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 642, true); org.joda.time.format.DateTimeParser[] dateTimeParserArray4 = new org.joda.time.format.DateTimeParser[] {}; org.joda.time.format.DateTimeFormatterBuilder.MatchingParser matchingParser5 = new org.joda.time.format.DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray4); org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology7); org.joda.time.DateTimeZone dateTimeZone9 = null; org.joda.time.Chronology chronology10 = iSOChronology7.withZone(dateTimeZone9); org.joda.time.DateTimeField dateTimeField11 = iSOChronology7.weekyear(); java.util.Locale locale12 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 100, (org.joda.time.Chronology) iSOChronology7, locale12); int int16 = matchingParser5.parseInto(dateTimeParserBucket13, "713", 1439); int int19 = fixedNumber3.parseInto(dateTimeParserBucket13, "secondOfMinute", 0); java.lang.StringBuffer stringBuffer20 = null; org.joda.time.DateTimeZone dateTimeZone21 = null; org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21); int int23 = dateTime22.getHourOfDay(); org.joda.time.ReadablePeriod readablePeriod24 = null; org.joda.time.DateTime dateTime25 = dateTime22.plus(readablePeriod24); org.joda.time.DateTime dateTime27 = dateTime22.withYear((int) (short) 10); org.joda.time.ReadableDuration readableDuration28 = null; org.joda.time.DateTime dateTime29 = dateTime22.plus(readableDuration28); org.joda.time.LocalDate localDate30 = dateTime22.toLocalDate(); org.joda.time.chrono.GregorianChronology gregorianChronology31 = org.joda.time.chrono.GregorianChronology.getInstance(); org.joda.time.DateTimeField dateTimeField32 = gregorianChronology31.minuteOfDay(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField34 = new org.joda.time.field.OffsetDateTimeField(dateTimeField32, (int) ' '); org.joda.time.DateTimeZone dateTimeZone36 = null; org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36); org.joda.time.DateTime.Property property38 = dateTime37.secondOfMinute(); org.joda.time.ReadablePeriod readablePeriod39 = null; org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39); org.joda.time.DateTime.Property property41 = dateTime40.centuryOfEra(); org.joda.time.format.DateTimeParser[] dateTimeParserArray42 = new org.joda.time.format.DateTimeParser[] {}; org.joda.time.format.DateTimeFormatterBuilder.MatchingParser matchingParser43 = new org.joda.time.format.DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray42); org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology45); org.joda.time.DateTimeZone dateTimeZone47 = null; org.joda.time.Chronology chronology48 = iSOChronology45.withZone(dateTimeZone47); org.joda.time.DateTimeField dateTimeField49 = iSOChronology45.weekyear(); java.util.Locale locale50 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 100, (org.joda.time.Chronology) iSOChronology45, locale50); int int54 = matchingParser43.parseInto(dateTimeParserBucket51, "713", 1439); org.joda.time.format.DateTimeParserBucket.SavedState savedState55 = dateTimeParserBucket51.new SavedState(); org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology57); org.joda.time.DateTimeZone dateTimeZone59 = null; org.joda.time.Chronology chronology60 = iSOChronology57.withZone(dateTimeZone59); org.joda.time.DateTimeField dateTimeField61 = iSOChronology57.weekyear(); java.util.Locale locale62 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 100, (org.joda.time.Chronology) iSOChronology57, locale62); java.lang.Integer int64 = dateTimeParserBucket63.getPivotYear(); boolean boolean65 = savedState55.restoreState(dateTimeParserBucket63); org.joda.time.Chronology chronology66 = dateTimeParserBucket63.getChronology(); org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField68 = iSOChronology67.millisOfSecond(); org.joda.time.DurationField durationField69 = iSOChronology67.hours(); boolean boolean70 = dateTimeParserBucket63.restoreState((java.lang.Object) iSOChronology67); java.util.Locale locale71 = dateTimeParserBucket63.getLocale(); int int72 = property41.getMaximumShortTextLength(locale71); java.lang.String str73 = offsetDateTimeField34.getAsShortText((long) 25, locale71); try { fixedNumber3.printTo(stringBuffer20, (org.joda.time.ReadablePartial) localDate30, locale71); } catch (java.lang.NullPointerException e) { } }
Code: public int parseInto(DateTimeParserBucket bucket, String text, int position) { if (position >= text.length()) { return ~position; } char a = text.charAt(position); char b = iValue; if (a != b) { a = Character.toUpperCase(a); b = Character.toUpperCase(b); if (a != b) { a = Character.toLowerCase(a); b = Character.toLowerCase(b); if (a != b) { return ~position; } } } return position + 1; }
tensor([[0.0127, 0.0077, 0.0198,  ..., 0.0104, 0.0071, 0.0058],
        [0.0075, 0.0052, 0.0189,  ..., 0.0088, 0.0040, 0.0038],
        [0.0093, 0.0052, 0.0210,  ..., 0.0116, 0.0043, 0.0047],
        ...,
        [0.0117, 0.0063, 0.0255,  ..., 0.0099, 0.0053, 0.0057],
        [0.0101, 0.0063, 0.0204,  ..., 0.0115, 0.0051, 0.0049],
        [0.0088, 0.0066, 0.0225,  ..., 0.0096, 0.0053, 0.0049]])