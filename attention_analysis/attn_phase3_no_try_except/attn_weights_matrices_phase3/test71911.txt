71911
Test: public void test9470() throws Throwable { Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); doReturn(0).when(comparator0).compare(any() , any()); PriorityQueue<Float> priorityQueue0 = new PriorityQueue<Float>(10, comparator0); JSONArray jSONArray0 = new JSONArray((Collection<?>) priorityQueue0); long long0 = jSONArray0.optLong(10, 1024L); Object object0 = jSONArray0.remove(10); boolean boolean0 = priorityQueue0.isEmpty(); Class<Answers> class0 = Answers.class; jSONArray0.optEnum(class0, 10); Float float0 = new Float(0.0); boolean boolean1 = priorityQueue0.add(float0); Float float1 = new Float(341.0F); boolean boolean2 = Float.isFinite((-1339.2F)); boolean boolean3 = priorityQueue0.add(float1); Double double0 = new Double(0.0); double double1 = Double.min(0.0, (-287.49466)); }
Code: public <E extends Enum<E>> E optEnum(Class<E> clazz, int index) { return this.optEnum(clazz, index, null); }
[[0.04782797 0.06634656 0.03133673 0.06634656 0.06858828 0.06634656
 0.06634656 0.03092729 0.17460954 0.06038471 0.05221806 0.06634657
 0.09269392 0.09004399 0.01963671]
[0.04194316 0.07066672 0.04159964 0.07066672 0.08110768 0.07066672
 0.07066672 0.02749844 0.12455497 0.06283425 0.05081077 0.07066672
 0.11478013 0.07991999 0.02161741]
[0.04521319 0.07407178 0.03238826 0.07407178 0.06190708 0.07407178
 0.07407178 0.02133022 0.12652557 0.07512525 0.05638014 0.07407177
 0.12326009 0.06575364 0.02175756]
[0.04194316 0.07066672 0.04159964 0.07066672 0.08110768 0.07066672
 0.07066672 0.02749844 0.12455497 0.06283425 0.05081077 0.07066672
 0.11478013 0.07991999 0.02161741]
[0.04605898 0.06820572 0.03334328 0.06820572 0.07351434 0.06820572
 0.06820572 0.02514716 0.17736536 0.08051753 0.04784244 0.06820572
 0.09194145 0.06587068 0.01737021]
[0.04194316 0.07066672 0.04159964 0.07066672 0.08110768 0.07066672
 0.07066672 0.02749844 0.12455497 0.06283425 0.05081077 0.07066672
 0.11478013 0.07991999 0.02161741]
[0.04194316 0.07066672 0.04159964 0.07066672 0.08110768 0.07066672
 0.07066672 0.02749844 0.12455497 0.06283425 0.05081077 0.07066672
 0.11478013 0.07991999 0.02161741]
[0.03008392 0.079495   0.03332531 0.079495   0.05139297 0.079495
 0.079495   0.02257905 0.17483321 0.06294515 0.04793834 0.07949501
 0.09352351 0.07178728 0.01411627]
[0.0440314  0.07084603 0.03649745 0.07084603 0.06237406 0.07084603
 0.07084603 0.02804232 0.13661137 0.07042807 0.05691387 0.07084604
 0.10400874 0.08499607 0.02186655]
[0.05131579 0.0686238  0.04263358 0.0686238  0.06905323 0.0686238
 0.0686238  0.02488973 0.13192986 0.07937115 0.05946708 0.06862381
 0.11653676 0.05319797 0.02848591]
[0.03514537 0.07249209 0.04430855 0.07249209 0.06857195 0.07249209
 0.07249209 0.02186743 0.13863903 0.06373724 0.05187898 0.07249209
 0.10626242 0.08940898 0.01771948]
[0.04194316 0.07066672 0.04159964 0.07066672 0.08110768 0.07066672
 0.07066672 0.02749844 0.12455497 0.06283425 0.05081077 0.07066672
 0.11478013 0.07991999 0.02161741]
[0.05232976 0.06900882 0.03497223 0.06900882 0.0592498  0.06900882
 0.06900882 0.0213266  0.17345142 0.06739084 0.06252988 0.06900882
 0.09505532 0.070953   0.01769706]
[0.03592446 0.07266393 0.03201234 0.07266393 0.0816896  0.07266393
 0.07266393 0.02674291 0.13444395 0.07352686 0.06453294 0.07266393
 0.10740805 0.06738774 0.01301145]
[0.03479896 0.06684009 0.03728651 0.06684009 0.05153019 0.06684009
 0.06684009 0.02679834 0.16965969 0.07925565 0.07306064 0.06684009
 0.11908109 0.05678266 0.01754586]]