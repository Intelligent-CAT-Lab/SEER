62134
Test: public void test0512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0512"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote2); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar('\t'); java.lang.String str6 = cSVFormat5.toString(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('\037'); boolean boolean9 = cSVFormat8.getSkipHeaderRecord(); java.lang.String str10 = cSVFormat8.toString(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withNullString("hi!"); cSVFormat13.validate(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat13.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat13.withCommentStart('\037'); java.lang.String str19 = cSVFormat13.toString(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat13.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withRecordSeparator(' '); java.lang.Character char24 = cSVFormat21.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat21.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withQuoteChar((java.lang.Character) ','); boolean boolean30 = cSVFormat27.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat32.validate(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withIgnoreEmptyLines(true); java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat32.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat31.withHeader(strArray38); java.lang.String str41 = cSVFormat27.format((java.lang.Object[]) strArray38); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat21.withHeader(strArray38); org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat43.withNullString("hi!"); cSVFormat45.validate(); java.lang.Object obj47 = null; boolean boolean48 = cSVFormat45.equals(obj47); org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat49.validate(); org.apache.commons.csv.Quote quote51 = null; org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withQuotePolicy(quote51); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat52.withQuoteChar('\t'); java.lang.Character char55 = cSVFormat54.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat54.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat57.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat60.validate(); org.apache.commons.csv.CSVFormat cSVFormat63 = cSVFormat60.withIgnoreEmptyLines(true); java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat67 = cSVFormat60.withHeader(strArray66); org.apache.commons.csv.CSVFormat cSVFormat68 = cSVFormat59.withHeader(strArray66); org.apache.commons.csv.CSVFormat cSVFormat69 = cSVFormat45.withHeader(strArray66); java.lang.String str70 = cSVFormat21.format((java.lang.Object[]) strArray66); try { java.lang.String str71 = cSVFormat8.format((java.lang.Object[]) strArray66); } catch (java.lang.IllegalStateException e) { } }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { ; sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(true) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (true) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { ; } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (true) { sb.append(' '); sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0079, 0.0096, 0.0081,  ..., 0.0091, 0.0297, 0.0042],
        [0.0076, 0.0082, 0.0079,  ..., 0.0081, 0.0378, 0.0035],
        [0.0051, 0.0078, 0.0040,  ..., 0.0079, 0.0371, 0.0033],
        ...,
        [0.0051, 0.0073, 0.0038,  ..., 0.0068, 0.0398, 0.0035],
        [0.0055, 0.0089, 0.0056,  ..., 0.0094, 0.0341, 0.0034],
        [0.0052, 0.0094, 0.0088,  ..., 0.0124, 0.0336, 0.0035]])