61216
Test: public void test0969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0969"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat3.withNullString("\u2028"); boolean boolean8 = cSVFormat3.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat9.validate(); org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat11.validate(); org.apache.commons.csv.Quote quote13 = null; org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat11.withQuotePolicy(quote13); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat14.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray18 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str19 = cSVFormat9.format(objArray18); boolean boolean20 = cSVFormat9.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat9.withIgnoreSurroundingSpaces(false); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat9.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat9.withIgnoreSurroundingSpaces(true); java.lang.String str27 = cSVFormat9.getRecordSeparator(); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat9.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat29.withNullString(""); boolean boolean32 = cSVFormat3.equals((java.lang.Object) ""); try { org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat3.withQuoteChar('\r'); } catch (java.lang.IllegalArgumentException e) { } }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (true) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (getIgnoreSurroundingSpaces()) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0218, 0.0277, 0.0144,  ..., 0.0460, 0.0365, 0.0244],
        [0.0229, 0.0268, 0.0146,  ..., 0.0450, 0.0382, 0.0247],
        [0.0175, 0.0322, 0.0133,  ..., 0.0399, 0.0302, 0.0246],
        ...,
        [0.0212, 0.0329, 0.0170,  ..., 0.0390, 0.0332, 0.0230],
        [0.0164, 0.0288, 0.0131,  ..., 0.0423, 0.0242, 0.0170],
        [0.0221, 0.0311, 0.0146,  ..., 0.0435, 0.0271, 0.0243]])