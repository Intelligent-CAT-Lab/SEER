67750
Test: public void test4() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test4"); com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer untypedObjectDeserializer0 = com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.instance; com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer untypedObjectDeserializer1 = com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.instance; com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer untypedObjectDeserializer2 = com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.instance; untypedObjectDeserializer1._stringDeserializer = untypedObjectDeserializer2; untypedObjectDeserializer0._listDeserializer = untypedObjectDeserializer2; byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1 }; com.fasterxml.jackson.databind.node.BinaryNode binaryNode8 = com.fasterxml.jackson.databind.node.BinaryNode.valueOf(byteArray7); com.fasterxml.jackson.databind.JsonNode jsonNode10 = binaryNode8.path((int) 'a'); boolean boolean11 = jsonNode10.isMissingNode(); com.fasterxml.jackson.databind.node.TreeTraversingParser treeTraversingParser12 = new com.fasterxml.jackson.databind.node.TreeTraversingParser(jsonNode10); boolean boolean13 = treeTraversingParser12.isExpectedStartObjectToken(); com.fasterxml.jackson.core.JsonFactory jsonFactory14 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper15 = new com.fasterxml.jackson.databind.ObjectMapper(jsonFactory14); com.fasterxml.jackson.core.PrettyPrinter prettyPrinter16 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper17 = objectMapper15.setDefaultPrettyPrinter(prettyPrinter16); com.fasterxml.jackson.databind.DeserializationContext deserializationContext18 = objectMapper15.getDeserializationContext(); try { java.lang.Object obj19 = untypedObjectDeserializer2.deserialize((com.fasterxml.jackson.core.JsonParser) treeTraversingParser12, deserializationContext18); } catch (java.lang.NullPointerException e) { } }
Code: public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException { switch (p.getCurrentTokenId()) { case JsonTokenId.ID_START_OBJECT: case JsonTokenId.ID_FIELD_NAME: case JsonTokenId.ID_END_OBJECT: if (false) { return _mapDeserializer.deserialize(p, ctxt); } return mapObject(p, ctxt); case JsonTokenId.ID_START_ARRAY: if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) { return mapArrayToArray(p, ctxt); } if (_listDeserializer != null) { return _listDeserializer.deserialize(p, ctxt); } return mapArray(p, ctxt); case JsonTokenId.ID_EMBEDDED_OBJECT: return p.getEmbeddedObject(); case JsonTokenId.ID_STRING: if (true) { return _stringDeserializer.deserialize(p, ctxt); } return p.getText(); case JsonTokenId.ID_NUMBER_INT: if (_numberDeserializer != null) { return _numberDeserializer.deserialize(p, ctxt); } if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) { return _coerceIntegral(p, ctxt); } return p.getNumberValue(); case JsonTokenId.ID_NUMBER_FLOAT: if (_numberDeserializer != null) { return _numberDeserializer.deserialize(p, ctxt); } if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) { return p.getDecimalValue(); } return p.getDoubleValue(); case JsonTokenId.ID_TRUE: return Boolean.TRUE; case JsonTokenId.ID_FALSE: return Boolean.FALSE; case JsonTokenId.ID_NULL: return null; default: } throw ctxt.mappingException(Object.class); }
tensor([[0.0059, 0.0046, 0.0104,  ..., 0.0060, 0.0062, 0.0026],
        [0.0053, 0.0037, 0.0106,  ..., 0.0053, 0.0048, 0.0020],
        [0.0042, 0.0038, 0.0120,  ..., 0.0050, 0.0039, 0.0017],
        ...,
        [0.0047, 0.0032, 0.0122,  ..., 0.0055, 0.0048, 0.0019],
        [0.0062, 0.0050, 0.0107,  ..., 0.0058, 0.0085, 0.0031],
        [0.0043, 0.0042, 0.0122,  ..., 0.0055, 0.0060, 0.0021]])