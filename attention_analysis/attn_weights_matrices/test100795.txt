100795
Test: public void testDelegatedMethods() { DateTimeField fieldOne = UnsupportedDateTimeField.getInstance( dateTimeFieldTypeOne, UnsupportedDurationField .getInstance(weeks)); PreciseDurationField hoursDuration = new PreciseDurationField( DurationFieldType.hours(), 10L); DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance( dateTimeFieldTypeOne, hoursDuration); try { fieldOne.add(System.currentTimeMillis(), 100); } catch (UnsupportedOperationException e) { } try { long currentTime = System.currentTimeMillis(); long firstComputation = hoursDuration.add(currentTime, 100); long secondComputation = fieldTwo.add(currentTime, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.add(System.currentTimeMillis(), 1000L); } catch (UnsupportedOperationException e) { } try { long currentTime = System.currentTimeMillis(); long firstComputation = hoursDuration.add(currentTime, 1000L); long secondComputation = fieldTwo.add(currentTime, 1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getDifference(100000L, 1000L); } catch (UnsupportedOperationException e) { } try { int firstDifference = hoursDuration.getDifference(100000L, 1000L); int secondDifference = fieldTwo.getDifference(100000L, 1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getDifferenceAsLong(100000L, 1000L); } catch (UnsupportedOperationException e) { } try { long firstDifference = hoursDuration.getDifference(100000L, 1000L); long secondDifference = fieldTwo.getDifference(100000L, 1000L); } catch (UnsupportedOperationException e) { } }
Code: public long add(long instant, int value) { if (iTimeField) { int offset = getOffsetToAdd(instant); long localInstant = iField.add(instant + offset, value); return localInstant - offset; } else { long localInstant = iZone.convertUTCToLocal(instant); localInstant = iField.add(localInstant, value); return iZone.convertLocalToUTC(localInstant, false); } }
tensor([[0.0183, 0.0297, 0.0225,  ..., 0.0345, 0.0082, 0.0082],
        [0.0128, 0.0256, 0.0311,  ..., 0.0341, 0.0077, 0.0077],
        [0.0149, 0.0245, 0.0226,  ..., 0.0376, 0.0056, 0.0056],
        ...,
        [0.0171, 0.0264, 0.0322,  ..., 0.0383, 0.0078, 0.0078],
        [0.0137, 0.0223, 0.0200,  ..., 0.0321, 0.0074, 0.0074],
        [0.0137, 0.0223, 0.0200,  ..., 0.0321, 0.0074, 0.0074]])