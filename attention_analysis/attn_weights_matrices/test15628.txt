15628
Test: public void test101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test101"); org.apache.commons.cli.GnuParser gnuParser0 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options(); java.lang.String[] strArray2 = new java.lang.String[] {}; java.util.Properties properties3 = null; org.apache.commons.cli.CommandLine commandLine5 = gnuParser0.parse(options1, strArray2, properties3, true); org.apache.commons.cli.GnuParser gnuParser6 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options7 = new org.apache.commons.cli.Options(); java.lang.String[] strArray8 = new java.lang.String[] {}; java.util.Properties properties9 = null; org.apache.commons.cli.CommandLine commandLine11 = gnuParser6.parse(options7, strArray8, properties9, true); boolean boolean13 = options7.hasOption("org.apache.commons.cli.MissingArgumentException: "); org.apache.commons.cli.GnuParser gnuParser14 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Option option17 = new org.apache.commons.cli.Option("", ""); boolean boolean18 = option17.isRequired(); option17.setValueSeparator('#'); java.lang.Object obj21 = option17.clone(); org.apache.commons.cli.GnuParser gnuParser22 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options23 = new org.apache.commons.cli.Options(); java.lang.String[] strArray24 = new java.lang.String[] {}; java.util.Properties properties25 = null; org.apache.commons.cli.CommandLine commandLine27 = gnuParser22.parse(options23, strArray24, properties25, true); java.util.List list28 = options23.getRequiredOptions(); java.util.Collection collection29 = options23.getOptionGroups(); option17.setType((java.lang.Object) options23); org.apache.commons.cli.GnuParser gnuParser31 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options32 = new org.apache.commons.cli.Options(); java.lang.String[] strArray33 = new java.lang.String[] {}; java.util.Properties properties34 = null; org.apache.commons.cli.CommandLine commandLine36 = gnuParser31.parse(options32, strArray33, properties34, true); java.util.Properties properties37 = null; gnuParser31.processProperties(properties37); java.util.List list39 = gnuParser31.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine40 = gnuParser31.cmd; org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options(); boolean boolean43 = options41.hasOption(""); boolean boolean45 = options41.hasOption(""); org.apache.commons.cli.Options options50 = options41.addOption("", "", true, "hi!"); org.apache.commons.cli.Option option53 = new org.apache.commons.cli.Option("", ""); java.lang.String str54 = option53.getDescription(); java.lang.String str55 = option53.getDescription(); org.apache.commons.cli.OptionGroup optionGroup56 = options50.getOptionGroup(option53); java.lang.String[] strArray57 = new java.lang.String[] {}; org.apache.commons.cli.CommandLine commandLine59 = gnuParser31.parse(options50, strArray57, false); java.lang.String[] strArray61 = gnuParser14.flatten(options23, strArray57, true); org.apache.commons.cli.CommandLine commandLine63 = gnuParser0.parse(options7, strArray61, false); java.util.ListIterator listIterator65 = null; try { gnuParser0.processOption("[ option: [ARG...] :: ]", listIterator65); } catch (org.apache.commons.cli.UnrecognizedOptionException e) { } }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){List tokens = new ArrayList();boolean eatTheRest = false;for (int i = 1; i < arguments.length; i++){String arg = arguments[i];if ("--".equals(arg)){eatTheRest = true;tokens.add("--");}else if ("-".equals(arg)){tokens.add("-");}else if (arg.startsWith("-")){String opt = Util.stripLeadingHyphens(arg);if (options.hasOption(opt)){tokens.add(arg);}else{if (options.hasOption(arg.substring(0, 2))){tokens.add(arg.substring(0, 2)); ; }else{eatTheRest = stopAtNonOption;;}}}else{tokens.add(arg);}if (true){for (i++; i < arguments.length; i++){tokens.add(arguments[i]);}}}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0200, 0.0054, 0.0212,  ..., 0.1062, 0.0202, 0.0218],
        [0.0193, 0.0050, 0.0214,  ..., 0.0973, 0.0184, 0.0208],
        [0.0183, 0.0083, 0.0243,  ..., 0.0750, 0.0221, 0.0230],
        ...,
        [0.0203, 0.0082, 0.0233,  ..., 0.0829, 0.0268, 0.0189],
        [0.0210, 0.0078, 0.0240,  ..., 0.0791, 0.0209, 0.0202],
        [0.0162, 0.0069, 0.0194,  ..., 0.0955, 0.0230, 0.0216]])