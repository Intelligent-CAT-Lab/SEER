61441
Test: public void test0816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0816"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote2); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar('\t'); java.lang.String str6 = cSVFormat5.toString(); boolean boolean7 = cSVFormat5.isNullHandling(); boolean boolean8 = cSVFormat5.getSkipHeaderRecord(); boolean boolean9 = cSVFormat5.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat5.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat12.validate(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withIgnoreEmptyLines(true); java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat12.withHeader(strArray18); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat19.withEscape('\b'); java.lang.String str22 = cSVFormat21.getNullString(); boolean boolean23 = cSVFormat21.getIgnoreSurroundingSpaces(); java.lang.String[] strArray27 = new java.lang.String[] { "hi!#a\t0", "Delimiter=<\t> QuoteChar=<\t> CommentStart=<a> RecordSeparator=<\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false" }; org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withHeader(strArray27); try { java.lang.String str29 = cSVFormat5.format((java.lang.Object[]) strArray27); } catch (java.lang.IllegalStateException e) { } }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (true) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0222, 0.0281, 0.0148,  ..., 0.0467, 0.0377, 0.0250],
        [0.0232, 0.0270, 0.0149,  ..., 0.0460, 0.0391, 0.0252],
        [0.0178, 0.0324, 0.0136,  ..., 0.0407, 0.0310, 0.0252],
        ...,
        [0.0215, 0.0333, 0.0174,  ..., 0.0400, 0.0342, 0.0237],
        [0.0165, 0.0289, 0.0134,  ..., 0.0431, 0.0247, 0.0173],
        [0.0224, 0.0312, 0.0149,  ..., 0.0442, 0.0277, 0.0248]])