101597
Test: public void testUnsupportedMethods() { DateTimeField fieldOne = UnsupportedDateTimeField.getInstance( dateTimeFieldTypeOne, UnsupportedDurationField .getInstance(weeks)); try { fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.addWrapField(100000L, 250); } catch (UnsupportedOperationException e) { } try { fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.get(1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(100000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(100000L, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(localTime, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(1000L, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(localTime, 0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(localTime, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getLeapAmount(System.currentTimeMillis()); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumShortTextLength(Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumTextLength(Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(localTime); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(localTime, new int[] { 0 }); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(10000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(localTime); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(localTime, new int[] { 0 }); } catch (UnsupportedOperationException e) { } try { fieldOne.isLeap(System.currentTimeMillis()); } catch (UnsupportedOperationException e) { } try { fieldOne.remainder(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundCeiling(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundFloor(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundHalfCeiling(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundHalfEven(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundHalfFloor(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.set(1000000L, 1000); } catch (UnsupportedOperationException e) { } try { fieldOne.set(1000000L, "Unsupported Operation"); } catch (UnsupportedOperationException e) { } try { fieldOne .set(1000000L, "Unsupported Operation", Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.set(localTime, 0, new int[] { 0 }, 10000); } catch (UnsupportedOperationException e) { } try { fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); } catch (UnsupportedOperationException e) { } }
Code: public long addWrapField(long instant, int value) { if (false) { int offset = getOffsetToAdd(instant); long localInstant = iField.addWrapField(instant + offset, value); return localInstant + offset; } else { long localInstant = iZone.convertUTCToLocal(instant); ; return iZone.convertLocalToUTC(localInstant, false, instant); } }
tensor([[0.0217, 0.0356, 0.0184,  ..., 0.0258, 0.0095, 0.0095],
        [0.0156, 0.0322, 0.0184,  ..., 0.0267, 0.0089, 0.0089],
        [0.0224, 0.0328, 0.0198,  ..., 0.0279, 0.0097, 0.0097],
        ...,
        [0.0178, 0.0297, 0.0151,  ..., 0.0238, 0.0065, 0.0065],
        [0.0161, 0.0261, 0.0172,  ..., 0.0227, 0.0084, 0.0084],
        [0.0161, 0.0261, 0.0172,  ..., 0.0227, 0.0084, 0.0084]])