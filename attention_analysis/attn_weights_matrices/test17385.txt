17385
Test: public void testCallSiteInteraction() { this.modifyCallSites = true; testSame("var b=function(){return};b()"); testSame("var b=function(c){return c};b(1)"); test("var b=function(c){};b.call(null, x)", "var b=function(){};b.call(null)"); test("var b=function(c){};b.apply(null, x)", "var b=function(){};b.apply(null, x)"); test("var b=function(c){return};b(1)", "var b=function(){return};b()"); test("var b=function(c){return};b(1,2)", "var b=function(){return};b()"); test("var b=function(c){return};b(1,2);b(3,4)", "var b=function(){return};b();b()"); test("var b=function(c,d){return d};b(1,2);b(3,4);b.length", "var b=function(c,d){return d};b(0,2);b(0,4);b.length"); test("var b=function(c){return};b(1,2);b(3,new x())", "var b=function(){return};b();b(new x())"); test("var b=function(c){return};b(1,2);b(new x(),4)", "var b=function(){return};b();b(new x())"); test("var b=function(c,d){return d};b(1,2);b(new x(),4)", "var b=function(c,d){return d};b(0,2);b(new x(),4)"); test("var b=function(c,d,e){return d};b(1,2,3);b(new x(),4,new x())", "var b=function(c,d){return d};b(0,2);b(new x(),4,new x())"); test("var b=function(c,d){b(1,2);return d};b(3,4);b(5,6)", "var b=function(d){b(2);return d};b(4);b(6)"); testSame("var b=function(c){return arguments};b(1,2);b(3,4)"); test("var b=function(c,d){return};b(1,2)", "var b=function(){return};b()"); testSame("var b=function(c,d){return c+d};b(1,2)"); test("var b=function(e,f,c,d){return c+d};b(1,2)", "var b=function(c,d){return c+d};b()"); test("var b=function(c,d,e,f){return c+d};b(1,2)", "var b=function(c,d){return c+d};b(1,2)"); test("var b=function(e,c,f,d,g){return c+d};b(1,2)", "var b=function(c,d){return c+d};b(2)"); test("var b=function(c,d){};var b=function(e,f){};b(1,2)", "var b=function(){};var b=function(){};b(1,2)"); }
Code: public Void call() throws Exception { if (options.printInputDelimiter) { if ((cb.getLength() > 0) && !cb.endsWith("\n")) { cb.append("\n"); } Preconditions.checkState(root.getType() == Token.SCRIPT); String delimiter = options.inputDelimiter; String sourceName = (String)root.getProp(Node.SOURCENAME_PROP); Preconditions.checkState(sourceName != null); Preconditions.checkState(!sourceName.isEmpty()); delimiter = delimiter.replaceAll("%name%", sourceName) .replaceAll("%num%", String.valueOf(inputSeqNum)); cb.append(delimiter) .append("\n"); } if (root.getJSDocInfo() != null && root.getJSDocInfo().getLicense() != null) { cb.append("\n"); } if (options.sourceMapOutputPath != null) { sourceMap.setStartingPosition( cb.getLineIndex(), cb.getColumnIndex()); } String code = toSource(root, sourceMap, inputSeqNum == 0); if (!code.isEmpty()) { cb.append(code); int length = code.length(); char lastChar = code.charAt(length - 1); char secondLastChar = length >= 2 ? code.charAt(length - 2) : '\0'; boolean hasSemiColon = lastChar == ';' || (lastChar == '\n' && secondLastChar == ';'); if (!hasSemiColon) { cb.append(";"); } } return null; }
tensor([[0.0056, 0.0061, 0.0136,  ..., 0.0062, 0.0118, 0.0025],
        [0.0045, 0.0054, 0.0130,  ..., 0.0048, 0.0139, 0.0023],
        [0.0053, 0.0070, 0.0126,  ..., 0.0079, 0.0145, 0.0025],
        ...,
        [0.0036, 0.0053, 0.0142,  ..., 0.0052, 0.0128, 0.0020],
        [0.0053, 0.0057, 0.0128,  ..., 0.0066, 0.0104, 0.0026],
        [0.0040, 0.0074, 0.0123,  ..., 0.0085, 0.0137, 0.0021]])