15473
Test: public void test193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test193"); org.apache.commons.cli2.builder.DefaultOptionBuilder defaultOptionBuilder3 = new org.apache.commons.cli2.builder.DefaultOptionBuilder(" ", " ", true); java.util.Set set9 = null; java.util.Set set10 = null; org.apache.commons.cli2.Argument argument12 = null; org.apache.commons.cli2.Group group13 = null; org.apache.commons.cli2.option.DefaultOption defaultOption15 = new org.apache.commons.cli2.option.DefaultOption("hi!", "", true, "hi!", "", set9, set10, true, argument12, group13, (int) (short) 100); java.util.Set set16 = defaultOption15.getPrefixes(); org.apache.commons.cli2.Group group17 = defaultOption15.getChildren(); org.apache.commons.cli2.validation.Validator validator24 = null; java.util.List list26 = null; org.apache.commons.cli2.option.ArgumentImpl argumentImpl28 = new org.apache.commons.cli2.option.ArgumentImpl("", "", 0, (int) (byte) 10, ' ', '#', validator24, "", list26, 0); java.util.List list29 = null; org.apache.commons.cli2.commandline.WriteableCommandLineImpl writeableCommandLineImpl30 = new org.apache.commons.cli2.commandline.WriteableCommandLineImpl((org.apache.commons.cli2.Option) argumentImpl28, list29); java.util.Set set31 = writeableCommandLineImpl30.getProperties(); defaultOption15.defaults((org.apache.commons.cli2.WriteableCommandLine) writeableCommandLineImpl30); java.util.List list34 = writeableCommandLineImpl30.getValues("org.apache.commons.cli2.OptionException: "); org.apache.commons.cli2.option.GroupImpl groupImpl39 = new org.apache.commons.cli2.option.GroupImpl(list34, "org.apache.commons.cli2.resource.CLIMessageBundle_en_US", "DISPLAY_GROUP_NAME", (int) (byte) -1, (int) (short) 100); java.util.List list40 = groupImpl39.getAnonymous(); java.util.Set set41 = groupImpl39.getPrefixes(); org.apache.commons.cli2.builder.DefaultOptionBuilder defaultOptionBuilder42 = defaultOptionBuilder3.withChildren((org.apache.commons.cli2.Group) groupImpl39); int int43 = groupImpl39.getId(); java.lang.StringBuffer stringBuffer44 = null; org.apache.commons.cli2.validation.Validator validator51 = null; java.util.List list53 = null; org.apache.commons.cli2.option.ArgumentImpl argumentImpl55 = new org.apache.commons.cli2.option.ArgumentImpl("", "", 0, (int) (byte) 10, ' ', '#', validator51, "", list53, 0); java.util.List list56 = null; org.apache.commons.cli2.commandline.WriteableCommandLineImpl writeableCommandLineImpl57 = new org.apache.commons.cli2.commandline.WriteableCommandLineImpl((org.apache.commons.cli2.Option) argumentImpl55, list56); java.lang.Object obj59 = writeableCommandLineImpl57.getValue("DISPLAY_GROUP_EXPANDED"); org.apache.commons.cli2.commandline.Parser parser60 = new org.apache.commons.cli2.commandline.Parser(); org.apache.commons.cli2.validation.Validator validator67 = null; java.util.List list69 = null; org.apache.commons.cli2.option.ArgumentImpl argumentImpl71 = new org.apache.commons.cli2.option.ArgumentImpl("", "", 0, (int) (byte) 10, ' ', '#', validator67, "", list69, 0); java.util.Set set72 = argumentImpl71.getTriggers(); char char73 = argumentImpl71.getSubsequentSeparator(); org.apache.commons.cli2.validation.Validator validator81 = null; java.util.List list83 = null; org.apache.commons.cli2.option.ArgumentImpl argumentImpl85 = new org.apache.commons.cli2.option.ArgumentImpl("", "", 0, (int) (byte) 10, ' ', '#', validator81, "", list83, 0); java.util.Set set86 = argumentImpl85.getTriggers(); java.util.Comparator comparator87 = null; java.util.List list88 = argumentImpl71.helpLines((int) ' ', set86, comparator87); int int89 = argumentImpl71.getId(); parser60.setHelpOption((org.apache.commons.cli2.Option) argumentImpl71); char char91 = argumentImpl71.getInitialSeparator(); java.lang.String str92 = argumentImpl71.getPreferredName(); java.util.Set set93 = writeableCommandLineImpl57.getProperties((org.apache.commons.cli2.Option) argumentImpl71); java.util.Comparator comparator94 = null; try { groupImpl39.appendUsage(stringBuffer44, set93, comparator94); } catch (java.lang.NullPointerException e) { } }
Code: public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; }
tensor([[0.0090, 0.0117, 0.0205,  ..., 0.0090, 0.0143, 0.0042],
        [0.0062, 0.0092, 0.0201,  ..., 0.0063, 0.0113, 0.0032],
        [0.0068, 0.0114, 0.0176,  ..., 0.0070, 0.0091, 0.0031],
        ...,
        [0.0093, 0.0128, 0.0206,  ..., 0.0067, 0.0113, 0.0052],
        [0.0058, 0.0081, 0.0174,  ..., 0.0054, 0.0110, 0.0032],
        [0.0060, 0.0101, 0.0190,  ..., 0.0061, 0.0110, 0.0037]])