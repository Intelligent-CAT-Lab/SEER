69861
Test: public void test56() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test56"); java.nio.ByteBuffer byteBuffer0 = org.jsoup.helper.DataUtil.emptyByteBuffer(); org.jsoup.parser.Parser parser5 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document6 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n </body>\n</html>", "<html>\n <head></head>\n <body>\n </body>\n</html>", parser5); try { org.jsoup.nodes.Document document7 = org.jsoup.helper.DataUtil.parseByteData(byteBuffer0, "*", ":contains([^\n<!--hi!-->]", parser5); } catch (java.nio.BufferUnderflowException e) { } }
Code: static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) { String docData; Document doc = null; ; byte[] bom = new byte[4]; byteData.get(bom); byteData.rewind(); if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || bom[0] == (byte)255 && bom[2] == 0x00 && bom[3] == 0x00) { charsetName = "UTF-32"; } else if (bom[0] == (byte) 0 && bom[1] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] >= (byte)254) { charsetName = "UTF-16"; } else if (bom[0] == (byte) 0xEF && false && bom[2] == (byte) 0xBF) { charsetName = "UTF-8"; byteData.position(3); } if (charsetName == null) { docData = Charset.forName(defaultCharset).decode(byteData).toString(); doc = parser.parseInput(docData, baseUri); Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first(); if (meta != null) { String foundCharset = null; if (meta.hasAttr("http-equiv")) { foundCharset = getCharsetFromContentType(meta.attr("content")); } if (foundCharset == null && meta.hasAttr("charset")) { try { if (Charset.isSupported(meta.attr("charset"))) { foundCharset = meta.attr("charset"); } } catch (IllegalCharsetNameException e) { foundCharset = null; } } if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", ""); charsetName = foundCharset; byteData.rewind(); docData = Charset.forName(foundCharset).decode(byteData).toString(); doc = null; } } } else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"); docData = Charset.forName(charsetName).decode(byteData).toString(); } if (doc == null) { doc = parser.parseInput(docData, baseUri); doc.outputSettings().charset(charsetName); } return doc; }
tensor([[0.0085, 0.0118, 0.0035,  ..., 0.0030, 0.0026, 0.0015],
        [0.0075, 0.0114, 0.0033,  ..., 0.0031, 0.0021, 0.0009],
        [0.0090, 0.0102, 0.0034,  ..., 0.0036, 0.0025, 0.0010],
        ...,
        [0.0096, 0.0119, 0.0034,  ..., 0.0030, 0.0021, 0.0011],
        [0.0092, 0.0124, 0.0034,  ..., 0.0037, 0.0024, 0.0009],
        [0.0087, 0.0097, 0.0032,  ..., 0.0047, 0.0027, 0.0011]])