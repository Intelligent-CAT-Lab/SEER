61038
Test: public void test1032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1032"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withQuoteChar((java.lang.Character) '\t'); java.lang.String str3 = cSVFormat2.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withRecordSeparator('\037'); org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat6.validate(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat8.validate(); org.apache.commons.csv.Quote quote10 = null; org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuotePolicy(quote10); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray15 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str16 = cSVFormat6.format(objArray15); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat17.validate(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withIgnoreEmptyLines(true); java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23); java.lang.String str25 = cSVFormat6.format((java.lang.Object[]) strArray23); java.lang.Character char26 = cSVFormat6.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat6.withEscape((java.lang.Character) '\\'); org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat29.validate(); org.apache.commons.csv.Quote quote31 = null; org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat29.withQuotePolicy(quote31); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withQuoteChar('\t'); java.lang.Character char35 = cSVFormat34.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat34.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat39 = cSVFormat37.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat40.validate(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withIgnoreEmptyLines(true); java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat47 = cSVFormat40.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat39.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat28.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat5.withHeader(strArray46); org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat51.validate(); org.apache.commons.csv.Quote quote53 = null; org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withQuotePolicy(quote53); org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat54.withEscape((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat56.withCommentStart(','); org.apache.commons.csv.CSVFormat cSVFormat60 = cSVFormat56.withRecordSeparator("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"); org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat60.withNullString(""); org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat65 = cSVFormat63.withNullString("hi!"); char char66 = cSVFormat63.getDelimiter(); org.apache.commons.csv.CSVFormat cSVFormat67 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat67.validate(); org.apache.commons.csv.CSVFormat cSVFormat70 = cSVFormat67.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote71 = null; org.apache.commons.csv.CSVFormat cSVFormat72 = cSVFormat70.withQuotePolicy(quote71); org.apache.commons.csv.CSVFormat cSVFormat73 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat73.validate(); org.apache.commons.csv.CSVFormat cSVFormat75 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat75.validate(); org.apache.commons.csv.Quote quote77 = null; org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat75.withQuotePolicy(quote77); org.apache.commons.csv.CSVFormat cSVFormat80 = cSVFormat78.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray82 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str83 = cSVFormat73.format(objArray82); org.apache.commons.csv.CSVFormat cSVFormat84 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat84.validate(); org.apache.commons.csv.CSVFormat cSVFormat87 = cSVFormat84.withIgnoreEmptyLines(true); java.lang.String[] strArray90 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat91 = cSVFormat84.withHeader(strArray90); java.lang.String str92 = cSVFormat73.format((java.lang.Object[]) strArray90); org.apache.commons.csv.CSVFormat cSVFormat93 = cSVFormat70.withHeader(strArray90); org.apache.commons.csv.CSVFormat cSVFormat94 = cSVFormat63.withHeader(strArray90); java.lang.String str95 = cSVFormat60.format((java.lang.Object[]) strArray90); org.apache.commons.csv.CSVFormat cSVFormat96 = cSVFormat5.withHeader(strArray90); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(recordSeparator != null) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (getIgnoreEmptyLines()) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { sb.append(" SurroundingSpaces:ignored"); } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (header != null) { sb.append(' '); sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0075, 0.0092, 0.0076,  ..., 0.0088, 0.0285, 0.0040],
        [0.0072, 0.0078, 0.0075,  ..., 0.0077, 0.0361, 0.0034],
        [0.0049, 0.0074, 0.0037,  ..., 0.0077, 0.0355, 0.0032],
        ...,
        [0.0049, 0.0070, 0.0036,  ..., 0.0065, 0.0380, 0.0034],
        [0.0052, 0.0086, 0.0053,  ..., 0.0090, 0.0329, 0.0033],
        [0.0050, 0.0091, 0.0084,  ..., 0.0120, 0.0327, 0.0034]])