101122
Test: public void test0367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0367"); org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int2 = julianChronology0.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology0); int int4 = julianChronology0.getMaxYear(); org.joda.time.DateTimeField dateTimeField5 = julianChronology0.centuryOfEra(); org.joda.time.chrono.BasicYearDateTimeField basicYearDateTimeField6 = new org.joda.time.chrono.BasicYearDateTimeField((org.joda.time.chrono.BasicChronology) julianChronology0); long long9 = basicYearDateTimeField6.addWrapField((long) 2759289, 182); org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField12 = gJChronology11.yearOfCentury(); org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology11); org.joda.time.DurationField durationField14 = gJChronology11.eras(); org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology11); org.joda.time.ReadablePeriod readablePeriod16 = null; org.joda.time.LocalDate localDate18 = localDate15.withPeriodAdded(readablePeriod16, (-28800000)); org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology20 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean21 = iSOChronology19.equals((java.lang.Object) iSOChronology20); org.joda.time.chrono.GJChronology gJChronology23 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField24 = gJChronology23.yearOfCentury(); org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology23); org.joda.time.DurationField durationField26 = gJChronology23.eras(); org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology23); int[] intArray29 = iSOChronology20.get((org.joda.time.ReadablePartial) localDate27, (-1123200000L)); int int30 = basicYearDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDate18, intArray29); org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfHalfday(); try { org.joda.time.LocalDate.Property property32 = localDate18.property(dateTimeFieldType31); } catch (java.lang.IllegalArgumentException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])