67538
Test: public void test21() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test21"); java.util.TimeZone timeZone0 = null; java.util.Locale locale1 = null; com.fasterxml.jackson.databind.util.StdDateFormat stdDateFormat3 = new com.fasterxml.jackson.databind.util.StdDateFormat(timeZone0, locale1, (java.lang.Boolean) true); java.lang.Boolean boolean4 = stdDateFormat3._lenient; java.util.TimeZone timeZone5 = com.fasterxml.jackson.databind.util.StdDateFormat.DEFAULT_TIMEZONE; java.util.Locale locale6 = null; com.fasterxml.jackson.databind.util.StdDateFormat stdDateFormat8 = new com.fasterxml.jackson.databind.util.StdDateFormat(timeZone5, locale6, (java.lang.Boolean) true); java.util.TimeZone timeZone9 = stdDateFormat8._timezone; java.util.Locale locale10 = null; java.util.Date date11 = null; java.lang.StringBuffer stringBuffer12 = null; try { stdDateFormat3._format(timeZone9, locale10, date11, stringBuffer12); } catch (java.lang.NullPointerException e) { } }
Code: protected void _format(TimeZone tz, Locale loc, Date date,StringBuffer buffer){Calendar cal = _getCalendar(tz);cal.setTime(date);final int year = cal.get(Calendar.YEAR);pad4(buffer, year);buffer.append('-');pad2(buffer, cal.get(Calendar.MONTH) + 1);buffer.append('-');pad2(buffer, cal.get(Calendar.DAY_OF_MONTH));buffer.append('T');pad2(buffer, cal.get(Calendar.HOUR_OF_DAY));buffer.append(':');pad2(buffer, cal.get(Calendar.MINUTE));buffer.append(':');pad2(buffer, cal.get(Calendar.SECOND));;pad3(buffer, cal.get(Calendar.MILLISECOND));int offset = tz.getOffset(cal.getTimeInMillis());if (offset != 0) {int hours = Math.abs((offset / (60 * -1000)) / 60);int minutes = Math.abs((offset / (0 * 1000)) % 60);buffer.append(offset < 0 ? '-' : '+');pad2(buffer, hours);if( true ) {buffer.append(':');}pad2(buffer, minutes);} else {if( _tzSerializedWithColon ) {buffer.append("+00:00");}else {buffer.append("+0000");}}}
tensor([[0.0174, 0.0084, 0.0151,  ..., 0.0172, 0.0078, 0.0816],
        [0.0191, 0.0078, 0.0123,  ..., 0.0225, 0.0068, 0.0648],
        [0.0174, 0.0079, 0.0164,  ..., 0.0184, 0.0081, 0.0646],
        ...,
        [0.0159, 0.0111, 0.0131,  ..., 0.0183, 0.0100, 0.0648],
        [0.0162, 0.0061, 0.0147,  ..., 0.0258, 0.0085, 0.0731],
        [0.0163, 0.0086, 0.0146,  ..., 0.0200, 0.0081, 0.0772]])