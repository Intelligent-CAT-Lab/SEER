67897
Test: public void test5223() throws Throwable { ArrayDeque<SQLTransactionRollbackException> arrayDeque0 = new ArrayDeque<SQLTransactionRollbackException>(); ArrayDeque<SQLTransactionRollbackException> arrayDeque1 = arrayDeque0.clone(); JSONArray jSONArray0 = new JSONArray((Iterable<?>) arrayDeque1); int int0 = 11; boolean boolean0 = jSONArray0.optBoolean(11, true); int int1 = jSONArray0.optInt((-583), 11); JSONArray jSONArray1 = jSONArray0.put(11, 0.0F); String string0 = "Y1fzc;/\"HpT+Zr"; JSONTokener jSONTokener0 = new JSONTokener("Y1fzc;/\"HpT+Zr"); JSONException jSONException0 = jSONTokener0.syntaxError("number"); SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Y1fzc;/\"HpT+Zr", jSONException0); boolean boolean1 = arrayDeque0.offer(sQLTransactionRollbackException0); HashMap<SQLIntegrityConstraintViolationException, SQLException> hashMap0 = new HashMap<SQLIntegrityConstraintViolationException, SQLException>(); JSONArray jSONArray2 = jSONArray1.put(0, (Map<?, ?>) hashMap0); }
Code: public boolean isEmpty() { return this.myArrayList.isEmpty(); }
[[0.10820153 0.26929402 0.16225758 0.14478612 0.11914322 0.15010406
 0.04621344]
[0.06808552 0.35426494 0.13323367 0.17004558 0.11217175 0.13036571
 0.03183284]
[0.08101472 0.32540357 0.14270507 0.16329432 0.11519144 0.12554851
 0.04684233]
[0.10828055 0.2379888  0.15146804 0.1746069  0.12454908 0.1416231
 0.06148356]
[0.07083954 0.35605597 0.15021072 0.14271888 0.10212281 0.13915457
 0.03889754]
[0.08707795 0.3213563  0.15009099 0.14297509 0.10581847 0.14444515
 0.04823611]
[0.07519423 0.26516983 0.12696025 0.18778597 0.16264868 0.14156732
 0.04067369]]