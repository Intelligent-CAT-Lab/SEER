,method,test
0,"  public static <V> com.google.common.util.concurrent.ListenableFuture<V> asGuavaFuture(final ListenableFuture<V> future) {

    return new com.google.common.util.concurrent.ListenableFuture<V>() {

      public boolean cancel(boolean mayInterruptIfRunning) {
        return future.cancel(mayInterruptIfRunning);
      }

      public V get() throws InterruptedException, ExecutionException {
        return future.get();
      }

      public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
        return future.get(timeout, unit);
      }

      public boolean isCancelled() {
        return future.isCancelled();
      }

      public boolean isDone() {
        return future.isDone();
      }

      public void addListener(final Runnable runnable, final Executor executor) {
        future.addListener(runnable, executor);
      }
    };
  }","  public void test0()  throws Throwable  {
      ListenableFutureAdapter listenableFutureAdapter0 = new ListenableFutureAdapter();
      ListenableFuture<Integer> listenableFuture0 = ListenableFutureAdapter.asGuavaFuture((org.asynchttpclient.ListenableFuture<Integer>) null);
}"
1,"  public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
    try {
      if (logger.isDebugEnabled()) {
        logger.debug(""Current Throttling Status {}"", available.availablePermits());
      }

      long startOfWait = System.currentTimeMillis();
      attemptConcurrencyPermitAcquisition(ctx);

      attemptRateLimitedPermitAcquisition(ctx, startOfWait);
    } catch (InterruptedException e) {
      throw new FilterException(String.format(""Interrupted Request %s with AsyncHandler %s"", ctx.getRequest(), ctx.getAsyncHandler()));
    }

    return new FilterContext.FilterContextBuilder<>(ctx)
            .asyncHandler(ReleasePermitOnComplete.wrap(ctx.getAsyncHandler(), available))
            .build();
  }","  public void test0()  throws Throwable  {
      RateLimitedThrottleRequestFilter rateLimitedThrottleRequestFilter0 = new RateLimitedThrottleRequestFilter(Integer.MAX_VALUE, Integer.MAX_VALUE, (-1));
      FilterContext<String> filterContext0 = (FilterContext<String>) mock(FilterContext.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler) null, (AsyncHandler) null).when(filterContext0).getAsyncHandler();
      doReturn((IOException) null).when(filterContext0).getIOException();
      doReturn((Request) null).when(filterContext0).getRequest();
      doReturn((HttpResponseStatus) null).when(filterContext0).getResponseStatus();
      doReturn(false).when(filterContext0).replayRequest();
      // Undeclared exception!
      try { 
        rateLimitedThrottleRequestFilter0.filter((FilterContext<String>) filterContext0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.filter.ReleasePermitOnComplete"", e);
      }
  }"
2,"  public RateLimitedThrottleRequestFilter(int maxConnections, double rateLimitPerSecond) {
    this(maxConnections, rateLimitPerSecond, Integer.MAX_VALUE);
  }","  public void test1()  throws Throwable  {
      RateLimitedThrottleRequestFilter rateLimitedThrottleRequestFilter0 = null;
      try {
        rateLimitedThrottleRequestFilter0 = new RateLimitedThrottleRequestFilter(0, 0, (-1737));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // rate must be positive
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
3,"  public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
    try {
      if (logger.isDebugEnabled()) {
        logger.debug(""Current Throttling Status {}"", available.availablePermits());
      }

      long startOfWait = System.currentTimeMillis();
      attemptConcurrencyPermitAcquisition(ctx);

      attemptRateLimitedPermitAcquisition(ctx, startOfWait);
    } catch (InterruptedException e) {
      throw new FilterException(String.format(""Interrupted Request %s with AsyncHandler %s"", ctx.getRequest(), ctx.getAsyncHandler()));
    }

    return new FilterContext.FilterContextBuilder<>(ctx)
            .asyncHandler(ReleasePermitOnComplete.wrap(ctx.getAsyncHandler(), available))
            .build();
  }","  public void test2()  throws Throwable  {
      RateLimitedThrottleRequestFilter rateLimitedThrottleRequestFilter0 = new RateLimitedThrottleRequestFilter((-1418), 1715.6282, (-302));
      FilterContext<RateLimitedThrottleRequestFilter> filterContext0 = (FilterContext<RateLimitedThrottleRequestFilter>) mock(FilterContext.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler) null).when(filterContext0).getAsyncHandler();
      doReturn((Request) null).when(filterContext0).getRequest();
      try { 
        rateLimitedThrottleRequestFilter0.filter((FilterContext<RateLimitedThrottleRequestFilter>) filterContext0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No slot available for processing Request null with AsyncHandler null
         //
         verifyException(""org.asynchttpclient.extras.guava.RateLimitedThrottleRequestFilter"", e);
      }
  }"
4,"  public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
    try {
      if (logger.isDebugEnabled()) {
        logger.debug(""Current Throttling Status {}"", available.availablePermits());
      }

      long startOfWait = System.currentTimeMillis();
      attemptConcurrencyPermitAcquisition(ctx);

      attemptRateLimitedPermitAcquisition(ctx, startOfWait);
    } catch (InterruptedException e) {
      throw new FilterException(String.format(""Interrupted Request %s with AsyncHandler %s"", ctx.getRequest(), ctx.getAsyncHandler()));
    }

    return new FilterContext.FilterContextBuilder<>(ctx)
            .asyncHandler(ReleasePermitOnComplete.wrap(ctx.getAsyncHandler(), available))
            .build();
  }","  public void test3()  throws Throwable  {
      RateLimitedThrottleRequestFilter rateLimitedThrottleRequestFilter0 = new RateLimitedThrottleRequestFilter(1305, 1.0);
      FilterContext<Integer> filterContext0 = (FilterContext<Integer>) mock(FilterContext.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler) null, (AsyncHandler) null).when(filterContext0).getAsyncHandler();
      doReturn((IOException) null).when(filterContext0).getIOException();
      doReturn((Request) null).when(filterContext0).getRequest();
      doReturn((HttpResponseStatus) null).when(filterContext0).getResponseStatus();
      doReturn(false).when(filterContext0).replayRequest();
      // Undeclared exception!
      try { 
        rateLimitedThrottleRequestFilter0.filter(filterContext0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.filter.ReleasePermitOnComplete"", e);
      }
  }"
5,"  public RateLimitedThrottleRequestFilter(int maxConnections, double rateLimitPerSecond) {
    this(maxConnections, rateLimitPerSecond, Integer.MAX_VALUE);
  }","  public void test4()  throws Throwable  {
      RateLimitedThrottleRequestFilter rateLimitedThrottleRequestFilter0 = null;
      try {
        rateLimitedThrottleRequestFilter0 = new RateLimitedThrottleRequestFilter((-1), 0.0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // rate must be positive
         //
         verifyException(""com.google.common.base.Preconditions"", e);
      }
  }"
6,"  public static Promise<Response, Throwable, HttpProgress> promise(final BoundRequestBuilder builder) {
    return new AsyncHttpDeferredObject(builder).promise();
  }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        AsyncHttpDeferredObject.promise((BoundRequestBuilder) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.jdeferred.AsyncHttpDeferredObject"", e);
      }
  }"
7,"  public AsyncHttpDeferredObject(BoundRequestBuilder builder) {
    builder.execute(new AsyncCompletionHandler<Void>() {
      @Override
      public Void onCompleted(Response response) {
        AsyncHttpDeferredObject.this.resolve(response);
        return null;
      }

      @Override
      public void onThrowable(Throwable t) {
        AsyncHttpDeferredObject.this.reject(t);
      }

      @Override
      public AsyncHandler.State onContentWriteProgress(long amount, long current, long total) {
        AsyncHttpDeferredObject.this.notify(new ContentWriteProgress(amount, current, total));
        return super.onContentWriteProgress(amount, current, total);
      }

      @Override
      public AsyncHandler.State onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
        AsyncHttpDeferredObject.this.notify(new HttpResponseBodyPartProgress(content));
        return super.onBodyPartReceived(content);
      }
    });
  }","  public void test1()  throws Throwable  {
      AsyncHttpDeferredObject asyncHttpDeferredObject0 = null;
      try {
        asyncHttpDeferredObject0 = new AsyncHttpDeferredObject((BoundRequestBuilder) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.jdeferred.AsyncHttpDeferredObject"", e);
      }
  }"
8,"  public HttpResponseBodyPart getPart() {
    return part;
  }","  public void test0()  throws Throwable  {
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart((ByteBuf) null, false);
      HttpResponseBodyPartProgress httpResponseBodyPartProgress0 = new HttpResponseBodyPartProgress(lazyResponseBodyPart0);
      HttpResponseBodyPart httpResponseBodyPart0 = httpResponseBodyPartProgress0.getPart();
}"
9,"  public String toString() {
    return ""HttpResponseBodyPartProgress [part="" + part + ""]"";
  }","  public void test1()  throws Throwable  {
      HttpResponseBodyPartProgress httpResponseBodyPartProgress0 = new HttpResponseBodyPartProgress((HttpResponseBodyPart) null);
      String string0 = httpResponseBodyPartProgress0.toString();
}"
10,"  public HttpResponseBodyPart getPart() {
    return part;
  }","  public void test2()  throws Throwable  {
      HttpResponseBodyPartProgress httpResponseBodyPartProgress0 = new HttpResponseBodyPartProgress((HttpResponseBodyPart) null);
      HttpResponseBodyPart httpResponseBodyPart0 = httpResponseBodyPartProgress0.getPart();
}"
11,"  public long getTotal() {
    return total;
  }","  public void test0()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(0L, 0L, 0L);
      long long0 = contentWriteProgress0.getTotal();
}"
12,"  public long getCurrent() {
    return current;
  }","  public void test1()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-2L), (-2L), (-2L));
      long long0 = contentWriteProgress0.getTotal();
}"
13,"  public long getTotal() {
    return total;
  }","  public void test2()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-2L), (-2L), (-2L));
      long long0 = contentWriteProgress0.getTotal();
}"
14,"  public long getAmount() {
    return amount;
  }","  public void test3()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-2L), (-2L), (-2L));
      long long0 = contentWriteProgress0.getTotal();
}"
15,"  public long getCurrent() {
    return current;
  }","  public void test4()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(0L, 0L, 0L);
      long long0 = contentWriteProgress0.getCurrent();
}"
16,"  public long getCurrent() {
    return current;
  }","  public void test5()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-1638L), (-1638L), (-1638L));
      long long0 = contentWriteProgress0.getCurrent();
}"
17,"  public long getTotal() {
    return total;
  }","  public void test6()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-1638L), (-1638L), (-1638L));
      long long0 = contentWriteProgress0.getCurrent();
}"
18,"  public long getAmount() {
    return amount;
  }","  public void test7()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-1638L), (-1638L), (-1638L));
      long long0 = contentWriteProgress0.getCurrent();
}"
19,"  public long getAmount() {
    return amount;
  }","  public void test8()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(0L, 0L, 0L);
      long long0 = contentWriteProgress0.getAmount();
}"
20,"  public long getAmount() {
    return amount;
  }","  public void test9()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-7L), (-7L), (-7L));
      long long0 = contentWriteProgress0.getAmount();
}"
21,"  public long getCurrent() {
    return current;
  }","  public void test10()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-7L), (-7L), (-7L));
      long long0 = contentWriteProgress0.getAmount();
}"
22,"  public long getTotal() {
    return total;
  }","  public void test11()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress((-7L), (-7L), (-7L));
      long long0 = contentWriteProgress0.getAmount();
}"
23,"  public long getTotal() {
    return total;
  }","  public void test12()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getTotal();
}"
24,"  public long getAmount() {
    return amount;
  }","  public void test13()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getTotal();
}"
25,"  public long getCurrent() {
    return current;
  }","  public void test14()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getTotal();
}"
26,"  public long getTotal() {
    return total;
  }","  public void test15()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getCurrent();
}"
27,"  public long getCurrent() {
    return current;
  }","  public void test16()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getCurrent();
}"
28,"  public long getAmount() {
    return amount;
  }","  public void test17()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getCurrent();
}"
29,"  public String toString() {
    return ""ContentWriteProgress [amount="" + amount + "", current="" + current + "", total="" + total + ""]"";
  }","  public void test18()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      String string0 = contentWriteProgress0.toString();
}"
30,"  public long getAmount() {
    return amount;
  }","  public void test19()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getAmount();
}"
31,"  public long getCurrent() {
    return current;
  }","  public void test20()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getAmount();
}"
32,"  public long getTotal() {
    return total;
  }","  public void test21()  throws Throwable  {
      ContentWriteProgress contentWriteProgress0 = new ContentWriteProgress(2538L, 2538L, 2538L);
      long long0 = contentWriteProgress0.getAmount();
}"
33,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    byteBuffer.put(byteBuffer);
  }","  public void test0()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)324);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      ByteBufferBodyConsumer byteBufferBodyConsumer0 = new ByteBufferBodyConsumer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBodyConsumer0.consume(byteBuffer1);
        fail(""Expecting exception: ReadOnlyBufferException"");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.DirectByteBufferR"", e);
      }
  }"
34,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    byteBuffer.put(byteBuffer);
  }","  public void test1()  throws Throwable  {
      ByteBufferBodyConsumer byteBufferBodyConsumer0 = new ByteBufferBodyConsumer((ByteBuffer) null);
      // Undeclared exception!
      try { 
        byteBufferBodyConsumer0.consume((ByteBuffer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.ByteBufferBodyConsumer"", e);
      }
  }"
35,"  public void close() throws IOException {
    byteBuffer.flip();
  }","  public void test2()  throws Throwable  {
      ByteBufferBodyConsumer byteBufferBodyConsumer0 = new ByteBufferBodyConsumer((ByteBuffer) null);
      // Undeclared exception!
      try { 
        byteBufferBodyConsumer0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.ByteBufferBodyConsumer"", e);
      }
  }"
36,"  public void close() throws IOException {
    byteBuffer.flip();
  }","  public void test3()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)324);
      ByteBufferBodyConsumer byteBufferBodyConsumer0 = new ByteBufferBodyConsumer(byteBuffer0);
      byteBufferBodyConsumer0.close();
  }"
37,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    byteBuffer.put(byteBuffer);
  }","  public void test4()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((short)324);
      ByteBufferBodyConsumer byteBufferBodyConsumer0 = new ByteBufferBodyConsumer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.DirectByteBuffer"", e);
      }
  }"
38,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test0()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setHeader(""io.netty.handler.ssl.JettyAlpnSslEngine"", simpleAsyncHttpClient_Builder0);
}"
39,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test1()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = 'p';
      charArray0[2] = '4';
      charArray0[3] = '5';
      AsciiString asciiString0 = new AsciiString(charArray0);
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addHeader(asciiString0, (Object) null);
}"
40,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test2()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setVirtualHost(""EMI"");
}"
41,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test3()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      // Undeclared exception!
      try { 
        simpleAsyncHttpClient_Builder0.setUrl(""61"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // 61 could not be parsed into a proper Uri, missing scheme
         //
         verifyException(""org.asynchttpclient.uri.Uri"", e);
      }
  }"
42,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test4()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setResumableDownload(true);
}"
43,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test5()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setFormParams((List<Param>) linkedList0);
}"
44,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test6()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setFollowRedirect(false);
}"
45,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test7()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addQueryParam(""8"", ""GET"");
}"
46,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test8()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addFormParam(""Reauthenticated cached principal '"", ""-H3>As^1EOC=G65T+"");
}"
47,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test9()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      byte[] byteArray0 = new byte[7];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""low"", byteArray0, ""CjZol"");
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addBodyPart(byteArrayPart0);
}"
48,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test10()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setHeaders((HttpHeaders) null);
}"
49,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test11()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      DefaultCookie defaultCookie0 = new DefaultCookie(""domain"", ""domain"");
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addCookie(defaultCookie0);
}"
50,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test12()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setHeader(""DELETE"", ""h;<fyB4`;"");
}"
51,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test13()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(""nm"");
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addHeader("">e"", jMXPrincipal0);
}"
52,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test14()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyPrincipal("""");
      simpleAsyncHttpClient_Builder1.setProxyHost("""");
      SimpleAsyncHttpClient simpleAsyncHttpClient0 = simpleAsyncHttpClient_Builder1.build();
}"
53,"  public void close() throws IOException {
    if (!derived && asyncHttpClient != null) {
      asyncHttpClient.close();
    }
  }","  public void test15()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient simpleAsyncHttpClient0 = simpleAsyncHttpClient_Builder0.build();
      simpleAsyncHttpClient0.close();
  }"
54,"  public Future<Response> post(Part... parts) throws IOException {
    RequestBuilder r = rebuildRequest(requestBuilder.build());
    r.setMethod(""POST"");

    for (Part part : parts) {
      r.addBodyPart(part);
    }

    return execute(r, null, null);
  }","  public void test16()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient simpleAsyncHttpClient0 = simpleAsyncHttpClient_Builder0.build();
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        simpleAsyncHttpClient0.post((BodyConsumer) fileBodyConsumer0, (Part[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.SimpleAsyncHttpClient"", e);
      }
  }"
55,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test17()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addFormParam("""", ""GET"");
}"
56,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test18()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setPooledConnectionIdleTimeout(3);
}"
57,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test19()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setResumableDownload(false);
}"
58,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test20()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setFollowRedirect(true);
}"
59,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test21()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      // Undeclared exception!
      try { 
        simpleAsyncHttpClient_Builder0.setUrl((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // originalUrl
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
60,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test22()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      ThrowableHandler throwableHandler0 = mock(ThrowableHandler.class, new ViolatedAssumptionAnswer());
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setDefaultThrowableHandler(throwableHandler0);
}"
61,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test23()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      DefaultCookie defaultCookie0 = new DefaultCookie(""}C;u'p,4;"", ""UXRe{\""VEAC"");
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.addCookie(defaultCookie0);
}"
62,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test24()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addBodyPart((Part) null);
}"
63,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test25()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyPassword(""EHjy}q,8l:Xg}K"");
}"
64,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test26()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setCompressionEnforced(true);
}"
65,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test27()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyAuthScheme(realm_AuthScheme0);
}"
66,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test28()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setConnectTimeout((-1255));
}"
67,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test29()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyPort(0);
}"
68,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test30()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setRealm(realm0);
}"
69,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test31()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.addQueryParam(""8%*"", ""8%*"");
}"
70,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test32()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setKeepAlive(false);
}"
71,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test33()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAHCTransferListener simpleAHCTransferListener0 = mock(SimpleAHCTransferListener.class, new ViolatedAssumptionAnswer());
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setListener(simpleAHCTransferListener0);
}"
72,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test34()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SSLContext sSLContext0 = SSLContext.getDefault();
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory(sSLContext0);
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setSslEngineFactory(jsseSslEngineFactory0);
}"
73,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test35()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      Vector<Param> vector0 = new Vector<Param>();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setFormParams((List<Param>) vector0);
}"
74,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test36()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setUserAgent(""O!tA$T;sS1Y"");
}"
75,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test37()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setVirtualHost(""j2jq=Gi>Uy"");
}"
76,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test38()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setAcceptAnyCertificate(false);
}"
77,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test39()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setFormParams((Map<String, List<String>>) hashMap0);
}"
78,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test40()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.ErrorDocumentBehaviour simpleAsyncHttpClient_ErrorDocumentBehaviour0 = SimpleAsyncHttpClient.ErrorDocumentBehaviour.WRITE;
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setErrorDocumentBehaviour(simpleAsyncHttpClient_ErrorDocumentBehaviour0);
}"
79,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test41()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setMaxConnectionsPerHost(2003);
}"
80,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test42()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setSslContext((SslContext) null);
}"
81,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test43()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setMaxRequestRetry(444);
}"
82,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test44()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      DefaultHttpHeaders defaultHttpHeaders0 = new DefaultHttpHeaders(false);
      SimpleAsyncHttpClient.DerivedBuilder simpleAsyncHttpClient_DerivedBuilder0 = simpleAsyncHttpClient_Builder0.setHeaders((HttpHeaders) defaultHttpHeaders0);
}"
83,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test45()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(""8%*"", true);
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setThreadFactory(defaultThreadFactory0);
}"
84,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test46()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setProxyHost("""");
      SimpleAsyncHttpClient simpleAsyncHttpClient0 = simpleAsyncHttpClient_Builder1.build();
}"
85,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test47()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setMaxRedirects(435);
}"
86,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test48()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setMaxConnections(0);
}"
87,"  private SimpleAsyncHttpClient(AsyncHttpClientConfig config, RequestBuilder requestBuilder, ThrowableHandler defaultThrowableHandler,
                                ErrorDocumentBehaviour errorDocumentBehaviour, boolean resumeEnabled, AsyncHttpClient ahc, SimpleAHCTransferListener listener) {
    this.config = config;
    this.requestBuilder = requestBuilder;
    this.defaultThrowableHandler = defaultThrowableHandler;
    this.resumeEnabled = resumeEnabled;
    this.errorDocumentBehaviour = errorDocumentBehaviour;
    this.asyncHttpClient = ahc;
    this.listener = listener;

    this.derived = ahc != null;
  }","  public void test49()  throws Throwable  {
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder0 = new SimpleAsyncHttpClient.Builder();
      SimpleAsyncHttpClient.Builder simpleAsyncHttpClient_Builder1 = simpleAsyncHttpClient_Builder0.setRequestTimeout(3006);
}"
88,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    outputStream.write(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining());
  }","  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamBodyConsumer outputStreamBodyConsumer0 = new OutputStreamBodyConsumer(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 1, 0);
      outputStreamBodyConsumer0.consume(byteBuffer0);
}"
89,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    outputStream.write(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining());
  }","  public void test1()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(""C}|<Gg"");
      OutputStreamBodyConsumer outputStreamBodyConsumer0 = new OutputStreamBodyConsumer(mockPrintStream0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      // Undeclared exception!
      try { 
        outputStreamBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.ByteBuffer"", e);
      }
  }"
90,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    outputStream.write(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining());
  }","  public void test2()  throws Throwable  {
      OutputStreamBodyConsumer outputStreamBodyConsumer0 = new OutputStreamBodyConsumer((OutputStream) null);
      // Undeclared exception!
      try { 
        outputStreamBodyConsumer0.consume((ByteBuffer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.OutputStreamBodyConsumer"", e);
      }
  }"
91,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    outputStream.write(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining());
  }","  public void test3()  throws Throwable  {
      File file0 = MockFile.createTempFile(""s;`B%(0a"", ""s;`B%(0a"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      OutputStreamBodyConsumer outputStreamBodyConsumer0 = new OutputStreamBodyConsumer(mockFileOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("""");
      try { 
        outputStreamBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
      }
  }"
92,"  public void close() throws IOException {
    outputStream.close();
  }","  public void test4()  throws Throwable  {
      OutputStreamBodyConsumer outputStreamBodyConsumer0 = new OutputStreamBodyConsumer((OutputStream) null);
      // Undeclared exception!
      try { 
        outputStreamBodyConsumer0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.OutputStreamBodyConsumer"", e);
      }
  }"
93,"  public void close() throws IOException {
    outputStream.close();
  }","  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamBodyConsumer outputStreamBodyConsumer0 = new OutputStreamBodyConsumer(byteArrayOutputStream0);
      outputStreamBodyConsumer0.close();
  }"
94,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    appendable
            .append(new String(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining(), charset));
  }","  public void test0()  throws Throwable  {
      Utf8Decoder utf8Decoder0 = new Utf8Decoder();
      Charset charset0 = utf8Decoder0.charset();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer(charBuffer1);
      appendableBodyConsumer0.consume(byteBuffer0);
}"
95,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    appendable
            .append(new String(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining(), charset));
  }","  public void test1()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer(charBuffer0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        appendableBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: BufferOverflowException"");
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.CharBuffer"", e);
      }
  }"
96,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    appendable
            .append(new String(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining(), charset));
  }","  public void test2()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer(stringWriter0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1462);
      // Undeclared exception!
      try { 
        appendableBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.ByteBuffer"", e);
      }
  }"
97,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    appendable
            .append(new String(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining(), charset));
  }","  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, ""vL9'ppGCg]"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      Utf8Decoder utf8Decoder0 = new Utf8Decoder();
      Charset charset0 = utf8Decoder0.charset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3497);
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer(mockFileWriter0, charset0);
      appendableBodyConsumer0.close();
      try { 
        appendableBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
      }
  }"
98,"  public void close() throws IOException {
    if (appendable instanceof Closeable) {
      Closeable.class.cast(appendable).close();
    }
  }","  public void test4()  throws Throwable  {
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer((Appendable) null);
      appendableBodyConsumer0.close();
  }"
99,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    appendable
            .append(new String(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining(), charset));
  }","  public void test5()  throws Throwable  {
      AppendableBodyConsumer appendableBodyConsumer0 = new AppendableBodyConsumer((Appendable) null);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        appendableBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.AppendableBodyConsumer"", e);
      }
  }"
100,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    // TODO: Channel.transferFrom may be a good idea to investigate.
    file.write(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining());
  }","  public void test0()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      byteBuffer0.putLong(0L);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.FileBodyConsumer"", e);
      }
  }"
101,"  public long getTransferredBytes() throws IOException {
    return file.length();
  }","  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""+=k*4S2_"");
      File file0 = MockFile.createTempFile(""!&@)hUU82[DHSYB?<0"", ""!&@)hUU82[DHSYB?<0"", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, ""r"");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      long long0 = fileBodyConsumer0.getTransferredBytes();
}"
102,"  public long getTransferredBytes() throws IOException {
    return file.length();
  }","  public void test2()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""+=k*4S2_/!&@)hUU82[DHSYB?<00!&@)hUU82[DHSYB?<0"");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile(""+=k*4S2_"");
      File file0 = MockFile.createTempFile(""!&@)hUU82[DHSYB?<0"", ""!&@)hUU82[DHSYB?<0"", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, ""r"");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      long long0 = fileBodyConsumer0.getTransferredBytes();
}"
103,"  public void resume() throws IOException {
    file.seek(getTransferredBytes());
  }","  public void test3()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.resume();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.FileBodyConsumer"", e);
      }
  }"
104,"  public void resume() throws IOException {
    file.seek(getTransferredBytes());
  }","  public void test4()  throws Throwable  {
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile("""", ""r"");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      try { 
        fileBodyConsumer0.resume();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
      }
  }"
105,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    // TODO: Channel.transferFrom may be a good idea to investigate.
    file.write(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining());
  }","  public void test5()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(7);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.consume(byteBuffer1);
        fail(""Expecting exception: ReadOnlyBufferException"");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.ByteBuffer"", e);
      }
  }"
106,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    // TODO: Channel.transferFrom may be a good idea to investigate.
    file.write(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining());
  }","  public void test6()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(821);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.ByteBuffer"", e);
      }
  }"
107,"  public void consume(ByteBuffer byteBuffer) throws IOException {
    // TODO: Channel.transferFrom may be a good idea to investigate.
    file.write(byteBuffer.array(), byteBuffer.arrayOffset() + byteBuffer.position(), byteBuffer.remaining());
  }","  public void test7()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""+=k*4S2_"");
      File file0 = MockFile.createTempFile(""!&@)hUU82[DHSYB?<0"", ""!&@)hUU82[DHSYB?<0"", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, ""r"");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(31);
      try { 
        fileBodyConsumer0.consume(byteBuffer0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
      }
  }"
108,"  public void close() throws IOException {
    file.close();
  }","  public void test8()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.FileBodyConsumer"", e);
      }
  }"
109,"  public void close() throws IOException {
    file.close();
  }","  public void test9()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""q&@)hUU2[>HSYB?<0"");
      File file0 = MockFile.createTempFile(""q&@)hUU2[>HSYB?<0"", ""q&@)hUU2[>HSYB?<0"", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, ""r"");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        fileBodyConsumer0.close();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
110,"  public long getTransferredBytes() throws IOException {
    return file.length();
  }","  public void test10()  throws Throwable  {
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        fileBodyConsumer0.getTransferredBytes();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.simple.FileBodyConsumer"", e);
      }
  }"
111,"  public long getTransferredBytes() throws IOException {
    return file.length();
  }","  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""+=k*4S2_"");
      File file0 = MockFile.createTempFile(""!&@)hUU82[DHSYB?<0"", ""!&@)hUU82[DHSYB?<0"", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, ""r"");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      fileBodyConsumer0.close();
      try { 
        fileBodyConsumer0.getTransferredBytes();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
      }
  }"
112,"  public long getTransferredBytes() throws IOException {
    return file.length();
  }","  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""+=k*4S2_"");
      File file0 = MockFile.createTempFile(""!&@)hUU82[DHSYB?<0"", ""!&@)hUU82[DHSYB?<0"", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = new MockRandomAccessFile(file0, ""r"");
      FileBodyConsumer fileBodyConsumer0 = new FileBodyConsumer(mockRandomAccessFile0);
      fileBodyConsumer0.resume();
}"
113,"  public DisposedException(String message) {
    super(message);
  }","  public void test0()  throws Throwable  {
      DisposedException disposedException0 = new DisposedException("""");
}"
114,"  public MaybeAsyncHandlerBridge(MaybeEmitter<T> emitter, AsyncHandler<? extends T> delegate) {
    super(emitter);
    this.delegate = requireNonNull(delegate);
  }","  public void test0()  throws Throwable  {
      MaybeEmitter<String> maybeEmitter0 = (MaybeEmitter<String>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<String> maybeAsyncHandlerBridge0 = null;
      try {
        maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<String>(maybeEmitter0, (AsyncHandler<? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
115,,"  public void test0()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
  }"
116,"  public final State onStatusReceived(HttpResponseStatus status) throws Exception {
    return emitter.isDisposed() ? disposed() : delegate().onStatusReceived(status);
  }","  public void test1()  throws Throwable  {
      MaybeEmitter<Integer> maybeEmitter0 = (MaybeEmitter<Integer>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      AsyncHandler<Integer> asyncHandler0 = (AsyncHandler<Integer>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(asyncHandler0).onStatusReceived(any(org.asynchttpclient.HttpResponseStatus.class));
      MaybeAsyncHandlerBridge<Integer> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<Integer>(maybeEmitter0, asyncHandler0);
      maybeAsyncHandlerBridge0.onStatusReceived((HttpResponseStatus) null);
  }"
117,"  protected final AsyncHandler.State disposed() {
    if (!delegateTerminated.getAndSet(true)) {

      DisposedException disposed = sharedDisposed;
      if (disposed == null) {
        disposed = new DisposedException(""Subscription has been disposed."");
        final StackTraceElement[] stackTrace = disposed.getStackTrace();
        if (stackTrace.length > 0) {
          disposed.setStackTrace(new StackTraceElement[]{stackTrace[0]});
        }

        sharedDisposed = disposed;
      }

      delegate().onThrowable(disposed);
    }

    return State.ABORT;
  }","  public void test2()  throws Throwable  {
      MaybeEmitter<ScheduledDirectTask> maybeEmitter0 = (MaybeEmitter<ScheduledDirectTask>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      ProgressAsyncHandler<ScheduledDirectTask> progressAsyncHandler0 = (ProgressAsyncHandler<ScheduledDirectTask>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<ScheduledDirectTask> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<ScheduledDirectTask>(maybeEmitter0, progressAsyncHandler0);
      ProgressAsyncHandler<? extends ScheduledDirectTask> progressAsyncHandler1 = progressAsyncMaybeEmitterBridge0.delegate();
      MaybeEmitter<Disposable> maybeEmitter1 = (MaybeEmitter<Disposable>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<Disposable> progressAsyncMaybeEmitterBridge1 = new ProgressAsyncMaybeEmitterBridge<Disposable>(maybeEmitter1, progressAsyncHandler1);
      AsyncHandler.State asyncHandler_State0 = progressAsyncMaybeEmitterBridge1.disposed();
}"
118,"  public final void onThrowable(Throwable t) {
    if (delegateTerminated.getAndSet(true)) {
      return;
    }

    Throwable error = t;
    try {
      delegate().onThrowable(t);
    } catch (final Throwable x) {
      error = new CompositeException(Arrays.asList(t, x));
    }

    emitOnError(error);
  }","  public void test3()  throws Throwable  {
      MaybeEmitter<ArrayListSupplier> maybeEmitter0 = (MaybeEmitter<ArrayListSupplier>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<ArrayListSupplier> progressAsyncHandler0 = (ProgressAsyncHandler<ArrayListSupplier>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<ArrayListSupplier> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<ArrayListSupplier>(maybeEmitter0, progressAsyncHandler0);
      // Undeclared exception!
      try { 
        progressAsyncMaybeEmitterBridge0.onThrowable((Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.rxjava2.maybe.AbstractMaybeAsyncHandlerBridge"", e);
      }
  }"
119,"  public void onRequestSend(NettyRequest request) {
    executeUnlessEmitterDisposed(() -> delegate().onRequestSend(request));
  }","  public void test4()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      AsyncHandler<ChannelDuplexHandler> asyncHandler0 = (AsyncHandler<ChannelDuplexHandler>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<ChannelDuplexHandler> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<ChannelDuplexHandler>(maybeEmitter0, asyncHandler0);
      NettyRequest nettyRequest0 = mock(NettyRequest.class, new ViolatedAssumptionAnswer());
      maybeAsyncHandlerBridge0.onRequestSend(nettyRequest0);
      MaybeEmitter<Integer> maybeEmitter1 = (MaybeEmitter<Integer>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter1).isDisposed();
      AsyncHandler<Integer> asyncHandler1 = (AsyncHandler<Integer>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<Integer> maybeAsyncHandlerBridge1 = new MaybeAsyncHandlerBridge<Integer>(maybeEmitter1, asyncHandler1);
      NettyRequest nettyRequest1 = mock(NettyRequest.class, new ViolatedAssumptionAnswer());
      maybeAsyncHandlerBridge1.onRequestSend(nettyRequest1);
  }"
120,"  public final void onThrowable(Throwable t) {
    if (delegateTerminated.getAndSet(true)) {
      return;
    }

    Throwable error = t;
    try {
      delegate().onThrowable(t);
    } catch (final Throwable x) {
      error = new CompositeException(Arrays.asList(t, x));
    }

    emitOnError(error);
  }","  public void test5()  throws Throwable  {
      MaybeEmitter<Integer> maybeEmitter0 = (MaybeEmitter<Integer>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      AsyncHandler<Integer> asyncHandler0 = (AsyncHandler<Integer>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<Integer> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<Integer>(maybeEmitter0, asyncHandler0);
      maybeAsyncHandlerBridge0.onTlsHandshakeAttempt();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLSyntaxErrorException0);
      maybeAsyncHandlerBridge0.onThrowable(sQLIntegrityConstraintViolationException0);
}"
121,"  public final Void onCompleted() {
    if (delegateTerminated.getAndSet(true)) {
      return null;
    }

    final T result;
    try {
      result = delegate().onCompleted();
    } catch (final Throwable t) {
      emitOnError(t);
      return null;
    }

    if (!emitter.isDisposed()) {
      if (result == null) {
        emitter.onComplete();
      } else {
        emitter.onSuccess(result);
      }
    }

    return null;
  }","  public void test6()  throws Throwable  {
      MaybeEmitter<Void> maybeEmitter0 = (MaybeEmitter<Void>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      MaybeEmitter<Integer> maybeEmitter1 = (MaybeEmitter<Integer>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter1).isDisposed();
      ProgressAsyncHandler<Integer> progressAsyncHandler0 = (ProgressAsyncHandler<Integer>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(progressAsyncHandler0).onCompleted();
      ProgressAsyncMaybeEmitterBridge<Integer> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Integer>(maybeEmitter1, progressAsyncHandler0);
      MaybeAsyncHandlerBridge<Void> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<Void>(maybeEmitter0, progressAsyncMaybeEmitterBridge0);
      maybeAsyncHandlerBridge0.onCompleted();
  }"
122,"  public final void onThrowable(Throwable t) {
    if (delegateTerminated.getAndSet(true)) {
      return;
    }

    Throwable error = t;
    try {
      delegate().onThrowable(t);
    } catch (final Throwable x) {
      error = new CompositeException(Arrays.asList(t, x));
    }

    emitOnError(error);
  }","  public void test7()  throws Throwable  {
      MaybeEmitter<Disposable> maybeEmitter0 = (MaybeEmitter<Disposable>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      AsyncHandler<Disposable> asyncHandler0 = (AsyncHandler<Disposable>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<Disposable> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<Disposable>(maybeEmitter0, asyncHandler0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLNonTransientException0);
      maybeAsyncHandlerBridge0.onThrowable(sQLTransactionRollbackException0);
}"
123,"  public final Void onCompleted() {
    if (delegateTerminated.getAndSet(true)) {
      return null;
    }

    final T result;
    try {
      result = delegate().onCompleted();
    } catch (final Throwable t) {
      emitOnError(t);
      return null;
    }

    if (!emitter.isDisposed()) {
      if (result == null) {
        emitter.onComplete();
      } else {
        emitter.onSuccess(result);
      }
    }

    return null;
  }","  public void test8()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<ChannelDuplexHandler> progressAsyncHandler0 = (ProgressAsyncHandler<ChannelDuplexHandler>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(progressAsyncHandler0).onCompleted();
      ProgressAsyncMaybeEmitterBridge<ChannelDuplexHandler> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<ChannelDuplexHandler>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onCompleted();
  }"
124,,"  public void test9()  throws Throwable  {
      System.setCurrentTimeMillis((-3222L));
      MaybeEmitter<Disposable> maybeEmitter0 = (MaybeEmitter<Disposable>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
  }"
125,"  public final State onHeadersReceived(HttpHeaders headers) throws Exception {
    return emitter.isDisposed() ? disposed() : delegate().onHeadersReceived(headers);
  }","  public void test10()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      AsyncHandler<ChannelDuplexHandler> asyncHandler0 = (AsyncHandler<ChannelDuplexHandler>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<ChannelDuplexHandler> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<ChannelDuplexHandler>(maybeEmitter0, asyncHandler0);
      MaybeEmitter<Void> maybeEmitter1 = (MaybeEmitter<Void>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter1).isDisposed();
      MaybeAsyncHandlerBridge<Void> maybeAsyncHandlerBridge1 = new MaybeAsyncHandlerBridge<Void>(maybeEmitter1, maybeAsyncHandlerBridge0);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      AsyncHandler.State asyncHandler_State0 = maybeAsyncHandlerBridge1.onHeadersReceived(combinedHttpHeaders0);
}"
126,"  public final State onStatusReceived(HttpResponseStatus status) throws Exception {
    return emitter.isDisposed() ? disposed() : delegate().onStatusReceived(status);
  }","  public void test11()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, true).when(maybeEmitter0).isDisposed();
      AsyncHandler<ChannelDuplexHandler> asyncHandler0 = (AsyncHandler<ChannelDuplexHandler>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<ChannelDuplexHandler> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<ChannelDuplexHandler>(maybeEmitter0, asyncHandler0);
      NettyRequest nettyRequest0 = mock(NettyRequest.class, new ViolatedAssumptionAnswer());
      maybeAsyncHandlerBridge0.onRequestSend(nettyRequest0);
      maybeAsyncHandlerBridge0.onHostnameResolutionFailure(""+KEkyep"", (Throwable) null);
      AsyncHandler.State asyncHandler_State0 = maybeAsyncHandlerBridge0.onStatusReceived((HttpResponseStatus) null);
}"
127,"  public final State onStatusReceived(HttpResponseStatus status) throws Exception {
    return emitter.isDisposed() ? disposed() : delegate().onStatusReceived(status);
  }","  public void test12()  throws Throwable  {
      MaybeEmitter<Integer> maybeEmitter0 = (MaybeEmitter<Integer>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false).when(maybeEmitter0).isDisposed();
      Integer integer0 = new Integer(2);
      AsyncHandler.State asyncHandler_State0 = AsyncHandler.State.CONTINUE;
      AsyncHandler<Integer> asyncHandler0 = (AsyncHandler<Integer>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(asyncHandler0).onCompleted();
      doReturn(asyncHandler_State0).when(asyncHandler0).onStatusReceived(any(org.asynchttpclient.HttpResponseStatus.class));
      MaybeAsyncHandlerBridge<Integer> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<Integer>(maybeEmitter0, asyncHandler0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""=]0clXOMYP"", ""=]0clXOMYP"");
      maybeAsyncHandlerBridge0.onCompleted();
      maybeAsyncHandlerBridge0.onTlsHandshakeFailure(sQLNonTransientConnectionException0);
      AsyncHandler.State asyncHandler_State1 = maybeAsyncHandlerBridge0.onStatusReceived((HttpResponseStatus) null);
}"
128,"  public final State onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
    return emitter.isDisposed() ? disposed() : delegate().onBodyPartReceived(content);
  }","  public void test13()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, true).when(maybeEmitter0).isDisposed();
      AsyncHandler<ChannelDuplexHandler> asyncHandler0 = (AsyncHandler<ChannelDuplexHandler>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<ChannelDuplexHandler> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<ChannelDuplexHandler>(maybeEmitter0, asyncHandler0);
      NettyRequest nettyRequest0 = mock(NettyRequest.class, new ViolatedAssumptionAnswer());
      maybeAsyncHandlerBridge0.onRequestSend(nettyRequest0);
      maybeAsyncHandlerBridge0.onHostnameResolutionFailure(""+KEkyep"", (Throwable) null);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart((ByteBuf) null, true);
      AsyncHandler.State asyncHandler_State0 = maybeAsyncHandlerBridge0.onBodyPartReceived(lazyResponseBodyPart0);
}"
129,"  public final State onBodyPartReceived(HttpResponseBodyPart content) throws Exception {
    return emitter.isDisposed() ? disposed() : delegate().onBodyPartReceived(content);
  }","  public void test14()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(maybeEmitter0).isDisposed();
      AsyncHandler<ChannelDuplexHandler> asyncHandler0 = (AsyncHandler<ChannelDuplexHandler>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(asyncHandler0).onBodyPartReceived(any(org.asynchttpclient.HttpResponseBodyPart.class));
      MaybeAsyncHandlerBridge<ChannelDuplexHandler> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<ChannelDuplexHandler>(maybeEmitter0, asyncHandler0);
      maybeAsyncHandlerBridge0.onHostnameResolutionFailure(""+KEkyep"", (Throwable) null);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart((ByteBuf) null, true);
      maybeAsyncHandlerBridge0.onBodyPartReceived(lazyResponseBodyPart0);
  }"
130,"  public void onTlsHandshakeSuccess(SSLSession sslSession) {
    executeUnlessEmitterDisposed(() -> delegate().onTlsHandshakeSuccess(sslSession));
  }","  public void test15()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      AsyncHandler<ChannelDuplexHandler> asyncHandler0 = (AsyncHandler<ChannelDuplexHandler>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<ChannelDuplexHandler> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<ChannelDuplexHandler>(maybeEmitter0, asyncHandler0);
      SSLSession sSLSession0 = mock(SSLSession.class, new ViolatedAssumptionAnswer());
      maybeAsyncHandlerBridge0.onTlsHandshakeSuccess(sSLSession0);
  }"
131,"  public void onConnectionPoolAttempt() {
    executeUnlessEmitterDisposed(() -> delegate().onConnectionPoolAttempt());
  }","  public void test16()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      AsyncHandler<ChannelDuplexHandler> asyncHandler0 = (AsyncHandler<ChannelDuplexHandler>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<ChannelDuplexHandler> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<ChannelDuplexHandler>(maybeEmitter0, asyncHandler0);
      MaybeEmitter<Void> maybeEmitter1 = (MaybeEmitter<Void>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter1).isDisposed();
      MaybeAsyncHandlerBridge<Void> maybeAsyncHandlerBridge1 = new MaybeAsyncHandlerBridge<Void>(maybeEmitter1, maybeAsyncHandlerBridge0);
      maybeAsyncHandlerBridge1.onConnectionPoolAttempt();
  }"
132,"  public void onTcpConnectAttempt(InetSocketAddress remoteAddress) {
    executeUnlessEmitterDisposed(() -> delegate().onTcpConnectAttempt(remoteAddress));
  }","  public void test17()  throws Throwable  {
      MaybeEmitter<UnpooledHeapByteBuf> maybeEmitter0 = (MaybeEmitter<UnpooledHeapByteBuf>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      AsyncHandler<UnpooledHeapByteBuf> asyncHandler0 = (AsyncHandler<UnpooledHeapByteBuf>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<UnpooledHeapByteBuf> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<UnpooledHeapByteBuf>(maybeEmitter0, asyncHandler0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("" "", 0);
      maybeAsyncHandlerBridge0.onTcpConnectAttempt(mockInetSocketAddress0);
}"
133,"  public final Void onCompleted() {
    if (delegateTerminated.getAndSet(true)) {
      return null;
    }

    final T result;
    try {
      result = delegate().onCompleted();
    } catch (final Throwable t) {
      emitOnError(t);
      return null;
    }

    if (!emitter.isDisposed()) {
      if (result == null) {
        emitter.onComplete();
      } else {
        emitter.onSuccess(result);
      }
    }

    return null;
  }","  public void test18()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      AsyncHandler<Integer> asyncHandler0 = (AsyncHandler<Integer>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<Object> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<Object>(maybeEmitter0, asyncHandler0);
      maybeAsyncHandlerBridge0.onConnectionOffer((Channel) null);
      maybeAsyncHandlerBridge0.onCompleted();
  }"
134,"  public void onConnectionPooled(Channel connection) {
    executeUnlessEmitterDisposed(() -> delegate().onConnectionPooled(connection));
  }","  public void test19()  throws Throwable  {
      MaybeEmitter<UnpooledHeapByteBuf> maybeEmitter0 = (MaybeEmitter<UnpooledHeapByteBuf>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      AsyncHandler<UnpooledHeapByteBuf> asyncHandler0 = (AsyncHandler<UnpooledHeapByteBuf>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<UnpooledHeapByteBuf> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<UnpooledHeapByteBuf>(maybeEmitter0, asyncHandler0);
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel((ChannelId) null);
      maybeAsyncHandlerBridge0.onConnectionPooled(embeddedChannel0);
}"
135,"  public void onTcpConnectSuccess(InetSocketAddress remoteAddress, Channel connection) {
    executeUnlessEmitterDisposed(() -> delegate().onTcpConnectSuccess(remoteAddress, connection));
  }","  public void test20()  throws Throwable  {
      MaybeEmitter<Integer> maybeEmitter0 = (MaybeEmitter<Integer>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<Integer> progressAsyncHandler0 = (ProgressAsyncHandler<Integer>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<Integer> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Integer>(maybeEmitter0, progressAsyncHandler0);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((InetAddress) null, 17);
      progressAsyncMaybeEmitterBridge0.onTcpConnectSuccess(mockInetSocketAddress0, (Channel) null);
}"
136,"  public void onHostnameResolutionAttempt(String name) {
    executeUnlessEmitterDisposed(() -> delegate().onHostnameResolutionAttempt(name));
  }","  public void test21()  throws Throwable  {
      MaybeEmitter<UnpooledHeapByteBuf> maybeEmitter0 = (MaybeEmitter<UnpooledHeapByteBuf>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      AsyncHandler<UnpooledHeapByteBuf> asyncHandler0 = (AsyncHandler<UnpooledHeapByteBuf>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      MaybeAsyncHandlerBridge<UnpooledHeapByteBuf> maybeAsyncHandlerBridge0 = new MaybeAsyncHandlerBridge<UnpooledHeapByteBuf>(maybeEmitter0, asyncHandler0);
      maybeAsyncHandlerBridge0.onHostnameResolutionAttempt("""");
  }"
137,"  public final State onContentWriteProgress(long amount, long current, long total) {
    return emitter.isDisposed() ? disposed() : delegate().onContentWriteProgress(amount, current, total);
  }","  public void test0()  throws Throwable  {
      MaybeEmitter<Void> maybeEmitter0 = (MaybeEmitter<Void>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<Void> progressAsyncHandler0 = (ProgressAsyncHandler<Void>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncMaybeEmitterBridge<Void> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Void>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onContentWriteProgress(0L, (-1301L), 0L);
  }"
138,"  public final State onHeadersWritten() {
    return emitter.isDisposed() ? disposed() : delegate().onHeadersWritten();
  }","  public void test1()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onHeadersWritten();
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onHeadersWritten();
  }"
139,"  public final State onContentWritten() {
    return emitter.isDisposed() ? disposed() : delegate().onContentWritten();
  }","  public void test2()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<Object> progressAsyncHandler0 = (ProgressAsyncHandler<Object>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWritten();
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onContentWritten();
  }"
140,"  public final State onContentWriteProgress(long amount, long current, long total) {
    return emitter.isDisposed() ? disposed() : delegate().onContentWriteProgress(amount, current, total);
  }","  public void test3()  throws Throwable  {
      MaybeEmitter<ChannelDuplexHandler> maybeEmitter0 = (MaybeEmitter<ChannelDuplexHandler>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<ChannelDuplexHandler> progressAsyncHandler0 = (ProgressAsyncHandler<ChannelDuplexHandler>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler.State) null).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncMaybeEmitterBridge<ChannelDuplexHandler> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<ChannelDuplexHandler>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onContentWriteProgress((-3680L), (-3680L), (-588L));
  }"
141,"  public final State onContentWriteProgress(long amount, long current, long total) {
    return emitter.isDisposed() ? disposed() : delegate().onContentWriteProgress(amount, current, total);
  }","  public void test4()  throws Throwable  {
      MaybeEmitter<HijrahEra> maybeEmitter0 = (MaybeEmitter<HijrahEra>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter0).isDisposed();
      ProgressAsyncHandler<HijrahEra> progressAsyncHandler0 = (ProgressAsyncHandler<HijrahEra>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<HijrahEra> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<HijrahEra>(maybeEmitter0, progressAsyncHandler0);
      MaybeEmitter<Void> maybeEmitter1 = (MaybeEmitter<Void>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(maybeEmitter1).isDisposed();
      ProgressAsyncMaybeEmitterBridge<Void> progressAsyncMaybeEmitterBridge1 = new ProgressAsyncMaybeEmitterBridge<Void>(maybeEmitter1, progressAsyncMaybeEmitterBridge0);
      AsyncHandler.State asyncHandler_State0 = progressAsyncMaybeEmitterBridge1.onContentWriteProgress((-2517L), 0L, (-2517L));
}"
142,"  public final State onContentWritten() {
    return emitter.isDisposed() ? disposed() : delegate().onContentWritten();
  }","  public void test5()  throws Throwable  {
      MaybeEmitter<Object> maybeEmitter0 = (MaybeEmitter<Object>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, true).when(maybeEmitter0).isDisposed();
      AsyncHandler.State asyncHandler_State0 = AsyncHandler.State.ABORT;
      ProgressAsyncHandler<String> progressAsyncHandler0 = (ProgressAsyncHandler<String>) mock(ProgressAsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn(asyncHandler_State0).when(progressAsyncHandler0).onContentWriteProgress(anyLong() , anyLong() , anyLong());
      ProgressAsyncMaybeEmitterBridge<Object> progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Object>(maybeEmitter0, progressAsyncHandler0);
      progressAsyncMaybeEmitterBridge0.onHeadersWritten();
      MaybeEmitter<Void> maybeEmitter1 = (MaybeEmitter<Void>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maybeEmitter1).isDisposed();
      ProgressAsyncMaybeEmitterBridge<Void> progressAsyncMaybeEmitterBridge1 = new ProgressAsyncMaybeEmitterBridge<Void>(maybeEmitter1, progressAsyncMaybeEmitterBridge0);
      progressAsyncMaybeEmitterBridge1.onContentWriteProgress(0L, 0L, 0L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(""org.asynchttpclient.extras.rxjava2.maybe.AbstractMaybeProgressAsyncHandlerBridge"", ""TL!;qXVeMm0!O>8~"", 13);
      MockThrowable mockThrowable0 = new MockThrowable(""TL!;qXVeMm0!O>8~"", sQLTransientConnectionException0);
      progressAsyncMaybeEmitterBridge0.onTlsHandshakeFailure(mockThrowable0);
      AsyncHandler.State asyncHandler_State1 = progressAsyncMaybeEmitterBridge0.onContentWritten();
}"
143,"  public ProgressAsyncMaybeEmitterBridge(MaybeEmitter<T> emitter, ProgressAsyncHandler<? extends T> delegate) {
    super(emitter);
    this.delegate = requireNonNull(delegate);
  }","  public void test0()  throws Throwable  {
      MaybeEmitter<Integer> maybeEmitter0 = (MaybeEmitter<Integer>) mock(MaybeEmitter.class, new ViolatedAssumptionAnswer());
      ProgressAsyncMaybeEmitterBridge<Integer> progressAsyncMaybeEmitterBridge0 = null;
      try {
        progressAsyncMaybeEmitterBridge0 = new ProgressAsyncMaybeEmitterBridge<Integer>(maybeEmitter0, (ProgressAsyncHandler<? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
144,"  public UnsubscribedException() {
  }","  public void test0()  throws Throwable  {
      UnsubscribedException unsubscribedException0 = new UnsubscribedException();
      UnsubscribedException unsubscribedException1 = new UnsubscribedException(unsubscribedException0);
}"
145,"  public static Observable<Response> toObservable(final Func0<BoundRequestBuilder> supplier) {

    //Get the builder from the function
    final BoundRequestBuilder builder = supplier.call();

    //create the observable from scratch
    return Observable.unsafeCreate(new Observable.OnSubscribe<Response>() {

      @Override
      public void call(final Subscriber<? super Response> subscriber) {
        try {
          AsyncCompletionHandler<Void> handler = new AsyncCompletionHandler<Void>() {

            @Override
            public Void onCompleted(Response response) throws Exception {
              subscriber.onNext(response);
              subscriber.onCompleted();
              return null;
            }

            @Override
            public void onThrowable(Throwable t) {
              subscriber.onError(t);
            }
          };
          //execute the request
          builder.execute(handler);
        } catch (Throwable t) {
          subscriber.onError(t);
        }
      }
    });
  }","  public void test0()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AsyncHttpObservable asyncHttpObservable0 = new AsyncHttpObservable();
      RxJavaHooks.clear();
      RxJavaHooks.clear();
      RxJavaHooks.clearAssemblyTracking();
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncHttpClient0).executeRequest(any(org.asynchttpclient.Request.class) , nullable(org.asynchttpclient.AsyncHandler.class));
      BoundRequestBuilder boundRequestBuilder0 = new BoundRequestBuilder(asyncHttpClient0, """", true);
      MockFile mockFile0 = new MockFile(""d}DcE\""w'@e>"");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-2995L));
      boundRequestBuilder0.setBody((BodyGenerator) fileBodyGenerator0);
      Func0<BoundRequestBuilder> func0_0 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn(boundRequestBuilder0).when(func0_0).call();
      AsyncHttpObservable.observe(func0_0);
      Func0<BoundRequestBuilder> func0_1 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_1).call();
      AsyncHttpObservable.toObservable(func0_1);
      Func0<BoundRequestBuilder> func0_2 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_2).call();
      AsyncHttpObservable.observe(func0_2);
      Func0<BoundRequestBuilder> func0_3 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_3).call();
      AsyncHttpObservable.observe(func0_3);
      Func0<BoundRequestBuilder> func0_4 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_4).call();
      Observable<Response> observable0 = AsyncHttpObservable.observe(func0_4);
      Func0<BoundRequestBuilder> func0_5 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_5).call();
      Observable<Response> observable1 = AsyncHttpObservable.toObservable(func0_5);
}"
146,"  public static Observable<Response> toObservable(final Func0<BoundRequestBuilder> supplier) {

    //Get the builder from the function
    final BoundRequestBuilder builder = supplier.call();

    //create the observable from scratch
    return Observable.unsafeCreate(new Observable.OnSubscribe<Response>() {

      @Override
      public void call(final Subscriber<? super Response> subscriber) {
        try {
          AsyncCompletionHandler<Void> handler = new AsyncCompletionHandler<Void>() {

            @Override
            public Void onCompleted(Response response) throws Exception {
              subscriber.onNext(response);
              subscriber.onCompleted();
              return null;
            }

            @Override
            public void onThrowable(Throwable t) {
              subscriber.onError(t);
            }
          };
          //execute the request
          builder.execute(handler);
        } catch (Throwable t) {
          subscriber.onError(t);
        }
      }
    });
  }","  public void test1()  throws Throwable  {
      Func0<BoundRequestBuilder> func0_0 = null;
      // Undeclared exception!
      try { 
        AsyncHttpObservable.toObservable((Func0<BoundRequestBuilder>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.extras.rxjava.AsyncHttpObservable"", e);
      }
  }"
147,"  public static Observable<Response> toObservable(final Func0<BoundRequestBuilder> supplier) {

    //Get the builder from the function
    final BoundRequestBuilder builder = supplier.call();

    //create the observable from scratch
    return Observable.unsafeCreate(new Observable.OnSubscribe<Response>() {

      @Override
      public void call(final Subscriber<? super Response> subscriber) {
        try {
          AsyncCompletionHandler<Void> handler = new AsyncCompletionHandler<Void>() {

            @Override
            public Void onCompleted(Response response) throws Exception {
              subscriber.onNext(response);
              subscriber.onCompleted();
              return null;
            }

            @Override
            public void onThrowable(Throwable t) {
              subscriber.onError(t);
            }
          };
          //execute the request
          builder.execute(handler);
        } catch (Throwable t) {
          subscriber.onError(t);
        }
      }
    });
  }","  public void test2()  throws Throwable  {
      Func0<BoundRequestBuilder> func0_0 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      Observable<Response> observable0 = AsyncHttpObservable.toObservable(func0_0);
      Func0<BoundRequestBuilder> func0_1 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_1).call();
      Observable<Response> observable1 = AsyncHttpObservable.toObservable(func0_1);
}"
148,"  public static Observable<Response> toObservable(final Func0<BoundRequestBuilder> supplier) {

    //Get the builder from the function
    final BoundRequestBuilder builder = supplier.call();

    //create the observable from scratch
    return Observable.unsafeCreate(new Observable.OnSubscribe<Response>() {

      @Override
      public void call(final Subscriber<? super Response> subscriber) {
        try {
          AsyncCompletionHandler<Void> handler = new AsyncCompletionHandler<Void>() {

            @Override
            public Void onCompleted(Response response) throws Exception {
              subscriber.onNext(response);
              subscriber.onCompleted();
              return null;
            }

            @Override
            public void onThrowable(Throwable t) {
              subscriber.onError(t);
            }
          };
          //execute the request
          builder.execute(handler);
        } catch (Throwable t) {
          subscriber.onError(t);
        }
      }
    });
  }","  public void test3()  throws Throwable  {
      Func0<BoundRequestBuilder> func0_0 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      Observable<Response> observable0 = AsyncHttpObservable.observe(func0_0);
      AsyncHttpObservable asyncHttpObservable0 = new AsyncHttpObservable();
      Func1<Observable.OnSubscribe, Observable.OnSubscribe> func1_0 = (Func1<Observable.OnSubscribe, Observable.OnSubscribe>) mock(Func1.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func1_0).call(nullable(rx.Observable.OnSubscribe.class));
      RxJavaHooks.setOnObservableCreate(func1_0);
      Func0<BoundRequestBuilder> func0_1 = (Func0<BoundRequestBuilder>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_1).call();
      Observable<Response> observable1 = AsyncHttpObservable.toObservable(func0_1);
}"
149,"  public AsyncHttpClientImplException(String msg) {
    super(msg);
  }","  public void test0()  throws Throwable  {
      AsyncHttpClientImplException asyncHttpClientImplException0 = new AsyncHttpClientImplException((String) null);
      AsyncHttpClientImplException asyncHttpClientImplException1 = new AsyncHttpClientImplException((String) null, asyncHttpClientImplException0);
}"
150,"  public static Class<AsyncHttpClient> getAsyncImplClass(String propertyName) {
    String asyncHttpClientImplClassName = AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getString(propertyName);
    if (asyncHttpClientImplClassName != null) {
      return AsyncImplHelper.getClass(asyncHttpClientImplClassName);
    }
    return null;
  }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        AsyncImplHelper.getAsyncImplClass((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
151,"  public static Class<AsyncHttpClient> getAsyncImplClass(String propertyName) {
    String asyncHttpClientImplClassName = AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getString(propertyName);
    if (asyncHttpClientImplClassName != null) {
      return AsyncImplHelper.getClass(asyncHttpClientImplClassName);
    }
    return null;
  }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        AsyncImplHelper.getAsyncImplClass("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
152,"  public static Class<AsyncHttpClient> getAsyncImplClass(String propertyName) {
    String asyncHttpClientImplClassName = AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getString(propertyName);
    if (asyncHttpClientImplClassName != null) {
      return AsyncImplHelper.getClass(asyncHttpClientImplClassName);
    }
    return null;
  }","  public void test2()  throws Throwable  {
      Class<AsyncHttpClient> class0 = AsyncImplHelper.getAsyncImplClass(""4"");
}"
153,,"  public void test3()  throws Throwable  {
      AsyncImplHelper asyncImplHelper0 = new AsyncImplHelper();
  }"
154,"  public static Class<AsyncHttpClient> getAsyncImplClass(String propertyName) {
    String asyncHttpClientImplClassName = AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getString(propertyName);
    if (asyncHttpClientImplClassName != null) {
      return AsyncImplHelper.getClass(asyncHttpClientImplClassName);
    }
    return null;
  }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        AsyncImplHelper.getAsyncImplClass(""os.name"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Class : Linux couldn't be found in  the classpath due to : null
         //
         verifyException(""org.asynchttpclient.extras.registry.AsyncImplHelper"", e);
      }
  }"
155,"  public boolean unregister(String name) {
    return asyncHttpClientMap.remove(name) != null;
  }","  public void test0()  throws Throwable  {
      AsyncHttpClientRegistryImpl asyncHttpClientRegistryImpl0 = new AsyncHttpClientRegistryImpl();
      // Undeclared exception!
      try { 
        asyncHttpClientRegistryImpl0.unregister((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
156,"  public boolean registerIfNew(String name, AsyncHttpClient ahc) {
    return asyncHttpClientMap.putIfAbsent(name, ahc) == null;
  }","  public void test1()  throws Throwable  {
      AsyncHttpClientRegistryImpl asyncHttpClientRegistryImpl0 = new AsyncHttpClientRegistryImpl();
      // Undeclared exception!
      try { 
        asyncHttpClientRegistryImpl0.registerIfNew("">iFZ/3PT+-yYCt1y"", (AsyncHttpClient) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
157,"  public AsyncHttpClient get(String clientName) {
    return asyncHttpClientMap.get(clientName);
  }","  public void test2()  throws Throwable  {
      AsyncHttpClientRegistryImpl asyncHttpClientRegistryImpl0 = new AsyncHttpClientRegistryImpl();
      // Undeclared exception!
      try { 
        asyncHttpClientRegistryImpl0.get((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
158,"  public boolean unregister(String name) {
    return asyncHttpClientMap.remove(name) != null;
  }","  public void test3()  throws Throwable  {
      AsyncHttpClientRegistryImpl asyncHttpClientRegistryImpl0 = new AsyncHttpClientRegistryImpl();
      boolean boolean0 = asyncHttpClientRegistryImpl0.unregister(""#m`Pwe:<0h%vB"");
}"
159,"  public static AsyncHttpClientRegistry getInstance() {
    if (_instance == null) {
      lock.lock();
      try {
        if (_instance == null) {
          Class<?> asyncHttpClientRegistryImplClass = AsyncImplHelper
                  .getAsyncImplClass(AsyncImplHelper.ASYNC_HTTP_CLIENT_REGISTRY_SYSTEM_PROPERTY);
          if (asyncHttpClientRegistryImplClass != null)
            _instance = (AsyncHttpClientRegistry) asyncHttpClientRegistryImplClass.newInstance();
          else
            _instance = new AsyncHttpClientRegistryImpl();
        }
      } catch (InstantiationException | IllegalAccessException e) {
        throw new AsyncHttpClientImplException(""Couldn't instantiate AsyncHttpClientRegistry : "" + e.getMessage(), e);
      } finally {
        lock.unlock();
      }
    }
    return _instance;
  }","  public void test4()  throws Throwable  {
      AsyncHttpClientRegistry asyncHttpClientRegistry0 = AsyncHttpClientRegistryImpl.getInstance();
      AsyncHttpClientRegistry asyncHttpClientRegistry1 = AsyncHttpClientRegistryImpl.getInstance();
}"
160,"  public AsyncHttpClient addOrReplace(String name, AsyncHttpClient ahc) {
    return asyncHttpClientMap.put(name, ahc);
  }","  public void test5()  throws Throwable  {
      AsyncHttpClientRegistry asyncHttpClientRegistry0 = AsyncHttpClientRegistryImpl.getInstance();
      // Undeclared exception!
      try { 
        asyncHttpClientRegistry0.addOrReplace(""bytes="", (AsyncHttpClient) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
161,"  public AsyncHttpClient get(String clientName) {
    return asyncHttpClientMap.get(clientName);
  }","  public void test6()  throws Throwable  {
      AsyncHttpClientRegistryImpl asyncHttpClientRegistryImpl0 = new AsyncHttpClientRegistryImpl();
      AsyncHttpClient asyncHttpClient0 = asyncHttpClientRegistryImpl0.get(""a"");
}"
162,"  public void clearAllInstances() {
    asyncHttpClientMap.clear();
  }","  public void test7()  throws Throwable  {
      AsyncHttpClientRegistryImpl asyncHttpClientRegistryImpl0 = new AsyncHttpClientRegistryImpl();
      asyncHttpClientRegistryImpl0.clearAllInstances();
  }"
163,"  public Set<String> getAllRegisteredNames() {
    return asyncHttpClientMap.keySet();
  }","  public void test8()  throws Throwable  {
      AsyncHttpClientRegistryImpl asyncHttpClientRegistryImpl0 = new AsyncHttpClientRegistryImpl();
      Set<String> set0 = asyncHttpClientRegistryImpl0.getAllRegisteredNames();
}"
164,"  public static AsyncHttpClient getAsyncHttpClient() {

    try {
      if (attemptInstantiation())
        return asyncHttpClientImplClass.newInstance();
    } catch (InstantiationException e) {
      throw new AsyncHttpClientImplException(""Unable to create the class specified by system property : ""
              + AsyncImplHelper.ASYNC_HTTP_CLIENT_IMPL_SYSTEM_PROPERTY, e);
    } catch (IllegalAccessException e) {
      throw new AsyncHttpClientImplException(""Unable to find the class specified by system property : ""
              + AsyncImplHelper.ASYNC_HTTP_CLIENT_IMPL_SYSTEM_PROPERTY, e);
    }
    return asyncHttpClient();
  }","  public void test0()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(asyncHttpClientConfig1).getRequestFilters();
      // Undeclared exception!
      try { 
        AsyncHttpClientFactory.getAsyncHttpClient(asyncHttpClientConfig1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.DefaultAsyncHttpClient"", e);
      }
  }"
165,,"  public void test1()  throws Throwable  {
      AsyncHttpClientFactory asyncHttpClientFactory0 = new AsyncHttpClientFactory();
  }"
166,"  protected static <T> void runConsumers(Collection<Consumer<T>> consumers, T argument) {
    if (consumers == null || consumers.isEmpty()) {
      return;
    }
    consumers.forEach(consumer -> runConsumer(consumer, argument));
  }","  public void test0()  throws Throwable  {
      LinkedTransferQueue<Consumer<String>> linkedTransferQueue0 = new LinkedTransferQueue<Consumer<String>>();
      AsyncHttpClientCall.runConsumers((Collection<Consumer<String>>) linkedTransferQueue0, ""WatchKey not recognized: {}"");
  }"
167,"  protected static <T> void runConsumer(Consumer<T> consumer, T argument) {
    try {
      if (consumer != null) {
        consumer.accept(argument);
      }
    } catch (Exception e) {
      log.error(""Exception while running consumer {}: {}"", consumer, e.getMessage(), e);
    }
  }","  public void test1()  throws Throwable  {
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1412));
      AsyncHttpClientCall.runConsumer(consumer0, integer0);
  }"
168,,"  public void test2()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearOnRequestStart();
}"
169,,"  public void test3()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      LinkedList<Consumer<Response>> linkedList0 = new LinkedList<Consumer<Response>>();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess((Collection<? extends Consumer<Response>>) linkedList0);
}"
170,,"  public void test4()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Stack<Consumer<RequestBuilder>> stack0 = new Stack<Consumer<RequestBuilder>>();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.requestCustomizers(stack0);
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearRequestCustomizers();
}"
171,,"  public void test5()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearRequestCustomizers();
}"
172,,"  public void test6()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestFailure(consumer0);
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder1.clearOnRequestFailure();
}"
173,,"  public void test7()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearOnRequestFailure();
}"
174,,"  public void test8()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Vector<Consumer<Request>> vector0 = new Vector<Consumer<Request>>();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart((Collection<? extends Consumer<Request>>) vector0);
      Consumer<Request> consumer0 = (Consumer<Request>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart(consumer0);
}"
175,,"  public void test9()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Request> consumer0 = (Consumer<Request>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(consumer0).toString();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart(consumer0);
      ArrayDeque<Consumer<Request>> arrayDeque0 = new ArrayDeque<Consumer<Request>>();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart((Collection<? extends Consumer<Request>>) arrayDeque0);
}"
176,,"  public void test10()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart((Collection<? extends Consumer<Request>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // onRequestStart cannot be null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCall$AsyncHttpClientCallBuilder"", e);
      }
  }"
177,,"  public void test11()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Response> consumer0 = (Consumer<Response>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess(consumer0);
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder1.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCall"", e);
      }
  }"
178,,"  public void test12()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestFailure(consumer0);
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCall"", e);
      }
  }"
179,,"  public void test13()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Request> consumer0 = (Consumer<Request>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestStart(consumer0);
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCall"", e);
      }
  }"
180,,"  public void test14()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      Vector<Consumer<Throwable>> vector0 = new Vector<Consumer<Throwable>>(41, 154);
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestFailure((Collection<? extends Consumer<Throwable>>) vector0);
}"
181,,"  public void test15()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.httpClientSupplier((Supplier<AsyncHttpClient>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCall$AsyncHttpClientCallBuilder"", e);
      }
  }"
182,,"  public void test16()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Response> consumer0 = (Consumer<Response>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess(consumer0);
      Consumer<Response> consumer1 = (Consumer<Response>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer1).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess(consumer1);
}"
183,"  public Request request() {
    return request;
  }","  public void test17()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(request0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.request(request0);
}"
184,,"  public void test18()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      Consumer<Response> consumer0 = (Consumer<Response>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.onRequestSuccess(consumer0);
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder1.clearOnRequestSuccess();
}"
185,,"  public void test19()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.clearOnRequestSuccess();
}"
186,,"  public void test20()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = AsyncHttpClientCall.builder();
      Consumer<RequestBuilder> consumer0 = (Consumer<RequestBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn(""exception is marked non-null but is null"").when(consumer0).toString();
      asyncHttpClientCall_AsyncHttpClientCallBuilder0.requestCustomizer(consumer0);
      // Undeclared exception!
      try { 
        asyncHttpClientCall_AsyncHttpClientCallBuilder0.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCall"", e);
      }
  }"
187,,"  public void test21()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      TreeSet<Consumer<RequestBuilder>> treeSet0 = new TreeSet<Consumer<RequestBuilder>>();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder1 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.requestCustomizers(treeSet0);
      Consumer<RequestBuilder> consumer0 = (Consumer<RequestBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder2 = asyncHttpClientCall_AsyncHttpClientCallBuilder1.requestCustomizer(consumer0);
}"
188,,"  public void test22()  throws Throwable  {
      Vector<Consumer<RequestBuilder>> vector0 = new Vector<Consumer<RequestBuilder>>();
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LinkedList<Consumer<Request>> linkedList0 = new LinkedList<Consumer<Request>>();
      AsyncHttpClientCall asyncHttpClientCall0 = null;
      try {
        asyncHttpClientCall0 = new AsyncHttpClientCall(supplier0, (Request) null, vector0, linkedList0, (List<Consumer<Throwable>>) null, (List<Consumer<Response>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // request is marked non-null but is null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCall"", e);
      }
  }"
189,,"  public void test23()  throws Throwable  {
      AsyncHttpClientCall.AsyncHttpClientCallBuilder asyncHttpClientCall_AsyncHttpClientCallBuilder0 = new AsyncHttpClientCall.AsyncHttpClientCallBuilder();
      String string0 = asyncHttpClientCall_AsyncHttpClientCallBuilder0.toString();
}"
190,,"  public void test0()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = new AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder();
  }"
191,,"  public void test1()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer0 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      linkedList0.add(consumer0);
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      List<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> list0 = asyncHttpClientCallFactory0.getCallCustomizers();
}"
192,,"  public void test2()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Vector<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> vector0 = new Vector<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, vector0);
      List<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> list0 = asyncHttpClientCallFactory0.getCallCustomizers();
}"
193,,"  public void test3()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      LinkedBlockingDeque<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedBlockingDeque0 = new LinkedBlockingDeque<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.callCustomizers(linkedBlockingDeque0);
}"
194,,"  public void test4()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.httpClient((AsyncHttpClient) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // httpClient is marked non-null but is null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCallFactory$AsyncHttpClientCallFactoryBuilder"", e);
      }
  }"
195,,"  public void test5()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer0 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(consumer0).toString();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer1 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(consumer1).toString();
      linkedList0.add(consumer1);
      linkedList0.add(consumer0);
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.build();
}"
196,,"  public void test6()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer0 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(consumer0).toString();
      linkedList0.add(consumer0);
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.build();
}"
197,,"  public void test7()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.build();
}"
198,,"  public void test8()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.clearCallCustomizers();
}"
199,,"  public void test9()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(supplier0).toString();
      Vector<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> vector0 = new Vector<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, vector0);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      TreeSet<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> treeSet0 = new TreeSet<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.callCustomizers(treeSet0);
}"
200,,"  public void test10()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.callCustomizers((Collection<? extends Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // callCustomizers cannot be null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCallFactory$AsyncHttpClientCallFactoryBuilder"", e);
      }
  }"
201,,"  public void test11()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.httpClientSupplier((Supplier<AsyncHttpClient>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCallFactory$AsyncHttpClientCallFactoryBuilder"", e);
      }
  }"
202,,"  public void test12()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(supplier0).toString();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, (List<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>) null);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder> consumer0 = (Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumer0).toString();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.callCustomizer(consumer0);
}"
203,,"  public void test13()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      // Undeclared exception!
      try { 
        asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // httpClientSupplier is marked non-null but is null
         //
         verifyException(""org.asynchttpclient.extras.retrofit.AsyncHttpClientCallFactory"", e);
      }
  }"
204,,"  public void test14()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(supplier0).toString();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, (List<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>) null);
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = asyncHttpClientCallFactory0.toBuilder();
      Supplier<AsyncHttpClient> supplier1 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier1).toString();
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder1 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.httpClientSupplier(supplier1);
}"
205,,"  public void test15()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      asyncHttpClientCallFactory0.hashCode();
  }"
206,"  public Call newCall(Request request) {
    val callBuilder = AsyncHttpClientCall.builder()
            .httpClientSupplier(httpClientSupplier)
            .request(request);

    // customize builder before creating a call
    runConsumers(this.callCustomizers, callBuilder);

    // create a call
    return callBuilder.build();
  }","  public void test16()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(request0).toString();
      Call call0 = asyncHttpClientCallFactory0.newCall(request0);
}"
207,,"  public void test17()  throws Throwable  {
      AsyncHttpClientCallFactory.AsyncHttpClientCallFactoryBuilder asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0 = AsyncHttpClientCallFactory.builder();
      String string0 = asyncHttpClientCallFactory_AsyncHttpClientCallFactoryBuilder0.toString();
}"
208,,"  public void test18()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      String string0 = asyncHttpClientCallFactory0.toString();
}"
209,"  AsyncHttpClient getHttpClient() {
    return httpClientSupplier.get();
  }","  public void test19()  throws Throwable  {
      Supplier<AsyncHttpClient> supplier0 = (Supplier<AsyncHttpClient>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>> linkedList0 = new LinkedList<Consumer<AsyncHttpClientCall.AsyncHttpClientCallBuilder>>();
      AsyncHttpClientCallFactory asyncHttpClientCallFactory0 = new AsyncHttpClientCallFactory(supplier0, linkedList0);
      AsyncHttpClient asyncHttpClient0 = asyncHttpClientCallFactory0.getHttpClient();
}"
210,"  public boolean isClosed() {
    return closed.get();
  }","  public void test0()  throws Throwable  {
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      AsyncHttpClientState asyncHttpClientState0 = new AsyncHttpClientState(atomicBoolean0);
      boolean boolean0 = asyncHttpClientState0.isClosed();
}"
211,"  public boolean isClosed() {
    return closed.get();
  }","  public void test1()  throws Throwable  {
      AtomicBoolean atomicBoolean0 = mock(AtomicBoolean.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientState asyncHttpClientState0 = new AsyncHttpClientState(atomicBoolean0);
      boolean boolean0 = asyncHttpClientState0.isClosed();
}"
212,"  public boolean isClosed() {
    return closed.get();
  }","  public void test2()  throws Throwable  {
      AsyncHttpClientState asyncHttpClientState0 = new AsyncHttpClientState((AtomicBoolean) null);
      // Undeclared exception!
      try { 
        asyncHttpClientState0.isClosed();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.AsyncHttpClientState"", e);
      }
  }"
213,"  public Map<String, String> getCustomLoginConfig() {
    return customLoginConfig;
  }","  public void test0()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      realm_Builder1.parseWWWAuthenticateHeader(""Digestagoritm not supporte): "");
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName(""Digestagoritm not supporte): "");
      realm_Builder3.setNonce(""////"");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder4 = realm_Builder3.setCharset(charset0);
      Uri uri0 = new Uri(""'null'"", ""Digestagoritm not supporte): "", ""////"", (-1436), ""'null'"", ""auth-int"", ""PathWatcher must be stopped before reset."");
      Uri uri1 = uri0.withNewScheme(""////"");
      Uri uri2 = uri1.withNewQuery(""auth-int"");
      realm_Builder3.setUri(uri2);
      Realm realm0 = realm_Builder3.build();
      realm0.getUri();
      realm0.getQop();
      Realm.AuthScheme.values();
      Realm realm1 = realm_Builder4.build();
      realm1.getRealmName();
      Realm.AuthScheme.values();
      realm1.getCustomLoginConfig();
  }"
214,"  public AuthScheme getScheme() {
    return scheme;
  }","  public void test1()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("""");
      Realm.Builder realm_Builder3 = realm_Builder2.setUseCanonicalHostname(true);
      realm_Builder2.setResponse("""");
      realm_Builder1.setAlgorithm("""");
      realm_Builder3.parseProxyAuthenticateHeader(""MD5"");
      Realm.Builder realm_Builder4 = realm_Builder3.setRealmName("""");
      Realm realm0 = realm_Builder4.build();
      realm_Builder1.parseWWWAuthenticateHeader("""");
      realm0.toString();
      realm0.getCnonce();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      realm_Builder0.setCustomLoginConfig(hashMap0);
      realm_Builder0.setNonce((String) null);
      realm0.getScheme();
      realm0.getPrincipal();
      realm0.getCnonce();
      realm0.getCharset();
      realm0.toString();
      realm0.getNonce();
      realm0.getRealmName();
      realm0.getUri();
      realm0.getQop();
      realm0.getCustomLoginConfig();
      realm0.getScheme();
  }"
215,"  public String getQop() {
    return qop;
  }","  public void test2()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setNtlmHost(""n|d<Ma.0oR)_iijd{"");
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm(""R$]lDw{.InNWG"");
      realm_Builder0.parseProxyAuthenticateHeader((String) null);
      realm_Builder1.setNtlmHost((String) null);
      realm_Builder2.setUri((Uri) null);
      Realm realm0 = realm_Builder2.build();
      realm_Builder2.setUseAbsoluteURI(true);
      realm0.getPrincipal();
      realm0.getNtlmHost();
      realm0.toString();
      realm0.toString();
      realm_Builder0.parseProxyAuthenticateHeader((String) null);
      realm0.getQop();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException(""java.lang.Enum"", e);
      }
  }"
216,"  public String toString() {
    return ""Realm{"" +
        ""principal='"" + principal + '\'' +
        "", password='"" + password + '\'' +
        "", scheme="" + scheme +
        "", realmName='"" + realmName + '\'' +
        "", nonce='"" + nonce + '\'' +
        "", algorithm='"" + algorithm + '\'' +
        "", response='"" + response + '\'' +
        "", opaque='"" + opaque + '\'' +
        "", qop='"" + qop + '\'' +
        "", nc='"" + nc + '\'' +
        "", cnonce='"" + cnonce + '\'' +
        "", uri="" + uri +
        "", usePreemptiveAuth="" + usePreemptiveAuth +
        "", charset="" + charset +
        "", ntlmHost='"" + ntlmHost + '\'' +
        "", ntlmDomain='"" + ntlmDomain + '\'' +
        "", useAbsoluteURI="" + useAbsoluteURI +
        "", omitQuery="" + omitQuery +
        "", customLoginConfig="" + customLoginConfig +
        "", servicePrincipalName='"" + servicePrincipalName + '\'' +
        "", useCanonicalHostname="" + useCanonicalHostname +
        "", loginContextName='"" + loginContextName + '\'' +
        '}';
  }","  public void test3()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setRealmName(""AqQK{MN."");
      realm_Builder0.setNtlmHost(""AqQK{MN."");
      realm_Builder0.setUseAbsoluteURI(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setMethodName(""'null'"");
      realm_Builder1.parseProxyAuthenticateHeader("""");
      Realm.Builder realm_Builder3 = realm_Builder2.setNtlmHost(""'null'"");
      Realm.Builder realm_Builder4 = realm_Builder3.setNonce(""'null'"");
      realm_Builder4.setNtlmHost(""AqQK{MN."");
      realm_Builder3.setUseCanonicalHostname(false);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      realm_Builder3.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder4.build();
      realm0.getNonce();
      realm_Builder0.setResponse(""n!5rs[5YR%"");
      realm0.getCharset();
      realm0.getRealmName();
      realm0.getCustomLoginConfig();
      realm0.toString();
  }"
217,"  public Uri getUri() {
    return uri;
  }","  public void test4()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""'null'"", ""'null'"");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      realm_Builder1.setRealmName(""/."");
      Uri uri0 = new Uri(""'null'"", ""////"", ""'null'"", 6, ""'null'"", ""'null'"", ""'null'"");
      realm_Builder0.setUri(uri0);
      Realm.Builder realm_Builder2 = realm_Builder1.setServicePrincipalName(""'null'"");
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader(""D]bMJi;"");
      realm_Builder3.setUsePreemptiveAuth(true);
      Realm.Builder realm_Builder4 = realm_Builder3.setUsePreemptiveAuth(true);
      realm_Builder3.setUseAbsoluteURI(false);
      realm_Builder4.setAlgorithm(""/C"");
      realm_Builder2.setUseAbsoluteURI(false);
      Realm realm0 = realm_Builder4.build();
      realm0.toString();
      realm_Builder3.setMethodName(""auth-int"");
      realm0.getAlgorithm();
      realm0.getScheme();
      realm0.getCustomLoginConfig();
      realm0.getNc();
      realm_Builder2.setUseCanonicalHostname(false);
      realm_Builder2.setNc(""ws"");
      realm0.getPrincipal();
      realm0.getNtlmHost();
      realm0.getQop();
      realm0.getCharset();
      realm0.getPassword();
      realm0.getUri();
  }"
218,"  public String getPrincipal() {
    return principal;
  }","  public void test5()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""ot@9"", ""scheme"");
      Realm.Builder realm_Builder1 = realm_Builder0.setQop(""d41d8cd98f00b204e9800998ecf8427e"");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder3 = realm_Builder2.setNtlmHost(""d41d8cd98f00b204e9800998ecf8427e"");
      realm_Builder0.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder4 = realm_Builder0.setUseAbsoluteURI(false);
      realm_Builder3.setResponse("""");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      realm_Builder0.setCustomLoginConfig(hashMap0);
      realm_Builder3.setNtlmHost((String) null);
      Realm.Builder realm_Builder5 = realm_Builder4.setMethodName((String) null);
      Realm realm0 = realm_Builder3.build();
      realm0.getUri();
      realm_Builder5.setUri((Uri) null);
      Realm realm1 = realm_Builder5.build();
      realm1.getPrincipal();
  }"
219,"  public String getOpaque() {
    return opaque;
  }","  public void test6()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""$VALUES"", """");
      Realm.Builder realm_Builder1 = realm_Builder0.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder2 = realm_Builder1.setOmitQuery(false);
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader("""");
      Realm.Builder realm_Builder4 = realm_Builder3.setOpaque("""");
      Realm realm0 = realm_Builder4.build();
      realm0.getOpaque();
  }"
220,"  public String getPassword() {
    return password;
  }","  public void test7()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setUsePreemptiveAuth(true);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setUseAbsoluteURI(true);
      Realm.Builder realm_Builder4 = realm_Builder3.setUseCanonicalHostname(true);
      realm_Builder0.setNtlmDomain(""Na"");
      realm_Builder0.setResponse(""Na"");
      realm_Builder4.setResponse(""L!k"");
      Realm realm0 = realm_Builder4.build();
      realm0.toString();
      realm0.getNonce();
      realm0.toString();
      realm0.toString();
      realm0.getPrincipal();
      realm_Builder3.setUsePreemptiveAuth(false);
      realm0.getQop();
      realm0.getPassword();
      realm_Builder4.setAlgorithm(""Realm{principal='null', password='null', scheme=SPNEGO, realmName='null', nonce='null', algorithm='null', response='L!k', opaque='null', qop='null', nc='00000001', cnonce='null', uri=null, usePreemptiveAuth=true, charset=UTF-8, ntlmHost='localhost', ntlmDomain='Na', useAbsoluteURI=true, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=true, loginContextName='null'}"");
      realm_Builder4.setOpaque((String) null);
      realm0.getResponse();
      realm0.toString();
      realm_Builder0.setServicePrincipalName((String) null);
      realm_Builder1.setMethodName(""L!k"");
      realm0.getLoginContextName();
      realm_Builder2.parseWWWAuthenticateHeader("""");
      realm0.isUseCanonicalHostname();
      realm_Builder4.setServicePrincipalName("""");
      realm0.getPassword();
  }"
221,"  public String toString() {
    return ""Realm{"" +
        ""principal='"" + principal + '\'' +
        "", password='"" + password + '\'' +
        "", scheme="" + scheme +
        "", realmName='"" + realmName + '\'' +
        "", nonce='"" + nonce + '\'' +
        "", algorithm='"" + algorithm + '\'' +
        "", response='"" + response + '\'' +
        "", opaque='"" + opaque + '\'' +
        "", qop='"" + qop + '\'' +
        "", nc='"" + nc + '\'' +
        "", cnonce='"" + cnonce + '\'' +
        "", uri="" + uri +
        "", usePreemptiveAuth="" + usePreemptiveAuth +
        "", charset="" + charset +
        "", ntlmHost='"" + ntlmHost + '\'' +
        "", ntlmDomain='"" + ntlmDomain + '\'' +
        "", useAbsoluteURI="" + useAbsoluteURI +
        "", omitQuery="" + omitQuery +
        "", customLoginConfig="" + customLoginConfig +
        "", servicePrincipalName='"" + servicePrincipalName + '\'' +
        "", useCanonicalHostname="" + useCanonicalHostname +
        "", loginContextName='"" + loginContextName + '\'' +
        '}';
  }","  public void test8()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOpaque("""");
      Realm.Builder realm_Builder2 = realm_Builder1.setQop("""");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("""");
      Realm.Builder realm_Builder4 = realm_Builder3.setOmitQuery(false);
      realm_Builder2.setUseCanonicalHostname(false);
      realm_Builder1.parseWWWAuthenticateHeader(""auth"");
      String string0 = """";
      Realm.Builder realm_Builder5 = realm_Builder4.setAlgorithm("""");
      realm_Builder5.setServicePrincipalName((String) null);
      Realm.Builder realm_Builder6 = realm_Builder5.setAlgorithm("""");
      realm_Builder6.setNonce(""%s@%x{i=%s,ip=%s,e=%s,ep=%s}"");
      realm_Builder5.setNc((String) null);
      Realm realm0 = realm_Builder4.build();
      realm0.getNc();
      realm0.toString();
      Uri uri0 = null;
      try {
        uri0 = new Uri((String) null, """", (String) null, 3, """", """", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
222,"  public boolean isUsePreemptiveAuth() {
    return usePreemptiveAuth;
  }","  public void test9()  throws Throwable  {
      Realm.AuthScheme.values();
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder2 = realm_Builder1.setUsePreemptiveAuth(false);
      Realm realm0 = realm_Builder2.build();
      realm_Builder1.setNtlmHost((String) null);
      realm_Builder0.setLoginContextName((String) null);
      realm0.toString();
      realm0.toString();
      realm0.toString();
      realm0.getUri();
      realm0.getPrincipal();
      Charset charset0 = Charset.defaultCharset();
      realm_Builder2.setCharset(charset0);
      realm0.getRealmName();
      realm0.getCustomLoginConfig();
      realm_Builder0.setNtlmHost(""{} {}"");
      realm_Builder0.setCustomLoginConfig((Map<String, String>) null);
      realm0.isUsePreemptiveAuth();
      realm_Builder1.parseProxyAuthenticateHeader(""Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='00000001', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='null'}"");
  }"
223,"  public boolean isUseCanonicalHostname() {
    return useCanonicalHostname;
  }","  public void test10()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("""", """");
      Realm.Builder realm_Builder1 = realm_Builder0.setUseCanonicalHostname(false);
      Realm.Builder realm_Builder2 = realm_Builder1.setOpaque(""'W=g:3Bw<6A=WP2P"");
      Realm.Builder realm_Builder3 = realm_Builder2.setAlgorithm(""'W=g:3Bw<6A=WP2P"");
      Realm.Builder realm_Builder4 = realm_Builder3.parseProxyAuthenticateHeader(""'W=g:3Bw<6A=WP2P"");
      Realm realm0 = realm_Builder4.build();
      realm0.isUseCanonicalHostname();
  }"
224,"  public Charset getCharset() {
    return charset;
  }","  public void test11()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce("", nonce='"");
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain("", customLoginConfig="");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder3 = realm_Builder2.setCharset(charset0);
      realm_Builder3.parseWWWAuthenticateHeader("", nonce='"");
      Realm.Builder realm_Builder4 = realm_Builder3.setUsePreemptiveAuth(false);
      realm_Builder4.parseProxyAuthenticateHeader("", nonce='"");
      Realm realm0 = realm_Builder4.build();
      realm0.getRealmName();
      realm_Builder2.setNtlmHost((String) null);
      realm0.getCharset();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException(""java.lang.Enum"", e);
      }
  }"
225,"  public Map<String, String> getCustomLoginConfig() {
    return customLoginConfig;
  }","  public void test12()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setAlgorithm("")"");
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader("")"");
      Realm.Builder realm_Builder3 = realm_Builder2.setUri((Uri) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder4 = realm_Builder3.setCustomLoginConfig(hashMap0);
      Realm realm0 = realm_Builder4.build();
      realm0.getPassword();
      realm0.isUsePreemptiveAuth();
      realm0.getOpaque();
      hashMap0.put("")"", """");
      realm_Builder3.setOmitQuery(false);
      realm0.toString();
      realm_Builder1.setNc("""");
      realm0.getNc();
      realm0.getRealmName();
      realm0.getCnonce();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      realm_Builder2.setScheme(realm_AuthScheme0);
      realm0.getCustomLoginConfig();
  }"
226,"  public String getServicePrincipalName() {
    return servicePrincipalName;
  }","  public void test13()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmHost(""d41d8cd98f00b204e9800998ecf8427e"");
      realm_Builder1.setMethodName(""d41d8cd98f00b204e9800998ecf8427e"");
      realm_Builder0.setServicePrincipalName("""");
      Realm.Builder realm_Builder3 = realm_Builder0.setNc("""");
      realm_Builder2.parseProxyAuthenticateHeader(""PV*"");
      Realm realm0 = realm_Builder3.build();
      realm0.getServicePrincipalName();
      realm0.getServicePrincipalName();
  }"
227,"  public String getNtlmHost() {
    return ntlmHost;
  }","  public void test14()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setResponse("""");
      Realm.Builder realm_Builder2 = realm_Builder1.parseProxyAuthenticateHeader("""");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder3 = realm_Builder1.setCustomLoginConfig(hashMap0);
      Realm.Builder realm_Builder4 = realm_Builder2.setRealmName(""A!&^cfXnzwOo_9nZs"");
      realm_Builder4.setNtlmDomain(""A!&^cfXnzwOo_9nZs"");
      realm_Builder0.setQop(""A!&^cfXnzwOo_9nZs"");
      Realm.Builder realm_Builder5 = realm_Builder4.setOmitQuery(false);
      Realm.Builder realm_Builder6 = realm_Builder1.setQop(""jiRx8f$K-#/Tt$LtB "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute("""", biFunction0);
      realm_Builder5.setAlgorithm(""NTLM"");
      Realm.Builder realm_Builder7 = realm_Builder1.setLoginContextName(""jiRx8f$K-#/Tt$LtB "");
      realm_Builder6.setQop(""scheme"");
      Realm realm0 = realm_Builder5.build();
      realm0.getQop();
      Realm.AuthScheme.values();
      realm0.getResponse();
      realm0.toString();
      realm_Builder0.setCustomLoginConfig(hashMap0);
      realm_Builder6.build();
      realm_Builder5.setCharset((Charset) null);
      realm_Builder3.setUseCanonicalHostname(true);
      realm_Builder7.setUseAbsoluteURI(false);
      realm0.getNtlmHost();
  }"
228,"  public String getNtlmHost() {
    return ntlmHost;
  }","  public void test15()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("""", """");
      Realm.Builder realm_Builder1 = realm_Builder0.setNc("""");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder2 = realm_Builder1.setCustomLoginConfig(hashMap0);
      Realm.Builder realm_Builder3 = realm_Builder2.setAlgorithm("", nonce='"");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      realm_Builder3.setNtlmHost("""");
      realm_Builder3.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder4 = realm_Builder3.setLoginContextName(""'"");
      realm_Builder4.setMethodName("""");
      Realm realm0 = realm_Builder4.build();
      realm0.getNtlmHost();
  }"
229,"  public String getLoginContextName() {
    return loginContextName;
  }","  public void test16()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder((String) null, (String) null);
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader((String) null);
      realm_Builder0.setLoginContextName((String) null);
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain("""");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder3 = realm_Builder2.setCustomLoginConfig(hashMap0);
      Realm.Builder realm_Builder4 = realm_Builder3.setLoginContextName("""");
      Realm realm0 = realm_Builder4.build();
      realm0.getOpaque();
      realm0.getNtlmDomain();
      realm0.getLoginContextName();
  }"
230,"  public String getOpaque() {
    return opaque;
  }","  public void test17()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      realm_Builder0.setUsePreemptiveAuth(true);
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("")%Cm*q@g7;*j"");
      Realm.Builder realm_Builder2 = realm_Builder1.setRealmName("")%Cm*q@g7;*j"");
      Realm.Builder realm_Builder3 = realm_Builder2.setResponse("")%Cm*q@g7;*j"");
      Realm realm0 = realm_Builder0.build();
      realm0.getCustomLoginConfig();
      realm_Builder3.setMethodName(""[*&nYy"");
      realm_Builder2.setRealmName((String) null);
      realm_Builder0.setCustomLoginConfig((Map<String, String>) null);
      Realm.Builder realm_Builder4 = realm_Builder3.parseProxyAuthenticateHeader("""");
      realm_Builder4.setResponse("")%Cm*q@g7;*j"");
      realm0.getLoginContextName();
      realm_Builder1.setResponse(""PHgWY+:`U#Fu"");
      realm0.isUsePreemptiveAuth();
      realm0.isOmitQuery();
      realm0.getRealmName();
      realm0.getOpaque();
      realm_Builder2.setAlgorithm("", opaque='"");
  }"
231,"  public String getAlgorithm() {
    return algorithm;
  }","  public void test18()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder1 = realm_Builder0.setScheme(realm_AuthScheme0);
      realm_Builder0.setNonce("" '"");
      realm_Builder0.setRealmName("" '"");
      Realm realm0 = realm_Builder0.build();
      realm_Builder0.setUsePreemptiveAuth(false);
      realm0.toString();
      realm_Builder1.setRealmName(""-EaRwAvBi{"");
      realm_Builder1.setResponse(""V9*l0@,mQwiO"");
      realm0.toString();
      realm0.toString();
      realm0.toString();
      realm0.getRealmName();
      realm0.getPassword();
      realm0.isUsePreemptiveAuth();
      realm_Builder1.setOmitQuery(false);
      realm0.toString();
      realm_Builder0.setAlgorithm(""Realm{principal='null', password='null', scheme=KERBEROS, realmName=' '', nonce=' '', algorithm='null', response='null', opaque='null', qop='null', nc='00000001', cnonce='a13e6ed2f3eb10c38c507ec50dba54b3', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='null'}"");
      realm_Builder1.setNonce(""#"");
      realm0.getNtlmHost();
      realm0.getCnonce();
      realm0.getAlgorithm();
      Realm.AuthScheme.values();
  }"
232,"  public String getServicePrincipalName() {
    return servicePrincipalName;
  }","  public void test19()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader(""Zty"");
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse(""Zty"");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName(""Zty"");
      Realm.Builder realm_Builder4 = realm_Builder3.setCustomLoginConfig((Map<String, String>) null);
      realm_Builder4.setServicePrincipalName(""Zty"");
      Realm realm0 = realm_Builder4.build();
      realm0.toString();
      realm0.getServicePrincipalName();
  }"
233,"  public String getPrincipal() {
    return principal;
  }","  public void test20()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      realm_Builder0.setOpaque(""om/>FzeK 7mSM:%XGG"");
      Realm.Builder realm_Builder1 = realm_Builder0.setNtlmDomain("" could not be parsed into a proper Uri, missing scheme"");
      realm_Builder1.setUseAbsoluteURI(true);
      Realm.Builder realm_Builder2 = realm_Builder0.setUseCanonicalHostname(false);
      realm_Builder1.parseProxyAuthenticateHeader("""");
      realm_Builder2.setAlgorithm("""");
      Realm realm0 = realm_Builder0.build();
      realm0.toString();
      realm0.getCustomLoginConfig();
      realm0.getLoginContextName();
      realm_Builder2.setServicePrincipalName("""");
      realm0.getAlgorithm();
      realm_Builder0.setNonce(""luh2ZX."");
      realm0.getPrincipal();
  }"
234,"  public String getOpaque() {
    return opaque;
  }","  public void test21()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      realm_Builder0.setAlgorithm("","");
      realm_Builder1.parseWWWAuthenticateHeader("","");
      Realm realm0 = realm_Builder1.build();
      realm0.toString();
      realm0.toString();
      realm0.toString();
      Realm realm1 = realm_Builder0.build();
      realm0.toString();
      realm0.toString();
      realm1.getUri();
      realm0.toString();
      realm_Builder1.setUri((Uri) null);
      realm0.getUri();
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain(""https"");
      Charset charset0 = realm0.getCharset();
      realm_Builder0.setCharset(charset0);
      realm1.toString();
      realm_Builder2.build();
      Realm.AuthScheme.values();
      realm0.getResponse();
      realm0.getLoginContextName();
      realm1.getNc();
      Realm.AuthScheme.values();
      realm1.getNtlmDomain();
      realm_Builder2.setNc(""://"");
      realm_Builder1.setServicePrincipalName(""ws"");
      realm1.isOmitQuery();
      realm_Builder1.parseProxyAuthenticateHeader(""wss"");
      realm0.getOpaque();
  }"
235,"  public boolean isUseAbsoluteURI() {
    return useAbsoluteURI;
  }","  public void test22()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""#:p\""a0k'fb\u0005U"", ""#:p\""a0k'fb\u0005U"");
      Realm.Builder realm_Builder1 = realm_Builder0.setOpaque(""93'\""S;"");
      Realm.Builder realm_Builder2 = realm_Builder1.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder3 = realm_Builder2.setResponse(""93'\""S;"");
      Uri uri0 = new Uri(""93'\""S;"", """", "":>"", (-1385), ""93'\""S;"", """", """");
      Uri uri1 = uri0.withNewQuery("""");
      realm_Builder2.setUri(uri1);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      realm_Builder3.setScheme(realm_AuthScheme0);
      realm_Builder3.setUseAbsoluteURI(true);
      Realm realm0 = realm_Builder3.build();
      realm_Builder0.setScheme(realm_AuthScheme0);
      realm0.getPassword();
      realm0.toString();
      realm_Builder0.setAlgorithm(""~)Yv)X$wT?MXZDJ9H"");
      Realm.Builder realm_Builder4 = realm_Builder1.setQop("""");
      realm_Builder4.setOmitQuery(true);
      realm0.getQop();
      realm0.getScheme();
      realm_Builder4.setUseAbsoluteURI(true);
      realm0.getQop();
      realm0.getOpaque();
      realm0.isUseAbsoluteURI();
  }"
236,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test23()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder((String) null, ""TxM>:Q"");
      Realm.Builder realm_Builder1 = realm_Builder0.setNc("", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'"");
      Realm.Builder realm_Builder2 = realm_Builder1.setUsePreemptiveAuth(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'"");
      Realm.Builder realm_Builder4 = realm_Builder3.setRealmName("""");
      Realm.Builder realm_Builder5 = realm_Builder4.setNtlmDomain("""");
      realm_Builder5.parseProxyAuthenticateHeader(""opaque"");
  }"
237,"  public boolean isUsePreemptiveAuth() {
    return usePreemptiveAuth;
  }","  public void test24()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", charset="", ""{"");
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("":"");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm.Builder realm_Builder3 = realm_Builder2.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder4 = realm_Builder3.setAlgorithm("""");
      Realm realm0 = realm_Builder4.build();
      realm0.isUsePreemptiveAuth();
      realm_Builder0.setUseAbsoluteURI(true);
      realm_Builder3.setLoginContextName(""d>eZ8/"");
  }"
238,"  public String getServicePrincipalName() {
    return servicePrincipalName;
  }","  public void test25()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("""", """");
      Realm.Builder realm_Builder1 = realm_Builder0.setOpaque(""NTLM"");
      Realm.Builder realm_Builder2 = realm_Builder1.setMethodName(""7JSvi2D)2"");
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader(""NTLM"");
      Realm realm0 = realm_Builder3.build();
      realm0.getServicePrincipalName();
  }"
239,"  public Charset getCharset() {
    return charset;
  }","  public void test26()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader(""auth-int"");
      Realm realm0 = realm_Builder0.build();
      realm0.toString();
      realm0.getQop();
      realm_Builder1.parseWWWAuthenticateHeader(""Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='00000001', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='null'}"");
      Realm.AuthScheme.values();
      realm0.toString();
      Realm.AuthScheme.values();
      Realm.Builder realm_Builder2 = realm_Builder1.setServicePrincipalName(""I(TC(D=tW{"");
      realm0.isUseAbsoluteURI();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      realm_Builder2.setScheme(realm_AuthScheme0);
      realm_Builder1.setNc(""auth-int"");
      realm0.getCharset();
  }"
240,"  public String getResponse() {
    return response;
  }","  public void test27()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader(""cc)u|VWnU@Cxh|R,Z):"");
      Realm realm0 = realm_Builder1.build();
      realm0.getResponse();
  }"
241,"  public String getAlgorithm() {
    return algorithm;
  }","  public void test28()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader("":"");
      Realm realm0 = realm_Builder1.build();
      Charset charset0 = realm0.getCharset();
      Realm.Builder realm_Builder3 = realm_Builder0.setCharset(charset0);
      realm0.toString();
      Realm.Builder realm_Builder4 = realm_Builder2.setRealmName("", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'"");
      Realm.Builder realm_Builder5 = realm_Builder4.setNtlmDomain("", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'"");
      realm_Builder4.setNonce("", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'"");
      realm_Builder5.setUseCanonicalHostname(true);
      Realm realm1 = realm_Builder5.build();
      realm1.toString();
      realm1.getCharset();
      realm_Builder3.setCharset(charset0);
      realm0.getNonce();
      realm_Builder1.parseProxyAuthenticateHeader(""(f?D9"");
      realm1.getNtlmDomain();
      realm1.getAlgorithm();
  }"
242,"  public AuthScheme getScheme() {
    return scheme;
  }","  public void test29()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""R kAvp:o)4O[A,#){"", ""omV{jn7"");
      Realm.Builder realm_Builder1 = realm_Builder0.setMethodName(""R kAvp:o)4O[A,#){"");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder2 = realm_Builder1.setCharset(charset0);
      charset0.aliases();
      realm_Builder1.parseProxyAuthenticateHeader(""\u0010"");
      realm_Builder2.setLoginContextName(""R kAvp:o)4O[A,#){"");
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader("""");
      Realm.Builder realm_Builder4 = realm_Builder3.setNtlmHost("""");
      ByteBuffer byteBuffer0 = charset0.encode("""");
      charset0.decode(byteBuffer0);
      Realm realm0 = realm_Builder4.build();
      realm_Builder4.setNtlmHost("""");
      realm0.toString();
      charset0.aliases();
      realm0.getLoginContextName();
      realm0.getQop();
      realm_Builder0.parseProxyAuthenticateHeader(""omV{jn7"");
      Realm.AuthScheme.values();
      Realm.AuthScheme.values();
      realm0.getScheme();
  }"
243,"  public String getNtlmDomain() {
    return ntlmDomain;
  }","  public void test30()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("", qop='"", "", qop='"");
      Realm.Builder realm_Builder1 = realm_Builder0.setAlgorithm("", qop='"");
      Realm.Builder realm_Builder2 = realm_Builder1.parseProxyAuthenticateHeader(""/m&wrzzDpwjYr-"");
      Realm.Builder realm_Builder3 = realm_Builder2.setUseAbsoluteURI(false);
      Realm.Builder realm_Builder4 = realm_Builder3.setLoginContextName(""d$Tk@1D;"");
      Realm realm0 = realm_Builder4.build();
      realm0.getNtlmDomain();
  }"
244,"  public String getAlgorithm() {
    return algorithm;
  }","  public void test31()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmHost(""1g%-Vl3*"");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName(""org.asynchttpclient.uri.Uri"");
      realm_Builder2.parseWWWAuthenticateHeader(""1g%-Vl3*"");
      Realm realm0 = realm_Builder3.build();
      realm0.getAlgorithm();
  }"
245,"  public String getLoginContextName() {
    return loginContextName;
  }","  public void test32()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setResponse(""/\""Lk"");
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader(""@X"");
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader(""zx]4esJIi8=."");
      Realm realm0 = realm_Builder3.build();
      realm0.getLoginContextName();
  }"
246,"  public AuthScheme getScheme() {
    return scheme;
  }","  public void test33()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setNtlmHost("""");
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain("""");
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader(""q"");
      Realm.Builder realm_Builder4 = realm_Builder3.setOmitQuery(false);
      Realm realm0 = realm_Builder4.build();
      realm0.getScheme();
  }"
247,"  public String getPrincipal() {
    return principal;
  }","  public void test34()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("""", ""'frfy}vV@anN-jUh"");
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce("""");
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm(""I7sux,>{~i\""C#ssDV"");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("""");
      Realm.Builder realm_Builder4 = realm_Builder2.setOpaque(""b of"");
      Realm.Builder realm_Builder5 = realm_Builder3.setNc(""3tys\""m/g.~"");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      realm_Builder2.setScheme(realm_AuthScheme0);
      Realm realm0 = realm_Builder5.build();
      realm0.getOpaque();
      realm0.isOmitQuery();
      realm_Builder4.parseProxyAuthenticateHeader("""");
      realm0.getPrincipal();
  }"
248,"  public String getPassword() {
    return password;
  }","  public void test35()  throws Throwable  {
      Realm.AuthScheme.values();
      Realm.Builder realm_Builder0 = new Realm.Builder("""", """");
      Realm.Builder realm_Builder1 = realm_Builder0.setServicePrincipalName("""");
      Realm.Builder realm_Builder2 = realm_Builder1.setAlgorithm("""");
      Realm.Builder realm_Builder3 = realm_Builder2.setLoginContextName("""");
      Realm.Builder realm_Builder4 = realm_Builder1.setResponse("""");
      Realm.Builder realm_Builder5 = realm_Builder3.parseProxyAuthenticateHeader(""o1/h"");
      realm_Builder3.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder6 = realm_Builder5.setUseCanonicalHostname(false);
      realm_Builder6.setAlgorithm(""QZj\""@aM1M($._KOuxB"");
      realm_Builder4.setOpaque("""");
      Realm realm0 = realm_Builder4.build();
      realm0.getPassword();
  }"
249,"  public boolean isOmitQuery() {
    return omitQuery;
  }","  public void test36()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = new Realm.Builder();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      realm_Builder1.setRealmName(""3#'g 8P}Eb7mxS?nc"");
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder3 = realm_Builder2.setOpaque("""");
      Realm.Builder realm_Builder4 = realm_Builder3.setUseAbsoluteURI(false);
      Realm realm0 = realm_Builder4.build();
      realm0.isOmitQuery();
  }"
250,"  public String getPrincipal() {
    return principal;
  }","  public void test37()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseProxyAuthenticateHeader((String) null);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder3 = realm_Builder2.setLoginContextName(""fbCS.HHdJ"");
      Realm.Builder realm_Builder4 = realm_Builder3.setServicePrincipalName(""fbCS.HHdJ"");
      Realm realm0 = realm_Builder4.build();
      realm0.getPrincipal();
  }"
251,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test38()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""auth-int"", ""auth-int"");
      Realm.Builder realm_Builder1 = realm_Builder0.setLoginContextName("""");
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(false);
      Realm.Builder realm_Builder3 = realm_Builder2.setOpaque(""auth-int"");
      Realm.Builder realm_Builder4 = realm_Builder3.setNtlmDomain("""");
      realm_Builder4.setOmitQuery(false);
  }"
252,"  public String getNonce() {
    return nonce;
  }","  public void test39()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder((String) null, (String) null);
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain("""");
      realm_Builder2.setNonce(""{kJ"");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      realm_Builder2.setCustomLoginConfig(hashMap0);
      realm_Builder1.setNonce("""");
      Realm realm0 = realm_Builder1.build();
      realm0.getCustomLoginConfig();
      realm0.toString();
      realm0.getRealmName();
      realm0.getQop();
      Realm.AuthScheme.values();
      realm0.getNonce();
  }"
253,"  public String getNc() {
    return nc;
  }","  public void test40()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setResponse(""/../"");
      realm_Builder1.setNtlmDomain(""qz`Zk\"">oj}9ZV"");
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmHost((String) null);
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder4 = realm_Builder3.setNonce(""/T`ku"");
      realm_Builder4.setNtlmDomain((String) null);
      realm_Builder2.setCharset((Charset) null);
      realm_Builder4.setRealmName(""`'\""mO>"");
      Realm realm0 = realm_Builder2.build();
      realm0.toString();
      realm_Builder0.setCharset((Charset) null);
      realm_Builder3.setNtlmDomain((String) null);
      Realm realm1 = realm_Builder4.build();
      realm1.toString();
      realm_Builder3.setUseAbsoluteURI(true);
      realm1.getCnonce();
      realm1.getUri();
      realm_Builder3.setMethodName(""auth-int"");
      realm1.getCharset();
      realm1.getCharset();
      realm1.getCnonce();
      realm1.getNc();
      Realm.AuthScheme.values();
      realm1.getNc();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf(""c8fe083cd113415405a6a151abd4aaf5"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.asynchttpclient.Realm.AuthScheme.c8fe083cd113415405a6a151abd4aaf5
         //
         verifyException(""java.lang.Enum"", e);
      }
  }"
254,"  public String getCnonce() {
    return cnonce;
  }","  public void test41()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""n}1onC\""IH&W+dB+`"", ""n}1onC\""IH&W+dB+`"");
      Realm.Builder realm_Builder1 = realm_Builder0.setQop(""n}1onC\""IH&W+dB+`"");
      Realm.Builder realm_Builder2 = realm_Builder1.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder3 = realm_Builder2.setServicePrincipalName("""");
      Realm.Builder realm_Builder4 = realm_Builder3.setUseAbsoluteURI(true);
      realm_Builder4.setNonce(""n}1onC\""IH&W+dB+`"");
      Realm.Builder realm_Builder5 = realm_Builder4.setUseCanonicalHostname(true);
      Realm realm0 = realm_Builder4.build();
      realm0.getCnonce();
      Realm.AuthScheme.values();
      realm_Builder0.setMethodName("""");
      realm_Builder5.setNonce("""");
  }"
255,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test42()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = new Realm.Builder();
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName(""Digest algorithm not supported: "");
      realm_Builder3.setNonce(""////"");
      Charset.defaultCharset();
      Uri uri0 = new Uri(""'null'"", ""Digest algorithm not supported: "", ""////"", (-1436), ""scheme"", ""auth-int"", ""PathWatcher must be stopped before reset."");
      Uri uri1 = uri0.withNewScheme(""////"");
      realm_Builder3.setQop(""iO Dec,si-&Wiiek"");
      Uri uri2 = uri1.withNewQuery(""auth-int"");
      realm_Builder3.setUri(uri2);
      // Undeclared exception!
      try { 
        realm_Builder3.build();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Digest qop not supported: iO Dec,si-&Wiiek
         //
         verifyException(""org.asynchttpclient.Realm$Builder"", e);
      }
  }"
256,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test43()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName(""Digest algorithm not supported: "");
      realm_Builder3.setNonce(""////"");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder4 = realm_Builder3.setCharset(charset0);
      Uri uri0 = new Uri(""'null'"", ""Digest algorithm not supported: "", ""////"", (-1436), ""scheme"", ""////"", ""PathWatcher must be stopped before reset."");
      uri0.withNewScheme(""////"");
      realm_Builder3.setUri(uri0);
      // Undeclared exception!
      try { 
        realm_Builder4.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
257,"  public Map<String, String> getCustomLoginConfig() {
    return customLoginConfig;
  }","  public void test44()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""GET"", ""Realm{principal='"");
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(false);
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm.Builder realm_Builder2 = realm_Builder1.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder3 = realm_Builder2.parseProxyAuthenticateHeader(""Realm{principal='"");
      Realm realm0 = realm_Builder3.build();
      realm0.getCustomLoginConfig();
  }"
258,"  public String getQop() {
    return qop;
  }","  public void test45()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder("""", """");
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("""");
      realm_Builder1.setMethodName("""");
      Realm realm0 = realm_Builder1.build();
      realm0.getQop();
  }"
259,"  public String getNtlmHost() {
    return ntlmHost;
  }","  public void test46()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader(""dN)?4QqQE u>Ny(b"");
      Realm realm0 = realm_Builder1.build();
      realm0.getNonce();
      realm0.getNtlmHost();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      realm_Builder0.setScheme(realm_AuthScheme0);
  }"
260,"  public String getRealmName() {
    return realmName;
  }","  public void test47()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setQop(""f\""kZ%N%an'Cqtk"");
      Realm.Builder realm_Builder2 = realm_Builder1.setNc(""f\""kZ%N%an'Cqtk"");
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader("" 0a"");
      Realm.Builder realm_Builder4 = realm_Builder3.setNonce(""}zcU7+_a0gN"");
      Realm realm0 = realm_Builder4.build();
      realm0.getRealmName();
  }"
261,"  public boolean isUseAbsoluteURI() {
    return useAbsoluteURI;
  }","  public void test48()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder2 = realm_Builder1.setNc((String) null);
      Realm.Builder realm_Builder3 = realm_Builder2.setUseCanonicalHostname(false);
      Realm.Builder realm_Builder4 = realm_Builder3.setUseAbsoluteURI(false);
      Realm realm0 = realm_Builder4.build();
      realm0.isUseAbsoluteURI();
  }"
262,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test49()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder((String) null, (String) null);
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce(""Yv,L>OPjnqxVQaTY-Q"");
      Realm.Builder realm_Builder2 = realm_Builder1.setUseAbsoluteURI(true);
      realm_Builder2.setServicePrincipalName(""Yv,L>OPjnqxVQaTY-Q"");
  }"
263,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test50()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      realm_Builder0.setNtlmHost("""");
      // Undeclared exception!
      try { 
        realm_Builder0.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
264,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test51()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""W$X,$ox!X"", ""W$X,$ox!X"");
      Realm.Builder realm_Builder1 = realm_Builder0.setNc(""W$X,$ox!X"");
      Realm.Builder realm_Builder2 = realm_Builder1.setNtlmDomain(""'_:,4wgy*,nDZ<"");
      realm_Builder2.setUseCanonicalHostname(true);
  }"
265,"  public Uri getUri() {
    return uri;
  }","  public void test52()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""A"", ""A"");
      realm_Builder0.parseProxyAuthenticateHeader(""A"");
      Realm realm0 = realm_Builder0.build();
      realm0.toString();
      realm0.toString();
      realm_Builder0.parseProxyAuthenticateHeader("", useCanonicalHostname="");
      realm0.getOpaque();
      realm0.getPassword();
      realm0.getUri();
  }"
266,"  public String getCnonce() {
    return cnonce;
  }","  public void test53()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""starting {}"", ""starting {}"");
      Realm.Builder realm_Builder1 = realm_Builder0.setResponse(""starting {}"");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Realm.Builder realm_Builder2 = realm_Builder1.setCustomLoginConfig(hashMap0);
      Realm.Builder realm_Builder3 = realm_Builder2.parseWWWAuthenticateHeader("""");
      Realm.Builder realm_Builder4 = realm_Builder3.setAlgorithm(""qop"");
      Realm realm0 = realm_Builder4.build();
      realm0.getCnonce();
  }"
267,"  public String getNc() {
    return nc;
  }","  public void test54()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("""");
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse("""");
      Realm.Builder realm_Builder3 = realm_Builder2.setMethodName("""");
      Realm.Builder realm_Builder4 = realm_Builder3.setCustomLoginConfig((Map<String, String>) null);
      Realm realm0 = realm_Builder4.build();
      realm0.getNc();
  }"
268,"  public Charset getCharset() {
    return charset;
  }","  public void test55()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.parseWWWAuthenticateHeader("""");
      Realm realm0 = realm_Builder1.build();
      realm0.getCharset();
  }"
269,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test56()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""d5g"", ""d5g"");
      // Undeclared exception!
      try { 
        realm_Builder0.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
270,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test57()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = new Realm.Builder();
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName(""Digest algorithm not supported: "");
      realm_Builder3.setNonce(""////"");
      Charset.defaultCharset();
      Uri uri0 = new Uri(""'null'"", ""Digest algorithm not supported: "", ""////"", (-1436), ""scheme"", ""auth-int"", ""PathWatcher must be stopped before reset."");
      realm_Builder3.setQop(""https"");
      realm_Builder3.setUri(uri0);
      // Undeclared exception!
      try { 
        realm_Builder3.build();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Digest qop not supported: https
         //
         verifyException(""org.asynchttpclient.Realm$Builder"", e);
      }
  }"
271,"  public Uri getUri() {
    return uri;
  }","  public void test58()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = new Realm.Builder(""GQDuKNzIXhY<\"""", ""GQDuKNzIXhY<\"""");
      Realm.Builder realm_Builder2 = realm_Builder1.setResponse(""GQDuKNzIXhY<\"""");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Realm.Builder realm_Builder3 = realm_Builder2.setScheme(realm_AuthScheme0);
      realm_Builder3.setNc(""GQDuKNzIXhY<\"""");
      realm_Builder3.setScheme(realm_AuthScheme0);
      Realm.Builder realm_Builder4 = realm_Builder3.setLoginContextName(""GQDuKNzIXhY<\"""");
      realm_Builder4.setNonce(""GQDuKNzIXhY<\"""");
      realm_Builder0.setOpaque(""GQDuKNzIXhY<\"""");
      Realm.Builder realm_Builder5 = realm_Builder3.setNonce(""GQDuKNzIXhY<\"""");
      Realm realm0 = realm_Builder4.build();
      realm_Builder0.setNonce(""NTLM"");
      realm0.toString();
      realm0.getNc();
      realm_Builder1.setUseCanonicalHostname(false);
      realm0.toString();
      realm_Builder3.parseProxyAuthenticateHeader(""scheme"");
      realm_Builder2.setServicePrincipalName(""wA!70+h"");
      realm0.getScheme();
      realm0.getPrincipal();
      realm0.getNtlmDomain();
      Realm.Builder realm_Builder6 = realm_Builder5.setResponse(""GQDuKNzIXhY<\"""");
      Realm.Builder realm_Builder7 = realm_Builder0.parseWWWAuthenticateHeader(""NTLM"");
      realm0.isUseCanonicalHostname();
      realm_Builder6.parseProxyAuthenticateHeader(""NTLM"");
      Realm realm1 = realm_Builder7.build();
      realm1.toString();
      realm_Builder1.parseProxyAuthenticateHeader(""Realm{principal='GQDuKNzIXhY<\""', password='GQDuKNzIXhY<\""', scheme=BASIC, realmName='null', nonce='GQDuKNzIXhY<\""', algorithm='null', response='GQDuKNzIXhY<\""', opaque='null', qop='null', nc='GQDuKNzIXhY<\""', cnonce='6da1992a2b8d1ed0d3f9eddc660f08a4', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='GQDuKNzIXhY<\""'}"");
      realm_Builder5.parseWWWAuthenticateHeader(""Realm{principal='GQDuKNzIXhY<\""', password='GQDuKNzIXhY<\""', scheme=BASIC, realmName='null', nonce='GQDuKNzIXhY<\""', algorithm='null', response='GQDuKNzIXhY<\""', opaque='null', qop='null', nc='GQDuKNzIXhY<\""', cnonce='6da1992a2b8d1ed0d3f9eddc660f08a4', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='GQDuKNzIXhY<\""'}"");
      realm0.getCharset();
      realm1.toString();
      realm0.getUri();
  }"
272,"  public String getLoginContextName() {
    return loginContextName;
  }","  public void test59()  throws Throwable  {
      Realm.AuthScheme.values();
      Realm.Builder realm_Builder0 = new Realm.Builder("""", """");
      Realm.Builder realm_Builder1 = realm_Builder0.setServicePrincipalName("""");
      Realm.Builder realm_Builder2 = new Realm.Builder("""", """");
      Realm.Builder realm_Builder3 = realm_Builder2.setNtlmDomain(""MD5"");
      Realm.Builder realm_Builder4 = realm_Builder1.setResponse("""");
      Realm.Builder realm_Builder5 = realm_Builder3.parseProxyAuthenticateHeader(""o1/h"");
      realm_Builder3.setUseCanonicalHostname(true);
      Realm realm0 = realm_Builder5.build();
      realm0.getCustomLoginConfig();
      realm_Builder5.setCustomLoginConfig((Map<String, String>) null);
      Realm.Builder realm_Builder6 = realm_Builder5.setUseCanonicalHostname(false);
      realm_Builder6.setAlgorithm(""MD5"");
      realm_Builder4.setOpaque("""");
      realm0.getLoginContextName();
  }"
273,"  public String getPassword() {
    return password;
  }","  public void test60()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      realm_Builder0.setNonce(""org.asynchttpclient.uri.Uri"");
      Realm.Builder realm_Builder1 = realm_Builder0.setQop(""p(T"");
      Realm.Builder realm_Builder2 = realm_Builder1.setServicePrincipalName(""p(T"");
      realm_Builder2.setNonce(""#KBjlK285nv"");
      Realm.Builder realm_Builder3 = realm_Builder2.setLoginContextName(""#KBjlK285nv"");
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      realm_Builder2.setScheme(realm_AuthScheme0);
      Realm.AuthScheme realm_AuthScheme1 = Realm.AuthScheme.BASIC;
      Realm.Builder realm_Builder4 = realm_Builder3.setScheme(realm_AuthScheme1);
      realm_Builder1.setLoginContextName(""p(T"");
      Realm realm0 = realm_Builder4.build();
      realm0.getResponse();
      Realm.AuthScheme.values();
      realm0.getOpaque();
      realm0.getNonce();
      Realm.Builder realm_Builder5 = realm_Builder0.setMethodName(""algorithm"");
      realm0.getCustomLoginConfig();
      realm0.toString();
      realm_Builder0.parseWWWAuthenticateHeader(""#KBjlK285nv"");
      realm_Builder5.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder6 = realm_Builder1.setLoginContextName(""p(T"");
      realm_Builder6.setLoginContextName("""");
      realm0.isUseAbsoluteURI();
      realm_Builder6.setNtlmDomain(""P 4MDy"");
      realm0.getAlgorithm();
      realm_Builder6.build();
      realm0.getPassword();
  }"
274,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test61()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName(""Digest algorithm not supported: "");
      realm_Builder3.setNonce(""////"");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder4 = realm_Builder3.setCharset(charset0);
      Uri uri0 = new Uri(""'null&'"", ""Digest algorithm not supported: "", ""////"", (-1436), ""scheme"", ""////"", ""PathWatcher must be stopped before reset."");
      uri0.withNewScheme(""////"");
      realm_Builder3.setUri(uri0);
      // Undeclared exception!
      try { 
        realm_Builder4.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
275,"  private Realm(AuthScheme scheme,
                String principal,
                String password,
                String realmName,
                String nonce,
                String algorithm,
                String response,
                String opaque,
                String qop,
                String nc,
                String cnonce,
                Uri uri,
                boolean usePreemptiveAuth,
                Charset charset,
                String ntlmDomain,
                String ntlmHost,
                boolean useAbsoluteURI,
                boolean omitQuery,
                String servicePrincipalName,
                boolean useCanonicalHostname,
                Map<String, String> customLoginConfig,
                String loginContextName) {

    this.scheme = assertNotNull(scheme, ""scheme"");
    this.principal = principal;
    this.password = password;
    this.realmName = realmName;
    this.nonce = nonce;
    this.algorithm = algorithm;
    this.response = response;
    this.opaque = opaque;
    this.qop = qop;
    this.nc = nc;
    this.cnonce = cnonce;
    this.uri = uri;
    this.usePreemptiveAuth = usePreemptiveAuth;
    this.charset = charset;
    this.ntlmDomain = ntlmDomain;
    this.ntlmHost = ntlmHost;
    this.useAbsoluteURI = useAbsoluteURI;
    this.omitQuery = omitQuery;
    this.servicePrincipalName = servicePrincipalName;
    this.useCanonicalHostname = useCanonicalHostname;
    this.customLoginConfig = customLoginConfig;
    this.loginContextName = loginContextName;
  }","  public void test62()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setOmitQuery(true);
      Realm.Builder realm_Builder2 = realm_Builder1.setUseCanonicalHostname(true);
      realm_Builder1.parseWWWAuthenticateHeader(""Digest algorithm not supported: "");
      Realm.Builder realm_Builder3 = realm_Builder2.setRealmName(""Digest algorithm not supported: "");
      realm_Builder3.setNonce(""////"");
      Charset charset0 = Charset.defaultCharset();
      realm_Builder3.setCharset(charset0);
      Uri uri0 = new Uri(""'null'"", ""Digest algorithm not supported: "", ""////"", (-1436), ""'null'"", ""auth-int"", ""PathWatcher must be stopped before reset."");
      Uri uri1 = uri0.withNewScheme(""////"");
      Uri uri2 = uri1.withNewQuery(""auth-int"");
      realm_Builder3.setUri(uri2);
      // Undeclared exception!
      try { 
        realm_Builder3.build();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Digest algorithm not supported: not supported: 
         //
         verifyException(""org.asynchttpclient.Realm$Builder"", e);
      }
  }"
276,"  public Charset getCharset() {
    return charset;
  }","  public void test63()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setNonce("", nonce='"");
      Charset charset0 = Charset.defaultCharset();
      Realm.Builder realm_Builder2 = realm_Builder1.setCharset(charset0);
      realm_Builder2.setNtlmDomain("", nonce='"");
      realm_Builder2.parseProxyAuthenticateHeader("", nonce='"");
      Realm realm0 = realm_Builder2.build();
      realm0.getRealmName();
      realm_Builder0.setNtlmHost((String) null);
      realm0.getCharset();
      // Undeclared exception!
      try { 
        Realm.AuthScheme.valueOf((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException(""java.lang.Enum"", e);
      }
  }"
277,"  public Uri getUri() {
    return uri;
  }","  public void test64()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder(""RkAvp:o)4O[A,#){"", ""omV{jn7"");
      Realm.Builder realm_Builder1 = realm_Builder0.setMethodName(""RkAvp:o)4O[A,#){"");
      Realm.Builder realm_Builder2 = realm_Builder1.parseProxyAuthenticateHeader(""omV{jn7"");
      Realm.Builder realm_Builder3 = realm_Builder0.setLoginContextName(""RkAvp:o)4O[A,#){"");
      realm_Builder1.setUsePreemptiveAuth(false);
      Realm.Builder realm_Builder4 = realm_Builder0.parseProxyAuthenticateHeader(""omV{jn7"");
      Realm realm0 = realm_Builder3.build();
      realm0.getCustomLoginConfig();
      realm_Builder0.setCustomLoginConfig((Map<String, String>) null);
      realm_Builder1.setQop(""RkAvp:o)4O[A,#){"");
      Realm realm1 = realm_Builder2.build();
      realm_Builder4.setNtlmHost(""omV{jn7"");
      realm1.toString();
      realm1.getQop();
      Realm.AuthScheme.values();
      realm1.getScheme();
      realm1.getQop();
      realm1.getUri();
  }"
278,"  public String toString() {
    return ""Realm{"" +
        ""principal='"" + principal + '\'' +
        "", password='"" + password + '\'' +
        "", scheme="" + scheme +
        "", realmName='"" + realmName + '\'' +
        "", nonce='"" + nonce + '\'' +
        "", algorithm='"" + algorithm + '\'' +
        "", response='"" + response + '\'' +
        "", opaque='"" + opaque + '\'' +
        "", qop='"" + qop + '\'' +
        "", nc='"" + nc + '\'' +
        "", cnonce='"" + cnonce + '\'' +
        "", uri="" + uri +
        "", usePreemptiveAuth="" + usePreemptiveAuth +
        "", charset="" + charset +
        "", ntlmHost='"" + ntlmHost + '\'' +
        "", ntlmDomain='"" + ntlmDomain + '\'' +
        "", useAbsoluteURI="" + useAbsoluteURI +
        "", omitQuery="" + omitQuery +
        "", customLoginConfig="" + customLoginConfig +
        "", servicePrincipalName='"" + servicePrincipalName + '\'' +
        "", useCanonicalHostname="" + useCanonicalHostname +
        "", loginContextName='"" + loginContextName + '\'' +
        '}';
  }","  public void test65()  throws Throwable  {
      Realm.Builder realm_Builder0 = new Realm.Builder();
      Realm.Builder realm_Builder1 = realm_Builder0.setLoginContextName(""d"");
      Realm.Builder realm_Builder2 = realm_Builder0.setNc((String) null);
      Realm.Builder realm_Builder3 = realm_Builder0.setLoginContextName(""d"");
      realm_Builder3.parseProxyAuthenticateHeader(""d"");
      Realm realm0 = realm_Builder2.build();
      realm0.getCustomLoginConfig();
      Realm.Builder realm_Builder4 = realm_Builder0.setCustomLoginConfig((Map<String, String>) null);
      Realm realm1 = realm_Builder1.build();
      realm1.toString();
      realm1.isUseAbsoluteURI();
      Realm.Builder realm_Builder5 = realm_Builder2.setNc(""Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='null', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='d'}"");
      realm_Builder1.parseWWWAuthenticateHeader(""Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='null', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='d'}"");
      realm1.getResponse();
      realm_Builder0.setLoginContextName((String) null);
      Realm.AuthScheme.values();
      realm1.isUsePreemptiveAuth();
      realm0.getServicePrincipalName();
      realm_Builder0.setServicePrincipalName(""Realm{principal='null', password='null', scheme=BASIC, realmName='null', nonce='null', algorithm='null', response='null', opaque='null', qop='null', nc='null', cnonce='null', uri=null, usePreemptiveAuth=false, charset=UTF-8, ntlmHost='localhost', ntlmDomain='null', useAbsoluteURI=false, omitQuery=false, customLoginConfig=null, servicePrincipalName='null', useCanonicalHostname=false, loginContextName='d'}"");
      realm1.toString();
      realm_Builder4.setResponse(""Om(lo,exB*R"");
      realm_Builder2.parseWWWAuthenticateHeader((String) null);
      Realm.Builder realm_Builder6 = realm_Builder4.setUseAbsoluteURI(false);
      realm0.getCnonce();
      realm_Builder5.setMethodName((String) null);
      realm_Builder6.setNc(""-o"");
      realm0.isOmitQuery();
      realm_Builder3.setNonce("""");
      realm1.toString();
      String string0 = realm1.toString();
}"
279,"  SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort);

  /**
   * Perform any necessary one-time configuration. This will be called just once before {@code newSslEngine}","  public void test0()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory(sSLContext0);
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig0).isDisableHttpsEndpointIdentificationAlgorithm();
      SSLEngine sSLEngine0 = jsseSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, ""-#FZ"", 2920);
}"
280,"  SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort);

  /**
   * Perform any necessary one-time configuration. This will be called just once before {@code newSslEngine}","  public void test1()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig0).isDisableHttpsEndpointIdentificationAlgorithm();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, """", (-162));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
281,"  SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort);

  /**
   * Perform any necessary one-time configuration. This will be called just once before {@code newSslEngine}","  public void test2()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig0).isDisableHttpsEndpointIdentificationAlgorithm();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, ""cr`bk(L#OOKGir"", 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ssl.DefaultSslEngineFactory"", e);
      }
  }"
282,"  default void init(AsyncHttpClientConfig config) throws SSLException {
    // no op
  }","  public void test3()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      defaultSslEngineFactory0.destroy();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[1] = """";
      stringArray0[2] = """";
      stringArray0[3] = """";
      stringArray0[4] = """";
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) null).when(asyncHttpClientConfig1).getEnabledCipherSuites();
      doReturn((Object) stringArray0, (Object) null).when(asyncHttpClientConfig1).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig1).getSslContext();
      doReturn(604).when(asyncHttpClientConfig1).getSslSessionCacheSize();
      doReturn(1980).when(asyncHttpClientConfig1).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig1).isUseOpenSsl();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.init(asyncHttpClientConfig1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
283,"  default void init(AsyncHttpClientConfig config) throws SSLException {
    // no op
  }","  public void test4()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.init((AsyncHttpClientConfig) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ssl.DefaultSslEngineFactory"", e);
      }
  }"
284,"  default void init(AsyncHttpClientConfig config) throws SSLException {
    // no op
  }","  public void test5()  throws Throwable  {
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory((SSLContext) null);
      jsseSslEngineFactory0.init((AsyncHttpClientConfig) null);
  }"
285,"  default void destroy() {
    // no op
  }","  public void test6()  throws Throwable  {
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory((SSLContext) null);
      jsseSslEngineFactory0.destroy();
  }"
286,"  public Response onCompleted(Response response) throws Exception {
    return response;
  }","  public void test0()  throws Throwable  {
      AsyncCompletionHandlerBase asyncCompletionHandlerBase0 = new AsyncCompletionHandlerBase();
      Response response0 = asyncCompletionHandlerBase0.onCompleted((Response) null);
}"
287,"  public Response onCompleted(Response response) throws Exception {
    return response;
  }","  public void test1()  throws Throwable  {
      AsyncCompletionHandlerBase asyncCompletionHandlerBase0 = new AsyncCompletionHandlerBase();
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpResponseStatus0).getStatusCode();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(httpHeaders0).iterator();
      NettyResponse nettyResponse0 = new NettyResponse(httpResponseStatus0, httpHeaders0, (List<HttpResponseBodyPart>) null);
      Response response0 = asyncCompletionHandlerBase0.onCompleted((Response) nettyResponse0);
}"
288,"  public Response onCompleted(Response response) throws Exception {
    return response;
  }","  public void test2()  throws Throwable  {
      AsyncCompletionHandlerBase asyncCompletionHandlerBase0 = new AsyncCompletionHandlerBase();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyResponse nettyResponse0 = new NettyResponse((HttpResponseStatus) null, httpHeaders0, (List<HttpResponseBodyPart>) null);
      Response response0 = asyncCompletionHandlerBase0.onCompleted((Response) nettyResponse0);
}"
289,"  public DefaultAsyncHttpClient() {
    this(new DefaultAsyncHttpClientConfig.Builder().build());
  }","  public void test0()  throws Throwable  {
      DefaultAsyncHttpClient defaultAsyncHttpClient0 = null;
      try {
        defaultAsyncHttpClient0 = new DefaultAsyncHttpClient((AsyncHttpClientConfig) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.DefaultAsyncHttpClient"", e);
      }
  }"
290,"  public ChannelPool getChannelPool() {
    return channelManager.getChannelPool();
  }","  public void test1()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn((ConnectionSemaphoreFactory) null).when(asyncHttpClientConfig0).getConnectionSemaphoreFactory();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((KeepAliveStrategy) null).when(asyncHttpClientConfig0).getKeepAliveStrategy();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRequestRetry();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      doReturn((ProxyServerSelector) null).when(asyncHttpClientConfig0).getProxyServerSelector();
      doReturn(0).when(asyncHttpClientConfig0).getReadTimeout();
      doReturn((Realm) null).when(asyncHttpClientConfig0).getRealm();
      doReturn((List) null).when(asyncHttpClientConfig0).getRequestFilters();
      doReturn(0).when(asyncHttpClientConfig0).getRequestTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownQuietPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getShutdownTimeout();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((String) null).when(asyncHttpClientConfig0).getUserAgent();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxBufferSize();
      doReturn(0).when(asyncHttpClientConfig0).getWebSocketMaxFrameSize();
      doReturn(false).when(asyncHttpClientConfig0).isAggregateWebSocketFrameFragments();
      doReturn(false).when(asyncHttpClientConfig0).isCompressionEnforced();
      doReturn(false).when(asyncHttpClientConfig0).isDisableUrlEncodingForBoundRequests();
      doReturn(false).when(asyncHttpClientConfig0).isDisableZeroCopy();
      doReturn(false).when(asyncHttpClientConfig0).isEnableWebSocketCompression();
      doReturn(false).when(asyncHttpClientConfig0).isFilterInsecureCipherSuites();
      doReturn(false).when(asyncHttpClientConfig0).isFollowRedirect();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isKeepEncodingHeader();
      doReturn(false).when(asyncHttpClientConfig0).isStrict302Handling();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseLaxCookieEncoder();
      DefaultAsyncHttpClientConfig.Builder defaultAsyncHttpClientConfig_Builder0 = null;
      try {
        defaultAsyncHttpClientConfig_Builder0 = new DefaultAsyncHttpClientConfig.Builder(asyncHttpClientConfig0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
291,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test0()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-1L), 1217L);
      HostStats hostStats1 = new HostStats((-1L), (-1L));
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
292,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test1()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-1L), 1217L);
      HostStats hostStats1 = new HostStats((-1L), (-1L));
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
293,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test2()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-1L), 1217L);
      HostStats hostStats1 = new HostStats((-1L), (-1L));
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
294,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test3()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, (-1L));
      HostStats hostStats1 = new HostStats((-1L), (-1L));
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
295,"  public long getHostIdleConnectionCount() {
    return idleConnectionCount;
  }","  public void test4()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, (-1L));
      HostStats hostStats1 = new HostStats((-1L), (-1L));
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
296,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test5()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, (-1L));
      HostStats hostStats1 = new HostStats((-1L), (-1L));
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
297,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test6()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, (-1L));
      HostStats hostStats1 = new HostStats((-1L), (-1L));
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
298,"  public long getHostIdleConnectionCount() {
    return idleConnectionCount;
  }","  public void test7()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, 0L);
      long long0 = hostStats0.getHostIdleConnectionCount();
}"
299,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test8()  throws Throwable  {
      HostStats hostStats0 = new HostStats(2281L, 2281L);
      long long0 = hostStats0.getHostIdleConnectionCount();
}"
300,"  public long getHostIdleConnectionCount() {
    return idleConnectionCount;
  }","  public void test9()  throws Throwable  {
      HostStats hostStats0 = new HostStats(2281L, 2281L);
      long long0 = hostStats0.getHostIdleConnectionCount();
}"
301,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test10()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, 0L);
      long long0 = hostStats0.getHostConnectionCount();
}"
302,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test11()  throws Throwable  {
      HostStats hostStats0 = new HostStats(1155L, 1155L);
      long long0 = hostStats0.getHostConnectionCount();
}"
303,"  public long getHostActiveConnectionCount() {
    return activeConnectionCount;
  }","  public void test12()  throws Throwable  {
      HostStats hostStats0 = new HostStats(0L, 0L);
      long long0 = hostStats0.getHostActiveConnectionCount();
}"
304,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test13()  throws Throwable  {
      HostStats hostStats0 = new HostStats(1L, (-3557L));
      long long0 = hostStats0.getHostActiveConnectionCount();
}"
305,"  public long getHostActiveConnectionCount() {
    return activeConnectionCount;
  }","  public void test14()  throws Throwable  {
      HostStats hostStats0 = new HostStats(1L, (-3557L));
      long long0 = hostStats0.getHostActiveConnectionCount();
}"
306,"  public long getHostActiveConnectionCount() {
    return activeConnectionCount;
  }","  public void test15()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-344L), (-344L));
      long long0 = hostStats0.getHostIdleConnectionCount();
}"
307,"  public long getHostIdleConnectionCount() {
    return idleConnectionCount;
  }","  public void test16()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-344L), (-344L));
      long long0 = hostStats0.getHostIdleConnectionCount();
}"
308,"  public long getHostActiveConnectionCount() {
    return activeConnectionCount;
  }","  public void test17()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-4929L), (-4929L));
      long long0 = hostStats0.getHostActiveConnectionCount();
}"
309,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test18()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-4929L), (-4929L));
      long long0 = hostStats0.getHostActiveConnectionCount();
}"
310,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test19()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-344L), (-344L));
      long long0 = hostStats0.getHostConnectionCount();
}"
311,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test20()  throws Throwable  {
      HostStats hostStats0 = new HostStats(52L, 52L);
      HostStats hostStats1 = new HostStats(52L, 52L);
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
312,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test21()  throws Throwable  {
      HostStats hostStats0 = new HostStats(52L, 52L);
      HostStats hostStats1 = new HostStats(52L, 52L);
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
313,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test22()  throws Throwable  {
      HostStats hostStats0 = new HostStats(23L, 23L);
      HostStats hostStats1 = new HostStats(35L, 23L);
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
314,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test23()  throws Throwable  {
      HostStats hostStats0 = new HostStats(23L, 23L);
      HostStats hostStats1 = new HostStats(35L, 23L);
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
315,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test24()  throws Throwable  {
      HostStats hostStats0 = new HostStats(23L, 23L);
      HostStats hostStats1 = new HostStats(35L, 23L);
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
316,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test25()  throws Throwable  {
      HostStats hostStats0 = new HostStats(23L, 23L);
      HostStats hostStats1 = new HostStats(23L, 35L);
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
317,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test26()  throws Throwable  {
      HostStats hostStats0 = new HostStats(23L, 23L);
      HostStats hostStats1 = new HostStats(23L, 35L);
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
318,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test27()  throws Throwable  {
      HostStats hostStats0 = new HostStats(23L, 23L);
      HostStats hostStats1 = new HostStats(23L, 35L);
      boolean boolean0 = hostStats0.equals(hostStats1);
}"
319,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test28()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-655L), (-655L));
      boolean boolean0 = hostStats0.equals(""There are -1310 total connections, -655 are active and -655 are idle."");
}"
320,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test29()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-655L), (-655L));
      boolean boolean0 = hostStats0.equals(""There are -1310 total connections, -655 are active and -655 are idle."");
}"
321,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test30()  throws Throwable  {
      HostStats hostStats0 = new HostStats(52L, 52L);
      boolean boolean0 = hostStats0.equals(hostStats0);
}"
322,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test31()  throws Throwable  {
      HostStats hostStats0 = new HostStats(52L, 52L);
      boolean boolean0 = hostStats0.equals(hostStats0);
}"
323,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final HostStats hostStats = (HostStats) o;
    return activeConnectionCount == hostStats.activeConnectionCount &&
            idleConnectionCount == hostStats.idleConnectionCount;
  }","  public void test32()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-655L), (-655L));
      boolean boolean0 = hostStats0.equals((Object) null);
}"
324,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test33()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-655L), (-655L));
      boolean boolean0 = hostStats0.equals((Object) null);
}"
325,"  public long getHostConnectionCount() {
    return activeConnectionCount + idleConnectionCount;
  }","  public void test34()  throws Throwable  {
      HostStats hostStats0 = new HostStats(52L, 52L);
      hostStats0.hashCode();
}"
326,"  public String toString() {
    return ""There are "" + getHostConnectionCount() +
            "" total connections, "" + getHostActiveConnectionCount() +
            "" are active and "" + getHostIdleConnectionCount() + "" are idle."";
  }","  public void test35()  throws Throwable  {
      HostStats hostStats0 = new HostStats((-655L), (-655L));
      String string0 = hostStats0.toString();
}"
327,"  public <T> ListenableFuture<T> execute(AsyncHandler<T> handler) {
    return client.executeRequest(build(), handler);
  }","  public void test0()  throws Throwable  {
      ListenableFuture<WebDavResponse> listenableFuture0 = (ListenableFuture<WebDavResponse>) mock(ListenableFuture.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(listenableFuture0).toString();
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      doReturn(listenableFuture0).when(asyncHttpClient0).executeRequest(any(org.asynchttpclient.Request.class) , nullable(org.asynchttpclient.AsyncHandler.class));
      BoundRequestBuilder boundRequestBuilder0 = new BoundRequestBuilder(asyncHttpClient0, ""jZ."", false, true);
      ListenableFuture<Object> listenableFuture1 = boundRequestBuilder0.execute((AsyncHandler<Object>) null);
}"
328,"  public <T> ListenableFuture<T> execute(AsyncHandler<T> handler) {
    return client.executeRequest(build(), handler);
  }","  public void test1()  throws Throwable  {
      ListenableFuture<Integer> listenableFuture0 = (ListenableFuture<Integer>) mock(ListenableFuture.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(listenableFuture0).toString();
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture<Iterable<String>>) null, listenableFuture0).when(asyncHttpClient0).executeRequest(any(org.asynchttpclient.Request.class) , nullable(org.asynchttpclient.AsyncHandler.class));
      BoundRequestBuilder boundRequestBuilder0 = new BoundRequestBuilder(asyncHttpClient0, """", false, false);
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      boundRequestBuilder0.execute((AsyncHandler<Object>) asyncHandler0);
      ListenableFuture<Response> listenableFuture1 = boundRequestBuilder0.execute();
}"
329,"  public BoundRequestBuilder(AsyncHttpClient client, String method, boolean isDisableUrlEncoding, boolean validateHeaders) {
    super(method, isDisableUrlEncoding, validateHeaders);
    this.client = client;
  }","  public void test2()  throws Throwable  {
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      BoundRequestBuilder boundRequestBuilder0 = null;
      try {
        boundRequestBuilder0 = new BoundRequestBuilder(asyncHttpClient0, (Request) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.RequestBuilderBase"", e);
      }
  }"
330,"  public BoundRequestBuilder(AsyncHttpClient client, String method, boolean isDisableUrlEncoding, boolean validateHeaders) {
    super(method, isDisableUrlEncoding, validateHeaders);
    this.client = client;
  }","  public void test3()  throws Throwable  {
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      RequestBuilder requestBuilder0 = new RequestBuilder((String) null, true);
      Request request0 = requestBuilder0.build();
      BoundRequestBuilder boundRequestBuilder0 = new BoundRequestBuilder(asyncHttpClient0, request0);
  }"
331,"  public BoundRequestBuilder(AsyncHttpClient client, String method, boolean isDisableUrlEncoding, boolean validateHeaders) {
    super(method, isDisableUrlEncoding, validateHeaders);
    this.client = client;
  }","  public void test4()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((InetAddress) null).when(request0).getAddress();
      doReturn((HttpHeaders) null).when(request0).getHeaders();
      doReturn((InetAddress) null).when(request0).getLocalAddress();
      doReturn((String) null).when(request0).getMethod();
      doReturn((Uri) null).when(request0).getUri();
      BoundRequestBuilder boundRequestBuilder0 = null;
      try {
        boundRequestBuilder0 = new BoundRequestBuilder((AsyncHttpClient) null, request0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // headers
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
332,"  public <T> ListenableFuture<T> execute(AsyncHandler<T> handler) {
    return client.executeRequest(build(), handler);
  }","  public void test5()  throws Throwable  {
      AsyncHttpClient asyncHttpClient0 = mock(AsyncHttpClient.class, new ViolatedAssumptionAnswer());
      doReturn((ListenableFuture) null).when(asyncHttpClient0).executeRequest(any(org.asynchttpclient.Request.class) , nullable(org.asynchttpclient.AsyncHandler.class));
      BoundRequestBuilder boundRequestBuilder0 = new BoundRequestBuilder(asyncHttpClient0, """", true);
      ListenableFuture<Response> listenableFuture0 = boundRequestBuilder0.execute();
}"
333,"  public <T> ListenableFuture<T> execute(AsyncHandler<T> handler) {
    return client.executeRequest(build(), handler);
  }","  public void test6()  throws Throwable  {
      BoundRequestBuilder boundRequestBuilder0 = new BoundRequestBuilder((AsyncHttpClient) null, (String) null, false, false);
      // Undeclared exception!
      try { 
        boundRequestBuilder0.execute();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.BoundRequestBuilder"", e);
      }
  }"
334,"  public <T> ListenableFuture<T> execute(AsyncHandler<T> handler) {
    return client.executeRequest(build(), handler);
  }","  public void test7()  throws Throwable  {
      BoundRequestBuilder boundRequestBuilder0 = new BoundRequestBuilder((AsyncHttpClient) null, ""+itokBov-J"", true);
      AsyncHandler<String> asyncHandler0 = (AsyncHandler<String>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        boundRequestBuilder0.execute((AsyncHandler<String>) asyncHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.BoundRequestBuilder"", e);
      }
  }"
335,"  public long getTotalIdleConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostIdleConnectionCount)
            .sum();
  }","  public void test0()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      HostStats hostStats0 = new HostStats(1L, 1L);
      hashMap0.put("" total connections, "", hostStats0);
      long long0 = clientStats0.getTotalIdleConnectionCount();
}"
336,"  public long getTotalIdleConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostIdleConnectionCount)
            .sum();
  }","  public void test1()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      HostStats hostStats0 = new HostStats((-1739L), (-1739L));
      hashMap0.put(""A2R3$)$IV9|z"", hostStats0);
      long long0 = clientStats0.getTotalIdleConnectionCount();
}"
337,"  public long getTotalConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostConnectionCount)
            .sum();
  }","  public void test2()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      HostStats hostStats0 = new HostStats(1L, 1L);
      hashMap0.put("" total connections, "", hostStats0);
      long long0 = clientStats0.getTotalConnectionCount();
}"
338,"  public long getTotalConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostConnectionCount)
            .sum();
  }","  public void test3()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      HostStats hostStats0 = new HostStats((-1463L), (-1463L));
      hashMap0.put(""org.asynchttpclient.ClientStats"", hostStats0);
      long long0 = clientStats0.getTotalConnectionCount();
}"
339,"  public long getTotalActiveConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostActiveConnectionCount)
            .sum();
  }","  public void test4()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      HostStats hostStats0 = new HostStats(327L, 0L);
      hashMap0.put("" are idle."", hostStats0);
      long long0 = clientStats0.getTotalActiveConnectionCount();
}"
340,"  public long getTotalActiveConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostActiveConnectionCount)
            .sum();
  }","  public void test5()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      HostStats hostStats0 = new HostStats((-1665L), (-1665L));
      hashMap0.put(""io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector"", hostStats0);
      ClientStats clientStats0 = new ClientStats(hashMap0);
      long long0 = clientStats0.getTotalActiveConnectionCount();
}"
341,"  public String toString() {
    return ""There are "" + getTotalConnectionCount() +
            "" total connections, "" + getTotalActiveConnectionCount() +
            "" are active and "" + getTotalIdleConnectionCount() + "" are idle."";
  }","  public void test6()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      hashMap0.put(""!!(qALcjqQY>"", (HostStats) null);
      ClientStats clientStats0 = new ClientStats(hashMap0);
      // Undeclared exception!
      try { 
        clientStats0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.stream.ReferencePipeline$5$1"", e);
      }
  }"
342,"  public long getTotalIdleConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostIdleConnectionCount)
            .sum();
  }","  public void test7()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      hashMap0.put("""", (HostStats) null);
      // Undeclared exception!
      try { 
        clientStats0.getTotalIdleConnectionCount();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.stream.ReferencePipeline$5$1"", e);
      }
  }"
343,"  public long getTotalConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostConnectionCount)
            .sum();
  }","  public void test8()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      hashMap0.put(""AbrKQ5"", (HostStats) null);
      // Undeclared exception!
      try { 
        clientStats0.getTotalConnectionCount();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.stream.ReferencePipeline$5$1"", e);
      }
  }"
344,"  public long getTotalActiveConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostActiveConnectionCount)
            .sum();
  }","  public void test9()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      hashMap0.put(""There are -3330 total connections, -1665 are active and -1665 are idle."", (HostStats) null);
      // Undeclared exception!
      try { 
        clientStats0.getTotalActiveConnectionCount();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.stream.ReferencePipeline$5$1"", e);
      }
  }"
345,"  public ClientStats(Map<String, HostStats> statsPerHost) {
    this.statsPerHost = Collections.unmodifiableMap(statsPerHost);
  }","  public void test10()  throws Throwable  {
      ClientStats clientStats0 = null;
      try {
        clientStats0 = new ClientStats((Map<String, HostStats>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
346,"  public long getTotalIdleConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostIdleConnectionCount)
            .sum();
  }","  public void test11()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      long long0 = clientStats0.getTotalIdleConnectionCount();
}"
347,"  public long getTotalConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostConnectionCount)
            .sum();
  }","  public void test12()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      long long0 = clientStats0.getTotalConnectionCount();
}"
348,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final ClientStats that = (ClientStats) o;
    return Objects.equals(statsPerHost, that.statsPerHost);
  }","  public void test13()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      ClientStats clientStats1 = new ClientStats(hashMap0);
      boolean boolean0 = clientStats0.equals(clientStats1);
}"
349,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final ClientStats that = (ClientStats) o;
    return Objects.equals(statsPerHost, that.statsPerHost);
  }","  public void test14()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      boolean boolean0 = clientStats0.equals((Object) null);
}"
350,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final ClientStats that = (ClientStats) o;
    return Objects.equals(statsPerHost, that.statsPerHost);
  }","  public void test15()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      boolean boolean0 = clientStats0.equals(clientStats0);
}"
351,"  public boolean equals(final Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    final ClientStats that = (ClientStats) o;
    return Objects.equals(statsPerHost, that.statsPerHost);
  }","  public void test16()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      boolean boolean0 = clientStats0.equals(""<oCM_W(%_2"");
}"
352,"  public Map<String, HostStats> getStatsPerHost() {
    return statsPerHost;
  }","  public void test17()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      Map<String, HostStats> map0 = clientStats0.getStatsPerHost();
}"
353,"  public String toString() {
    return ""There are "" + getTotalConnectionCount() +
            "" total connections, "" + getTotalActiveConnectionCount() +
            "" are active and "" + getTotalIdleConnectionCount() + "" are idle."";
  }","  public void test18()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      String string0 = clientStats0.toString();
}"
354,"  public long getTotalActiveConnectionCount() {
    return statsPerHost
            .values()
            .stream()
            .mapToLong(HostStats::getHostActiveConnectionCount)
            .sum();
  }","  public void test19()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      long long0 = clientStats0.getTotalActiveConnectionCount();
}"
355,"  public int hashCode() {
    return Objects.hashCode(statsPerHost);
  }","  public void test20()  throws Throwable  {
      HashMap<String, HostStats> hashMap0 = new HashMap<String, HostStats>();
      ClientStats clientStats0 = new ClientStats(hashMap0);
      clientStats0.hashCode();
  }"
356,"  public RequestBuilder() {
    this(GET);
  }","  public void test0()  throws Throwable  {
      RequestBuilder requestBuilder0 = null;
      try {
        requestBuilder0 = new RequestBuilder((Request) null, true, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.RequestBuilderBase"", e);
      }
  }"
357,"  public RequestBuilder() {
    this(GET);
  }","  public void test1()  throws Throwable  {
      RequestBuilder requestBuilder0 = null;
      try {
        requestBuilder0 = new RequestBuilder((Request) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.RequestBuilderBase"", e);
      }
  }"
358,"  public RequestBuilder() {
    this(GET);
  }","  public void test2()  throws Throwable  {
      RequestBuilder requestBuilder0 = new RequestBuilder(""a header name cannot contain non-ASCII character: "", true);
  }"
359,"  public RequestBuilder() {
    this(GET);
  }","  public void test3()  throws Throwable  {
      RequestBuilder requestBuilder0 = new RequestBuilder("">VmYM8"", false, false);
      Request request0 = requestBuilder0.build();
      RequestBuilder requestBuilder1 = new RequestBuilder(request0);
  }"
360,"  public RequestBuilder() {
    this(GET);
  }","  public void test4()  throws Throwable  {
      RequestBuilder requestBuilder0 = new RequestBuilder(""a header name cannot contain non-ASCII character: "", false, false);
      Request request0 = requestBuilder0.build();
      RequestBuilder requestBuilder1 = new RequestBuilder(request0, false, true);
  }"
361,"  public RequestBuilder() {
    this(GET);
  }","  public void test5()  throws Throwable  {
      RequestBuilder requestBuilder0 = new RequestBuilder();
  }"
362,"  public RequestBuilder() {
    this(GET);
  }","  public void test6()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((InetAddress) null).when(request0).getAddress();
      doReturn((HttpHeaders) null).when(request0).getHeaders();
      doReturn((InetAddress) null).when(request0).getLocalAddress();
      doReturn((String) null).when(request0).getMethod();
      doReturn((Uri) null).when(request0).getUri();
      RequestBuilder requestBuilder0 = null;
      try {
        requestBuilder0 = new RequestBuilder(request0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // headers
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
363,"  public RequestBuilder() {
    this(GET);
  }","  public void test7()  throws Throwable  {
      RequestBuilder requestBuilder0 = new RequestBuilder(""ip45yhT-T^N;$UL"");
  }"
364,"  public RequestBuilder() {
    this(GET);
  }","  public void test8()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((InetAddress) null).when(request0).getAddress();
      doReturn((HttpHeaders) null).when(request0).getHeaders();
      doReturn((InetAddress) null).when(request0).getLocalAddress();
      doReturn((String) null).when(request0).getMethod();
      doReturn((Uri) null).when(request0).getUri();
      RequestBuilder requestBuilder0 = null;
      try {
        requestBuilder0 = new RequestBuilder(request0, true, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // headers
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
365,"  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((value == null) ? 0 : value.hashCode());
    return result;
  }","  public void test0()  throws Throwable  {
      Param param0 = new Param("",yt9h "", "",yt9h "");
      param0.hashCode();
  }"
366,"  public String getValue() {
    return value;
  }","  public void test1()  throws Throwable  {
      Param param0 = new Param(""T@u2AJb;J@<ep`lHk3"", ""T@u2AJb;J@<ep`lHk3"");
      String string0 = param0.getValue();
}"
367,"  public String getValue() {
    return value;
  }","  public void test2()  throws Throwable  {
      Param param0 = new Param("""", """");
      String string0 = param0.getValue();
}"
368,"  public String getName() {
    return name;
  }","  public void test3()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      String string0 = param0.getName();
}"
369,"  public String getName() {
    return name;
  }","  public void test4()  throws Throwable  {
      Param param0 = new Param("""", """");
      String string0 = param0.getName();
}"
370,"  public static List<Param> map2ParamList(Map<String, List<String>> map) {
    if (map == null)
      return null;

    List<Param> params = new ArrayList<>(map.size());
    for (Map.Entry<String, List<String>> entries : map.entrySet()) {
      String name = entries.getKey();
      for (String value : entries.getValue())
        params.add(new Param(name, value));
    }
    return params;
  }","  public void test5()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("""");
      List<String> list0 = linkedList0.subList(0, 0);
      hashMap0.put(""{} -> {}"", list0);
      linkedList0.pollLast();
      // Undeclared exception!
      try { 
        Param.map2ParamList(hashMap0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
371,"  public static List<Param> map2ParamList(Map<String, List<String>> map) {
    if (map == null)
      return null;

    List<Param> params = new ArrayList<>(map.size());
    for (Map.Entry<String, List<String>> entries : map.entrySet()) {
      String name = entries.getKey();
      for (String value : entries.getValue())
        params.add(new Param(name, value));
    }
    return params;
  }","  public void test6()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("""", (List<String>) null);
      // Undeclared exception!
      try { 
        Param.map2ParamList(hashMap0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.Param"", e);
      }
  }"
372,"  public String getName() {
    return name;
  }","  public void test7()  throws Throwable  {
      Param param0 = new Param("",yt9h "", "",yt9h "");
      Param param1 = new Param("",yt9h "", "",yt;h "");
      boolean boolean0 = param0.equals(param1);
}"
373,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test8()  throws Throwable  {
      Param param0 = new Param("",yt9h "", "",yt9h "");
      Param param1 = new Param("",yt9h "", "",yt;h "");
      boolean boolean0 = param0.equals(param1);
}"
374,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test9()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      Param param1 = new Param((String) null, (String) null);
      boolean boolean0 = param0.equals(param1);
}"
375,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test10()  throws Throwable  {
      Param param0 = new Param("",yt9h "", "",yt9h "");
      Param param1 = new Param("",yt;h "", "",yt9h "");
      boolean boolean0 = param0.equals(param1);
}"
376,"  public String getValue() {
    return value;
  }","  public void test11()  throws Throwable  {
      Param param0 = new Param("",yt9h "", "",yt9h "");
      Param param1 = new Param("",yt;h "", "",yt9h "");
      boolean boolean0 = param0.equals(param1);
}"
377,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test12()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      Param param1 = new Param(""Defaulting Uptimeto NOIMPL due to (%s) %s%n"", (String) null);
      boolean boolean0 = param0.equals(param1);
}"
378,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test13()  throws Throwable  {
      Param param0 = new Param("",yt9h "", "",yt9h "");
      Param param1 = new Param("",yt9h "", "",yt9h "");
      boolean boolean0 = param0.equals(param1);
}"
379,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test14()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      Param param1 = new Param((String) null, """");
      boolean boolean0 = param0.equals(param1);
}"
380,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test15()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      Param param1 = new Param((String) null, """");
      boolean boolean0 = param0.equals(param1);
}"
381,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test16()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      boolean boolean0 = param0.equals((Object) null);
}"
382,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test17()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      boolean boolean0 = param0.equals(param0);
}"
383,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (!(obj instanceof Param))
      return false;
    Param other = (Param) obj;
    if (name == null) {
      if (other.name != null)
        return false;
    } else if (!name.equals(other.name))
      return false;
    if (value == null) {
      if (other.value != null)
        return false;
    } else if (!value.equals(other.value))
      return false;
    return true;
  }","  public void test18()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      Object object0 = new Object();
      boolean boolean0 = param0.equals(object0);
}"
384,"  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    result = prime * result + ((value == null) ? 0 : value.hashCode());
    return result;
  }","  public void test19()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      param0.hashCode();
  }"
385,"  public static List<Param> map2ParamList(Map<String, List<String>> map) {
    if (map == null)
      return null;

    List<Param> params = new ArrayList<>(map.size());
    for (Map.Entry<String, List<String>> entries : map.entrySet()) {
      String name = entries.getKey();
      for (String value : entries.getValue())
        params.add(new Param(name, value));
    }
    return params;
  }","  public void test20()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""stopping {}"");
      hashMap0.put((String) null, linkedList0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
}"
386,"  public static List<Param> map2ParamList(Map<String, List<String>> map) {
    if (map == null)
      return null;

    List<Param> params = new ArrayList<>(map.size());
    for (Map.Entry<String, List<String>> entries : map.entrySet()) {
      String name = entries.getKey();
      for (String value : entries.getValue())
        params.add(new Param(name, value));
    }
    return params;
  }","  public void test21()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put((String) null, linkedList0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
}"
387,"  public static List<Param> map2ParamList(Map<String, List<String>> map) {
    if (map == null)
      return null;

    List<Param> params = new ArrayList<>(map.size());
    for (Map.Entry<String, List<String>> entries : map.entrySet()) {
      String name = entries.getKey();
      for (String value : entries.getValue())
        params.add(new Param(name, value));
    }
    return params;
  }","  public void test22()  throws Throwable  {
      List<Param> list0 = Param.map2ParamList((Map<String, List<String>>) null);
}"
388,"  public String getValue() {
    return value;
  }","  public void test23()  throws Throwable  {
      Param param0 = new Param((String) null, (String) null);
      String string0 = param0.getValue();
}"
389,"  public String getName() {
    return name;
  }","  public void test24()  throws Throwable  {
      Param param0 = new Param("",yt9h "", "",yt9h "");
      String string0 = param0.getName();
}"
390,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test0()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""//`]i}Zxr:6"");
  }"
391,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test1()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri(""?M`x)}Zxr:hu"", (String) null, ""_FEb5H2jFz"", 0, (String) null, ""a0+N/uk"", ""/."");
      uriParser0.parse(uri0, ""/../.."");
}"
392,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test2()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""hYsHu/S#dVg"");
      uriParser0.parse((Uri) null, "".//../"");
  }"
393,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test3()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).getFragment();
      doReturn((String) null).when(uri0).getHost();
      doReturn((String) null).when(uri0).getPath();
      doReturn(0).when(uri0).getPort();
      doReturn((String) null).when(uri0).getQuery();
      doReturn((String) null).when(uri0).getScheme();
      doReturn((String) null).when(uri0).getUserInfo();
      uriParser0.parse(uri0, ""url:"");
      Uri uri1 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri1).getHost();
      doReturn((String) null).when(uri1).getPath();
      doReturn(0).when(uri1).getPort();
      doReturn((String) null).when(uri1).getScheme();
      doReturn((String) null).when(uri1).getUserInfo();
      uriParser0.parse(uri1, ""ws"");
  }"
394,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test4()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri(""i-ft\""f6"", ""ws"", ""[`zYD*<:q,x}/>X&lM"", (-1), ""http"", ""\"";}|aec~i@a4."", """");
      // Undeclared exception!
      try { 
        uriParser0.parse(uri0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // originalUrl
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
395,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test5()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""////"");
      uriParser0.parse((Uri) null, ""?c]5*D}4Y5Rn"");
  }"
396,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test6()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri(""\"">"", (String) null, ""\"">"", (-1), ""\"">"", ""\"">"", (String) null);
      uriParser0.parse(uri0, ""//"");
      uriParser0.parse(uri0, ""tnI9*oH+qh+"");
}"
397,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test7()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "".//."");
  }"
398,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test8()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""/.."");
  }"
399,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test9()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "".//../"");
  }"
400,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test10()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""//valid port number :"");
      uriParser0.parse((Uri) null, ""?c]5*D}4Y5Rn"");
      uriParser0.parse((Uri) null, ""?c]5*D}4Y5Rn"");
  }"
401,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test11()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      // Undeclared exception!
      try { 
        uriParser0.parse((Uri) null, ""//[T'Y7"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid authority field: [T'Y7
         //
         verifyException(""org.asynchttpclient.uri.UriParser"", e);
      }
  }"
402,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test12()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""//G{xgSZ@#+_)`h-dr"");
  }"
403,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test13()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""//jmt?g wn@q_"");
  }"
404,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test14()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""?c]5*D}4Y5Rn"");
  }"
405,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test15()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""!.V/@#?g@>fh>"");
  }"
406,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test16()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri(""{?q:(90tR"", "".//!.0/`%1/host"", "".//!.0/`%1/host"", (-1201), """", (String) null, ""URI"");
      Uri uri1 = Uri.create(uri0, ""{?q:(90tR"");
      uriParser0.parse(uri1, ""///:_"");
}"
407,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test17()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).getHost();
      doReturn(""HptH "").when(uri0).getPath();
      doReturn((-1)).when(uri0).getPort();
      doReturn(""https"").when(uri0).getScheme();
      doReturn((String) null).when(uri0).getUserInfo();
      uriParser0.parse(uri0, ""./"");
      Uri uri1 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(""HptH "").when(uri1).getScheme();
      uriParser0.parse(uri1, ""HptH "");
  }"
408,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test18()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri(""{?q:(90tR"", "".//!.0/`%1/host"", "".//!.0/`%1/host"", (-1201), """", (String) null, ""URI"");
      uriParser0.parse(uri0, ""URI"");
      uriParser0.parse(uri0, "" could not be parsed into a proper Uri, missing scheme"");
}"
409,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test19()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, "":"");
  }"
410,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test20()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""uHl:"");
  }"
411,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test21()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""BZ0DtB<:W2xrk"");
  }"
412,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test22()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      uriParser0.parse((Uri) null, ""#"");
  }"
413,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test23()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri(""{?q:(90tR"", "".//!.0/`%1/host"", "".//!.0/`%1/host"", (-1201), """", (String) null, ""URI"");
      uriParser0.parse(uri0, "" could not be parsed into a proper Uri, missing scheme"");
      // Undeclared exception!
      try { 
        uriParser0.parse(uri0, ""///:_"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""_\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
414,"  public void parse(Uri context, final String originalUrl) {

    assertNotNull(originalUrl, ""originalUrl"");
    this.originalUrl = originalUrl;
    this.end = originalUrl.length();

    trimLeft();
    trimRight();
    currentIndex = start;
    if (!isFragmentOnly()) {
      computeInitialScheme();
    }
    boolean isRelative = overrideWithContext(context);
    trimFragment();
    inheritContextQuery(context, isRelative);
    boolean queryOnly = computeQuery();
    parseAuthority();
    computePath(queryOnly);
  }","  public void test24()  throws Throwable  {
      UriParser uriParser0 = new UriParser();
      Uri uri0 = new Uri(""url:h"", ""gLQ)jgO9Z0}i.pJ%*"", ""T9n}ed,NJl"", (-1), "";/"", (String) null, (String) null);
      uriParser0.parse(uri0, """");
      // Undeclared exception!
      uriParser0.parse((Uri) null, ""../"");
  }"
415,,"  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create(""/../../.."");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /../../.. could not be parsed into a proper Uri, missing scheme
         //
         verifyException(""org.asynchttpclient.uri.Uri"", e);
      }
  }"
416,"  public String getFragment() {
    return fragment;
  }","  public void test0()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
417,"  public String getHost() {
    return host;
  }","  public void test1()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
418,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test2()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
419,"  public String getQuery() {
    return query;
  }","  public void test3()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
420,"  public boolean isSameBase(Uri other) {
    return scheme.equals(other.getScheme())
      && host.equals(other.getHost())
      && getExplicitPort() == other.getExplicitPort();
  }","  public void test4()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
421,"  public String getUserInfo() {
    return userInfo;
  }","  public void test5()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
422,"  public boolean isSecured() {
    return secured;
  }","  public void test6()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
423,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test7()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
424,"  public String getPath() {
    return path;
  }","  public void test8()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
425,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test9()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      Uri uri1 = Uri.create(uri0, """");
      boolean boolean0 = uri1.isSameBase(uri0);
}"
426,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test10()  throws Throwable  {
      Uri uri0 = new Uri(""^iy)!"", ""oB41B"", ""^iy)!"", 1307, ""^iy)!"", ""http"", ""8:2"");
      String string0 = uri0.toBaseUrl();
}"
427,"  public String getQuery() {
    return query;
  }","  public void test11()  throws Throwable  {
      Uri uri0 = new Uri(""^iy)!"", ""oB41B"", ""^iy)!"", 1307, ""^iy)!"", ""http"", ""8:2"");
      String string0 = uri0.toBaseUrl();
}"
428,"  public String getUserInfo() {
    return userInfo;
  }","  public void test12()  throws Throwable  {
      Uri uri0 = new Uri(""^iy)!"", ""oB41B"", ""^iy)!"", 1307, ""^iy)!"", ""http"", ""8:2"");
      String string0 = uri0.toBaseUrl();
}"
429,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test13()  throws Throwable  {
      Uri uri0 = new Uri(""^iy)!"", ""oB41B"", ""^iy)!"", 1307, ""^iy)!"", ""http"", ""8:2"");
      String string0 = uri0.toBaseUrl();
}"
430,"  public String toBaseUrl() {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(scheme).append(""://"").append(host);
    if (port != -1 && port != getSchemeDefaultPort()) {
      sb.append(':').append(port);
    }
    if (isNonEmpty(path)) {
      sb.append(path);
    }
    return sb.toString();
  }","  public void test14()  throws Throwable  {
      Uri uri0 = new Uri(""^iy)!"", ""oB41B"", ""^iy)!"", 1307, ""^iy)!"", ""http"", ""8:2"");
      String string0 = uri0.toBaseUrl();
}"
431,"  public String getFragment() {
    return fragment;
  }","  public void test15()  throws Throwable  {
      Uri uri0 = new Uri(""^iy)!"", ""oB41B"", ""^iy)!"", 1307, ""^iy)!"", ""http"", ""8:2"");
      String string0 = uri0.toBaseUrl();
}"
432,"  public String getHost() {
    return host;
  }","  public void test16()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", 0, (String) null, "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
}"
433,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test17()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", 0, (String) null, "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
}"
434,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test18()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", 0, (String) null, "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
}"
435,"  public String getFragment() {
    return fragment;
  }","  public void test19()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", 0, (String) null, "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
}"
436,"  public int getPort() {
    return port;
  }","  public void test20()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", 0, (String) null, "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
}"
437,"  public String getScheme() {
    return scheme;
  }","  public void test21()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", 0, (String) null, "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
}"
438,"  public String getQuery() {
    return query;
  }","  public void test22()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", 0, (String) null, "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
}"
439,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test23()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", 0, (String) null, "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
}"
440,"  public boolean isSecured() {
    return secured;
  }","  public void test24()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", 0, (String) null, "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
}"
441,"  public String getUserInfo() {
    return userInfo;
  }","  public void test25()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", (-1), ""wss"", ""wss"", ""wss"");
      Uri uri1 = uri0.withNewQuery(""ws"");
}"
442,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test26()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", (-1), ""wss"", ""wss"", ""wss"");
      Uri uri1 = uri0.withNewQuery(""ws"");
}"
443,"  public String getQuery() {
    return query;
  }","  public void test27()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", (-1), ""wss"", ""wss"", ""wss"");
      Uri uri1 = uri0.withNewQuery(""ws"");
}"
444,"  public String getFragment() {
    return fragment;
  }","  public void test28()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", (-1), ""wss"", ""wss"", ""wss"");
      Uri uri1 = uri0.withNewQuery(""ws"");
}"
445,"  public String getQuery() {
    return query;
  }","  public void test29()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", (-1), ""wss"", ""wss"", ""wss"");
      Uri uri1 = uri0.withNewQuery(""ws"");
}"
446,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test30()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", (-1), ""wss"", ""wss"", ""wss"");
      Uri uri1 = uri0.withNewQuery(""ws"");
}"
447,"  public String getHost() {
    return host;
  }","  public void test31()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", (-1), ""wss"", ""wss"", ""wss"");
      Uri uri1 = uri0.withNewQuery(""ws"");
}"
448,"  public String getPath() {
    return path;
  }","  public void test32()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", (-1), ""wss"", ""wss"", ""wss"");
      Uri uri1 = uri0.withNewQuery(""ws"");
}"
449,"  public String getHost() {
    return host;
  }","  public void test33()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = uri0.withNewQuery(""WQAu>9`f*4E"");
}"
450,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test34()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = uri0.withNewQuery(""WQAu>9`f*4E"");
}"
451,"  public String getUserInfo() {
    return userInfo;
  }","  public void test35()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = uri0.withNewQuery(""WQAu>9`f*4E"");
}"
452,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test36()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = uri0.withNewQuery(""WQAu>9`f*4E"");
}"
453,"  public String getQuery() {
    return query;
  }","  public void test37()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = uri0.withNewQuery(""WQAu>9`f*4E"");
}"
454,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test38()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = uri0.withNewQuery(""WQAu>9`f*4E"");
}"
455,"  public String getPath() {
    return path;
  }","  public void test39()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = uri0.withNewQuery(""WQAu>9`f*4E"");
}"
456,"  public boolean isSecured() {
    return secured;
  }","  public void test40()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = uri0.withNewQuery(""WQAu>9`f*4E"");
}"
457,"  public String getFragment() {
    return fragment;
  }","  public void test41()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = uri0.withNewQuery(""WQAu>9`f*4E"");
}"
458,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test42()  throws Throwable  {
      Uri uri0 = new Uri(""url:"", "":M?tkc+F/https"", ""url:"", 2730, ""https"", ""https"", (String) null);
      URI uRI0 = uri0.toJavaNetURI();
}"
459,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test43()  throws Throwable  {
      Uri uri0 = new Uri(""url:"", "":M?tkc+F/https"", ""url:"", 2730, ""https"", ""https"", (String) null);
      URI uRI0 = uri0.toJavaNetURI();
}"
460,"  public String toString() {
    // for now, but might change
    return toUrl();
  }","  public void test44()  throws Throwable  {
      Uri uri0 = new Uri(""url:"", "":M?tkc+F/https"", ""url:"", 2730, ""https"", ""https"", (String) null);
      URI uRI0 = uri0.toJavaNetURI();
}"
461,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test45()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      Uri uri1 = uri0.withNewScheme(""/"");
      URI uRI0 = uri1.toJavaNetURI();
}"
462,"  public String getFragment() {
    return fragment;
  }","  public void test46()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      Uri uri1 = uri0.withNewScheme(""/"");
      URI uRI0 = uri1.toJavaNetURI();
}"
463,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test47()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      Uri uri1 = uri0.withNewScheme(""/"");
      URI uRI0 = uri1.toJavaNetURI();
}"
464,"  public String toString() {
    // for now, but might change
    return toUrl();
  }","  public void test48()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      Uri uri1 = uri0.withNewScheme(""/"");
      URI uRI0 = uri1.toJavaNetURI();
}"
465,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test49()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      Uri uri1 = uri0.withNewScheme(""/"");
      URI uRI0 = uri1.toJavaNetURI();
}"
466,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test50()  throws Throwable  {
      Uri uri0 = new Uri(""ro"", """", ""ro"", 0, """", ""ro"", """");
      URI uRI0 = uri0.toJavaNetURI();
}"
467,"  public String toString() {
    // for now, but might change
    return toUrl();
  }","  public void test51()  throws Throwable  {
      Uri uri0 = new Uri(""ro"", """", ""ro"", 0, """", ""ro"", """");
      URI uRI0 = uri0.toJavaNetURI();
}"
468,"  public String getFragment() {
    return fragment;
  }","  public void test52()  throws Throwable  {
      Uri uri0 = new Uri(""ro"", """", ""ro"", 0, """", ""ro"", """");
      URI uRI0 = uri0.toJavaNetURI();
}"
469,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test53()  throws Throwable  {
      Uri uri0 = new Uri(""ro"", """", ""ro"", 0, """", ""ro"", """");
      URI uRI0 = uri0.toJavaNetURI();
}"
470,"  public String getFragment() {
    return fragment;
  }","  public void test54()  throws Throwable  {
      Uri uri0 = new Uri(""http"", ""http"", ""http"", 1, """", "":"", """");
      URI uRI0 = uri0.toJavaNetURI();
}"
471,"  public String toString() {
    // for now, but might change
    return toUrl();
  }","  public void test55()  throws Throwable  {
      Uri uri0 = new Uri(""http"", ""http"", ""http"", 1, """", "":"", """");
      URI uRI0 = uri0.toJavaNetURI();
}"
472,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test56()  throws Throwable  {
      Uri uri0 = new Uri(""http"", ""http"", ""http"", 1, """", "":"", """");
      URI uRI0 = uri0.toJavaNetURI();
}"
473,"  public boolean isSecured() {
    return secured;
  }","  public void test57()  throws Throwable  {
      Uri uri0 = new Uri(""http"", ""http"", ""http"", 1, """", "":"", """");
      URI uRI0 = uri0.toJavaNetURI();
}"
474,"  public String getFragment() {
    return fragment;
  }","  public void test58()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      URI uRI0 = uri0.toJavaNetURI();
}"
475,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test59()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      URI uRI0 = uri0.toJavaNetURI();
}"
476,"  public boolean isSecured() {
    return secured;
  }","  public void test60()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      URI uRI0 = uri0.toJavaNetURI();
}"
477,"  public String toString() {
    // for now, but might change
    return toUrl();
  }","  public void test61()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      URI uRI0 = uri0.toJavaNetURI();
}"
478,"  public String getFragment() {
    return fragment;
  }","  public void test62()  throws Throwable  {
      Uri uri0 = new Uri(""D#2ML"", ""D#2ML"", ""D#2ML"", (-2084441635), (String) null, (String) null, ""D#2ML"");
      boolean boolean0 = uri0.isWebSocket();
}"
479,"  public String getScheme() {
    return scheme;
  }","  public void test63()  throws Throwable  {
      Uri uri0 = new Uri(""D#2ML"", ""D#2ML"", ""D#2ML"", (-2084441635), (String) null, (String) null, ""D#2ML"");
      boolean boolean0 = uri0.isWebSocket();
}"
480,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test64()  throws Throwable  {
      Uri uri0 = new Uri(""D#2ML"", ""D#2ML"", ""D#2ML"", (-2084441635), (String) null, (String) null, ""D#2ML"");
      boolean boolean0 = uri0.isWebSocket();
}"
481,"  public String getHost() {
    return host;
  }","  public void test65()  throws Throwable  {
      Uri uri0 = new Uri(""D#2ML"", ""D#2ML"", ""D#2ML"", (-2084441635), (String) null, (String) null, ""D#2ML"");
      boolean boolean0 = uri0.isWebSocket();
}"
482,"  public boolean isSecured() {
    return secured;
  }","  public void test66()  throws Throwable  {
      Uri uri0 = new Uri(""D#2ML"", ""D#2ML"", ""D#2ML"", (-2084441635), (String) null, (String) null, ""D#2ML"");
      boolean boolean0 = uri0.isWebSocket();
}"
483,"  public String getUserInfo() {
    return userInfo;
  }","  public void test67()  throws Throwable  {
      Uri uri0 = new Uri(""D#2ML"", ""D#2ML"", ""D#2ML"", (-2084441635), (String) null, (String) null, ""D#2ML"");
      boolean boolean0 = uri0.isWebSocket();
}"
484,"  public int getPort() {
    return port;
  }","  public void test68()  throws Throwable  {
      Uri uri0 = new Uri(""D#2ML"", ""D#2ML"", ""D#2ML"", (-2084441635), (String) null, (String) null, ""D#2ML"");
      boolean boolean0 = uri0.isWebSocket();
}"
485,"  public String getHost() {
    return host;
  }","  public void test69()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      boolean boolean0 = uri0.isSecured();
}"
486,"  public boolean isSecured() {
    return secured;
  }","  public void test70()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      boolean boolean0 = uri0.isSecured();
}"
487,"  public String getPath() {
    return path;
  }","  public void test71()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      boolean boolean0 = uri0.isSecured();
}"
488,"  public String getFragment() {
    return fragment;
  }","  public void test72()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      boolean boolean0 = uri0.isSecured();
}"
489,"  public String getQuery() {
    return query;
  }","  public void test73()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      boolean boolean0 = uri0.isSecured();
}"
490,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test74()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      boolean boolean0 = uri0.isSecured();
}"
491,"  public String getUserInfo() {
    return userInfo;
  }","  public void test75()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      boolean boolean0 = uri0.isSecured();
}"
492,"  public int getPort() {
    return port;
  }","  public void test76()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      boolean boolean0 = uri0.isSecured();
}"
493,"  public String getScheme() {
    return scheme;
  }","  public void test77()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      boolean boolean0 = uri0.isSecured();
}"
494,"  public String getPath() {
    return path;
  }","  public void test78()  throws Throwable  {
      Uri uri0 = new Uri(""}s"", ""H:Bi22vA(pjak&KTc"", ""}s"", 0, ""ws"", """", ""ws"");
      String string0 = uri0.getUserInfo();
}"
495,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test79()  throws Throwable  {
      Uri uri0 = new Uri(""}s"", ""H:Bi22vA(pjak&KTc"", ""}s"", 0, ""ws"", """", ""ws"");
      String string0 = uri0.getUserInfo();
}"
496,"  public String getScheme() {
    return scheme;
  }","  public void test80()  throws Throwable  {
      Uri uri0 = new Uri(""}s"", ""H:Bi22vA(pjak&KTc"", ""}s"", 0, ""ws"", """", ""ws"");
      String string0 = uri0.getUserInfo();
}"
497,"  public String getHost() {
    return host;
  }","  public void test81()  throws Throwable  {
      Uri uri0 = new Uri(""}s"", ""H:Bi22vA(pjak&KTc"", ""}s"", 0, ""ws"", """", ""ws"");
      String string0 = uri0.getUserInfo();
}"
498,"  public String getQuery() {
    return query;
  }","  public void test82()  throws Throwable  {
      Uri uri0 = new Uri(""}s"", ""H:Bi22vA(pjak&KTc"", ""}s"", 0, ""ws"", """", ""ws"");
      String string0 = uri0.getUserInfo();
}"
499,"  public String getUserInfo() {
    return userInfo;
  }","  public void test83()  throws Throwable  {
      Uri uri0 = new Uri(""}s"", ""H:Bi22vA(pjak&KTc"", ""}s"", 0, ""ws"", """", ""ws"");
      String string0 = uri0.getUserInfo();
}"
500,"  public int getPort() {
    return port;
  }","  public void test84()  throws Throwable  {
      Uri uri0 = new Uri(""}s"", ""H:Bi22vA(pjak&KTc"", ""}s"", 0, ""ws"", """", ""ws"");
      String string0 = uri0.getUserInfo();
}"
501,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test85()  throws Throwable  {
      Uri uri0 = new Uri(""}s"", ""H:Bi22vA(pjak&KTc"", ""}s"", 0, ""ws"", """", ""ws"");
      String string0 = uri0.getUserInfo();
}"
502,"  public String getFragment() {
    return fragment;
  }","  public void test86()  throws Throwable  {
      Uri uri0 = new Uri(""}s"", ""H:Bi22vA(pjak&KTc"", ""}s"", 0, ""ws"", """", ""ws"");
      String string0 = uri0.getUserInfo();
}"
503,"  public String getUserInfo() {
    return userInfo;
  }","  public void test87()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      String string0 = uri0.getUserInfo();
}"
504,"  public String getHost() {
    return host;
  }","  public void test88()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      String string0 = uri0.getUserInfo();
}"
505,"  public String getScheme() {
    return scheme;
  }","  public void test89()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      String string0 = uri0.getUserInfo();
}"
506,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test90()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      String string0 = uri0.getUserInfo();
}"
507,"  public String getQuery() {
    return query;
  }","  public void test91()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      String string0 = uri0.getUserInfo();
}"
508,"  public String getPath() {
    return path;
  }","  public void test92()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      String string0 = uri0.getUserInfo();
}"
509,"  public String getFragment() {
    return fragment;
  }","  public void test93()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      String string0 = uri0.getUserInfo();
}"
510,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test94()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      String string0 = uri0.getUserInfo();
}"
511,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test95()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      String string0 = uri0.getUserInfo();
}"
512,"  public boolean isSecured() {
    return secured;
  }","  public void test96()  throws Throwable  {
      Uri uri0 = new Uri(""http"", "":L~~Yd?"", ""http"", 64, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"");
      Uri uri1 = Uri.create(uri0, "".qmcuAgkbxc*h5)"");
      String string0 = uri1.getQuery();
}"
513,"  public String getQuery() {
    return query;
  }","  public void test97()  throws Throwable  {
      Uri uri0 = new Uri(""http"", "":L~~Yd?"", ""http"", 64, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"");
      Uri uri1 = Uri.create(uri0, "".qmcuAgkbxc*h5)"");
      String string0 = uri1.getQuery();
}"
514,"  public String getHost() {
    return host;
  }","  public void test98()  throws Throwable  {
      Uri uri0 = new Uri(""http"", "":L~~Yd?"", ""http"", 64, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"");
      Uri uri1 = Uri.create(uri0, "".qmcuAgkbxc*h5)"");
      String string0 = uri1.getQuery();
}"
515,"  public String getPath() {
    return path;
  }","  public void test99()  throws Throwable  {
      Uri uri0 = new Uri(""http"", "":L~~Yd?"", ""http"", 64, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"");
      Uri uri1 = Uri.create(uri0, "".qmcuAgkbxc*h5)"");
      String string0 = uri1.getQuery();
}"
516,"  public String getUserInfo() {
    return userInfo;
  }","  public void test100()  throws Throwable  {
      Uri uri0 = new Uri(""http"", "":L~~Yd?"", ""http"", 64, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"");
      Uri uri1 = Uri.create(uri0, "".qmcuAgkbxc*h5)"");
      String string0 = uri1.getQuery();
}"
517,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test101()  throws Throwable  {
      Uri uri0 = new Uri(""http"", "":L~~Yd?"", ""http"", 64, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"");
      Uri uri1 = Uri.create(uri0, "".qmcuAgkbxc*h5)"");
      String string0 = uri1.getQuery();
}"
518,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test102()  throws Throwable  {
      Uri uri0 = new Uri(""http"", "":L~~Yd?"", ""http"", 64, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"");
      Uri uri1 = Uri.create(uri0, "".qmcuAgkbxc*h5)"");
      String string0 = uri1.getQuery();
}"
519,"  public String getFragment() {
    return fragment;
  }","  public void test103()  throws Throwable  {
      Uri uri0 = new Uri(""http"", "":L~~Yd?"", ""http"", 64, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"");
      Uri uri1 = Uri.create(uri0, "".qmcuAgkbxc*h5)"");
      String string0 = uri1.getQuery();
}"
520,"  public int getPort() {
    return port;
  }","  public void test104()  throws Throwable  {
      Uri uri0 = new Uri(""http"", "":L~~Yd?"", ""http"", 64, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"");
      Uri uri1 = Uri.create(uri0, "".qmcuAgkbxc*h5)"");
      String string0 = uri1.getQuery();
}"
521,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test105()  throws Throwable  {
      Uri uri0 = new Uri(""/"", ""/"", ""v"", (-1448), ""v"", """", ""/"");
      String string0 = uri0.getQuery();
}"
522,"  public String getHost() {
    return host;
  }","  public void test106()  throws Throwable  {
      Uri uri0 = new Uri(""/"", ""/"", ""v"", (-1448), ""v"", """", ""/"");
      String string0 = uri0.getQuery();
}"
523,"  public String getPath() {
    return path;
  }","  public void test107()  throws Throwable  {
      Uri uri0 = new Uri(""/"", ""/"", ""v"", (-1448), ""v"", """", ""/"");
      String string0 = uri0.getQuery();
}"
524,"  public String getScheme() {
    return scheme;
  }","  public void test108()  throws Throwable  {
      Uri uri0 = new Uri(""/"", ""/"", ""v"", (-1448), ""v"", """", ""/"");
      String string0 = uri0.getQuery();
}"
525,"  public String getQuery() {
    return query;
  }","  public void test109()  throws Throwable  {
      Uri uri0 = new Uri(""/"", ""/"", ""v"", (-1448), ""v"", """", ""/"");
      String string0 = uri0.getQuery();
}"
526,"  public String getFragment() {
    return fragment;
  }","  public void test110()  throws Throwable  {
      Uri uri0 = new Uri(""/"", ""/"", ""v"", (-1448), ""v"", """", ""/"");
      String string0 = uri0.getQuery();
}"
527,"  public String getUserInfo() {
    return userInfo;
  }","  public void test111()  throws Throwable  {
      Uri uri0 = new Uri(""/"", ""/"", ""v"", (-1448), ""v"", """", ""/"");
      String string0 = uri0.getQuery();
}"
528,"  public int getPort() {
    return port;
  }","  public void test112()  throws Throwable  {
      Uri uri0 = new Uri(""/"", ""/"", ""v"", (-1448), ""v"", """", ""/"");
      String string0 = uri0.getQuery();
}"
529,"  public boolean isSecured() {
    return secured;
  }","  public void test113()  throws Throwable  {
      Uri uri0 = new Uri(""/"", ""/"", ""v"", (-1448), ""v"", """", ""/"");
      String string0 = uri0.getQuery();
}"
530,"  public String getFragment() {
    return fragment;
  }","  public void test114()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
531,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test115()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
532,"  public int getPort() {
    return port;
  }","  public void test116()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
533,"  public String getPath() {
    return path;
  }","  public void test117()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
534,"  public String getHost() {
    return host;
  }","  public void test118()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
535,"  public String getQuery() {
    return query;
  }","  public void test119()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
536,"  public String getScheme() {
    return scheme;
  }","  public void test120()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
537,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test121()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
538,"  public int getPort() {
    return port;
  }","  public void test122()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 24, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
539,"  public String getQuery() {
    return query;
  }","  public void test123()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 24, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
540,"  public String getScheme() {
    return scheme;
  }","  public void test124()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 24, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
541,"  public String getFragment() {
    return fragment;
  }","  public void test125()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 24, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
542,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test126()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 24, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
543,"  public String getPath() {
    return path;
  }","  public void test127()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 24, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
544,"  public String getHost() {
    return host;
  }","  public void test128()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 24, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
545,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test129()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 24, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
546,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test130()  throws Throwable  {
      Uri uri0 = new Uri(""S3R$ *P*VG. @JK"", """", ""S3R$ *P*VG. @JK"", 1598, ""S3R$ *P*VG. @JK"", """", """");
      String string0 = uri0.getPath();
}"
547,"  public String getQuery() {
    return query;
  }","  public void test131()  throws Throwable  {
      Uri uri0 = new Uri(""S3R$ *P*VG. @JK"", """", ""S3R$ *P*VG. @JK"", 1598, ""S3R$ *P*VG. @JK"", """", """");
      String string0 = uri0.getPath();
}"
548,"  public String getUserInfo() {
    return userInfo;
  }","  public void test132()  throws Throwable  {
      Uri uri0 = new Uri(""S3R$ *P*VG. @JK"", """", ""S3R$ *P*VG. @JK"", 1598, ""S3R$ *P*VG. @JK"", """", """");
      String string0 = uri0.getPath();
}"
549,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test133()  throws Throwable  {
      Uri uri0 = new Uri(""S3R$ *P*VG. @JK"", """", ""S3R$ *P*VG. @JK"", 1598, ""S3R$ *P*VG. @JK"", """", """");
      String string0 = uri0.getPath();
}"
550,"  public String getScheme() {
    return scheme;
  }","  public void test134()  throws Throwable  {
      Uri uri0 = new Uri(""S3R$ *P*VG. @JK"", """", ""S3R$ *P*VG. @JK"", 1598, ""S3R$ *P*VG. @JK"", """", """");
      String string0 = uri0.getPath();
}"
551,"  public String getPath() {
    return path;
  }","  public void test135()  throws Throwable  {
      Uri uri0 = new Uri(""S3R$ *P*VG. @JK"", """", ""S3R$ *P*VG. @JK"", 1598, ""S3R$ *P*VG. @JK"", """", """");
      String string0 = uri0.getPath();
}"
552,"  public String getHost() {
    return host;
  }","  public void test136()  throws Throwable  {
      Uri uri0 = new Uri(""S3R$ *P*VG. @JK"", """", ""S3R$ *P*VG. @JK"", 1598, ""S3R$ *P*VG. @JK"", """", """");
      String string0 = uri0.getPath();
}"
553,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test137()  throws Throwable  {
      Uri uri0 = new Uri(""S3R$ *P*VG. @JK"", """", ""S3R$ *P*VG. @JK"", 1598, ""S3R$ *P*VG. @JK"", """", """");
      String string0 = uri0.getPath();
}"
554,"  public String getFragment() {
    return fragment;
  }","  public void test138()  throws Throwable  {
      Uri uri0 = new Uri(""S3R$ *P*VG. @JK"", """", ""S3R$ *P*VG. @JK"", 1598, ""S3R$ *P*VG. @JK"", """", """");
      String string0 = uri0.getPath();
}"
555,"  public String getHost() {
    return host;
  }","  public void test139()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      String string0 = uri0.getPath();
}"
556,"  public String getPath() {
    return path;
  }","  public void test140()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      String string0 = uri0.getPath();
}"
557,"  public String getUserInfo() {
    return userInfo;
  }","  public void test141()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      String string0 = uri0.getPath();
}"
558,"  public String getQuery() {
    return query;
  }","  public void test142()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      String string0 = uri0.getPath();
}"
559,"  public String getScheme() {
    return scheme;
  }","  public void test143()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      String string0 = uri0.getPath();
}"
560,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test144()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      String string0 = uri0.getPath();
}"
561,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test145()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      String string0 = uri0.getPath();
}"
562,"  public String getFragment() {
    return fragment;
  }","  public void test146()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      String string0 = uri0.getPath();
}"
563,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test147()  throws Throwable  {
      Uri uri0 = new Uri(""503$Wbn"", ""503$Wbn"", ""503$Wbn"", 1626, """", """", ""://"");
      String string0 = uri0.getPath();
}"
564,"  public String getQuery() {
    return query;
  }","  public void test148()  throws Throwable  {
      Uri uri0 = new Uri(""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", 0, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", (String) null);
      String string0 = uri0.getFragment();
}"
565,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test149()  throws Throwable  {
      Uri uri0 = new Uri(""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", 0, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", (String) null);
      String string0 = uri0.getFragment();
}"
566,"  public String getPath() {
    return path;
  }","  public void test150()  throws Throwable  {
      Uri uri0 = new Uri(""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", 0, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", (String) null);
      String string0 = uri0.getFragment();
}"
567,"  public String getHost() {
    return host;
  }","  public void test151()  throws Throwable  {
      Uri uri0 = new Uri(""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", 0, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", (String) null);
      String string0 = uri0.getFragment();
}"
568,"  public String getFragment() {
    return fragment;
  }","  public void test152()  throws Throwable  {
      Uri uri0 = new Uri(""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", 0, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", (String) null);
      String string0 = uri0.getFragment();
}"
569,"  public String getUserInfo() {
    return userInfo;
  }","  public void test153()  throws Throwable  {
      Uri uri0 = new Uri(""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", 0, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", (String) null);
      String string0 = uri0.getFragment();
}"
570,"  public String getScheme() {
    return scheme;
  }","  public void test154()  throws Throwable  {
      Uri uri0 = new Uri(""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", 0, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", (String) null);
      String string0 = uri0.getFragment();
}"
571,"  public int getPort() {
    return port;
  }","  public void test155()  throws Throwable  {
      Uri uri0 = new Uri(""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", 0, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", (String) null);
      String string0 = uri0.getFragment();
}"
572,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test156()  throws Throwable  {
      Uri uri0 = new Uri(""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", 0, ""org.asynchttpclient.util.StringBuilderPool"", ""org.asynchttpclient.util.StringBuilderPool"", (String) null);
      String string0 = uri0.getFragment();
}"
573,"  public String getHost() {
    return host;
  }","  public void test157()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      String string0 = uri0.getFragment();
}"
574,"  public boolean isSecured() {
    return secured;
  }","  public void test158()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      String string0 = uri0.getFragment();
}"
575,"  public String getUserInfo() {
    return userInfo;
  }","  public void test159()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      String string0 = uri0.getFragment();
}"
576,"  public String getPath() {
    return path;
  }","  public void test160()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      String string0 = uri0.getFragment();
}"
577,"  public String getFragment() {
    return fragment;
  }","  public void test161()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      String string0 = uri0.getFragment();
}"
578,"  public String getScheme() {
    return scheme;
  }","  public void test162()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      String string0 = uri0.getFragment();
}"
579,"  public String getQuery() {
    return query;
  }","  public void test163()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      String string0 = uri0.getFragment();
}"
580,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test164()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      String string0 = uri0.getFragment();
}"
581,"  public int getPort() {
    return port;
  }","  public void test165()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      String string0 = uri0.getFragment();
}"
582,"  public String getFragment() {
    return fragment;
  }","  public void test166()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      int int0 = uri0.getExplicitPort();
}"
583,"  public String getPath() {
    return path;
  }","  public void test167()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      int int0 = uri0.getExplicitPort();
}"
584,"  public String getQuery() {
    return query;
  }","  public void test168()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      int int0 = uri0.getExplicitPort();
}"
585,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test169()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      int int0 = uri0.getExplicitPort();
}"
586,"  public String getHost() {
    return host;
  }","  public void test170()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      int int0 = uri0.getExplicitPort();
}"
587,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test171()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      int int0 = uri0.getExplicitPort();
}"
588,"  public String getUserInfo() {
    return userInfo;
  }","  public void test172()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      int int0 = uri0.getExplicitPort();
}"
589,"  public String getScheme() {
    return scheme;
  }","  public void test173()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      int int0 = uri0.getExplicitPort();
}"
590,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test174()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      int int0 = uri0.getExplicitPort();
}"
591,"  public String getQuery() {
    return query;
  }","  public void test175()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
592,"  public String getHost() {
    return host;
  }","  public void test176()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
593,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test177()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
594,"  public String getUserInfo() {
    return userInfo;
  }","  public void test178()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
595,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test179()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
596,"  public String getFragment() {
    return fragment;
  }","  public void test180()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
597,"  public String getPath() {
    return path;
  }","  public void test181()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
598,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test182()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
599,"  public boolean isSecured() {
    return secured;
  }","  public void test183()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
600,"  public String getPath() {
    return path;
  }","  public void test184()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""~N7tv<]Ic;dDA,"", ""~N7tv<]Ic;dDA,"", 512, ""https"", ""~N7tv<]Ic;dDA,"", """");
      Uri uri1 = Uri.create(uri0, ""ws"");
}"
601,"  public String getHost() {
    return host;
  }","  public void test185()  throws Throwable  {
      Uri uri0 = Uri.create(""wss://kV$}!6_97rIf!O:0"");
}"
602,"  public String getScheme() {
    return scheme;
  }","  public void test186()  throws Throwable  {
      Uri uri0 = Uri.create(""wss://kV$}!6_97rIf!O:0"");
}"
603,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test187()  throws Throwable  {
      Uri uri0 = Uri.create(""wss://kV$}!6_97rIf!O:0"");
}"
604,"  public String getPath() {
    return path;
  }","  public void test188()  throws Throwable  {
      Uri uri0 = Uri.create(""wss://kV$}!6_97rIf!O:0"");
}"
605,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test189()  throws Throwable  {
      Uri uri0 = Uri.create(""wss://kV$}!6_97rIf!O:0"");
}"
606,"  public int getPort() {
    return port;
  }","  public void test190()  throws Throwable  {
      Uri uri0 = Uri.create(""wss://kV$}!6_97rIf!O:0"");
}"
607,"  public String getHost() {
    return host;
  }","  public void test191()  throws Throwable  {
      Uri uri0 = Uri.create(""r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme"");
}"
608,"  public String getFragment() {
    return fragment;
  }","  public void test192()  throws Throwable  {
      Uri uri0 = Uri.create(""r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme"");
}"
609,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test193()  throws Throwable  {
      Uri uri0 = Uri.create(""r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme"");
}"
610,"  public String getScheme() {
    return scheme;
  }","  public void test194()  throws Throwable  {
      Uri uri0 = Uri.create(""r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme"");
}"
611,"  public String getUserInfo() {
    return userInfo;
  }","  public void test195()  throws Throwable  {
      Uri uri0 = Uri.create(""r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme"");
}"
612,"  public String getPath() {
    return path;
  }","  public void test196()  throws Throwable  {
      Uri uri0 = Uri.create(""r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme"");
}"
613,"  public String getQuery() {
    return query;
  }","  public void test197()  throws Throwable  {
      Uri uri0 = Uri.create(""r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme"");
}"
614,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test198()  throws Throwable  {
      Uri uri0 = Uri.create(""r://r@r could not be parsed into a proper Uri, missing scheme?r# could not be parsed into a proper Uri, missing scheme"");
}"
615,"  public String getScheme() {
    return scheme;
  }","  public void test199()  throws Throwable  {
      Uri uri0 = Uri.create(""dqp://(s.T:11"");
}"
616,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test200()  throws Throwable  {
      Uri uri0 = Uri.create(""dqp://(s.T:11"");
}"
617,"  public String getPath() {
    return path;
  }","  public void test201()  throws Throwable  {
      Uri uri0 = Uri.create(""dqp://(s.T:11"");
}"
618,"  public String getHost() {
    return host;
  }","  public void test202()  throws Throwable  {
      Uri uri0 = Uri.create(""dqp://(s.T:11"");
}"
619,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test203()  throws Throwable  {
      Uri uri0 = Uri.create(""dqp://(s.T:11"");
}"
620,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test204()  throws Throwable  {
      Uri uri0 = Uri.create(""dqp://(s.T:11"");
}"
621,"  public Uri withNewScheme(String newScheme) {
    return new Uri(newScheme,
            userInfo,
            host,
            port,
            path,
            query,
            fragment);
  }","  public void test205()  throws Throwable  {
      Uri uri0 = new Uri(""7B:"", """", ""7B:"", 0, """", """", """");
      // Undeclared exception!
      try { 
        uri0.withNewScheme((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
622,"  public Uri withNewScheme(String newScheme) {
    return new Uri(newScheme,
            userInfo,
            host,
            port,
            path,
            query,
            fragment);
  }","  public void test206()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""#"", ""#"", (-1651), """", ""#"", """");
      // Undeclared exception!
      try { 
        uri0.withNewScheme("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // empty scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
623,"  public static void validateSupportedScheme(Uri uri) {
    final String scheme = uri.getScheme();
    if (scheme == null || !scheme.equalsIgnoreCase(HTTP) && !scheme.equalsIgnoreCase(HTTPS)
      && !scheme.equalsIgnoreCase(WS) && !scheme.equalsIgnoreCase(WSS)) {
      throw new IllegalArgumentException(""The URI scheme, of the URI "" + uri
        + "", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'"");
    }
  }","  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.validateSupportedScheme((Uri) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.uri.Uri"", e);
      }
  }"
624,"  public boolean isSameBase(Uri other) {
    return scheme.equals(other.getScheme())
      && host.equals(other.getHost())
      && getExplicitPort() == other.getExplicitPort();
  }","  public void test208()  throws Throwable  {
      Uri uri0 = new Uri(""ZH"", ""ZH"", ""ZH"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""ZH"", "" could not be parsed into a proper Uri, missing scheme"");
      // Undeclared exception!
      try { 
        uri0.isSameBase((Uri) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.uri.Uri"", e);
      }
  }"
625,"  public static Uri create(String originalUrl) {
    return create(null, originalUrl);
  }","  public void test209()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 0, (String) null, (String) null, "":M?tkc+F/.qX"");
      // Undeclared exception!
      try { 
        Uri.create(uri0, ""https://http:0osZjy!{U{y\""<PIN"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""0osZjy!{U{y\""<PIN\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
626,"  public static Uri create(String originalUrl) {
    return create(null, originalUrl);
  }","  public void test210()  throws Throwable  {
      Uri uri0 = new Uri(""host"", ""/"", ""host"", (-666), ""/"", ""host"", ""h"");
      // Undeclared exception!
      try { 
        Uri.create(uri0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // originalUrl
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
627,"  public static Uri create(String originalUrl) {
    return create(null, originalUrl);
  }","  public void test211()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create(""https://http:24osZjy!{U{y\""<PIN"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""24osZjy!{U{y\""<PIN\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
628,"  public static Uri create(String originalUrl) {
    return create(null, originalUrl);
  }","  public void test212()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // originalUrl
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
629,"  public Uri(String scheme,
             String userInfo,
             String host,
             int port,
             String path,
             String query,
             String fragment) {

    this.scheme = assertNotEmpty(scheme, ""scheme"");
    this.userInfo = userInfo;
    this.host = assertNotEmpty(host, ""host"");
    this.port = port;
    this.path = path;
    this.query = query;
    this.fragment = fragment;
    this.secured = HTTPS.equals(scheme) || WSS.equals(scheme);
    this.webSocket = WS.equals(scheme) || WSS.equalsIgnoreCase(scheme);
  }","  public void test213()  throws Throwable  {
      Uri uri0 = null;
      try {
        uri0 = new Uri(""?"", ""?"", (String) null, 1643, (String) null, ""?"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // host
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
630,"  public Uri(String scheme,
             String userInfo,
             String host,
             int port,
             String path,
             String query,
             String fragment) {

    this.scheme = assertNotEmpty(scheme, ""scheme"");
    this.userInfo = userInfo;
    this.host = assertNotEmpty(host, ""host"");
    this.port = port;
    this.path = path;
    this.query = query;
    this.fragment = fragment;
    this.secured = HTTPS.equals(scheme) || WSS.equals(scheme);
    this.webSocket = WS.equals(scheme) || WSS.equalsIgnoreCase(scheme);
  }","  public void test214()  throws Throwable  {
      Uri uri0 = null;
      try {
        uri0 = new Uri(""http"", ""http"", """", 891, ""http"", """", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // empty host
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
631,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test215()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toUrl();
}"
632,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test216()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toUrl();
}"
633,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test217()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toUrl();
}"
634,"  public String getFragment() {
    return fragment;
  }","  public void test218()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toUrl();
}"
635,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test219()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toUrl();
}"
636,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test220()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toUrl();
}"
637,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test221()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toUrl();
}"
638,"  public String getFragment() {
    return fragment;
  }","  public void test222()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toUrl();
}"
639,"  public boolean isSecured() {
    return secured;
  }","  public void test223()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toUrl();
}"
640,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test224()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toUrl();
}"
641,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test225()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", (-18), "":M?tkc+F/.qX"", "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      String string0 = uri0.toUrl();
}"
642,"  public boolean isSecured() {
    return secured;
  }","  public void test226()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", (-18), "":M?tkc+F/.qX"", "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      String string0 = uri0.toUrl();
}"
643,"  public String getFragment() {
    return fragment;
  }","  public void test227()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", (-18), "":M?tkc+F/.qX"", "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      String string0 = uri0.toUrl();
}"
644,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test228()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", (-18), "":M?tkc+F/.qX"", "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      String string0 = uri0.toUrl();
}"
645,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test229()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, "":M?tkc+F/.qX"", (-18), "":M?tkc+F/.qX"", "":M?tkc+F/.qX"", "":M?tkc+F/.qX"");
      String string0 = uri0.toUrl();
}"
646,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test230()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      Uri uri1 = uri0.withNewScheme(""}vb=0*d;"");
      String string0 = uri1.toUrl();
}"
647,"  public String getFragment() {
    return fragment;
  }","  public void test231()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      Uri uri1 = uri0.withNewScheme(""}vb=0*d;"");
      String string0 = uri1.toUrl();
}"
648,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test232()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      Uri uri1 = uri0.withNewScheme(""}vb=0*d;"");
      String string0 = uri1.toUrl();
}"
649,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test233()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      Uri uri1 = uri0.withNewScheme(""}vb=0*d;"");
      String string0 = uri1.toUrl();
}"
650,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test234()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      Uri uri1 = uri0.withNewScheme(""}vb=0*d;"");
      String string0 = uri1.toUrl();
}"
651,"  public int getPort() {
    return port;
  }","  public void test235()  throws Throwable  {
      Uri uri0 = new Uri(""\""c.QW?bDaM1.Y.q"", """", ""\""c.QW?bDaM1.Y.q"", 91, ""\""c.QW?bDaM1.Y.q"", "" could not be parsed into a proper Uri, missing scheme"", "";+FUY"");
      Uri uri1 = uri0.withNewScheme(""}vb=0*d;"");
      String string0 = uri1.toUrl();
}"
652,"  public String getFragment() {
    return fragment;
  }","  public void test236()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      int int0 = uri0.getSchemeDefaultPort();
}"
653,"  public int getPort() {
    return port;
  }","  public void test237()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      int int0 = uri0.getSchemeDefaultPort();
}"
654,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test238()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      int int0 = uri0.getSchemeDefaultPort();
}"
655,"  public String getPath() {
    return path;
  }","  public void test239()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      int int0 = uri0.getSchemeDefaultPort();
}"
656,"  public String getScheme() {
    return scheme;
  }","  public void test240()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      int int0 = uri0.getSchemeDefaultPort();
}"
657,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test241()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      int int0 = uri0.getSchemeDefaultPort();
}"
658,"  public String getUserInfo() {
    return userInfo;
  }","  public void test242()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      int int0 = uri0.getSchemeDefaultPort();
}"
659,"  public String getHost() {
    return host;
  }","  public void test243()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      int int0 = uri0.getSchemeDefaultPort();
}"
660,"  public String getQuery() {
    return query;
  }","  public void test244()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      int int0 = uri0.getSchemeDefaultPort();
}"
661,"  public String getQuery() {
    return query;
  }","  public void test245()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      int int0 = uri0.getSchemeDefaultPort();
}"
662,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test246()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      int int0 = uri0.getSchemeDefaultPort();
}"
663,"  public String getUserInfo() {
    return userInfo;
  }","  public void test247()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      int int0 = uri0.getSchemeDefaultPort();
}"
664,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test248()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      int int0 = uri0.getSchemeDefaultPort();
}"
665,"  public String getFragment() {
    return fragment;
  }","  public void test249()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      int int0 = uri0.getSchemeDefaultPort();
}"
666,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test250()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      int int0 = uri0.getSchemeDefaultPort();
}"
667,"  public String getHost() {
    return host;
  }","  public void test251()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      int int0 = uri0.getSchemeDefaultPort();
}"
668,"  public String getScheme() {
    return scheme;
  }","  public void test252()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      int int0 = uri0.getSchemeDefaultPort();
}"
669,"  public String getFragment() {
    return fragment;
  }","  public void test253()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      int int0 = uri0.getExplicitPort();
}"
670,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test254()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      int int0 = uri0.getExplicitPort();
}"
671,"  public String getHost() {
    return host;
  }","  public void test255()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      int int0 = uri0.getExplicitPort();
}"
672,"  public String getUserInfo() {
    return userInfo;
  }","  public void test256()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      int int0 = uri0.getExplicitPort();
}"
673,"  public String getQuery() {
    return query;
  }","  public void test257()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      int int0 = uri0.getExplicitPort();
}"
674,"  public String getPath() {
    return path;
  }","  public void test258()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      int int0 = uri0.getExplicitPort();
}"
675,"  public String getScheme() {
    return scheme;
  }","  public void test259()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      int int0 = uri0.getExplicitPort();
}"
676,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test260()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      int int0 = uri0.getExplicitPort();
}"
677,"  public String getUserInfo() {
    return userInfo;
  }","  public void test261()  throws Throwable  {
      Uri uri0 = new Uri(""P"", ""P"", ""ts&(XjfO.j&"", (-180), ""6kx0sS~I/.M"", ""P"", ""P"");
      int int0 = uri0.getExplicitPort();
}"
678,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test262()  throws Throwable  {
      Uri uri0 = new Uri(""P"", ""P"", ""ts&(XjfO.j&"", (-180), ""6kx0sS~I/.M"", ""P"", ""P"");
      int int0 = uri0.getExplicitPort();
}"
679,"  public String getPath() {
    return path;
  }","  public void test263()  throws Throwable  {
      Uri uri0 = new Uri(""P"", ""P"", ""ts&(XjfO.j&"", (-180), ""6kx0sS~I/.M"", ""P"", ""P"");
      int int0 = uri0.getExplicitPort();
}"
680,"  public String getQuery() {
    return query;
  }","  public void test264()  throws Throwable  {
      Uri uri0 = new Uri(""P"", ""P"", ""ts&(XjfO.j&"", (-180), ""6kx0sS~I/.M"", ""P"", ""P"");
      int int0 = uri0.getExplicitPort();
}"
681,"  public String getHost() {
    return host;
  }","  public void test265()  throws Throwable  {
      Uri uri0 = new Uri(""P"", ""P"", ""ts&(XjfO.j&"", (-180), ""6kx0sS~I/.M"", ""P"", ""P"");
      int int0 = uri0.getExplicitPort();
}"
682,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test266()  throws Throwable  {
      Uri uri0 = new Uri(""P"", ""P"", ""ts&(XjfO.j&"", (-180), ""6kx0sS~I/.M"", ""P"", ""P"");
      int int0 = uri0.getExplicitPort();
}"
683,"  public String getScheme() {
    return scheme;
  }","  public void test267()  throws Throwable  {
      Uri uri0 = new Uri(""P"", ""P"", ""ts&(XjfO.j&"", (-180), ""6kx0sS~I/.M"", ""P"", ""P"");
      int int0 = uri0.getExplicitPort();
}"
684,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test268()  throws Throwable  {
      Uri uri0 = new Uri(""P"", ""P"", ""ts&(XjfO.j&"", (-180), ""6kx0sS~I/.M"", ""P"", ""P"");
      int int0 = uri0.getExplicitPort();
}"
685,"  public String getFragment() {
    return fragment;
  }","  public void test269()  throws Throwable  {
      Uri uri0 = new Uri(""P"", ""P"", ""ts&(XjfO.j&"", (-180), ""6kx0sS~I/.M"", ""P"", ""P"");
      int int0 = uri0.getExplicitPort();
}"
686,"  public static Uri create(String originalUrl) {
    return create(null, originalUrl);
  }","  public void test270()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, ""N:.0T,@BX\""yhm}Qw]!*"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // N:.0T,@BX\""yhm}Qw]!* could not be parsed into a proper Uri, missing host
         //
         verifyException(""org.asynchttpclient.uri.Uri"", e);
      }
  }"
687,"  public static Uri create(String originalUrl) {
    return create(null, originalUrl);
  }","  public void test271()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create((Uri) null, ""mxr\""czX8o/D:"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // mxr\""czX8o/D: could not be parsed into a proper Uri, missing scheme
         //
         verifyException(""org.asynchttpclient.uri.Uri"", e);
      }
  }"
688,"  public String getUserInfo() {
    return userInfo;
  }","  public void test272()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      String string0 = uri0.getScheme();
}"
689,"  public String getFragment() {
    return fragment;
  }","  public void test273()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      String string0 = uri0.getScheme();
}"
690,"  public String getScheme() {
    return scheme;
  }","  public void test274()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      String string0 = uri0.getScheme();
}"
691,"  public String getHost() {
    return host;
  }","  public void test275()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      String string0 = uri0.getScheme();
}"
692,"  public int getPort() {
    return port;
  }","  public void test276()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      String string0 = uri0.getScheme();
}"
693,"  public boolean isSecured() {
    return secured;
  }","  public void test277()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      String string0 = uri0.getScheme();
}"
694,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test278()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      String string0 = uri0.getScheme();
}"
695,"  public String getQuery() {
    return query;
  }","  public void test279()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      String string0 = uri0.getScheme();
}"
696,"  public String getPath() {
    return path;
  }","  public void test280()  throws Throwable  {
      Uri uri0 = new Uri(""scheme"", ""scheme"", ""scheme"", 0, ""scheme"", """", """");
      String string0 = uri0.getScheme();
}"
697,"  public String getFragment() {
    return fragment;
  }","  public void test281()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      String string0 = uri0.getQuery();
}"
698,"  public int getPort() {
    return port;
  }","  public void test282()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      String string0 = uri0.getQuery();
}"
699,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test283()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      String string0 = uri0.getQuery();
}"
700,"  public String getUserInfo() {
    return userInfo;
  }","  public void test284()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      String string0 = uri0.getQuery();
}"
701,"  public String getHost() {
    return host;
  }","  public void test285()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      String string0 = uri0.getQuery();
}"
702,"  public String getScheme() {
    return scheme;
  }","  public void test286()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      String string0 = uri0.getQuery();
}"
703,"  public String getQuery() {
    return query;
  }","  public void test287()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      String string0 = uri0.getQuery();
}"
704,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test288()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      String string0 = uri0.getQuery();
}"
705,"  public String getPath() {
    return path;
  }","  public void test289()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      String string0 = uri0.getQuery();
}"
706,"  public int getPort() {
    return port;
  }","  public void test290()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
707,"  public String getQuery() {
    return query;
  }","  public void test291()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
708,"  public String getPath() {
    return path;
  }","  public void test292()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
709,"  public boolean isSecured() {
    return secured;
  }","  public void test293()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
710,"  public String getHost() {
    return host;
  }","  public void test294()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
711,"  public String getFragment() {
    return fragment;
  }","  public void test295()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
712,"  public String getScheme() {
    return scheme;
  }","  public void test296()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
713,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test297()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      int int0 = uri0.getPort();
}"
714,"  public String getPath() {
    return path;
  }","  public void test298()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getHost();
}"
715,"  public String getHost() {
    return host;
  }","  public void test299()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getHost();
}"
716,"  public String getFragment() {
    return fragment;
  }","  public void test300()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getHost();
}"
717,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test301()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getHost();
}"
718,"  public String getScheme() {
    return scheme;
  }","  public void test302()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getHost();
}"
719,"  public boolean isSecured() {
    return secured;
  }","  public void test303()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getHost();
}"
720,"  public String getQuery() {
    return query;
  }","  public void test304()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getHost();
}"
721,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test305()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getHost();
}"
722,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test306()  throws Throwable  {
      Uri uri0 = new Uri("")=`P0`/xpV0^Ne"", "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", 512, "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", "")=`P0`/xpV0^Ne"");
      boolean boolean0 = uri0.isSecured();
}"
723,"  public String getQuery() {
    return query;
  }","  public void test307()  throws Throwable  {
      Uri uri0 = new Uri("")=`P0`/xpV0^Ne"", "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", 512, "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", "")=`P0`/xpV0^Ne"");
      boolean boolean0 = uri0.isSecured();
}"
724,"  public int getPort() {
    return port;
  }","  public void test308()  throws Throwable  {
      Uri uri0 = new Uri("")=`P0`/xpV0^Ne"", "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", 512, "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", "")=`P0`/xpV0^Ne"");
      boolean boolean0 = uri0.isSecured();
}"
725,"  public String getScheme() {
    return scheme;
  }","  public void test309()  throws Throwable  {
      Uri uri0 = new Uri("")=`P0`/xpV0^Ne"", "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", 512, "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", "")=`P0`/xpV0^Ne"");
      boolean boolean0 = uri0.isSecured();
}"
726,"  public boolean isSecured() {
    return secured;
  }","  public void test310()  throws Throwable  {
      Uri uri0 = new Uri("")=`P0`/xpV0^Ne"", "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", 512, "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", "")=`P0`/xpV0^Ne"");
      boolean boolean0 = uri0.isSecured();
}"
727,"  public String getUserInfo() {
    return userInfo;
  }","  public void test311()  throws Throwable  {
      Uri uri0 = new Uri("")=`P0`/xpV0^Ne"", "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", 512, "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", "")=`P0`/xpV0^Ne"");
      boolean boolean0 = uri0.isSecured();
}"
728,"  public String getFragment() {
    return fragment;
  }","  public void test312()  throws Throwable  {
      Uri uri0 = new Uri("")=`P0`/xpV0^Ne"", "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", 512, "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", "")=`P0`/xpV0^Ne"");
      boolean boolean0 = uri0.isSecured();
}"
729,"  public String getHost() {
    return host;
  }","  public void test313()  throws Throwable  {
      Uri uri0 = new Uri("")=`P0`/xpV0^Ne"", "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", 512, "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", "")=`P0`/xpV0^Ne"");
      boolean boolean0 = uri0.isSecured();
}"
730,"  public String getPath() {
    return path;
  }","  public void test314()  throws Throwable  {
      Uri uri0 = new Uri("")=`P0`/xpV0^Ne"", "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", 512, "")=`P0`/xpV0^Ne"", "" r0:5LV}Fq0,:zic@"", "")=`P0`/xpV0^Ne"");
      boolean boolean0 = uri0.isSecured();
}"
731,"  public String getFragment() {
    return fragment;
  }","  public void test315()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getUserInfo();
}"
732,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test316()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getUserInfo();
}"
733,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test317()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getUserInfo();
}"
734,"  public String getUserInfo() {
    return userInfo;
  }","  public void test318()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getUserInfo();
}"
735,"  public String getPath() {
    return path;
  }","  public void test319()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getUserInfo();
}"
736,"  public String getHost() {
    return host;
  }","  public void test320()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getUserInfo();
}"
737,"  public String getQuery() {
    return query;
  }","  public void test321()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getUserInfo();
}"
738,"  public String getScheme() {
    return scheme;
  }","  public void test322()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getUserInfo();
}"
739,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test323()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.getUserInfo();
}"
740,"  public String getPath() {
    return path;
  }","  public void test324()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      String string0 = uri0.getFragment();
}"
741,"  public String getQuery() {
    return query;
  }","  public void test325()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      String string0 = uri0.getFragment();
}"
742,"  public String getHost() {
    return host;
  }","  public void test326()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      String string0 = uri0.getFragment();
}"
743,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test327()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      String string0 = uri0.getFragment();
}"
744,"  public String getScheme() {
    return scheme;
  }","  public void test328()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      String string0 = uri0.getFragment();
}"
745,"  public String getUserInfo() {
    return userInfo;
  }","  public void test329()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      String string0 = uri0.getFragment();
}"
746,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test330()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      String string0 = uri0.getFragment();
}"
747,"  public String getFragment() {
    return fragment;
  }","  public void test331()  throws Throwable  {
      Uri uri0 = new Uri(""QI#"", ""M"", ""M"", (-1), ""QI#"", ""QI#"", ""M"");
      String string0 = uri0.getFragment();
}"
748,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test332()  throws Throwable  {
      Uri uri0 = new Uri("":m?tkc+f/.qx"", (String) null, ""k{f.`m"", 787, (String) null, ""k{f.`m"", "":m?tkc+f/.qx"");
      String string0 = uri0.getPath();
}"
749,"  public String getFragment() {
    return fragment;
  }","  public void test333()  throws Throwable  {
      Uri uri0 = new Uri("":m?tkc+f/.qx"", (String) null, ""k{f.`m"", 787, (String) null, ""k{f.`m"", "":m?tkc+f/.qx"");
      String string0 = uri0.getPath();
}"
750,"  public String getPath() {
    return path;
  }","  public void test334()  throws Throwable  {
      Uri uri0 = new Uri("":m?tkc+f/.qx"", (String) null, ""k{f.`m"", 787, (String) null, ""k{f.`m"", "":m?tkc+f/.qx"");
      String string0 = uri0.getPath();
}"
751,"  public String getScheme() {
    return scheme;
  }","  public void test335()  throws Throwable  {
      Uri uri0 = new Uri("":m?tkc+f/.qx"", (String) null, ""k{f.`m"", 787, (String) null, ""k{f.`m"", "":m?tkc+f/.qx"");
      String string0 = uri0.getPath();
}"
752,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test336()  throws Throwable  {
      Uri uri0 = new Uri("":m?tkc+f/.qx"", (String) null, ""k{f.`m"", 787, (String) null, ""k{f.`m"", "":m?tkc+f/.qx"");
      String string0 = uri0.getPath();
}"
753,"  public String getHost() {
    return host;
  }","  public void test337()  throws Throwable  {
      Uri uri0 = new Uri("":m?tkc+f/.qx"", (String) null, ""k{f.`m"", 787, (String) null, ""k{f.`m"", "":m?tkc+f/.qx"");
      String string0 = uri0.getPath();
}"
754,"  public String getQuery() {
    return query;
  }","  public void test338()  throws Throwable  {
      Uri uri0 = new Uri("":m?tkc+f/.qx"", (String) null, ""k{f.`m"", 787, (String) null, ""k{f.`m"", "":m?tkc+f/.qx"");
      String string0 = uri0.getPath();
}"
755,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test339()  throws Throwable  {
      Uri uri0 = new Uri("":m?tkc+f/.qx"", (String) null, ""k{f.`m"", 787, (String) null, ""k{f.`m"", "":m?tkc+f/.qx"");
      String string0 = uri0.getPath();
}"
756,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test340()  throws Throwable  {
      Uri uri0 = new Uri("":M?[tkc+F/.qX"", (String) null, "":M?[tkc+F/.qX"", (-6), (String) null, "":M?[tkc+F/.qX"", "":M?[tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
      Uri.validateSupportedScheme(uri1);
}"
757,"  public String getHost() {
    return host;
  }","  public void test341()  throws Throwable  {
      Uri uri0 = new Uri("":M?[tkc+F/.qX"", (String) null, "":M?[tkc+F/.qX"", (-6), (String) null, "":M?[tkc+F/.qX"", "":M?[tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
      Uri.validateSupportedScheme(uri1);
}"
758,"  public String getQuery() {
    return query;
  }","  public void test342()  throws Throwable  {
      Uri uri0 = new Uri("":M?[tkc+F/.qX"", (String) null, "":M?[tkc+F/.qX"", (-6), (String) null, "":M?[tkc+F/.qX"", "":M?[tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
      Uri.validateSupportedScheme(uri1);
}"
759,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test343()  throws Throwable  {
      Uri uri0 = new Uri("":M?[tkc+F/.qX"", (String) null, "":M?[tkc+F/.qX"", (-6), (String) null, "":M?[tkc+F/.qX"", "":M?[tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
      Uri.validateSupportedScheme(uri1);
}"
760,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test344()  throws Throwable  {
      Uri uri0 = new Uri("":M?[tkc+F/.qX"", (String) null, "":M?[tkc+F/.qX"", (-6), (String) null, "":M?[tkc+F/.qX"", "":M?[tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
      Uri.validateSupportedScheme(uri1);
}"
761,"  public String getScheme() {
    return scheme;
  }","  public void test345()  throws Throwable  {
      Uri uri0 = new Uri("":M?[tkc+F/.qX"", (String) null, "":M?[tkc+F/.qX"", (-6), (String) null, "":M?[tkc+F/.qX"", "":M?[tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
      Uri.validateSupportedScheme(uri1);
}"
762,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test346()  throws Throwable  {
      Uri uri0 = new Uri("":M?[tkc+F/.qX"", (String) null, "":M?[tkc+F/.qX"", (-6), (String) null, "":M?[tkc+F/.qX"", "":M?[tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
      Uri.validateSupportedScheme(uri1);
}"
763,"  public String getFragment() {
    return fragment;
  }","  public void test347()  throws Throwable  {
      Uri uri0 = new Uri("":M?[tkc+F/.qX"", (String) null, "":M?[tkc+F/.qX"", (-6), (String) null, "":M?[tkc+F/.qX"", "":M?[tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
      Uri.validateSupportedScheme(uri1);
}"
764,"  public boolean isSecured() {
    return secured;
  }","  public void test348()  throws Throwable  {
      Uri uri0 = new Uri("":M?[tkc+F/.qX"", (String) null, "":M?[tkc+F/.qX"", (-6), (String) null, "":M?[tkc+F/.qX"", "":M?[tkc+F/.qX"");
      Uri uri1 = uri0.withNewScheme(""wss"");
      Uri.validateSupportedScheme(uri1);
}"
765,"  public String getFragment() {
    return fragment;
  }","  public void test349()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri.validateSupportedScheme(uri0);
}"
766,"  public String getUserInfo() {
    return userInfo;
  }","  public void test350()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri.validateSupportedScheme(uri0);
}"
767,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test351()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri.validateSupportedScheme(uri0);
}"
768,"  public String getScheme() {
    return scheme;
  }","  public void test352()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri.validateSupportedScheme(uri0);
}"
769,"  public String getHost() {
    return host;
  }","  public void test353()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri.validateSupportedScheme(uri0);
}"
770,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test354()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri.validateSupportedScheme(uri0);
}"
771,"  public String getQuery() {
    return query;
  }","  public void test355()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri.validateSupportedScheme(uri0);
}"
772,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test356()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri.validateSupportedScheme(uri0);
}"
773,"  public String getPath() {
    return path;
  }","  public void test357()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri.validateSupportedScheme(uri0);
}"
774,"  public String getFragment() {
    return fragment;
  }","  public void test358()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""http"", ""http"", 0, ""#"", (String) null, ""http"");
      Uri.validateSupportedScheme(uri0);
}"
775,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test359()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""http"", ""http"", 0, ""#"", (String) null, ""http"");
      Uri.validateSupportedScheme(uri0);
}"
776,"  public String getPath() {
    return path;
  }","  public void test360()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""http"", ""http"", 0, ""#"", (String) null, ""http"");
      Uri.validateSupportedScheme(uri0);
}"
777,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test361()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""http"", ""http"", 0, ""#"", (String) null, ""http"");
      Uri.validateSupportedScheme(uri0);
}"
778,"  public String getUserInfo() {
    return userInfo;
  }","  public void test362()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""http"", ""http"", 0, ""#"", (String) null, ""http"");
      Uri.validateSupportedScheme(uri0);
}"
779,"  public String getScheme() {
    return scheme;
  }","  public void test363()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""http"", ""http"", 0, ""#"", (String) null, ""http"");
      Uri.validateSupportedScheme(uri0);
}"
780,"  public String getHost() {
    return host;
  }","  public void test364()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""http"", ""http"", 0, ""#"", (String) null, ""http"");
      Uri.validateSupportedScheme(uri0);
}"
781,"  public boolean isSecured() {
    return secured;
  }","  public void test365()  throws Throwable  {
      Uri uri0 = new Uri(""https"", ""http"", ""http"", 0, ""#"", (String) null, ""http"");
      Uri.validateSupportedScheme(uri0);
}"
782,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test366()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      Uri uri1 = uri0.withNewScheme(""http"");
      Uri.validateSupportedScheme(uri1);
}"
783,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test367()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      Uri uri1 = uri0.withNewScheme(""http"");
      Uri.validateSupportedScheme(uri1);
}"
784,"  public String getHost() {
    return host;
  }","  public void test368()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      Uri uri1 = uri0.withNewScheme(""http"");
      Uri.validateSupportedScheme(uri1);
}"
785,"  public String getQuery() {
    return query;
  }","  public void test369()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      Uri uri1 = uri0.withNewScheme(""http"");
      Uri.validateSupportedScheme(uri1);
}"
786,"  public String getFragment() {
    return fragment;
  }","  public void test370()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      Uri uri1 = uri0.withNewScheme(""http"");
      Uri.validateSupportedScheme(uri1);
}"
787,"  public String getUserInfo() {
    return userInfo;
  }","  public void test371()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      Uri uri1 = uri0.withNewScheme(""http"");
      Uri.validateSupportedScheme(uri1);
}"
788,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test372()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      Uri uri1 = uri0.withNewScheme(""http"");
      Uri.validateSupportedScheme(uri1);
}"
789,"  public String getPath() {
    return path;
  }","  public void test373()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      Uri uri1 = uri0.withNewScheme(""http"");
      Uri.validateSupportedScheme(uri1);
}"
790,"  public String getScheme() {
    return scheme;
  }","  public void test374()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      Uri uri1 = uri0.withNewScheme(""http"");
      Uri.validateSupportedScheme(uri1);
}"
791,"  public String getScheme() {
    return scheme;
  }","  public void test375()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri0.equals(uri1);
}"
792,"  public int getPort() {
    return port;
  }","  public void test376()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri0.equals(uri1);
}"
793,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test377()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri0.equals(uri1);
}"
794,"  public String getHost() {
    return host;
  }","  public void test378()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri0.equals(uri1);
}"
795,"  public String getQuery() {
    return query;
  }","  public void test379()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri0.equals(uri1);
}"
796,"  public String getUserInfo() {
    return userInfo;
  }","  public void test380()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri0.equals(uri1);
}"
797,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test381()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri0.equals(uri1);
}"
798,"  public String getPath() {
    return path;
  }","  public void test382()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri0.equals(uri1);
}"
799,"  public String getUserInfo() {
    return userInfo;
  }","  public void test383()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
800,"  public String getPath() {
    return path;
  }","  public void test384()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
801,"  public String getHost() {
    return host;
  }","  public void test385()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
802,"  public String getQuery() {
    return query;
  }","  public void test386()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
803,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test387()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
804,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test388()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
805,"  public int getPort() {
    return port;
  }","  public void test389()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
806,"  public String getScheme() {
    return scheme;
  }","  public void test390()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
807,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test391()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
808,"  public int getPort() {
    return port;
  }","  public void test392()  throws Throwable  {
      Uri uri0 = new Uri(""s"", ""s"", ""s"", (-2761), ""s"", ""s"", ""s"");
      Uri uri1 = Uri.create(uri0, ""s?s"");
      boolean boolean0 = uri1.equals(uri0);
}"
809,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test393()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
810,"  public String getPath() {
    return path;
  }","  public void test394()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
811,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test395()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
812,"  public String getUserInfo() {
    return userInfo;
  }","  public void test396()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
813,"  public String getHost() {
    return host;
  }","  public void test397()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
814,"  public String getFragment() {
    return fragment;
  }","  public void test398()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
815,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test399()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
816,"  public String getPath() {
    return path;
  }","  public void test400()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
817,"  public String getQuery() {
    return query;
  }","  public void test401()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
818,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test402()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme("" qXMAI~+zRs\u0006YWHo8N"");
      boolean boolean0 = uri1.equals(uri2);
}"
819,"  public boolean isSecured() {
    return secured;
  }","  public void test403()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
820,"  public String getPath() {
    return path;
  }","  public void test404()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
821,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test405()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
822,"  public String getUserInfo() {
    return userInfo;
  }","  public void test406()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
823,"  public String getHost() {
    return host;
  }","  public void test407()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
824,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test408()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
825,"  public String getUserInfo() {
    return userInfo;
  }","  public void test409()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
826,"  public String getPath() {
    return path;
  }","  public void test410()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
827,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test411()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
828,"  public String getFragment() {
    return fragment;
  }","  public void test412()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
829,"  public String getScheme() {
    return scheme;
  }","  public void test413()  throws Throwable  {
      Uri uri0 = new Uri(""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"", ""Fc\r&fWvh(d0$j"");
      Uri uri1 = new Uri(""Fc\r&fWvh(d0$j"", ""ws"", ""Fc\r&fWvh(d0$j"", 263, ""Fc\r&fWvh(d0$j"", ""ws"", ""ws"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      uri2.equals(uri1);
}"
830,"  public String getHost() {
    return host;
  }","  public void test414()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
831,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test415()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
832,"  public String getPath() {
    return path;
  }","  public void test416()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
833,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test417()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
834,"  public String getFragment() {
    return fragment;
  }","  public void test418()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
835,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test419()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
836,"  public String getUserInfo() {
    return userInfo;
  }","  public void test420()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
837,"  public String getPath() {
    return path;
  }","  public void test421()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
838,"  public String getFragment() {
    return fragment;
  }","  public void test422()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
839,"  public String getScheme() {
    return scheme;
  }","  public void test423()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
840,"  public String getQuery() {
    return query;
  }","  public void test424()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
841,"  public int getPort() {
    return port;
  }","  public void test425()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
842,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test426()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
843,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test427()  throws Throwable  {
      Uri uri0 = new Uri(""JO0o!W#8%|$98jzQ"", (String) null, ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"", ""JO0o!W#8%|$98jzQ"");
      Uri uri1 = new Uri(""JO0o!W#8%|$98jzQ"", ""ws"", ""JO0o!W#8%|$98jzQ"", (-1075830814), ""JO0o!W#8%|$98jzQ"", ""ws"", ""http"");
      Uri uri2 = uri0.withNewQuery(""ws"");
      boolean boolean0 = uri2.equals(uri1);
}"
844,"  public String getQuery() {
    return query;
  }","  public void test428()  throws Throwable  {
      Uri uri0 = new Uri(""#"", (String) null, ""#"", 0, (String) null, ""#"", ""#"");
      Uri uri1 = uri0.withNewQuery(""#"");
      boolean boolean0 = uri1.equals(uri0);
}"
845,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test429()  throws Throwable  {
      Uri uri0 = new Uri(""#"", (String) null, ""#"", 0, (String) null, ""#"", ""#"");
      Uri uri1 = uri0.withNewQuery(""#"");
      boolean boolean0 = uri1.equals(uri0);
}"
846,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test430()  throws Throwable  {
      Uri uri0 = new Uri(""#"", (String) null, ""#"", 0, (String) null, ""#"", ""#"");
      Uri uri1 = uri0.withNewQuery(""#"");
      boolean boolean0 = uri1.equals(uri0);
}"
847,"  public String getHost() {
    return host;
  }","  public void test431()  throws Throwable  {
      Uri uri0 = new Uri(""#"", (String) null, ""#"", 0, (String) null, ""#"", ""#"");
      Uri uri1 = uri0.withNewQuery(""#"");
      boolean boolean0 = uri1.equals(uri0);
}"
848,"  public String getFragment() {
    return fragment;
  }","  public void test432()  throws Throwable  {
      Uri uri0 = new Uri(""#"", (String) null, ""#"", 0, (String) null, ""#"", ""#"");
      Uri uri1 = uri0.withNewQuery(""#"");
      boolean boolean0 = uri1.equals(uri0);
}"
849,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test433()  throws Throwable  {
      Uri uri0 = new Uri(""#"", (String) null, ""#"", 0, (String) null, ""#"", ""#"");
      Uri uri1 = uri0.withNewQuery(""#"");
      boolean boolean0 = uri1.equals(uri0);
}"
850,"  public String getHost() {
    return host;
  }","  public void test434()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      boolean boolean0 = uri0.equals(uri1);
}"
851,"  public String getUserInfo() {
    return userInfo;
  }","  public void test435()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      boolean boolean0 = uri0.equals(uri1);
}"
852,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test436()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      boolean boolean0 = uri0.equals(uri1);
}"
853,"  public String getFragment() {
    return fragment;
  }","  public void test437()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      boolean boolean0 = uri0.equals(uri1);
}"
854,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test438()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      boolean boolean0 = uri0.equals(uri1);
}"
855,"  public String getPath() {
    return path;
  }","  public void test439()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      boolean boolean0 = uri0.equals(uri1);
}"
856,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test440()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      boolean boolean0 = uri0.equals(uri1);
}"
857,"  public boolean isSecured() {
    return secured;
  }","  public void test441()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      boolean boolean0 = uri0.equals(uri1);
}"
858,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test442()  throws Throwable  {
      Uri uri0 = new Uri(""ws"", ""ws"", ""ws"", 1951, ""ws"", ""ws"", ""ws"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      boolean boolean0 = uri0.equals(uri1);
}"
859,"  public String getQuery() {
    return query;
  }","  public void test443()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
860,"  public String getPath() {
    return path;
  }","  public void test444()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
861,"  public String getFragment() {
    return fragment;
  }","  public void test445()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
862,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test446()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
863,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test447()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
864,"  public String getHost() {
    return host;
  }","  public void test448()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
865,"  public String getPath() {
    return path;
  }","  public void test449()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
866,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test450()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
867,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test451()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
868,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test452()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
869,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test453()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
870,"  public String getUserInfo() {
    return userInfo;
  }","  public void test454()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      boolean boolean0 = uri2.equals(uri1);
}"
871,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test455()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
872,"  public String getUserInfo() {
    return userInfo;
  }","  public void test456()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
873,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test457()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
874,"  public String getHost() {
    return host;
  }","  public void test458()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
875,"  public String getQuery() {
    return query;
  }","  public void test459()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
876,"  public String getScheme() {
    return scheme;
  }","  public void test460()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
877,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test461()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
878,"  public String getFragment() {
    return fragment;
  }","  public void test462()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
879,"  public String getPath() {
    return path;
  }","  public void test463()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
880,"  public boolean isSecured() {
    return secured;
  }","  public void test464()  throws Throwable  {
      Uri uri0 = new Uri(""yq"", ""yq"", ""yq"", (-2236), ""yq"", ""yq"", ""yq"");
      Uri uri1 = Uri.create(uri0, ""ws"");
      uri1.equals(uri0);
}"
881,"  public int getPort() {
    return port;
  }","  public void test465()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 0, (String) null, (String) null, "":M?tkc+F/.qX"");
      Uri uri1 = Uri.create(uri0, "":"");
      boolean boolean0 = uri0.equals(uri1);
}"
882,"  public String getScheme() {
    return scheme;
  }","  public void test466()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 0, (String) null, (String) null, "":M?tkc+F/.qX"");
      Uri uri1 = Uri.create(uri0, "":"");
      boolean boolean0 = uri0.equals(uri1);
}"
883,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test467()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 0, (String) null, (String) null, "":M?tkc+F/.qX"");
      Uri uri1 = Uri.create(uri0, "":"");
      boolean boolean0 = uri0.equals(uri1);
}"
884,"  public String getFragment() {
    return fragment;
  }","  public void test468()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 0, (String) null, (String) null, "":M?tkc+F/.qX"");
      Uri uri1 = Uri.create(uri0, "":"");
      boolean boolean0 = uri0.equals(uri1);
}"
885,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test469()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 0, (String) null, (String) null, "":M?tkc+F/.qX"");
      Uri uri1 = Uri.create(uri0, "":"");
      boolean boolean0 = uri0.equals(uri1);
}"
886,"  public String getHost() {
    return host;
  }","  public void test470()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 0, (String) null, (String) null, "":M?tkc+F/.qX"");
      Uri uri1 = Uri.create(uri0, "":"");
      boolean boolean0 = uri0.equals(uri1);
}"
887,"  public String getPath() {
    return path;
  }","  public void test471()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 0, (String) null, (String) null, "":M?tkc+F/.qX"");
      Uri uri1 = Uri.create(uri0, "":"");
      boolean boolean0 = uri0.equals(uri1);
}"
888,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test472()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZjy!{U{y\""<PIN"", 0, (String) null, (String) null, "":M?tkc+F/.qX"");
      Uri uri1 = Uri.create(uri0, "":"");
      boolean boolean0 = uri0.equals(uri1);
}"
889,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test473()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
}"
890,"  public String getUserInfo() {
    return userInfo;
  }","  public void test474()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
}"
891,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test475()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
}"
892,"  public String getFragment() {
    return fragment;
  }","  public void test476()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
}"
893,"  public String getScheme() {
    return scheme;
  }","  public void test477()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
}"
894,"  public String getHost() {
    return host;
  }","  public void test478()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
}"
895,"  public int getPort() {
    return port;
  }","  public void test479()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
}"
896,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test480()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
}"
897,"  public String getFragment() {
    return fragment;
  }","  public void test481()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      Uri uri1 = uri0.withNewQuery((String) null);
      boolean boolean0 = uri1.equals(uri0);
}"
898,"  public String getPath() {
    return path;
  }","  public void test482()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
899,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test483()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
900,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test484()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
901,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test485()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
902,"  public String getPath() {
    return path;
  }","  public void test486()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
903,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test487()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
904,"  public String getFragment() {
    return fragment;
  }","  public void test488()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
905,"  public String getUserInfo() {
    return userInfo;
  }","  public void test489()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
906,"  public int getPort() {
    return port;
  }","  public void test490()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
907,"  public String getHost() {
    return host;
  }","  public void test491()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
908,"  public boolean isSecured() {
    return secured;
  }","  public void test492()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
909,"  public String getQuery() {
    return query;
  }","  public void test493()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
910,"  public String getScheme() {
    return scheme;
  }","  public void test494()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri1.equals(uri0);
}"
911,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test495()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
912,"  public String getScheme() {
    return scheme;
  }","  public void test496()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
913,"  public String getFragment() {
    return fragment;
  }","  public void test497()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
914,"  public String getPath() {
    return path;
  }","  public void test498()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
915,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test499()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
916,"  public boolean isSecured() {
    return secured;
  }","  public void test500()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
917,"  public String getHost() {
    return host;
  }","  public void test501()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
918,"  public String getUserInfo() {
    return userInfo;
  }","  public void test502()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
919,"  public String getQuery() {
    return query;
  }","  public void test503()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
920,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test504()  throws Throwable  {
      Uri uri0 = new Uri(""#"", ""&uqe7KX}XQ_T0d`6d"", ""K2;6%]lyE3a0wy~XBs"", 0, ""org.asynchttpclient.uri.Uri"", ""#"", ""Z>vLBe0R?(H3`H"");
      boolean boolean0 = uri0.equals("""");
}"
921,"  public String getQuery() {
    return query;
  }","  public void test505()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      boolean boolean0 = uri0.equals((Object) null);
}"
922,"  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    Uri other = (Uri) obj;
    if (host == null) {
      if (other.host != null)
        return false;
    } else if (!host.equals(other.host))
      return false;
    if (path == null) {
      if (other.path != null)
        return false;
    } else if (!path.equals(other.path))
      return false;
    if (port != other.port)
      return false;
    if (query == null) {
      if (other.query != null)
        return false;
    } else if (!query.equals(other.query))
      return false;
    if (scheme == null) {
      if (other.scheme != null)
        return false;
    } else if (!scheme.equals(other.scheme))
      return false;
    if (userInfo == null) {
      if (other.userInfo != null)
        return false;
    } else if (!userInfo.equals(other.userInfo))
      return false;
    if (fragment == null) {
      if (other.fragment != null)
        return false;
    } else if (!fragment.equals(other.fragment))
      return false;
    return true;
  }","  public void test506()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      boolean boolean0 = uri0.equals((Object) null);
}"
923,"  public String getFragment() {
    return fragment;
  }","  public void test507()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      boolean boolean0 = uri0.equals((Object) null);
}"
924,"  public String getScheme() {
    return scheme;
  }","  public void test508()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      boolean boolean0 = uri0.equals((Object) null);
}"
925,"  public String getUserInfo() {
    return userInfo;
  }","  public void test509()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      boolean boolean0 = uri0.equals((Object) null);
}"
926,"  public String getHost() {
    return host;
  }","  public void test510()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      boolean boolean0 = uri0.equals((Object) null);
}"
927,"  public boolean isSecured() {
    return secured;
  }","  public void test511()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      boolean boolean0 = uri0.equals((Object) null);
}"
928,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test512()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      boolean boolean0 = uri0.equals((Object) null);
}"
929,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test513()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      boolean boolean0 = uri0.equals((Object) null);
}"
930,"  public String getHost() {
    return host;
  }","  public void test514()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      uri0.equals(uri0);
}"
931,"  public String getUserInfo() {
    return userInfo;
  }","  public void test515()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      uri0.equals(uri0);
}"
932,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test516()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      uri0.equals(uri0);
}"
933,"  public String getScheme() {
    return scheme;
  }","  public void test517()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      uri0.equals(uri0);
}"
934,"  public String getFragment() {
    return fragment;
  }","  public void test518()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      uri0.equals(uri0);
}"
935,"  public String getQuery() {
    return query;
  }","  public void test519()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      uri0.equals(uri0);
}"
936,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test520()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      uri0.equals(uri0);
}"
937,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test521()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      uri0.equals(uri0);
}"
938,"  public String getPath() {
    return path;
  }","  public void test522()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      uri0.equals(uri0);
}"
939,"  public String getFragment() {
    return fragment;
  }","  public void test523()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
940,"  public String getScheme() {
    return scheme;
  }","  public void test524()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
941,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test525()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
942,"  public String getQuery() {
    return query;
  }","  public void test526()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
943,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test527()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
944,"  public String getPath() {
    return path;
  }","  public void test528()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
945,"  public String getUserInfo() {
    return userInfo;
  }","  public void test529()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
946,"  public String getHost() {
    return host;
  }","  public void test530()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
947,"  public String getPath() {
    return path;
  }","  public void test531()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
948,"  public int getPort() {
    return port;
  }","  public void test532()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
949,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test533()  throws Throwable  {
      Uri uri0 = new Uri("" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", (-1073741822), "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"", "" qXMAI~+zRs\u0006YWHo8N"");
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uri1.withNewScheme(""wss"");
      uri2.hashCode();
}"
950,"  public String getScheme() {
    return scheme;
  }","  public void test534()  throws Throwable  {
      Uri uri0 = new Uri(""org.Isynchttpcliet.uriUriParser"", (String) null, ""org.Isynchttpcliet.uriUriParser"", 1334, (String) null, ""org.Isynchttpcliet.uriUriParser"", ""org.Isynchttpcliet.uriUriParser"");
      uri0.hashCode();
}"
951,"  public String getHost() {
    return host;
  }","  public void test535()  throws Throwable  {
      Uri uri0 = new Uri(""org.Isynchttpcliet.uriUriParser"", (String) null, ""org.Isynchttpcliet.uriUriParser"", 1334, (String) null, ""org.Isynchttpcliet.uriUriParser"", ""org.Isynchttpcliet.uriUriParser"");
      uri0.hashCode();
}"
952,"  public int getPort() {
    return port;
  }","  public void test536()  throws Throwable  {
      Uri uri0 = new Uri(""org.Isynchttpcliet.uriUriParser"", (String) null, ""org.Isynchttpcliet.uriUriParser"", 1334, (String) null, ""org.Isynchttpcliet.uriUriParser"", ""org.Isynchttpcliet.uriUriParser"");
      uri0.hashCode();
}"
953,"  public String getFragment() {
    return fragment;
  }","  public void test537()  throws Throwable  {
      Uri uri0 = new Uri(""org.Isynchttpcliet.uriUriParser"", (String) null, ""org.Isynchttpcliet.uriUriParser"", 1334, (String) null, ""org.Isynchttpcliet.uriUriParser"", ""org.Isynchttpcliet.uriUriParser"");
      uri0.hashCode();
}"
954,"  public String getQuery() {
    return query;
  }","  public void test538()  throws Throwable  {
      Uri uri0 = new Uri(""org.Isynchttpcliet.uriUriParser"", (String) null, ""org.Isynchttpcliet.uriUriParser"", 1334, (String) null, ""org.Isynchttpcliet.uriUriParser"", ""org.Isynchttpcliet.uriUriParser"");
      uri0.hashCode();
}"
955,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test539()  throws Throwable  {
      Uri uri0 = new Uri(""org.Isynchttpcliet.uriUriParser"", (String) null, ""org.Isynchttpcliet.uriUriParser"", 1334, (String) null, ""org.Isynchttpcliet.uriUriParser"", ""org.Isynchttpcliet.uriUriParser"");
      uri0.hashCode();
}"
956,"  public String getQuery() {
    return query;
  }","  public void test540()  throws Throwable  {
      Uri uri0 = new Uri(""ZH"", ""ZH"", ""ZH"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""ZH"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getNonEmptyPath();
}"
957,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test541()  throws Throwable  {
      Uri uri0 = new Uri(""ZH"", ""ZH"", ""ZH"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""ZH"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getNonEmptyPath();
}"
958,"  public String getFragment() {
    return fragment;
  }","  public void test542()  throws Throwable  {
      Uri uri0 = new Uri(""ZH"", ""ZH"", ""ZH"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""ZH"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getNonEmptyPath();
}"
959,"  public String getNonEmptyPath() {
    return isNonEmpty(path) ? path : ""/"";
  }","  public void test543()  throws Throwable  {
      Uri uri0 = new Uri(""ZH"", ""ZH"", ""ZH"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""ZH"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getNonEmptyPath();
}"
960,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test544()  throws Throwable  {
      Uri uri0 = new Uri(""ZH"", ""ZH"", ""ZH"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""ZH"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getNonEmptyPath();
}"
961,"  public String getHost() {
    return host;
  }","  public void test545()  throws Throwable  {
      Uri uri0 = new Uri(""ZH"", ""ZH"", ""ZH"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""ZH"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getNonEmptyPath();
}"
962,"  public String getUserInfo() {
    return userInfo;
  }","  public void test546()  throws Throwable  {
      Uri uri0 = new Uri(""ZH"", ""ZH"", ""ZH"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""ZH"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getNonEmptyPath();
}"
963,"  public String getScheme() {
    return scheme;
  }","  public void test547()  throws Throwable  {
      Uri uri0 = new Uri(""ZH"", ""ZH"", ""ZH"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""ZH"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getNonEmptyPath();
}"
964,"  public String getNonEmptyPath() {
    return isNonEmpty(path) ? path : ""/"";
  }","  public void test548()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.getNonEmptyPath();
}"
965,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test549()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.getNonEmptyPath();
}"
966,"  public String getUserInfo() {
    return userInfo;
  }","  public void test550()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.getNonEmptyPath();
}"
967,"  public String getFragment() {
    return fragment;
  }","  public void test551()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.getNonEmptyPath();
}"
968,"  public boolean isSecured() {
    return secured;
  }","  public void test552()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.getNonEmptyPath();
}"
969,"  public String getScheme() {
    return scheme;
  }","  public void test553()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.getNonEmptyPath();
}"
970,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test554()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.getNonEmptyPath();
}"
971,"  public String getQuery() {
    return query;
  }","  public void test555()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.getNonEmptyPath();
}"
972,"  public String getHost() {
    return host;
  }","  public void test556()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.getNonEmptyPath();
}"
973,"  public String getScheme() {
    return scheme;
  }","  public void test557()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
974,"  public String getQuery() {
    return query;
  }","  public void test558()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
975,"  public String getPath() {
    return path;
  }","  public void test559()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
976,"  public String getPath() {
    return path;
  }","  public void test560()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
977,"  public String getUserInfo() {
    return userInfo;
  }","  public void test561()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
978,"  public boolean isSameBase(Uri other) {
    return scheme.equals(other.getScheme())
      && host.equals(other.getHost())
      && getExplicitPort() == other.getExplicitPort();
  }","  public void test562()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
979,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test563()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
980,"  public String getHost() {
    return host;
  }","  public void test564()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
981,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test565()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
982,"  public String getFragment() {
    return fragment;
  }","  public void test566()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
983,"  public String getUserInfo() {
    return userInfo;
  }","  public void test567()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
984,"  public String getFragment() {
    return fragment;
  }","  public void test568()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
985,"  public boolean isSecured() {
    return secured;
  }","  public void test569()  throws Throwable  {
      Uri uri0 = new Uri(""lso"", ""lso"", ""lso"", 106, ""lso"", ""lso"", ""lso"");
      Uri uri1 = new Uri(""lso"", ""wss"", ""wss"", 106, ""https"", ""ws"", ""wss"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
986,"  public String getFragment() {
    return fragment;
  }","  public void test570()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
987,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test571()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
988,"  public String getScheme() {
    return scheme;
  }","  public void test572()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
989,"  public String getUserInfo() {
    return userInfo;
  }","  public void test573()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
990,"  public boolean isSameBase(Uri other) {
    return scheme.equals(other.getScheme())
      && host.equals(other.getHost())
      && getExplicitPort() == other.getExplicitPort();
  }","  public void test574()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
991,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test575()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
992,"  public String getHost() {
    return host;
  }","  public void test576()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
993,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test577()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
994,"  public boolean isSecured() {
    return secured;
  }","  public void test578()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
995,"  public String getPath() {
    return path;
  }","  public void test579()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
996,"  public String getPath() {
    return path;
  }","  public void test580()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
997,"  public String getQuery() {
    return query;
  }","  public void test581()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
998,"  public boolean isSecured() {
    return secured;
  }","  public void test582()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      Uri uri1 = new Uri(""wss"", ""wss"", ""ws"", (-4), ""https"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX://osZV\"">{U{y\""<PIN:-44Pt+P|-G/'V^5.Zng"");
      boolean boolean0 = uri0.isSameBase(uri1);
}"
999,"  public String toFullUrl() {
    return fragment == null ? toUrl() : toUrl() + ""#"" + fragment;
  }","  public void test583()  throws Throwable  {
      Uri uri0 = new Uri(""url:"", "":M?tkc+F/https"", ""url:"", 2730, ""https"", ""https"", (String) null);
      String string0 = uri0.toFullUrl();
}"
1000,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test584()  throws Throwable  {
      Uri uri0 = new Uri(""url:"", "":M?tkc+F/https"", ""url:"", 2730, ""https"", ""https"", (String) null);
      String string0 = uri0.toFullUrl();
}"
1001,"  public String toFullUrl() {
    return fragment == null ? toUrl() : toUrl() + ""#"" + fragment;
  }","  public void test585()  throws Throwable  {
      Uri uri0 = new Uri(""url:"", "":M?tkc+F/https"", ""url:"", 2730, ""https"", ""https"", (String) null);
      String string0 = uri0.toFullUrl();
}"
1002,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test586()  throws Throwable  {
      Uri uri0 = new Uri(""url:"", "":M?tkc+F/https"", ""url:"", 2730, ""https"", ""https"", (String) null);
      String string0 = uri0.toFullUrl();
}"
1003,"  public boolean isSecured() {
    return secured;
  }","  public void test587()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toFullUrl();
}"
1004,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test588()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toFullUrl();
}"
1005,"  public String toFullUrl() {
    return fragment == null ? toUrl() : toUrl() + ""#"" + fragment;
  }","  public void test589()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toFullUrl();
}"
1006,"  public String getFragment() {
    return fragment;
  }","  public void test590()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toRelativeUrl();
}"
1007,"  public String toRelativeUrl() {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    if (MiscUtils.isNonEmpty(path))
      sb.append(path);
    else
      sb.append('/');
    if (query != null)
      sb.append('?').append(query);

    return sb.toString();
  }","  public void test591()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toRelativeUrl();
}"
1008,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test592()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toRelativeUrl();
}"
1009,"  public String getScheme() {
    return scheme;
  }","  public void test593()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toRelativeUrl();
}"
1010,"  public String getHost() {
    return host;
  }","  public void test594()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toRelativeUrl();
}"
1011,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test595()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toRelativeUrl();
}"
1012,"  public String getUserInfo() {
    return userInfo;
  }","  public void test596()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toRelativeUrl();
}"
1013,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test597()  throws Throwable  {
      Uri uri0 = new Uri(""kqXah"", ""kqXah"", ""kqXah"", 31, ""kqXah"", (String) null, ""kqXah"");
      String string0 = uri0.toRelativeUrl();
}"
1014,"  public String getFragment() {
    return fragment;
  }","  public void test598()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toRelativeUrl();
}"
1015,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test599()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toRelativeUrl();
}"
1016,"  public String getHost() {
    return host;
  }","  public void test600()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toRelativeUrl();
}"
1017,"  public String getUserInfo() {
    return userInfo;
  }","  public void test601()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toRelativeUrl();
}"
1018,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test602()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toRelativeUrl();
}"
1019,"  public String getScheme() {
    return scheme;
  }","  public void test603()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toRelativeUrl();
}"
1020,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test604()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toRelativeUrl();
}"
1021,"  public String toRelativeUrl() {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    if (MiscUtils.isNonEmpty(path))
      sb.append(path);
    else
      sb.append('/');
    if (query != null)
      sb.append('?').append(query);

    return sb.toString();
  }","  public void test605()  throws Throwable  {
      Uri uri0 = new Uri(""NDG"", ""NDG"", ""[\""g*tk$"", (-2084441645), (String) null, ""~?&#IaqCK_F$]i%j_"", ""NDG"");
      String string0 = uri0.toRelativeUrl();
}"
1022,"  public String getUserInfo() {
    return userInfo;
  }","  public void test606()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.toBaseUrl();
}"
1023,"  public String getFragment() {
    return fragment;
  }","  public void test607()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.toBaseUrl();
}"
1024,"  public String getQuery() {
    return query;
  }","  public void test608()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.toBaseUrl();
}"
1025,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test609()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.toBaseUrl();
}"
1026,"  public String toBaseUrl() {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(scheme).append(""://"").append(host);
    if (port != -1 && port != getSchemeDefaultPort()) {
      sb.append(':').append(port);
    }
    if (isNonEmpty(path)) {
      sb.append(path);
    }
    return sb.toString();
  }","  public void test610()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.toBaseUrl();
}"
1027,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test611()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""kV$}!6_97rIf!O"", ""kV$}!6_97rIf!O"", 0, """", ""wss"", ""kV$}!6_97rIf!O"");
      String string0 = uri0.toBaseUrl();
}"
1028,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test612()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.toBaseUrl();
}"
1029,"  public String toBaseUrl() {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(scheme).append(""://"").append(host);
    if (port != -1 && port != getSchemeDefaultPort()) {
      sb.append(':').append(port);
    }
    if (isNonEmpty(path)) {
      sb.append(path);
    }
    return sb.toString();
  }","  public void test613()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.toBaseUrl();
}"
1030,"  public String getFragment() {
    return fragment;
  }","  public void test614()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.toBaseUrl();
}"
1031,"  public String getQuery() {
    return query;
  }","  public void test615()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.toBaseUrl();
}"
1032,"  public String getUserInfo() {
    return userInfo;
  }","  public void test616()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.toBaseUrl();
}"
1033,"  public String getUserInfo() {
    return userInfo;
  }","  public void test617()  throws Throwable  {
      Uri uri0 = new Uri(""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", (-1), ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"");
      String string0 = uri0.toBaseUrl();
}"
1034,"  public String toBaseUrl() {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(scheme).append(""://"").append(host);
    if (port != -1 && port != getSchemeDefaultPort()) {
      sb.append(':').append(port);
    }
    if (isNonEmpty(path)) {
      sb.append(path);
    }
    return sb.toString();
  }","  public void test618()  throws Throwable  {
      Uri uri0 = new Uri(""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", (-1), ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"");
      String string0 = uri0.toBaseUrl();
}"
1035,"  public String getFragment() {
    return fragment;
  }","  public void test619()  throws Throwable  {
      Uri uri0 = new Uri(""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", (-1), ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"");
      String string0 = uri0.toBaseUrl();
}"
1036,"  public String getQuery() {
    return query;
  }","  public void test620()  throws Throwable  {
      Uri uri0 = new Uri(""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", (-1), ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"");
      String string0 = uri0.toBaseUrl();
}"
1037,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test621()  throws Throwable  {
      Uri uri0 = new Uri(""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", (-1), ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"");
      String string0 = uri0.toBaseUrl();
}"
1038,"  public boolean isSecured() {
    return secured;
  }","  public void test622()  throws Throwable  {
      Uri uri0 = new Uri(""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", (-1), ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"", ""+6 v`G4+GFhjb08r"");
      String string0 = uri0.toBaseUrl();
}"
1039,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test623()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.toUrl();
}"
1040,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test624()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.toUrl();
}"
1041,"  public String toUrl() {
    if (url == null) {
      StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
      sb.append(scheme).append(""://"");
      if (userInfo != null)
        sb.append(userInfo).append('@');
      sb.append(host);
      if (port != -1)
        sb.append(':').append(port);
      if (path != null)
        sb.append(path);
      if (query != null)
        sb.append('?').append(query);
      url = sb.toString();
      sb.setLength(0);
    }
    return url;
  }","  public void test625()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.toUrl();
}"
1042,"  public boolean isSecured() {
    return secured;
  }","  public void test626()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.toUrl();
}"
1043,"  public String getFragment() {
    return fragment;
  }","  public void test627()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.toUrl();
}"
1044,"  public static void validateSupportedScheme(Uri uri) {
    final String scheme = uri.getScheme();
    if (scheme == null || !scheme.equalsIgnoreCase(HTTP) && !scheme.equalsIgnoreCase(HTTPS)
      && !scheme.equalsIgnoreCase(WS) && !scheme.equalsIgnoreCase(WSS)) {
      throw new IllegalArgumentException(""The URI scheme, of the URI "" + uri
        + "", must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'"");
    }
  }","  public void test628()  throws Throwable  {
      Uri uri0 = new Uri(""-{xAWr)is-%&!Y3}mjO"", (String) null, ""-{xAWr)is-%&!Y3}mjO"", (-23), (String) null, (String) null, ""-{xAWr)is-%&!Y3}mjO"");
      // Undeclared exception!
      try { 
        Uri.validateSupportedScheme(uri0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The URI scheme, of the URI -{xAWr)is-%&!Y3}mjO://-{xAWr)is-%&!Y3}mjO:-23, must be equal (ignoring case) to 'http', 'https', 'ws', or 'wss'
         //
         verifyException(""org.asynchttpclient.uri.Uri"", e);
      }
  }"
1045,"  public String toString() {
    // for now, but might change
    return toUrl();
  }","  public void test629()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1046,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test630()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1047,"  public String getFragment() {
    return fragment;
  }","  public void test631()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1048,"  public String getQuery() {
    return query;
  }","  public void test632()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1049,"  public String getHost() {
    return host;
  }","  public void test633()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1050,"  public String toString() {
    // for now, but might change
    return toUrl();
  }","  public void test634()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1051,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test635()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1052,"  public String getScheme() {
    return scheme;
  }","  public void test636()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1053,"  public boolean isSecured() {
    return secured;
  }","  public void test637()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1054,"  public String getPath() {
    return path;
  }","  public void test638()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      Uri uri1 = Uri.create(uri0, ""K5j"");
      String string0 = uri1.toString();
}"
1055,"  public String getFragment() {
    return fragment;
  }","  public void test639()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getAuthority();
}"
1056,"  public String getScheme() {
    return scheme;
  }","  public void test640()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getAuthority();
}"
1057,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test641()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getAuthority();
}"
1058,"  public String getPath() {
    return path;
  }","  public void test642()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getAuthority();
}"
1059,"  public String getQuery() {
    return query;
  }","  public void test643()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getAuthority();
}"
1060,"  public String getAuthority() {
    return host + "":"" + getExplicitPort();
  }","  public void test644()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getAuthority();
}"
1061,"  public String getUserInfo() {
    return userInfo;
  }","  public void test645()  throws Throwable  {
      Uri uri0 = new Uri(""r"", ""r"", ""r"", (-1), "" could not be parsed into a proper Uri, missing scheme"", ""r"", "" could not be parsed into a proper Uri, missing scheme"");
      String string0 = uri0.getAuthority();
}"
1062,"  public static Uri create(String originalUrl) {
    return create(null, originalUrl);
  }","  public void test646()  throws Throwable  {
      // Undeclared exception!
      try { 
        Uri.create(""zh:"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // zh: could not be parsed into a proper Uri, missing host
         //
         verifyException(""org.asynchttpclient.uri.Uri"", e);
      }
  }"
1063,"  public String getFragment() {
    return fragment;
  }","  public void test647()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.getBaseUrl();
}"
1064,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test648()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.getBaseUrl();
}"
1065,"  public String getUserInfo() {
    return userInfo;
  }","  public void test649()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.getBaseUrl();
}"
1066,"  public boolean isSecured() {
    return secured;
  }","  public void test650()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.getBaseUrl();
}"
1067,"  public String getPath() {
    return path;
  }","  public void test651()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.getBaseUrl();
}"
1068,"  public String getQuery() {
    return query;
  }","  public void test652()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.getBaseUrl();
}"
1069,"  public String getBaseUrl() {
    return scheme + ""://"" + host + "":"" + getExplicitPort();
  }","  public void test653()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      String string0 = uri0.getBaseUrl();
}"
1070,"  public String getUserInfo() {
    return userInfo;
  }","  public void test654()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", 13, """", ""wss"", ""wss"");
      boolean boolean0 = uri0.isWebSocket();
}"
1071,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test655()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", 13, """", ""wss"", ""wss"");
      boolean boolean0 = uri0.isWebSocket();
}"
1072,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test656()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", 13, """", ""wss"", ""wss"");
      boolean boolean0 = uri0.isWebSocket();
}"
1073,"  public String getFragment() {
    return fragment;
  }","  public void test657()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", 13, """", ""wss"", ""wss"");
      boolean boolean0 = uri0.isWebSocket();
}"
1074,"  public int getExplicitPort() {
    return port == -1 ? getSchemeDefaultPort() : port;
  }","  public void test658()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", 13, """", ""wss"", ""wss"");
      boolean boolean0 = uri0.isWebSocket();
}"
1075,"  public String getScheme() {
    return scheme;
  }","  public void test659()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", 13, """", ""wss"", ""wss"");
      boolean boolean0 = uri0.isWebSocket();
}"
1076,"  public String getQuery() {
    return query;
  }","  public void test660()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", 13, """", ""wss"", ""wss"");
      boolean boolean0 = uri0.isWebSocket();
}"
1077,"  public String getHost() {
    return host;
  }","  public void test661()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", 13, """", ""wss"", ""wss"");
      boolean boolean0 = uri0.isWebSocket();
}"
1078,"  public String getPath() {
    return path;
  }","  public void test662()  throws Throwable  {
      Uri uri0 = new Uri(""wss"", ""wss"", ""wss"", 13, """", ""wss"", ""wss"");
      boolean boolean0 = uri0.isWebSocket();
}"
1079,"  public URI toJavaNetURI() throws URISyntaxException {
    return new URI(toUrl());
  }","  public void test663()  throws Throwable  {
      Uri uri0 = new Uri(""VS-KYBo-jHq9V"", ""[K]llPlJao"", ""HW"", 80, ""syizPT$|P|"", ""syizPT$|P|"", ""VS-KYBo-jHq9V"");
      try { 
        uri0.toJavaNetURI();
        fail(""Expecting exception: URISyntaxException"");
      } catch(URISyntaxException e) {
         //
         // Illegal character in authority at index 16: VS-KYBo-jHq9V://[K]llPlJao@HW:80syizPT$|P|?syizPT$|P|
         //
         verifyException(""java.net.URI$Parser"", e);
      }
  }"
1080,"  public int getSchemeDefaultPort() {
    return isSecured() ? 443 : 80;
  }","  public void test664()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.toBaseUrl();
}"
1081,"  public String getQuery() {
    return query;
  }","  public void test665()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.toBaseUrl();
}"
1082,"  public String getFragment() {
    return fragment;
  }","  public void test666()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.toBaseUrl();
}"
1083,"  public boolean isWebSocket() {
    return webSocket;
  }","  public void test667()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.toBaseUrl();
}"
1084,"  public String toBaseUrl() {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(scheme).append(""://"").append(host);
    if (port != -1 && port != getSchemeDefaultPort()) {
      sb.append(':').append(port);
    }
    if (isNonEmpty(path)) {
      sb.append(path);
    }
    return sb.toString();
  }","  public void test668()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", (-4), ""4Pt+P|-G/'V^5.Zng"", """", "":M?tkc+F/.qX"");
      String string0 = uri0.toBaseUrl();
}"
1085,"  public static Uri create(String originalUrl) {
    return create(null, originalUrl);
  }","  public void test669()  throws Throwable  {
      Uri uri0 = new Uri("":M?tkc+F/.qX"", (String) null, ""osZV\"">{U{y\""<PIN"", 0, ""_/../"", ""osZV\"">{U{y\""<PIN"", "":M?tkc+F/.qX"");
      // Undeclared exception!
      Uri.create(uri0, ""https"");
  }"
1086,"    public void run(Timeout timeout) throws Exception {
        cookieStore.evictExpired();
        timeout.timer().newTimeout(this, evictDelayInMs, TimeUnit.MILLISECONDS);
    }","  public void test0()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      CookieEvictionTask cookieEvictionTask0 = new CookieEvictionTask(1049L, threadSafeCookieStore0);
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn((Timeout) null).when(timer0).newTimeout(any(io.netty.util.TimerTask.class) , anyLong() , any(java.util.concurrent.TimeUnit.class));
      Timeout timeout0 = mock(Timeout.class, new ViolatedAssumptionAnswer());
      doReturn(timer0).when(timeout0).timer();
      cookieEvictionTask0.run(timeout0);
  }"
1087,"    public void run(Timeout timeout) throws Exception {
        cookieStore.evictExpired();
        timeout.timer().newTimeout(this, evictDelayInMs, TimeUnit.MILLISECONDS);
    }","  public void test1()  throws Throwable  {
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookieEvictionTask cookieEvictionTask0 = new CookieEvictionTask((-1373L), cookieStore0);
      Timeout timeout0 = mock(Timeout.class, new ViolatedAssumptionAnswer());
      doReturn((Timer) null).when(timeout0).timer();
      try { 
        cookieEvictionTask0.run(timeout0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.cookie.CookieEvictionTask"", e);
      }
  }"
1088,"  public List<Cookie> get(Uri uri) {
    return get(requestDomain(uri), requestPath(uri), uri.isSecured());
  }","  public void test0()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri(""/../"", ""/0/lSy"", ""im<.,"", 907, ""/../"", ""L+t-IB949r"", ""/sh?fJkilaZQ>iFy0FQ"");
      DefaultCookie defaultCookie0 = new DefaultCookie(""m2u<+CH:C[%@4<[Bu@"", ""JHkU33+Xc/"");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
}"
1089,"  public int count() {
    return counter.get();
  }","  public void test1()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("" 0Um?,Q#F5@"").when(uri0).getHost();
      doReturn("""").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn(""Yz)VUa$"").when(cookie0).domain();
      doReturn((-9223372036854775808L), 784L, (-431L), 1L, 0L).when(cookie0).maxAge();
      doReturn(""Yz)VUa$"").when(cookie0).name();
      doReturn(""https"").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      threadSafeCookieStore0.evictExpired();
}"
1090,"  public int count() {
    return counter.get();
  }","  public void test2()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(""MhOS3%>K8w|M@"").when(uri0).getHost();
      doReturn(""UNKNOWN"", ""MhOS3%>K8w|M@"").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn(""UNKNOWN"").when(cookie0).domain();
      doReturn(1L, (long)3, 3L, (long)2, 1002L).when(cookie0).maxAge();
      doReturn(""UNKNOWN"").when(cookie0).name();
      doReturn(""wss"").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      System.setCurrentTimeMillis(1002L);
      threadSafeCookieStore0.evictExpired();
}"
1091,"  public int count() {
    return counter.get();
  }","  public void test3()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(""/H|_ ;\""e"").when(uri0).getHost();
      doReturn(""'Uc@#2g*<R>!|NU"", """").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn(""H\""~5y<Y~"").when(cookie0).domain();
      doReturn(0L, 0L).when(cookie0).maxAge();
      doReturn(""/H|_ ;\""e"").when(cookie0).name();
      doReturn(""org.asynchttpclient.cookie.ThreadSafeCookieStore$DomainUtils"").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
}"
1092,"  public void add(Uri uri, Cookie cookie) {
    String thisRequestDomain = requestDomain(uri);
    String thisRequestPath = requestPath(uri);

    add(thisRequestDomain, thisRequestPath, cookie);
  }","  public void test4()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      String string0 = "" 0Um?,Q#F5@"";
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("" 0Um?,Q#F5@"").when(uri0).getHost();
      doReturn("".tr_6W^wExLh2c=.Db"", (String) null).when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("".tr_6W^wExLh2c=.Db"").when(cookie0).domain();
      doReturn(""https"").when(cookie0).path();
      // Undeclared exception!
      try { 
        threadSafeCookieStore0.add(uri0, cookie0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.cookie.ThreadSafeCookieStore"", e);
      }
  }"
1093,"  public int count() {
    return counter.get();
  }","  public void test5()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("" 0Um?,Q#F5@"").when(uri0).getHost();
      doReturn("" 0Um?,Q#F5@"", ""http"").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("" 0Um?,Q#F5@"").when(cookie0).domain();
      doReturn((-9223372036854775789L), (-9223372036854775789L)).when(cookie0).maxAge();
      doReturn(""https"").when(cookie0).name();
      doReturn("" 0Um?,Q#F5@"").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
}"
1094,"  public int incrementAndGet() {
    return counter.incrementAndGet();
  }","  public void test6()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.decrementAndGet();
      int int1 = threadSafeCookieStore0.incrementAndGet();
}"
1095,"  public int incrementAndGet() {
    return counter.incrementAndGet();
  }","  public void test7()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      threadSafeCookieStore0.decrementAndGet();
      int int0 = threadSafeCookieStore0.decrementAndGet();
      int int1 = threadSafeCookieStore0.incrementAndGet();
}"
1096,"  public int decrementAndGet() {
    return counter.decrementAndGet();
  }","  public void test8()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      threadSafeCookieStore0.incrementAndGet();
      int int0 = threadSafeCookieStore0.decrementAndGet();
}"
1097,"  public int decrementAndGet() {
    return counter.decrementAndGet();
  }","  public void test9()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.incrementAndGet();
      threadSafeCookieStore0.incrementAndGet();
      int int1 = threadSafeCookieStore0.decrementAndGet();
}"
1098,"  public List<Cookie> get(Uri uri) {
    return get(requestDomain(uri), requestPath(uri), uri.isSecured());
  }","  public void test10()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      // Undeclared exception!
      try { 
        threadSafeCookieStore0.get((Uri) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.cookie.ThreadSafeCookieStore"", e);
      }
  }"
1099,,"  public void test11()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain(""wss"");
}"
1100,,"  public void test12()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain(""org.asynchttpclient.uri.UriParser"");
}"
1101,,"  public void test13()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain(""org.asynchttpclient.uri.UriParser"");
}"
1102,,"  public void test14()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain("""");
}"
1103,,"  public void test15()  throws Throwable  {
      String string0 = ThreadSafeCookieStore.DomainUtils.getSubDomain((String) null);
}"
1104,"  public void add(Uri uri, Cookie cookie) {
    String thisRequestDomain = requestDomain(uri);
    String thisRequestPath = requestPath(uri);

    add(thisRequestDomain, thisRequestPath, cookie);
  }","  public void test16()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri(""/"", ""/"", ""/"", 433, ""/"", ""/"", ""/"");
      DefaultCookie defaultCookie0 = new DefaultCookie(""/"", ""wss"");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      threadSafeCookieStore0.add(uri0, defaultCookie0);
}"
1105,"  public List<Cookie> get(Uri uri) {
    return get(requestDomain(uri), requestPath(uri), uri.isSecured());
  }","  public void test17()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri(""/../"", ""/../"", ""/../"", 895, ""/8xQvy$L4j})H"", ""/../"", ""/8xQvy$L4j})H"");
      DefaultCookie defaultCookie0 = new DefaultCookie(""ws"", ""http"");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
}"
1106,"  public List<Cookie> get(Uri uri) {
    return get(requestDomain(uri), requestPath(uri), uri.isSecured());
  }","  public void test18()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri(""eclipse.jetty.util.InetAddressSet$LegacyInetRange"", ""eclipse.jetty.util.InetAddressSet$LegacyInetRange"", ""eclipse.jetty.util.InetAddressSet$LegacyInetRange"", 1, """", """", ""eclipse.jetty.util.InetAddressSet$LegacyInetRange"");
      DefaultCookie defaultCookie0 = new DefaultCookie(""org.eclipse.jetty.util.InetAddressSet$LegacyInetRange"", ""eclipse.jetty.util.InetAddressSet$LegacyInetRange"");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
}"
1107,"  public int count() {
    return counter.get();
  }","  public void test19()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(""/c/a/l]SP"").when(uri0).getHost();
      doReturn(""/c/a/l]SP"", ""http"").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn(""/c/a/l]SP"").when(cookie0).domain();
      doReturn((-9223372036854775766L), (-9223372036854775766L), 708L, 708L, (-9223372036854775766L)).when(cookie0).maxAge();
      doReturn(""https"").when(cookie0).name();
      doReturn(""/c/a/l]SP"").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      threadSafeCookieStore0.evictExpired();
}"
1108,"  public List<Cookie> getAll() {
    List<Cookie> result = cookieJar
            .values()
            .stream()
            .flatMap(map -> map.values().stream())
            .filter(pair -> !hasCookieExpired(pair.cookie, pair.createdAt))
            .map(pair -> pair.cookie)
            .collect(Collectors.toList());

    return result;
  }","  public void test20()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(""MhOS3%>K8w|M@"").when(uri0).getHost();
      doReturn(""UNKNOWN"", ""MhOS3%>K8w|M@"").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn(""UNKNOWN"").when(cookie0).domain();
      doReturn((-1671L), 1L, (long)3, 3L, 9223372036854775794L).when(cookie0).maxAge();
      doReturn(""UNKNOWN"").when(cookie0).name();
      doReturn(""wss"").when(cookie0).path();
      doReturn(""&u>[%`p@n\""{ "").when(cookie0).toString();
      threadSafeCookieStore0.add(uri0, cookie0);
      List<Cookie> list0 = threadSafeCookieStore0.getAll();
}"
1109,"  public int count() {
    return counter.get();
  }","  public void test21()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(""Q'u9C<u:vqt]"").when(uri0).getHost();
      doReturn(""Q'u9C<u:vqt]"", """").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn(""Yz)VUa$"").when(cookie0).domain();
      doReturn(1L, (-9223372036854775808L)).when(cookie0).maxAge();
      doReturn(""https"").when(cookie0).name();
      doReturn(""1InM//PXzkqvL"").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
}"
1110,"  public List<Cookie> get(Uri uri) {
    return get(requestDomain(uri), requestPath(uri), uri.isSecured());
  }","  public void test22()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri(""BL+fio 1Ec\""sn!wg"", ""/0/lSy"", ""BL+fio 1Ec\""sn!wg"", (-1), ""/0/lSy"", ""/0/lSy"", ""/0/lSy"");
      DefaultCookie defaultCookie0 = new DefaultCookie(""http"", ""/0/lSy"");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
}"
1111,"  public boolean remove(Predicate<Cookie> predicate) {
    final boolean[] removed = {false};
    cookieJar.forEach((key, value) -> {
      if (!removed[0]) {
        removed[0] = value.entrySet().removeIf(v -> predicate.test(v.getValue().cookie));
      }
    });
    if (removed[0]) {
      cookieJar.entrySet().removeIf(entry -> entry.getValue() == null || entry.getValue().isEmpty());
    }
    return removed[0];
  }","  public void test23()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(""MhOS3%>K8w|M@"").when(uri0).getHost();
      doReturn(""UNKNOWN"", ""MhOS3%>K8w|M@"").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn(""UNKNOWN"").when(cookie0).domain();
      doReturn((-1671L), 1L, (long)3).when(cookie0).maxAge();
      doReturn(""UNKNOWN"").when(cookie0).name();
      doReturn(""wss"").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      // Undeclared exception!
      try { 
        threadSafeCookieStore0.remove((Predicate<Cookie>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.cookie.ThreadSafeCookieStore"", e);
      }
  }"
1112,"  public boolean clear() {
    boolean result = !cookieJar.isEmpty();
    cookieJar.clear();
    return result;
  }","  public void test24()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      boolean boolean0 = threadSafeCookieStore0.clear();
}"
1113,"  public boolean clear() {
    boolean result = !cookieJar.isEmpty();
    cookieJar.clear();
    return result;
  }","  public void test25()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(uri0).getHost();
      doReturn("""").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(cookie0).domain();
      doReturn((long)1, (long)1, (long)1).when(cookie0).maxAge();
      doReturn("""").when(cookie0).name();
      doReturn("""").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      boolean boolean0 = threadSafeCookieStore0.clear();
}"
1114,"  public boolean remove(Predicate<Cookie> predicate) {
    final boolean[] removed = {false};
    cookieJar.forEach((key, value) -> {
      if (!removed[0]) {
        removed[0] = value.entrySet().removeIf(v -> predicate.test(v.getValue().cookie));
      }
    });
    if (removed[0]) {
      cookieJar.entrySet().removeIf(entry -> entry.getValue() == null || entry.getValue().isEmpty());
    }
    return removed[0];
  }","  public void test26()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(uri0).getHost();
      doReturn(""Parameter can't be null"", """").when(uri0).getPath();
      Cookie cookie0 = mock(Cookie.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(cookie0).domain();
      doReturn((long)1, (long)1, (long)1).when(cookie0).maxAge();
      doReturn(""ws"").when(cookie0).name();
      doReturn("""").when(cookie0).path();
      threadSafeCookieStore0.add(uri0, cookie0);
      IncludeExclude<Cookie> includeExclude0 = new IncludeExclude<Cookie>();
      boolean boolean0 = threadSafeCookieStore0.remove(includeExclude0);
}"
1115,"  public boolean remove(Predicate<Cookie> predicate) {
    final boolean[] removed = {false};
    cookieJar.forEach((key, value) -> {
      if (!removed[0]) {
        removed[0] = value.entrySet().removeIf(v -> predicate.test(v.getValue().cookie));
      }
    });
    if (removed[0]) {
      cookieJar.entrySet().removeIf(entry -> entry.getValue() == null || entry.getValue().isEmpty());
    }
    return removed[0];
  }","  public void test27()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Predicate<Cookie> predicate0 = (Predicate<Cookie>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = threadSafeCookieStore0.remove(predicate0);
}"
1116,"  public int count() {
    return counter.get();
  }","  public void test28()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.decrementAndGet();
      int int1 = threadSafeCookieStore0.count();
}"
1117,"  public List<Cookie> getAll() {
    List<Cookie> result = cookieJar
            .values()
            .stream()
            .flatMap(map -> map.values().stream())
            .filter(pair -> !hasCookieExpired(pair.cookie, pair.createdAt))
            .map(pair -> pair.cookie)
            .collect(Collectors.toList());

    return result;
  }","  public void test29()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      List<Cookie> list0 = threadSafeCookieStore0.getAll();
}"
1118,"  public List<Cookie> get(Uri uri) {
    return get(requestDomain(uri), requestPath(uri), uri.isSecured());
  }","  public void test30()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      Uri uri0 = new Uri(""`"", ""`"", ""`"", 0, ""0/E2Sy"", ""0/E2Sy"", ""`"");
      DefaultCookie defaultCookie0 = new DefaultCookie(""ws"", ""ws"");
      threadSafeCookieStore0.add(uri0, defaultCookie0);
      List<Cookie> list0 = threadSafeCookieStore0.get(uri0);
}"
1119,"  public int count() {
    return counter.get();
  }","  public void test31()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.count();
}"
1120,"  public int count() {
    return counter.get();
  }","  public void test32()  throws Throwable  {
      ThreadSafeCookieStore threadSafeCookieStore0 = new ThreadSafeCookieStore();
      int int0 = threadSafeCookieStore0.incrementAndGet();
      int int1 = threadSafeCookieStore0.count();
}"
1121,"  public String getSecret() {
    return secret;
  }","  public void test0()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      String string0 = requestToken0.getSecret();
}"
1122,"  public String getSecret() {
    return secret;
  }","  public void test1()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken(""l3gT0IGe"", ""l3gT0IGe"");
      String string0 = requestToken0.getSecret();
}"
1123,"  public String getPercentEncodedKey() {
    return percentEncodedKey;
  }","  public void test2()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      String string0 = requestToken0.getPercentEncodedKey();
}"
1124,"  public String getPercentEncodedKey() {
    return percentEncodedKey;
  }","  public void test3()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken(""l3gT0IGe"", ""l3gT0IGe"");
      String string0 = requestToken0.getPercentEncodedKey();
}"
1125,"  public String getKey() {
    return key;
  }","  public void test4()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken((String) null, (String) null);
      String string0 = requestToken0.getKey();
}"
1126,"  public String getKey() {
    return key;
  }","  public void test5()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken(""l3gT0IGe"", ""l3gT0IGe"");
      String string0 = requestToken0.getKey();
}"
1127,"  public String getKey() {
    return key;
  }","  public void test6()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("""", """");
      String string0 = requestToken0.getKey();
}"
1128,"  public String getSecret() {
    return secret;
  }","  public void test7()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("""", """");
      String string0 = requestToken0.getSecret();
}"
1129,"  public String getPercentEncodedKey() {
    return percentEncodedKey;
  }","  public void test8()  throws Throwable  {
      RequestToken requestToken0 = new RequestToken("""", """");
      String string0 = requestToken0.getPercentEncodedKey();
}"
1130,"  String sortAndConcat() {
    // then sort them (AFTER encoding, important)
    Collections.sort(parameters);

    // and build parameter section using pre-encoded pieces:
    StringBuilder encodedParams = StringBuilderPool.DEFAULT.stringBuilder();
    for (Parameter param : parameters) {
      encodedParams.append(param.key).append('=').append(param.value).append('&');
    }
    int length = encodedParams.length();
    if (length > 0) {
      encodedParams.setLength(length - 1);
    }
    return encodedParams.toString();
  }","  public void test0()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      Parameters parameters1 = parameters0.add(""NZQKON~NWmn("", """");
      Parameters parameters2 = parameters1.add((String) null, """");
      // Undeclared exception!
      try { 
        parameters2.sortAndConcat();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.oauth.Parameter"", e);
      }
  }"
1131,"  String sortAndConcat() {
    // then sort them (AFTER encoding, important)
    Collections.sort(parameters);

    // and build parameter section using pre-encoded pieces:
    StringBuilder encodedParams = StringBuilderPool.DEFAULT.stringBuilder();
    for (Parameter param : parameters) {
      encodedParams.append(param.key).append('=').append(param.value).append('&');
    }
    int length = encodedParams.length();
    if (length > 0) {
      encodedParams.setLength(length - 1);
    }
    return encodedParams.toString();
  }","  public void test1()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      String string0 = parameters0.sortAndConcat();
}"
1132,"  String sortAndConcat() {
    // then sort them (AFTER encoding, important)
    Collections.sort(parameters);

    // and build parameter section using pre-encoded pieces:
    StringBuilder encodedParams = StringBuilderPool.DEFAULT.stringBuilder();
    for (Parameter param : parameters) {
      encodedParams.append(param.key).append('=').append(param.value).append('&');
    }
    int length = encodedParams.length();
    if (length > 0) {
      encodedParams.setLength(length - 1);
    }
    return encodedParams.toString();
  }","  public void test2()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      Parameters parameters1 = parameters0.add(""NZQKON~NWmn("", """");
      String string0 = parameters1.sortAndConcat();
}"
1133,"  public void reset() {
    parameters.clear();
  }","  public void test3()  throws Throwable  {
      Parameters parameters0 = new Parameters();
      parameters0.reset();
  }"
1134,"  public String computeAuthorizationHeader(ConsumerKey consumerAuth,
                                           RequestToken userAuth,
                                           Uri uri,
                                           String method,
                                           List<Param> formParams,
                                           List<Param> queryParams) throws InvalidKeyException {
    String nonce = generateNonce();
    long timestamp = generateTimestamp();
    return computeAuthorizationHeader(consumerAuth, userAuth, uri, method, formParams, queryParams, timestamp, nonce);
  }","  public void test0()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey(""*"", ""1?6Q eB%Ks_"");
      RequestToken requestToken0 = new RequestToken(""^("", """");
      Uri uri0 = new Uri(""y0G&5;RF`P"", """", ""1?6Q eB%Ks_"", 38, """", "" could not be parsed into a proper Uri, missing host"", """");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      LinkedList<Param> linkedList1 = new LinkedList<Param>();
      String string0 = oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, uri0, ""^("", (List<Param>) linkedList0, (List<Param>) linkedList1, (long) 38, ""1?6Q eB%Ks_"");
}"
1135,"  StringBuilder signatureBaseString(ConsumerKey consumerAuth,
                                    RequestToken userAuth,
                                    Uri uri,
                                    String method,
                                    List<Param> formParams,
                                    List<Param> queryParams,
                                    long oauthTimestamp,
                                    String percentEncodedNonce) {

    // beware: must generate first as we're using pooled StringBuilder
    String baseUrl = uri.toBaseUrl();
    String encodedParams = encodedParams(consumerAuth, userAuth, oauthTimestamp, percentEncodedNonce, formParams, queryParams);

    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(method); // POST / GET etc (nothing to URL encode)
    sb.append('&');
    Utf8UrlEncoder.encodeAndAppendPercentEncoded(sb, baseUrl);

    // and all that needs to be URL encoded (... again!)
    sb.append('&');
    Utf8UrlEncoder.encodeAndAppendPercentEncoded(sb, encodedParams);
    return sb;
  }","  public void test1()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey(""&+F7~VMP"", ""&+F7~VMP"");
      RequestToken requestToken0 = new RequestToken(""~"", (String) null);
      Uri uri0 = new Uri(""xe<pl]ZU3ghVL(+;Z"", """", ""*"", 0, ""HmacSHA1"", ""xe<pl]ZU3ghVL(+;Z"", ""&+F7~VMP"");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      StringBuilder stringBuilder0 = oAuthSignatureCalculatorInstance0.signatureBaseString(consumerKey0, requestToken0, uri0, ""ws"", linkedList0, linkedList0, 0L, ""wss"");
}"
1136,"  String computeSignature(ConsumerKey consumerAuth,
                            RequestToken userAuth,
                            Uri uri,
                            String method,
                            List<Param> formParams,
                            List<Param> queryParams,
                            long oauthTimestamp,
                            String percentEncodedNonce) throws InvalidKeyException {

    StringBuilder sb = signatureBaseString(
      consumerAuth,
      userAuth,
      uri,
      method,
      formParams,
      queryParams,
      oauthTimestamp,
      percentEncodedNonce);

    ByteBuffer rawBase = StringUtils.charSequence2ByteBuffer(sb, UTF_8);
    byte[] rawSignature = digest(consumerAuth, userAuth, rawBase);
    // and finally, base64 encoded... phew!
    return Base64.getEncoder().encodeToString(rawSignature);
  }","  public void test2()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey(""&+F7~VMP"", ""&+F7~VMP"");
      RequestToken requestToken0 = new RequestToken(""~"", (String) null);
      Uri uri0 = new Uri(""xe<pl]ZU3ghVL(+;Z"", """", ""*"", 0, ""HmacSHA1"", ""xe<pl]ZU3ghVL(+;Z"", ""&+F7~VMP"");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      String string0 = oAuthSignatureCalculatorInstance0.computeSignature(consumerKey0, requestToken0, uri0, (String) null, linkedList0, linkedList0, 383L, ""ws"");
}"
1137,"  StringBuilder signatureBaseString(ConsumerKey consumerAuth,
                                    RequestToken userAuth,
                                    Uri uri,
                                    String method,
                                    List<Param> formParams,
                                    List<Param> queryParams,
                                    long oauthTimestamp,
                                    String percentEncodedNonce) {

    // beware: must generate first as we're using pooled StringBuilder
    String baseUrl = uri.toBaseUrl();
    String encodedParams = encodedParams(consumerAuth, userAuth, oauthTimestamp, percentEncodedNonce, formParams, queryParams);

    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(method); // POST / GET etc (nothing to URL encode)
    sb.append('&');
    Utf8UrlEncoder.encodeAndAppendPercentEncoded(sb, baseUrl);

    // and all that needs to be URL encoded (... again!)
    sb.append('&');
    Utf8UrlEncoder.encodeAndAppendPercentEncoded(sb, encodedParams);
    return sb;
  }","  public void test3()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = mock(ConsumerKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumerKey0).getPercentEncodedKey();
      RequestToken requestToken0 = mock(RequestToken.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestToken0).getKey();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).toBaseUrl();
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.signatureBaseString(consumerKey0, requestToken0, uri0, ""|_Y|:e\""gL"", (List<Param>) null, (List<Param>) null, 1L, ""9AZ)c#gG`I%"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1138,"  String computeSignature(ConsumerKey consumerAuth,
                            RequestToken userAuth,
                            Uri uri,
                            String method,
                            List<Param> formParams,
                            List<Param> queryParams,
                            long oauthTimestamp,
                            String percentEncodedNonce) throws InvalidKeyException {

    StringBuilder sb = signatureBaseString(
      consumerAuth,
      userAuth,
      uri,
      method,
      formParams,
      queryParams,
      oauthTimestamp,
      percentEncodedNonce);

    ByteBuffer rawBase = StringUtils.charSequence2ByteBuffer(sb, UTF_8);
    byte[] rawSignature = digest(consumerAuth, userAuth, rawBase);
    // and finally, base64 encoded... phew!
    return Base64.getEncoder().encodeToString(rawSignature);
  }","  public void test4()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = mock(ConsumerKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumerKey0).getPercentEncodedKey();
      RequestToken requestToken0 = mock(RequestToken.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestToken0).getKey();
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).toBaseUrl();
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.computeSignature(consumerKey0, requestToken0, uri0, """", (List<Param>) null, (List<Param>) null, (-1302L), ""j#%q]%|=b\""$-<9"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1139,"  public String computeAuthorizationHeader(ConsumerKey consumerAuth,
                                           RequestToken userAuth,
                                           Uri uri,
                                           String method,
                                           List<Param> formParams,
                                           List<Param> queryParams) throws InvalidKeyException {
    String nonce = generateNonce();
    long timestamp = generateTimestamp();
    return computeAuthorizationHeader(consumerAuth, userAuth, uri, method, formParams, queryParams, timestamp, nonce);
  }","  public void test5()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      RequestToken requestToken0 = new RequestToken(""~"", (String) null);
      Uri uri0 = new Uri(""xe<pl]ZU3ghVL(+;Z"", """", ""*"", 0, ""HmacSHA1"", ""xe<pl]ZU3ghVL(+;Z"", ""&+F7~VMP"");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      ConsumerKey consumerKey0 = new ConsumerKey(""https"", (String) null);
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, uri0, ""(iHB<;.x<"", (List<Param>) linkedList0, (List<Param>) linkedList0, 1806L, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1140,"  public String computeAuthorizationHeader(ConsumerKey consumerAuth,
                                           RequestToken userAuth,
                                           Uri uri,
                                           String method,
                                           List<Param> formParams,
                                           List<Param> queryParams) throws InvalidKeyException {
    String nonce = generateNonce();
    long timestamp = generateTimestamp();
    return computeAuthorizationHeader(consumerAuth, userAuth, uri, method, formParams, queryParams, timestamp, nonce);
  }","  public void test6()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey("""", """");
      RequestToken requestToken0 = new RequestToken("""", """");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Param> list0 = Param.map2ParamList(hashMap0);
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, (Uri) null, """", list0, (List<Param>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.oauth.OAuthSignatureCalculatorInstance"", e);
      }
  }"
1141,"  public String computeAuthorizationHeader(ConsumerKey consumerAuth,
                                           RequestToken userAuth,
                                           Uri uri,
                                           String method,
                                           List<Param> formParams,
                                           List<Param> queryParams) throws InvalidKeyException {
    String nonce = generateNonce();
    long timestamp = generateTimestamp();
    return computeAuthorizationHeader(consumerAuth, userAuth, uri, method, formParams, queryParams, timestamp, nonce);
  }","  public void test7()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = mock(ConsumerKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumerKey0).getPercentEncodedKey();
      // Undeclared exception!
      try { 
        oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, (RequestToken) null, """", 3305L, ""\""MqT%=h\""z@/pwo"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.oauth.OAuthSignatureCalculatorInstance"", e);
      }
  }"
1142,"  public String computeAuthorizationHeader(ConsumerKey consumerAuth,
                                           RequestToken userAuth,
                                           Uri uri,
                                           String method,
                                           List<Param> formParams,
                                           List<Param> queryParams) throws InvalidKeyException {
    String nonce = generateNonce();
    long timestamp = generateTimestamp();
    return computeAuthorizationHeader(consumerAuth, userAuth, uri, method, formParams, queryParams, timestamp, nonce);
  }","  public void test8()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = new ConsumerKey(""&+F7~VMP"", ""&+F7~VMP"");
      RequestToken requestToken0 = new RequestToken(""~"", (String) null);
      String string0 = oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, ""xe<pl]ZU3ghVL(+;Z"", 5028L, ""UefLgH51a"");
}"
1143,"  public String computeAuthorizationHeader(ConsumerKey consumerAuth,
                                           RequestToken userAuth,
                                           Uri uri,
                                           String method,
                                           List<Param> formParams,
                                           List<Param> queryParams) throws InvalidKeyException {
    String nonce = generateNonce();
    long timestamp = generateTimestamp();
    return computeAuthorizationHeader(consumerAuth, userAuth, uri, method, formParams, queryParams, timestamp, nonce);
  }","  public void test9()  throws Throwable  {
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      ConsumerKey consumerKey0 = mock(ConsumerKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(consumerKey0).getPercentEncodedKey();
      RequestToken requestToken0 = mock(RequestToken.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestToken0).getKey();
      String string0 = oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, ""9bRxT]G"", 2138L, ""9bRxT]G"");
}"
1144,"  public String computeAuthorizationHeader(ConsumerKey consumerAuth,
                                           RequestToken userAuth,
                                           Uri uri,
                                           String method,
                                           List<Param> formParams,
                                           List<Param> queryParams) throws InvalidKeyException {
    String nonce = generateNonce();
    long timestamp = generateTimestamp();
    return computeAuthorizationHeader(consumerAuth, userAuth, uri, method, formParams, queryParams, timestamp, nonce);
  }","  public void test10()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey(""oa%uth_nonc-"", ""oa%uth_nonc-"");
      RequestToken requestToken0 = new RequestToken(""oa%uth_nonc-"", ""oa%uth_nonc-"");
      Uri uri0 = new Uri(""oa%uth_nonc-"", ""oa%uth_nonc-"", ""oa%uth_nonc-"", 25, ""oa%uth_nonc-"", ""oa%uth_nonc-"", ""oa%uth_nonc-"");
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Param param0 = new Param(""https"", ""wss"");
      linkedList0.add(param0);
      OAuthSignatureCalculatorInstance oAuthSignatureCalculatorInstance0 = new OAuthSignatureCalculatorInstance();
      String string0 = oAuthSignatureCalculatorInstance0.computeAuthorizationHeader(consumerKey0, requestToken0, uri0, ""ws"", (List<Param>) linkedList0, (List<Param>) linkedList0, (long) 25, ""oa%uth_nonc-"");
}"
1145,"  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    Parameter parameter = (Parameter) o;
    return key.equals(parameter.key) && value.equals(parameter.value);
  }","  public void test0()  throws Throwable  {
      Parameter parameter0 = new Parameter(""<rQdNl.B{3*||z}"", """");
      Parameter parameter1 = new Parameter(""<rQdNl.B{3*||z}"", ""<rQdNl.B{3*||z}"");
      boolean boolean0 = parameter0.equals(parameter1);
}"
1146,"  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    Parameter parameter = (Parameter) o;
    return key.equals(parameter.key) && value.equals(parameter.value);
  }","  public void test1()  throws Throwable  {
      Parameter parameter0 = new Parameter(""<rQdNl.B{3*||z}"", """");
      Parameter parameter1 = new Parameter(""<rQdNl.B{3*||z}"", ""<rQdNl.B{3*||z}"");
      boolean boolean0 = parameter0.equals(parameter1);
}"
1147,"  public int compareTo(Parameter other) {
    int keyDiff = key.compareTo(other.key);
    return keyDiff == 0 ? value.compareTo(other.value) : keyDiff;
  }","  public void test2()  throws Throwable  {
      Parameter parameter0 = new Parameter(""1M+"", """");
      int int0 = parameter0.compareTo(parameter0);
}"
1148,"  public int compareTo(Parameter other) {
    int keyDiff = key.compareTo(other.key);
    return keyDiff == 0 ? value.compareTo(other.value) : keyDiff;
  }","  public void test3()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      Parameter parameter1 = new Parameter(""%|"", ""%|"");
      int int0 = parameter1.compareTo(parameter0);
}"
1149,"  public int hashCode() {
    int result = key.hashCode();
    result = 31 * result + value.hashCode();
    return result;
  }","  public void test4()  throws Throwable  {
      Parameter parameter0 = new Parameter(""^b"", (String) null);
      // Undeclared exception!
      try { 
        parameter0.hashCode();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.oauth.Parameter"", e);
      }
  }"
1150,"  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    Parameter parameter = (Parameter) o;
    return key.equals(parameter.key) && value.equals(parameter.value);
  }","  public void test5()  throws Throwable  {
      Parameter parameter0 = new Parameter((String) null, (String) null);
      Parameter parameter1 = new Parameter(""null=null"", ""null=null"");
      // Undeclared exception!
      try { 
        parameter0.equals(parameter1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
1151,"  public int compareTo(Parameter other) {
    int keyDiff = key.compareTo(other.key);
    return keyDiff == 0 ? value.compareTo(other.value) : keyDiff;
  }","  public void test6()  throws Throwable  {
      Parameter parameter0 = new Parameter(""C)z1*p `"", ""C)z1*p `"");
      Parameter parameter1 = new Parameter(""C)z1*p `"", (String) null);
      // Undeclared exception!
      try { 
        parameter0.compareTo(parameter1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1152,"  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    Parameter parameter = (Parameter) o;
    return key.equals(parameter.key) && value.equals(parameter.value);
  }","  public void test7()  throws Throwable  {
      Parameter parameter0 = new Parameter(""<"", ""<"");
      Parameter parameter1 = new Parameter(""<"", ""<"");
      boolean boolean0 = parameter1.equals(parameter0);
}"
1153,"  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    Parameter parameter = (Parameter) o;
    return key.equals(parameter.key) && value.equals(parameter.value);
  }","  public void test8()  throws Throwable  {
      Parameter parameter0 = new Parameter(""2"", ""2"");
      boolean boolean0 = parameter0.equals(""2"");
}"
1154,"  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    Parameter parameter = (Parameter) o;
    return key.equals(parameter.key) && value.equals(parameter.value);
  }","  public void test9()  throws Throwable  {
      Parameter parameter0 = new Parameter((String) null, (String) null);
      boolean boolean0 = parameter0.equals((Object) null);
}"
1155,"  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    Parameter parameter = (Parameter) o;
    return key.equals(parameter.key) && value.equals(parameter.value);
  }","  public void test10()  throws Throwable  {
      Parameter parameter0 = new Parameter((String) null, (String) null);
      boolean boolean0 = parameter0.equals(parameter0);
}"
1156,"  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    Parameter parameter = (Parameter) o;
    return key.equals(parameter.key) && value.equals(parameter.value);
  }","  public void test11()  throws Throwable  {
      Parameter parameter0 = new Parameter(""2"", ""2"");
      Parameter parameter1 = new Parameter(""b])HS=FR$O@/El,G"", ""b])HS=FR$O@/El,G"");
      boolean boolean0 = parameter0.equals(parameter1);
}"
1157,"  public int compareTo(Parameter other) {
    int keyDiff = key.compareTo(other.key);
    return keyDiff == 0 ? value.compareTo(other.value) : keyDiff;
  }","  public void test12()  throws Throwable  {
      Parameter parameter0 = new Parameter(""2"", ""2"");
      Parameter parameter1 = new Parameter(""b])HS=FR$O@/El,G"", ""b])HS=FR$O@/El,G"");
      int int0 = parameter0.compareTo(parameter1);
}"
1158,"  public String toString() {
    return key + ""="" + value;
  }","  public void test13()  throws Throwable  {
      Parameter parameter0 = new Parameter(""^b"", (String) null);
      String string0 = parameter0.toString();
}"
1159,"  public int hashCode() {
    int result = key.hashCode();
    result = 31 * result + value.hashCode();
    return result;
  }","  public void test14()  throws Throwable  {
      Parameter parameter0 = new Parameter(""2"", ""2"");
      parameter0.hashCode();
  }"
1160,"  public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth) {
    this.consumerAuth = consumerAuth;
    this.userAuth = userAuth;
  }","  public void test0()  throws Throwable  {
      ConsumerKey consumerKey0 = mock(ConsumerKey.class, new ViolatedAssumptionAnswer());
      RequestToken requestToken0 = mock(RequestToken.class, new ViolatedAssumptionAnswer());
      OAuthSignatureCalculator oAuthSignatureCalculator0 = new OAuthSignatureCalculator(consumerKey0, requestToken0);
  }"
1161,"  public String getSecret() {
    return secret;
  }","  public void test0()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey((String) null, (String) null);
      String string0 = consumerKey0.getSecret();
}"
1162,"  public String getSecret() {
    return secret;
  }","  public void test1()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey(""54O$u^a0SQa5d"", ""54O$u^a0SQa5d"");
      String string0 = consumerKey0.getSecret();
}"
1163,"  public String getPercentEncodedKey() {
    return percentEncodedKey;
  }","  public void test2()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey((String) null, (String) null);
      String string0 = consumerKey0.getPercentEncodedKey();
}"
1164,"  public String getPercentEncodedKey() {
    return percentEncodedKey;
  }","  public void test3()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey(""54O$u^a0SQa5d"", ""54O$u^a0SQa5d"");
      String string0 = consumerKey0.getPercentEncodedKey();
}"
1165,"  public String getKey() {
    return key;
  }","  public void test4()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey((String) null, (String) null);
      String string0 = consumerKey0.getKey();
}"
1166,"  public String getKey() {
    return key;
  }","  public void test5()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey(""54O$u^a0SQa5d"", ""54O$u^a0SQa5d"");
      String string0 = consumerKey0.getKey();
}"
1167,"  public String getPercentEncodedKey() {
    return percentEncodedKey;
  }","  public void test6()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("""", """");
      String string0 = consumerKey0.getPercentEncodedKey();
}"
1168,"  public String getSecret() {
    return secret;
  }","  public void test7()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("""", """");
      String string0 = consumerKey0.getSecret();
}"
1169,"  public String getKey() {
    return key;
  }","  public void test8()  throws Throwable  {
      ConsumerKey consumerKey0 = new ConsumerKey("""", """");
      String string0 = consumerKey0.getKey();
}"
1170,"  public TooManyConnectionsException(int max) {
    super(""Too many connections: "" + max);
  }","  public void test0()  throws Throwable  {
      TooManyConnectionsException tooManyConnectionsException0 = new TooManyConnectionsException(7023);
  }"
1171,"  public TooManyConnectionsPerHostException(int max) {
    super(""Too many connections: "" + max);
  }","  public void test0()  throws Throwable  {
      TooManyConnectionsPerHostException tooManyConnectionsPerHostException0 = new TooManyConnectionsPerHostException(0);
  }"
1172,"  public final State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
    onStatusReceived0(responseStatus);
    return responseStatus.getStatusCode() == SWITCHING_PROTOCOLS_101 ? State.CONTINUE : State.ABORT;
  }","  public void test0()  throws Throwable  {
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler((List<WebSocketListener>) null);
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn(614).when(httpResponseStatus0).getStatusCode();
      AsyncHandler.State asyncHandler_State0 = webSocketUpgradeHandler0.onStatusReceived(httpResponseStatus0);
}"
1173,"  protected void setWebSocket0(NettyWebSocket webSocket) {
  }","  public void test1()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      webSocketUpgradeHandler0.setWebSocket0((NettyWebSocket) null);
  }"
1174,"  protected void onThrowable0(Throwable t) {
  }","  public void test2()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onThrowable0(throwable0);
  }"
1175,"  protected void onStatusReceived0(HttpResponseStatus responseStatus) throws Exception {
  }","  public void test3()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      webSocketUpgradeHandler0.onStatusReceived0((HttpResponseStatus) null);
  }"
1176,"  protected void onOpen0() {
  }","  public void test4()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      webSocketUpgradeHandler0.onOpen0();
  }"
1177,"  protected void onHeadersReceived0(HttpHeaders headers) throws Exception {
  }","  public void test5()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onHeadersReceived0(httpHeaders0);
  }"
1178,"  protected void onCompleted0() throws Exception {
  }","  public void test6()  throws Throwable  {
      Vector<WebSocketListener> vector0 = new Vector<WebSocketListener>();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler(vector0);
      webSocketUpgradeHandler0.onCompleted0();
  }"
1179,"  protected void onBodyPartReceived0(HttpResponseBodyPart bodyPart) throws Exception {
  }","  public void test7()  throws Throwable  {
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler((List<WebSocketListener>) null);
      HttpResponseBodyPart httpResponseBodyPart0 = mock(HttpResponseBodyPart.class, new ViolatedAssumptionAnswer());
      webSocketUpgradeHandler0.onBodyPartReceived0(httpResponseBodyPart0);
  }"
1180,"  public final void onOpen() {
    onOpen0();
    for (WebSocketListener listener : listeners) {
      webSocket.addWebSocketListener(listener);
      listener.onOpen(webSocket);
    }
    webSocket.processBufferedFrames();
  }","  public void test8()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketListener webSocketListener0 = mock(WebSocketListener.class, new ViolatedAssumptionAnswer());
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder1 = webSocketUpgradeHandler_Builder0.addWebSocketListener(webSocketListener0);
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder1.build();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, combinedHttpHeaders0);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      webSocketUpgradeHandler0.onOpen();
  }"
1181,"  public final NettyWebSocket onCompleted() throws Exception {
    onCompleted0();
    return webSocket;
  }","  public void test9()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel();
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(embeddedChannel0, (HttpHeaders) null);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      NettyWebSocket nettyWebSocket1 = webSocketUpgradeHandler0.onCompleted();
}"
1182,"  public final void onThrowable(Throwable t) {
    onThrowable0(t);
    for (WebSocketListener listener : listeners) {
      if (webSocket != null) {
        webSocket.addWebSocketListener(listener);
      }
      listener.onError(t);
    }
  }","  public void test10()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      webSocketUpgradeHandler_Builder0.addWebSocketListener((WebSocketListener) null);
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        webSocketUpgradeHandler0.onThrowable(throwable0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.ws.WebSocketUpgradeHandler"", e);
      }
  }"
1183,"  public final State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
    onStatusReceived0(responseStatus);
    return responseStatus.getStatusCode() == SWITCHING_PROTOCOLS_101 ? State.CONTINUE : State.ABORT;
  }","  public void test11()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      try { 
        webSocketUpgradeHandler0.onStatusReceived((HttpResponseStatus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.ws.WebSocketUpgradeHandler"", e);
      }
  }"
1184,"  public final void onThrowable(Throwable t) {
    onThrowable0(t);
    for (WebSocketListener listener : listeners) {
      if (webSocket != null) {
        webSocket.addWebSocketListener(listener);
      }
      listener.onError(t);
    }
  }","  public void test12()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketListener webSocketListener0 = mock(WebSocketListener.class, new ViolatedAssumptionAnswer());
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder1 = webSocketUpgradeHandler_Builder0.addWebSocketListener(webSocketListener0);
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder1.build();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, combinedHttpHeaders0);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      webSocketUpgradeHandler0.onThrowable(sQLTransientConnectionException0);
}"
1185,"  public final State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
    onStatusReceived0(responseStatus);
    return responseStatus.getStatusCode() == SWITCHING_PROTOCOLS_101 ? State.CONTINUE : State.ABORT;
  }","  public void test13()  throws Throwable  {
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler((List<WebSocketListener>) null);
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpResponseStatus0).getStatusCode();
      AsyncHandler.State asyncHandler_State0 = webSocketUpgradeHandler0.onStatusReceived(httpResponseStatus0);
}"
1186,"  public final NettyWebSocket onCompleted() throws Exception {
    onCompleted0();
    return webSocket;
  }","  public void test14()  throws Throwable  {
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = new WebSocketUpgradeHandler((List<WebSocketListener>) null);
      NettyWebSocket nettyWebSocket0 = webSocketUpgradeHandler0.onCompleted();
}"
1187,"  public final State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {
    onStatusReceived0(responseStatus);
    return responseStatus.getStatusCode() == SWITCHING_PROTOCOLS_101 ? State.CONTINUE : State.ABORT;
  }","  public void test15()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn(101).when(httpResponseStatus0).getStatusCode();
      AsyncHandler.State asyncHandler_State0 = webSocketUpgradeHandler0.onStatusReceived(httpResponseStatus0);
}"
1188,"  public final NettyWebSocket onCompleted() throws Exception {
    onCompleted0();
    return webSocket;
  }","  public void test16()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, combinedHttpHeaders0);
      webSocketUpgradeHandler0.setWebSocket(nettyWebSocket0);
      webSocketUpgradeHandler0.onOpen();
      NettyWebSocket nettyWebSocket1 = webSocketUpgradeHandler0.onCompleted();
}"
1189,"  public final void onOpen() {
    onOpen0();
    for (WebSocketListener listener : listeners) {
      webSocket.addWebSocketListener(listener);
      listener.onOpen(webSocket);
    }
    webSocket.processBufferedFrames();
  }","  public void test17()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      // Undeclared exception!
      try { 
        webSocketUpgradeHandler0.onOpen();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.ws.WebSocketUpgradeHandler"", e);
      }
  }"
1190,"  public final State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
    onBodyPartReceived0(bodyPart);
    return State.CONTINUE;
  }","  public void test18()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      HttpResponseBodyPart httpResponseBodyPart0 = mock(HttpResponseBodyPart.class, new ViolatedAssumptionAnswer());
      AsyncHandler.State asyncHandler_State0 = webSocketUpgradeHandler0.onBodyPartReceived(httpResponseBodyPart0);
}"
1191,"  public WebSocketUpgradeHandler(List<WebSocketListener> listeners) {
    this.listeners = listeners;
  }","  public void test19()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketListener webSocketListener0 = mock(WebSocketListener.class, new ViolatedAssumptionAnswer());
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder1 = webSocketUpgradeHandler_Builder0.removeWebSocketListener(webSocketListener0);
}"
1192,"  public final State onHeadersReceived(HttpHeaders headers) throws Exception {
    onHeadersReceived0(headers);
    return State.CONTINUE;
  }","  public void test20()  throws Throwable  {
      WebSocketUpgradeHandler.Builder webSocketUpgradeHandler_Builder0 = new WebSocketUpgradeHandler.Builder();
      WebSocketUpgradeHandler webSocketUpgradeHandler0 = webSocketUpgradeHandler_Builder0.build();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      AsyncHandler.State asyncHandler_State0 = webSocketUpgradeHandler0.onHeadersReceived(combinedHttpHeaders0);
}"
1193,"  public static String getWebSocketKey() {
    byte[] nonce = new byte[16];
    ThreadLocalRandom random = ThreadLocalRandom.current();
    for (int i = 0; i < nonce.length; i++) {
      nonce[i] = (byte) random.nextInt(256);
    }
    return Base64.getEncoder().encodeToString(nonce);
  }","  public void test0()  throws Throwable  {
      String string0 = WebSocketUtils.getWebSocketKey();
}"
1194,,"  public void test1()  throws Throwable  {
      WebSocketUtils webSocketUtils0 = new WebSocketUtils();
  }"
1195,"  public static String getAcceptKey(String key) {
    return Base64.getEncoder().encodeToString(pooledSha1MessageDigest().digest(
              (key + MAGIC_GUID).getBytes(US_ASCII)));
  }","  public void test2()  throws Throwable  {
      String string0 = WebSocketUtils.getAcceptKey(""AAAAAAAAAAAAAAAAAAAAAA=="");
}"
1196,"  public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
    for (int i = 0; i < callbacks.length; i++) {
      Callback callback = callbacks[i];
      if (handleCallback(callback)) {
        continue;
      } else if (callback instanceof NameCallback) {
        ((NameCallback) callback).setName(username);
      } else if (callback instanceof PasswordCallback) {
        PasswordCallback pwCallback = (PasswordCallback) callback;
        pwCallback.setPassword(password.toCharArray());
      } else if (!invokePasswordCallback(callback)) {
        String errorMsg = ""Unsupported callback type "" + callbacks[i].getClass().getName();
        log.info(errorMsg);
        throw new UnsupportedCallbackException(callbacks[i], errorMsg);
      }
    }
  }","  public void test0()  throws Throwable  {
      NamePasswordCallbackHandler namePasswordCallbackHandler0 = new NamePasswordCallbackHandler("""", """");
      LanguageCallback languageCallback0 = new LanguageCallback();
      Callback[] callbackArray0 = new Callback[6];
      callbackArray0[0] = (Callback) languageCallback0;
      try { 
        namePasswordCallbackHandler0.handle(callbackArray0);
        fail(""Expecting exception: UnsupportedCallbackException"");
      } catch(UnsupportedCallbackException e) {
         //
         // Unsupported callback type javax.security.auth.callback.LanguageCallback
         //
         verifyException(""org.asynchttpclient.spnego.NamePasswordCallbackHandler"", e);
      }
  }"
1197,"  public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
    for (int i = 0; i < callbacks.length; i++) {
      Callback callback = callbacks[i];
      if (handleCallback(callback)) {
        continue;
      } else if (callback instanceof NameCallback) {
        ((NameCallback) callback).setName(username);
      } else if (callback instanceof PasswordCallback) {
        PasswordCallback pwCallback = (PasswordCallback) callback;
        pwCallback.setPassword(password.toCharArray());
      } else if (!invokePasswordCallback(callback)) {
        String errorMsg = ""Unsupported callback type "" + callbacks[i].getClass().getName();
        log.info(errorMsg);
        throw new UnsupportedCallbackException(callbacks[i], errorMsg);
      }
    }
  }","  public void test1()  throws Throwable  {
      NamePasswordCallbackHandler namePasswordCallbackHandler0 = new NamePasswordCallbackHandler(""T"", ""T"", ""T"");
      Callback[] callbackArray0 = new Callback[2];
      // Undeclared exception!
      try { 
        namePasswordCallbackHandler0.handle(callbackArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.spnego.NamePasswordCallbackHandler"", e);
      }
  }"
1198,"  public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
    for (int i = 0; i < callbacks.length; i++) {
      Callback callback = callbacks[i];
      if (handleCallback(callback)) {
        continue;
      } else if (callback instanceof NameCallback) {
        ((NameCallback) callback).setName(username);
      } else if (callback instanceof PasswordCallback) {
        PasswordCallback pwCallback = (PasswordCallback) callback;
        pwCallback.setPassword(password.toCharArray());
      } else if (!invokePasswordCallback(callback)) {
        String errorMsg = ""Unsupported callback type "" + callbacks[i].getClass().getName();
        log.info(errorMsg);
        throw new UnsupportedCallbackException(callbacks[i], errorMsg);
      }
    }
  }","  public void test2()  throws Throwable  {
      NamePasswordCallbackHandler namePasswordCallbackHandler0 = new NamePasswordCallbackHandler(""p"", ""p"", ""p"");
      Callback[] callbackArray0 = new Callback[1];
      NameCallback nameCallback0 = new NameCallback(""p"");
      callbackArray0[0] = (Callback) nameCallback0;
      namePasswordCallbackHandler0.handle(callbackArray0);
}"
1199,"  protected boolean handleCallback(Callback callback) {
    return false;
  }","  public void test3()  throws Throwable  {
      NamePasswordCallbackHandler namePasswordCallbackHandler0 = new NamePasswordCallbackHandler(""K_ j/6GpjT~"", ""{} -> {}"", ""{} -> {}"");
      NameCallback nameCallback0 = new NameCallback(""{} -> {}"");
      boolean boolean0 = namePasswordCallbackHandler0.handleCallback(nameCallback0);
}"
1200,"  public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
    for (int i = 0; i < callbacks.length; i++) {
      Callback callback = callbacks[i];
      if (handleCallback(callback)) {
        continue;
      } else if (callback instanceof NameCallback) {
        ((NameCallback) callback).setName(username);
      } else if (callback instanceof PasswordCallback) {
        PasswordCallback pwCallback = (PasswordCallback) callback;
        pwCallback.setPassword(password.toCharArray());
      } else if (!invokePasswordCallback(callback)) {
        String errorMsg = ""Unsupported callback type "" + callbacks[i].getClass().getName();
        log.info(errorMsg);
        throw new UnsupportedCallbackException(callbacks[i], errorMsg);
      }
    }
  }","  public void test4()  throws Throwable  {
      NamePasswordCallbackHandler namePasswordCallbackHandler0 = new NamePasswordCallbackHandler("".Z,c`m%*z;?"", "".Z,c`m%*z;?"");
      PasswordCallback passwordCallback0 = new PasswordCallback("".Z,c`m%*z;?"", true);
      Callback[] callbackArray0 = new Callback[2];
      callbackArray0[0] = (Callback) passwordCallback0;
      // Undeclared exception!
      try { 
        namePasswordCallbackHandler0.handle(callbackArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.spnego.NamePasswordCallbackHandler"", e);
      }
  }"
1201,"  public SpnegoEngineException(String message) {
    super(message);
  }","  public void test0()  throws Throwable  {
      SpnegoEngineException spnegoEngineException0 = new SpnegoEngineException("""");
      SpnegoEngineException spnegoEngineException1 = new SpnegoEngineException(""&-` PBS|?/NY*pi&V"", spnegoEngineException0);
}"
1202,"  public static SpnegoEngine instance(final String username,
                                      final String password,
                                      final String servicePrincipalName,
                                      final String realmName,
                                      final boolean useCanonicalHostname,
                                      final Map<String, String> customLoginConfig,
                                      final String loginContextName) {
    String key = """";
    if (customLoginConfig != null && !customLoginConfig.isEmpty()) {
      StringBuilder customLoginConfigKeyValues = new StringBuilder();
      for (String loginConfigKey : customLoginConfig.keySet()) {
        customLoginConfigKeyValues.append(loginConfigKey).append(""="")
          .append(customLoginConfig.get(loginConfigKey));
      }
      key = customLoginConfigKeyValues.toString();
    }
    if (username != null) {
      key += username;
    }
    if (loginContextName != null) {
      key += loginContextName;
    }
    if (!instances.containsKey(key)) {
      instances.put(key, new SpnegoEngine(username,
          password,
          servicePrincipalName,
          realmName,
          useCanonicalHostname,
          customLoginConfig,
          loginContextName,
          null));
    }
    return instances.get(key);
  }","  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance(""com.sun.security.auth.module.Krb5LoginModule"", ""com.sun.security.auth.module.Krb5LoginModule"", ""com.sun.security.auth.module.Krb5LoginModule"", ""com.sun.security.auth.module.Krb5LoginModule"", false, hashMap0, """");
}"
1203,"  public static SpnegoEngine instance(final String username,
                                      final String password,
                                      final String servicePrincipalName,
                                      final String realmName,
                                      final boolean useCanonicalHostname,
                                      final Map<String, String> customLoginConfig,
                                      final String loginContextName) {
    String key = """";
    if (customLoginConfig != null && !customLoginConfig.isEmpty()) {
      StringBuilder customLoginConfigKeyValues = new StringBuilder();
      for (String loginConfigKey : customLoginConfig.keySet()) {
        customLoginConfigKeyValues.append(loginConfigKey).append(""="")
          .append(customLoginConfig.get(loginConfigKey));
      }
      key = customLoginConfigKeyValues.toString();
    }
    if (username != null) {
      key += username;
    }
    if (loginContextName != null) {
      key += loginContextName;
    }
    if (!instances.containsKey(key)) {
      instances.put(key, new SpnegoEngine(username,
          password,
          servicePrincipalName,
          realmName,
          useCanonicalHostname,
          customLoginConfig,
          loginContextName,
          null));
    }
    return instances.get(key);
  }","  public void test1()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance(""org.ietf.jgss.GSSException"", ""com.sun.security.auth.module.Krb5LoginModule"", ""org.ietf.jgss.GSSException"", ""org.ietf.jgss.GSSException"", false, hashMap0, (String) null);
}"
1204,"  public static SpnegoEngine instance(final String username,
                                      final String password,
                                      final String servicePrincipalName,
                                      final String realmName,
                                      final boolean useCanonicalHostname,
                                      final Map<String, String> customLoginConfig,
                                      final String loginContextName) {
    String key = """";
    if (customLoginConfig != null && !customLoginConfig.isEmpty()) {
      StringBuilder customLoginConfigKeyValues = new StringBuilder();
      for (String loginConfigKey : customLoginConfig.keySet()) {
        customLoginConfigKeyValues.append(loginConfigKey).append(""="")
          .append(customLoginConfig.get(loginConfigKey));
      }
      key = customLoginConfigKeyValues.toString();
    }
    if (username != null) {
      key += username;
    }
    if (loginContextName != null) {
      key += loginContextName;
    }
    if (!instances.containsKey(key)) {
      instances.put(key, new SpnegoEngine(username,
          password,
          servicePrincipalName,
          realmName,
          useCanonicalHostname,
          customLoginConfig,
          loginContextName,
          null));
    }
    return instances.get(key);
  }","  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent(""gUd}ZwcSB[x]Mz#"", ""gUd}ZwcSB[x]Mz#"");
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance("""", """", """", """", true, hashMap0, """");
}"
1205,"  String getCompleteServicePrincipalName(String host) {
    String name;
    if (servicePrincipalName == null) {
      if (useCanonicalHostname) {
        host = getCanonicalHostname(host);
      }
      name = ""HTTP@"" + host;
    } else {
      name = servicePrincipalName;
      if (realmName != null && !name.contains(""@"")) {
        name += ""@"" + realmName;
      }
    }
    log.debug(""Service Principal Name is {}"", name);
    return name;
  }","  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SpnegoEngine spnegoEngine0 = new SpnegoEngine("""", """", """", (String) null, true, hashMap0, """", (SpnegoTokenGenerator) null);
      String string0 = spnegoEngine0.getCompleteServicePrincipalName(""Resolved hostname={} to canonicalHostname={}"");
}"
1206,"  public Configuration getLoginConfiguration() {
    if (customLoginConfig != null && !customLoginConfig.isEmpty()) {
      return new Configuration() {
        @Override
        public AppConfigurationEntry[] getAppConfigurationEntry(String name) {
          return new AppConfigurationEntry[] {
              new AppConfigurationEntry(""com.sun.security.auth.module.Krb5LoginModule"",
                  AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,
                  customLoginConfig)};
        }
      };
    }
    return null;
  }","  public void test4()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance((String) null, (String) null, ""YMq"", ""YMq"", false, hashMap0, ""YMq"");
      Configuration configuration0 = spnegoEngine0.getLoginConfiguration();
}"
1207,"  public Configuration getLoginConfiguration() {
    if (customLoginConfig != null && !customLoginConfig.isEmpty()) {
      return new Configuration() {
        @Override
        public AppConfigurationEntry[] getAppConfigurationEntry(String name) {
          return new AppConfigurationEntry[] {
              new AppConfigurationEntry(""com.sun.security.auth.module.Krb5LoginModule"",
                  AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,
                  customLoginConfig)};
        }
      };
    }
    return null;
  }","  public void test5()  throws Throwable  {
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance(""g:>O<4"", """", """", ""g:>O<4"", false, (Map<String, String>) null, """");
      Configuration configuration0 = spnegoEngine0.getLoginConfiguration();
}"
1208,"  public String generateToken(String host) throws SpnegoEngineException {
    GSSContext gssContext = null;
    byte[] token = null; // base64 decoded challenge
    Oid negotiationOid;

    try {
      /*
       * Using the SPNEGO OID is the correct method. Kerberos v5 works for IIS but not JBoss. Unwrapping the initial token when using SPNEGO OID looks like what is described
       * here...
       *
       * http://msdn.microsoft.com/en-us/library/ms995330.aspx
       *
       * Another helpful URL...
       *
       * http://publib.boulder.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=/com.ibm.websphere.express.doc/info/exp/ae/tsec_SPNEGO_token.html
       *
       * Unfortunately SPNEGO is JRE >=1.6.
       */

      // Try SPNEGO by default, fall back to Kerberos later if error
      negotiationOid = new Oid(SPNEGO_OID);

      boolean tryKerberos = false;
      String spn = getCompleteServicePrincipalName(host);
      try {
        GSSManager manager = GSSManager.getInstance();
        GSSName serverName = manager.createName(spn, GSSName.NT_HOSTBASED_SERVICE);
        GSSCredential myCred = null;
        if (username != null || loginContextName != null || (customLoginConfig != null && !customLoginConfig.isEmpty())) {
          String contextName = loginContextName;
          if (contextName == null) {
            contextName = """";
          }
          LoginContext loginContext = new LoginContext(contextName,
              null,
              getUsernamePasswordHandler(),
              getLoginConfiguration());
          loginContext.login();
          final Oid negotiationOidFinal = negotiationOid;
          final PrivilegedExceptionAction<GSSCredential> action = () -> manager.createCredential(null,
            GSSCredential.INDEFINITE_LIFETIME, negotiationOidFinal, GSSCredential.INITIATE_AND_ACCEPT);
          myCred = Subject.doAs(loginContext.getSubject(), action);
        }
        gssContext = manager.createContext(useCanonicalHostname ? serverName.canonicalize(negotiationOid) : serverName,
            negotiationOid,
            myCred,
            GSSContext.DEFAULT_LIFETIME);
        gssContext.requestMutualAuth(true);
        gssContext.requestCredDeleg(true);
      } catch (GSSException ex) {
        log.error(""generateToken"", ex);
        // BAD MECH means we are likely to be using 1.5, fall back to Kerberos MECH.
        // Rethrow any other exception.
        if (ex.getMajor() == GSSException.BAD_MECH) {
          log.debug(""GSSException BAD_MECH, retry with Kerberos MECH"");
          tryKerberos = true;
        } else {
          throw ex;
        }

      }
      if (tryKerberos) {
        /* Kerberos v5 GSS-API mechanism defined in RFC 1964. */
        log.debug(""Using Kerberos MECH {}"", KERBEROS_OID);
        negotiationOid = new Oid(KERBEROS_OID);
        GSSManager manager = GSSManager.getInstance();
        GSSName serverName = manager.createName(spn, GSSName.NT_HOSTBASED_SERVICE);
        gssContext = manager.createContext(serverName.canonicalize(negotiationOid), negotiationOid, null,
                GSSContext.DEFAULT_LIFETIME);
        gssContext.requestMutualAuth(true);
        gssContext.requestCredDeleg(true);
      }

      // TODO suspicious: this will always be null because no value has been assigned before. Assign directly?
      if (token == null) {
        token = new byte[0];
      }

      token = gssContext.initSecContext(token, 0, token.length);
      if (token == null) {
        throw new SpnegoEngineException(""GSS security context initialization failed"");
      }

      /*
       * IIS accepts Kerberos and SPNEGO tokens. Some other servers Jboss, Glassfish? seem to only accept SPNEGO. Below wraps Kerberos into SPNEGO token.
       */
      if (spnegoGenerator != null && negotiationOid.toString().equals(KERBEROS_OID)) {
        token = spnegoGenerator.generateSpnegoDERObject(token);
      }

      gssContext.dispose();

      String tokenstr = Base64.getEncoder().encodeToString(token);
      log.debug(""Sending response '{}' back to the server"", tokenstr);

      return tokenstr;
    } catch (GSSException gsse) {
      log.error(""generateToken"", gsse);
      if (gsse.getMajor() == GSSException.DEFECTIVE_CREDENTIAL || gsse.getMajor() == GSSException.CREDENTIALS_EXPIRED)
        throw new SpnegoEngineException(gsse.getMessage(), gsse);
      if (gsse.getMajor() == GSSException.NO_CRED)
        throw new SpnegoEngineException(gsse.getMessage(), gsse);
      if (gsse.getMajor() == GSSException.DEFECTIVE_TOKEN || gsse.getMajor() == GSSException.DUPLICATE_TOKEN
              || gsse.getMajor() == GSSException.OLD_TOKEN)
        throw new SpnegoEngineException(gsse.getMessage(), gsse);
      // other error
      throw new SpnegoEngineException(gsse.getMessage());
    } catch (IOException | LoginException | PrivilegedActionException ex) {
      throw new SpnegoEngineException(ex.getMessage());
    }
  }","  public void test6()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance(""A later token has already been processed"", ""A later token has already been processed"", ""FTeu?Ry @Jk&1+"", """", false, hashMap0, ""FTeu?Ry @Jk&1+"");
      // Undeclared exception!
      try { 
        spnegoEngine0.generateToken("""");
        fail(""Expecting exception: VerifyError"");
      } catch(VerifyError e) {
         //
         // Bad return type
         // Exception Details:
         //   Location:
         //     org/ietf/jgss/GSSManager.getInstance()Lorg/ietf/jgss/GSSManager; @10: areturn
         //   Reason:
         //     Type 'sun/security/jgss/GSSManagerImpl' (current frame, stack[0]) is not assignable to 'org/ietf/jgss/GSSManager' (from method signature)
         //   Current Frame:
         //     bci: @10
         //     flags: { }
         //     locals: { }
         //     stack: { 'sun/security/jgss/GSSManagerImpl' }
         //   Bytecode:
         //     0x0000000: b800 18bb 001a 59b7 001b b0            
         //
         verifyException(""org.asynchttpclient.spnego.SpnegoEngine"", e);
      }
  }"
1209,"  public String generateToken(String host) throws SpnegoEngineException {
    GSSContext gssContext = null;
    byte[] token = null; // base64 decoded challenge
    Oid negotiationOid;

    try {
      /*
       * Using the SPNEGO OID is the correct method. Kerberos v5 works for IIS but not JBoss. Unwrapping the initial token when using SPNEGO OID looks like what is described
       * here...
       *
       * http://msdn.microsoft.com/en-us/library/ms995330.aspx
       *
       * Another helpful URL...
       *
       * http://publib.boulder.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=/com.ibm.websphere.express.doc/info/exp/ae/tsec_SPNEGO_token.html
       *
       * Unfortunately SPNEGO is JRE >=1.6.
       */

      // Try SPNEGO by default, fall back to Kerberos later if error
      negotiationOid = new Oid(SPNEGO_OID);

      boolean tryKerberos = false;
      String spn = getCompleteServicePrincipalName(host);
      try {
        GSSManager manager = GSSManager.getInstance();
        GSSName serverName = manager.createName(spn, GSSName.NT_HOSTBASED_SERVICE);
        GSSCredential myCred = null;
        if (username != null || loginContextName != null || (customLoginConfig != null && !customLoginConfig.isEmpty())) {
          String contextName = loginContextName;
          if (contextName == null) {
            contextName = """";
          }
          LoginContext loginContext = new LoginContext(contextName,
              null,
              getUsernamePasswordHandler(),
              getLoginConfiguration());
          loginContext.login();
          final Oid negotiationOidFinal = negotiationOid;
          final PrivilegedExceptionAction<GSSCredential> action = () -> manager.createCredential(null,
            GSSCredential.INDEFINITE_LIFETIME, negotiationOidFinal, GSSCredential.INITIATE_AND_ACCEPT);
          myCred = Subject.doAs(loginContext.getSubject(), action);
        }
        gssContext = manager.createContext(useCanonicalHostname ? serverName.canonicalize(negotiationOid) : serverName,
            negotiationOid,
            myCred,
            GSSContext.DEFAULT_LIFETIME);
        gssContext.requestMutualAuth(true);
        gssContext.requestCredDeleg(true);
      } catch (GSSException ex) {
        log.error(""generateToken"", ex);
        // BAD MECH means we are likely to be using 1.5, fall back to Kerberos MECH.
        // Rethrow any other exception.
        if (ex.getMajor() == GSSException.BAD_MECH) {
          log.debug(""GSSException BAD_MECH, retry with Kerberos MECH"");
          tryKerberos = true;
        } else {
          throw ex;
        }

      }
      if (tryKerberos) {
        /* Kerberos v5 GSS-API mechanism defined in RFC 1964. */
        log.debug(""Using Kerberos MECH {}"", KERBEROS_OID);
        negotiationOid = new Oid(KERBEROS_OID);
        GSSManager manager = GSSManager.getInstance();
        GSSName serverName = manager.createName(spn, GSSName.NT_HOSTBASED_SERVICE);
        gssContext = manager.createContext(serverName.canonicalize(negotiationOid), negotiationOid, null,
                GSSContext.DEFAULT_LIFETIME);
        gssContext.requestMutualAuth(true);
        gssContext.requestCredDeleg(true);
      }

      // TODO suspicious: this will always be null because no value has been assigned before. Assign directly?
      if (token == null) {
        token = new byte[0];
      }

      token = gssContext.initSecContext(token, 0, token.length);
      if (token == null) {
        throw new SpnegoEngineException(""GSS security context initialization failed"");
      }

      /*
       * IIS accepts Kerberos and SPNEGO tokens. Some other servers Jboss, Glassfish? seem to only accept SPNEGO. Below wraps Kerberos into SPNEGO token.
       */
      if (spnegoGenerator != null && negotiationOid.toString().equals(KERBEROS_OID)) {
        token = spnegoGenerator.generateSpnegoDERObject(token);
      }

      gssContext.dispose();

      String tokenstr = Base64.getEncoder().encodeToString(token);
      log.debug(""Sending response '{}' back to the server"", tokenstr);

      return tokenstr;
    } catch (GSSException gsse) {
      log.error(""generateToken"", gsse);
      if (gsse.getMajor() == GSSException.DEFECTIVE_CREDENTIAL || gsse.getMajor() == GSSException.CREDENTIALS_EXPIRED)
        throw new SpnegoEngineException(gsse.getMessage(), gsse);
      if (gsse.getMajor() == GSSException.NO_CRED)
        throw new SpnegoEngineException(gsse.getMessage(), gsse);
      if (gsse.getMajor() == GSSException.DEFECTIVE_TOKEN || gsse.getMajor() == GSSException.DUPLICATE_TOKEN
              || gsse.getMajor() == GSSException.OLD_TOKEN)
        throw new SpnegoEngineException(gsse.getMessage(), gsse);
      // other error
      throw new SpnegoEngineException(gsse.getMessage());
    } catch (IOException | LoginException | PrivilegedActionException ex) {
      throw new SpnegoEngineException(ex.getMessage());
    }
  }","  public void test7()  throws Throwable  {
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance((String) null, (String) null, (String) null, (String) null, false, (Map<String, String>) null, ""org.asynchttpclient.spnego.SpnegoEngine"");
      // Undeclared exception!
      try { 
        spnegoEngine0.generateToken(""HTTP@"");
        fail(""Expecting exception: VerifyError"");
      } catch(VerifyError e) {
         //
         // Bad return type
         // Exception Details:
         //   Location:
         //     org/ietf/jgss/GSSManager.getInstance()Lorg/ietf/jgss/GSSManager; @10: areturn
         //   Reason:
         //     Type 'sun/security/jgss/GSSManagerImpl' (current frame, stack[0]) is not assignable to 'org/ietf/jgss/GSSManager' (from method signature)
         //   Current Frame:
         //     bci: @10
         //     flags: { }
         //     locals: { }
         //     stack: { 'sun/security/jgss/GSSManagerImpl' }
         //   Bytecode:
         //     0x0000000: b800 18bb 001a 59b7 001b b0            
         //
         verifyException(""org.asynchttpclient.spnego.SpnegoEngine"", e);
      }
  }"
1210,"  String getCompleteServicePrincipalName(String host) {
    String name;
    if (servicePrincipalName == null) {
      if (useCanonicalHostname) {
        host = getCanonicalHostname(host);
      }
      name = ""HTTP@"" + host;
    } else {
      name = servicePrincipalName;
      if (realmName != null && !name.contains(""@"")) {
        name += ""@"" + realmName;
      }
    }
    log.debug(""Service Principal Name is {}"", name);
    return name;
  }","  public void test8()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance(""sHtgOD^@"", ""sHtgOD^@"", ""sHtgOD^@"", (String) null, true, hashMap0, ""sHtgOD^@"");
      String string0 = spnegoEngine0.getCompleteServicePrincipalName((String) null);
}"
1211,"  public String generateToken(String host) throws SpnegoEngineException {
    GSSContext gssContext = null;
    byte[] token = null; // base64 decoded challenge
    Oid negotiationOid;

    try {
      /*
       * Using the SPNEGO OID is the correct method. Kerberos v5 works for IIS but not JBoss. Unwrapping the initial token when using SPNEGO OID looks like what is described
       * here...
       *
       * http://msdn.microsoft.com/en-us/library/ms995330.aspx
       *
       * Another helpful URL...
       *
       * http://publib.boulder.ibm.com/infocenter/wasinfo/v7r0/index.jsp?topic=/com.ibm.websphere.express.doc/info/exp/ae/tsec_SPNEGO_token.html
       *
       * Unfortunately SPNEGO is JRE >=1.6.
       */

      // Try SPNEGO by default, fall back to Kerberos later if error
      negotiationOid = new Oid(SPNEGO_OID);

      boolean tryKerberos = false;
      String spn = getCompleteServicePrincipalName(host);
      try {
        GSSManager manager = GSSManager.getInstance();
        GSSName serverName = manager.createName(spn, GSSName.NT_HOSTBASED_SERVICE);
        GSSCredential myCred = null;
        if (username != null || loginContextName != null || (customLoginConfig != null && !customLoginConfig.isEmpty())) {
          String contextName = loginContextName;
          if (contextName == null) {
            contextName = """";
          }
          LoginContext loginContext = new LoginContext(contextName,
              null,
              getUsernamePasswordHandler(),
              getLoginConfiguration());
          loginContext.login();
          final Oid negotiationOidFinal = negotiationOid;
          final PrivilegedExceptionAction<GSSCredential> action = () -> manager.createCredential(null,
            GSSCredential.INDEFINITE_LIFETIME, negotiationOidFinal, GSSCredential.INITIATE_AND_ACCEPT);
          myCred = Subject.doAs(loginContext.getSubject(), action);
        }
        gssContext = manager.createContext(useCanonicalHostname ? serverName.canonicalize(negotiationOid) : serverName,
            negotiationOid,
            myCred,
            GSSContext.DEFAULT_LIFETIME);
        gssContext.requestMutualAuth(true);
        gssContext.requestCredDeleg(true);
      } catch (GSSException ex) {
        log.error(""generateToken"", ex);
        // BAD MECH means we are likely to be using 1.5, fall back to Kerberos MECH.
        // Rethrow any other exception.
        if (ex.getMajor() == GSSException.BAD_MECH) {
          log.debug(""GSSException BAD_MECH, retry with Kerberos MECH"");
          tryKerberos = true;
        } else {
          throw ex;
        }

      }
      if (tryKerberos) {
        /* Kerberos v5 GSS-API mechanism defined in RFC 1964. */
        log.debug(""Using Kerberos MECH {}"", KERBEROS_OID);
        negotiationOid = new Oid(KERBEROS_OID);
        GSSManager manager = GSSManager.getInstance();
        GSSName serverName = manager.createName(spn, GSSName.NT_HOSTBASED_SERVICE);
        gssContext = manager.createContext(serverName.canonicalize(negotiationOid), negotiationOid, null,
                GSSContext.DEFAULT_LIFETIME);
        gssContext.requestMutualAuth(true);
        gssContext.requestCredDeleg(true);
      }

      // TODO suspicious: this will always be null because no value has been assigned before. Assign directly?
      if (token == null) {
        token = new byte[0];
      }

      token = gssContext.initSecContext(token, 0, token.length);
      if (token == null) {
        throw new SpnegoEngineException(""GSS security context initialization failed"");
      }

      /*
       * IIS accepts Kerberos and SPNEGO tokens. Some other servers Jboss, Glassfish? seem to only accept SPNEGO. Below wraps Kerberos into SPNEGO token.
       */
      if (spnegoGenerator != null && negotiationOid.toString().equals(KERBEROS_OID)) {
        token = spnegoGenerator.generateSpnegoDERObject(token);
      }

      gssContext.dispose();

      String tokenstr = Base64.getEncoder().encodeToString(token);
      log.debug(""Sending response '{}' back to the server"", tokenstr);

      return tokenstr;
    } catch (GSSException gsse) {
      log.error(""generateToken"", gsse);
      if (gsse.getMajor() == GSSException.DEFECTIVE_CREDENTIAL || gsse.getMajor() == GSSException.CREDENTIALS_EXPIRED)
        throw new SpnegoEngineException(gsse.getMessage(), gsse);
      if (gsse.getMajor() == GSSException.NO_CRED)
        throw new SpnegoEngineException(gsse.getMessage(), gsse);
      if (gsse.getMajor() == GSSException.DEFECTIVE_TOKEN || gsse.getMajor() == GSSException.DUPLICATE_TOKEN
              || gsse.getMajor() == GSSException.OLD_TOKEN)
        throw new SpnegoEngineException(gsse.getMessage(), gsse);
      // other error
      throw new SpnegoEngineException(gsse.getMessage());
    } catch (IOException | LoginException | PrivilegedActionException ex) {
      throw new SpnegoEngineException(ex.getMessage());
    }
  }","  public void test9()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance((String) null, (String) null, ""YMq"", ""YMq"", false, hashMap0, ""YMq"");
      // Undeclared exception!
      try { 
        spnegoEngine0.generateToken((String) null);
        fail(""Expecting exception: VerifyError"");
      } catch(VerifyError e) {
         //
         // Bad return type
         // Exception Details:
         //   Location:
         //     org/ietf/jgss/GSSManager.getInstance()Lorg/ietf/jgss/GSSManager; @10: areturn
         //   Reason:
         //     Type 'sun/security/jgss/GSSManagerImpl' (current frame, stack[0]) is not assignable to 'org/ietf/jgss/GSSManager' (from method signature)
         //   Current Frame:
         //     bci: @10
         //     flags: { }
         //     locals: { }
         //     stack: { 'sun/security/jgss/GSSManagerImpl' }
         //   Bytecode:
         //     0x0000000: b800 18bb 001a 59b7 001b b0            
         //
         verifyException(""org.asynchttpclient.spnego.SpnegoEngine"", e);
      }
  }"
1212,"  String getCompleteServicePrincipalName(String host) {
    String name;
    if (servicePrincipalName == null) {
      if (useCanonicalHostname) {
        host = getCanonicalHostname(host);
      }
      name = ""HTTP@"" + host;
    } else {
      name = servicePrincipalName;
      if (realmName != null && !name.contains(""@"")) {
        name += ""@"" + realmName;
      }
    }
    log.debug(""Service Principal Name is {}"", name);
    return name;
  }","  public void test10()  throws Throwable  {
      SpnegoEngine spnegoEngine0 = new SpnegoEngine();
      String string0 = spnegoEngine0.getCompleteServicePrincipalName(""GSSException _RO&Q"");
}"
1213,"  public Configuration getLoginConfiguration() {
    if (customLoginConfig != null && !customLoginConfig.isEmpty()) {
      return new Configuration() {
        @Override
        public AppConfigurationEntry[] getAppConfigurationEntry(String name) {
          return new AppConfigurationEntry[] {
              new AppConfigurationEntry(""com.sun.security.auth.module.Krb5LoginModule"",
                  AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,
                  customLoginConfig)};
        }
      };
    }
    return null;
  }","  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, ""sHtgOD^@"");
      SpnegoEngine spnegoEngine0 = SpnegoEngine.instance(""sHtgOD^@"", ""sHtgOD^@"", ""sHtgOD^@"", (String) null, true, hashMap0, ""sHtgOD^@"");
      Configuration configuration0 = spnegoEngine0.getLoginConfiguration();
}"
1214,"  public static long unpreciseMillisTime() {
    return System.currentTimeMillis();
  }","  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      long long0 = DateUtils.unpreciseMillisTime();
}"
1215,"  public static long unpreciseMillisTime() {
    return System.currentTimeMillis();
  }","  public void test1()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      long long0 = DateUtils.unpreciseMillisTime();
}"
1216,"  public static long unpreciseMillisTime() {
    return System.currentTimeMillis();
  }","  public void test2()  throws Throwable  {
      long long0 = DateUtils.unpreciseMillisTime();
}"
1217,"  public static String extractContentTypeBoundaryAttribute(String contentType) {
    return extractContentTypeAttribute(contentType, CONTENT_TYPE_BOUNDARY_ATTRIBUTE);
  }","  public void test0()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute(""boundary=ul6x#+"");
}"
1218,"  public static String extractContentTypeBoundaryAttribute(String contentType) {
    return extractContentTypeAttribute(contentType, CONTENT_TYPE_BOUNDARY_ATTRIBUTE);
  }","  public void test1()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute(""boundary=ul6x#+"");
}"
1219,"  public static String extractContentTypeBoundaryAttribute(String contentType) {
    return extractContentTypeAttribute(contentType, CONTENT_TYPE_BOUNDARY_ATTRIBUTE);
  }","  public void test2()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute(""^npw~3boundary=#"");
}"
1220,"  public static String extractContentTypeBoundaryAttribute(String contentType) {
    return extractContentTypeAttribute(contentType, CONTENT_TYPE_BOUNDARY_ATTRIBUTE);
  }","  public void test3()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute(""^npw~3boundary=#"");
}"
1221,,"  public void test4()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1222,,"  public void test5()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1223,,"  public void test6()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1224,,"  public void test7()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1225,,"  public void test8()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1226,,"  public void test9()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1227,,"  public void test10()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1228,,"  public void test11()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1229,,"  public void test12()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1230,,"  public void test13()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1231,,"  public void test14()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1232,,"  public void test15()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
}"
1233,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test16()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1234,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test17()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1235,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test18()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1236,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test19()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1237,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test20()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1238,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test21()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1239,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test22()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1240,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test23()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1241,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test24()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1242,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test25()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1243,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test26()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1244,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test27()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1245,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test28()  throws Throwable  {
      Uri uri0 = new Uri(""r<;)05@[[Sv$HI"", ""charset="", ""r<;)05@[[Sv$HI"", 815, "")g"", ""r<;)05@[[Sv$HI"", ""!)vGZmkd*p"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1246,,"  public void test29()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1247,,"  public void test30()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1248,,"  public void test31()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1249,,"  public void test32()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1250,,"  public void test33()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1251,,"  public void test34()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1252,,"  public void test35()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1253,,"  public void test36()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1254,,"  public void test37()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1255,,"  public void test38()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1256,,"  public void test39()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1257,,"  public void test40()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
}"
1258,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test41()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1259,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test42()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1260,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test43()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1261,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test44()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1262,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test45()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1263,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test46()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1264,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test47()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1265,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test48()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1266,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test49()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1267,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test50()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1268,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test51()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1269,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test52()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1270,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test53()  throws Throwable  {
      Uri uri0 = new Uri(""Ksh}\""C,L"", ""Ksh}\""C,L"", ""=]nI`!jwX-"", 318, ""Ksh}\""C,L"", ""bW"", ""=]nI`!jwX-"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1271,,"  public void test54()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1272,,"  public void test55()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1273,,"  public void test56()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1274,,"  public void test57()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1275,,"  public void test58()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1276,,"  public void test59()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1277,,"  public void test60()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1278,,"  public void test61()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1279,,"  public void test62()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1280,,"  public void test63()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1281,,"  public void test64()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1282,,"  public void test65()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
}"
1283,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test66()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1284,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test67()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1285,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test68()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1286,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test69()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1287,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test70()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1288,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test71()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1289,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test72()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1290,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test73()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1291,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test74()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1292,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test75()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1293,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test76()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1294,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test77()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1295,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test78()  throws Throwable  {
      Uri uri0 = new Uri(""~(|-\""&Fv^CY["", ""~(|-\""&Fv^CY["", ""85JB<)]b@jIjRF"", (-403371614), """", "" boundary=SovFVXjAIIFeXnQ3jJ2_0ZoRnFdcfdgV2"", ""w5"");
      String string0 = HttpUtils.hostHeader(uri0);
}"
1296,"  public static CharSequence filterOutBrotliFromAcceptEncoding(String acceptEncoding) {
    // we don't support Brotly ATM
    if (acceptEncoding.endsWith(BROTLY_ACCEPT_ENCODING_SUFFIX)) {
      return acceptEncoding.subSequence(0, acceptEncoding.length() - BROTLY_ACCEPT_ENCODING_SUFFIX.length());
    }
    return acceptEncoding;
  }","  public void test79()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding("", br"");
}"
1297,"  public static CharSequence filterOutBrotliFromAcceptEncoding(String acceptEncoding) {
    // we don't support Brotly ATM
    if (acceptEncoding.endsWith(BROTLY_ACCEPT_ENCODING_SUFFIX)) {
      return acceptEncoding.subSequence(0, acceptEncoding.length() - BROTLY_ACCEPT_ENCODING_SUFFIX.length());
    }
    return acceptEncoding;
  }","  public void test80()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding("", br"");
}"
1298,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.urlEncodeFormParams((List<Param>) null, (Charset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.HttpUtils"", e);
      }
  }"
1299,,"  public void test82()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached(""io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe"");
}"
1300,,"  public void test83()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached(""io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe"");
}"
1301,,"  public void test84()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached(""io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe"");
}"
1302,,"  public void test85()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached(""io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe"");
}"
1303,,"  public void test86()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached(""io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe"");
}"
1304,,"  public void test87()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached(""io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe"");
}"
1305,,"  public void test88()  throws Throwable  {
      AsciiString asciiString0 = AsciiString.cached(""io.netty.channel.kqueue.AbstractKQueueServerChannel$KQueueServerSocketUnsafe"");
}"
1306,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.originHeader((Uri) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.HttpUtils"", e);
      }
  }"
1307,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test90()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.hostHeader((Uri) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.HttpUtils"", e);
      }
  }"
1308,"  public static boolean followRedirect(AsyncHttpClientConfig config, Request request) {
    return request.getFollowRedirect() != null ? request.getFollowRedirect() : config.isFollowRedirect();
  }","  public void test91()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        HttpUtils.followRedirect(asyncHttpClientConfig0, (Request) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.HttpUtils"", e);
      }
  }"
1309,"  public static CharSequence filterOutBrotliFromAcceptEncoding(String acceptEncoding) {
    // we don't support Brotly ATM
    if (acceptEncoding.endsWith(BROTLY_ACCEPT_ENCODING_SUFFIX)) {
      return acceptEncoding.subSequence(0, acceptEncoding.length() - BROTLY_ACCEPT_ENCODING_SUFFIX.length());
    }
    return acceptEncoding;
  }","  public void test92()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.filterOutBrotliFromAcceptEncoding((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
1310,"  public static Charset extractContentTypeCharsetAttribute(String contentType) {
    String charsetName = extractContentTypeAttribute(contentType, CONTENT_TYPE_CHARSET_ATTRIBUTE);
    return charsetName != null ? Charset.forName(charsetName) : null;
  }","  public void test93()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.extractContentTypeCharsetAttribute(""http.acharset=t=omain"");
        fail(""Expecting exception: IllegalCharsetNameException"");
      } catch(IllegalCharsetNameException e) {
         //
         // t=omain
         //
         verifyException(""java.nio.charset.Charset"", e);
      }
  }"
1311,"  public static CharSequence filterOutBrotliFromAcceptEncoding(String acceptEncoding) {
    // we don't support Brotly ATM
    if (acceptEncoding.endsWith(BROTLY_ACCEPT_ENCODING_SUFFIX)) {
      return acceptEncoding.subSequence(0, acceptEncoding.length() - BROTLY_ACCEPT_ENCODING_SUFFIX.length());
    }
    return acceptEncoding;
  }","  public void test94()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding("" boundary=6OBnz0qm2eUf4zwTWtROvm9-IdtfwLBPaYdx1, br"");
}"
1312,"  public static CharSequence filterOutBrotliFromAcceptEncoding(String acceptEncoding) {
    // we don't support Brotly ATM
    if (acceptEncoding.endsWith(BROTLY_ACCEPT_ENCODING_SUFFIX)) {
      return acceptEncoding.subSequence(0, acceptEncoding.length() - BROTLY_ACCEPT_ENCODING_SUFFIX.length());
    }
    return acceptEncoding;
  }","  public void test95()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding("" boundary=6OBnz0qm2eUf4zwTWtROvm9-IdtfwLBPaYdx1, br"");
}"
1313,"  public static CharSequence filterOutBrotliFromAcceptEncoding(String acceptEncoding) {
    // we don't support Brotly ATM
    if (acceptEncoding.endsWith(BROTLY_ACCEPT_ENCODING_SUFFIX)) {
      return acceptEncoding.subSequence(0, acceptEncoding.length() - BROTLY_ACCEPT_ENCODING_SUFFIX.length());
    }
    return acceptEncoding;
  }","  public void test96()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding("";"");
}"
1314,"  public static CharSequence filterOutBrotliFromAcceptEncoding(String acceptEncoding) {
    // we don't support Brotly ATM
    if (acceptEncoding.endsWith(BROTLY_ACCEPT_ENCODING_SUFFIX)) {
      return acceptEncoding.subSequence(0, acceptEncoding.length() - BROTLY_ACCEPT_ENCODING_SUFFIX.length());
    }
    return acceptEncoding;
  }","  public void test97()  throws Throwable  {
      CharSequence charSequence0 = HttpUtils.filterOutBrotliFromAcceptEncoding("";"");
}"
1315,,"  public void test98()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1316,,"  public void test99()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1317,,"  public void test100()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1318,,"  public void test101()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1319,,"  public void test102()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1320,,"  public void test103()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1321,,"  public void test104()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
}"
1322,,"  public void test105()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
}"
1323,,"  public void test106()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
}"
1324,,"  public void test107()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
}"
1325,,"  public void test108()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
}"
1326,,"  public void test109()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
}"
1327,,"  public void test110()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
}"
1328,,"  public void test111()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
}"
1329,,"  public void test112()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
}"
1330,,"  public void test113()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
}"
1331,,"  public void test114()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
}"
1332,,"  public void test115()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
}"
1333,,"  public void test116()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
}"
1334,,"  public void test117()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
}"
1335,,"  public void test118()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1336,,"  public void test119()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1337,,"  public void test120()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1338,,"  public void test121()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1339,,"  public void test122()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1340,,"  public void test123()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1341,,"  public void test124()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1342,,"  public void test125()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1343,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test126()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1344,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test127()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1345,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test128()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1346,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test129()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1347,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test130()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1348,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test131()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1349,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test132()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1350,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test133()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1351,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test134()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1352,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test135()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1353,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test136()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1354,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test137()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1355,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test138()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1356,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test139()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1357,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test140()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1358,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test141()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1359,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test142()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1360,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test143()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1361,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test144()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1362,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test145()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1363,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test146()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1364,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test147()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1365,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test148()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""*/*"", (String) null);
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1366,,"  public void test149()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1367,,"  public void test150()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1368,,"  public void test151()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1369,,"  public void test152()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1370,,"  public void test153()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1371,,"  public void test154()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
}"
1372,,"  public void test155()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
}"
1373,,"  public void test156()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
}"
1374,,"  public void test157()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
}"
1375,,"  public void test158()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
}"
1376,,"  public void test159()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
}"
1377,,"  public void test160()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
}"
1378,,"  public void test161()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
}"
1379,,"  public void test162()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
}"
1380,,"  public void test163()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
}"
1381,,"  public void test164()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
}"
1382,,"  public void test165()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
}"
1383,,"  public void test166()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
}"
1384,,"  public void test167()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
}"
1385,,"  public void test168()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
}"
1386,,"  public void test169()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1387,,"  public void test170()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1388,,"  public void test171()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1389,,"  public void test172()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1390,,"  public void test173()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1391,,"  public void test174()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1392,,"  public void test175()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1393,,"  public void test176()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
}"
1394,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test177()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1395,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test178()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1396,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test179()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1397,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test180()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1398,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test181()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1399,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test182()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1400,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test183()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1401,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test184()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1402,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test185()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1403,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test186()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1404,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test187()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1405,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test188()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1406,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test189()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1407,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test190()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1408,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test191()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1409,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test192()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1410,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test193()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1411,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test194()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1412,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test195()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1413,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test196()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1414,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test197()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1415,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test198()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1416,"  public static ByteBuffer urlEncodeFormParams(List<Param> params, Charset charset) {
    return StringUtils.charSequence2ByteBuffer(urlEncodeFormParams0(params, charset), US_ASCII);
  }","  public void test199()  throws Throwable  {
      Stack<Param> stack0 = new Stack<Param>();
      Param param0 = new Param(""ISY+\"""", ""lift is null"");
      boolean boolean0 = stack0.add(param0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteBuffer byteBuffer0 = HttpUtils.urlEncodeFormParams(stack0, charset0);
}"
1417,"  public static Charset extractContentTypeCharsetAttribute(String contentType) {
    String charsetName = extractContentTypeAttribute(contentType, CONTENT_TYPE_CHARSET_ATTRIBUTE);
    return charsetName != null ? Charset.forName(charsetName) : null;
  }","  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUtils.extractContentTypeCharsetAttribute(""icharset=o;=dx"");
        fail(""Expecting exception: UnsupportedCharsetException"");
      } catch(UnsupportedCharsetException e) {
         //
         // o
         //
         verifyException(""java.nio.charset.Charset"", e);
      }
  }"
1418,"  public static String extractContentTypeBoundaryAttribute(String contentType) {
    return extractContentTypeAttribute(contentType, CONTENT_TYPE_BOUNDARY_ATTRIBUTE);
  }","  public void test201()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("" boundary=e6xcwikbybtfytpwsfe2hgb8charset=kc1nji8, br"");
}"
1419,"  public static String extractContentTypeBoundaryAttribute(String contentType) {
    return extractContentTypeAttribute(contentType, CONTENT_TYPE_BOUNDARY_ATTRIBUTE);
  }","  public void test202()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute("" boundary=e6xcwikbybtfytpwsfe2hgb8charset=kc1nji8, br"");
}"
1420,"  public static String extractContentTypeBoundaryAttribute(String contentType) {
    return extractContentTypeAttribute(contentType, CONTENT_TYPE_BOUNDARY_ATTRIBUTE);
  }","  public void test203()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute(""boundary="");
}"
1421,"  public static String extractContentTypeBoundaryAttribute(String contentType) {
    return extractContentTypeAttribute(contentType, CONTENT_TYPE_BOUNDARY_ATTRIBUTE);
  }","  public void test204()  throws Throwable  {
      String string0 = HttpUtils.extractContentTypeBoundaryAttribute((String) null);
}"
1422,"  public static Charset extractContentTypeCharsetAttribute(String contentType) {
    String charsetName = extractContentTypeAttribute(contentType, CONTENT_TYPE_CHARSET_ATTRIBUTE);
    return charsetName != null ? Charset.forName(charsetName) : null;
  }","  public void test205()  throws Throwable  {
      Charset charset0 = HttpUtils.extractContentTypeCharsetAttribute("""");
}"
1423,,"  public void test206()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1424,,"  public void test207()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1425,,"  public void test208()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1426,,"  public void test209()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1427,,"  public void test210()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1428,,"  public void test211()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1429,,"  public void test212()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1430,,"  public void test213()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1431,,"  public void test214()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1432,,"  public void test215()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1433,,"  public void test216()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1434,,"  public void test217()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
}"
1435,,"  public void test218()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1436,,"  public void test219()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1437,,"  public void test220()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1438,,"  public void test221()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1439,,"  public void test222()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1440,,"  public void test223()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1441,,"  public void test224()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1442,,"  public void test225()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1443,,"  public void test226()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1444,,"  public void test227()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1445,,"  public void test228()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1446,,"  public void test229()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1447,,"  public void test230()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1448,,"  public void test231()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1449,,"  public void test232()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1450,,"  public void test233()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1451,,"  public void test234()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1452,,"  public void test235()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1453,,"  public void test236()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1454,,"  public void test237()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1455,,"  public void test238()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1456,,"  public void test239()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1457,,"  public void test240()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1458,,"  public void test241()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1459,,"  public void test242()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1460,,"  public void test243()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
}"
1461,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test244()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1462,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test245()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1463,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test246()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1464,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test247()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1465,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test248()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1466,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test249()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1467,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test250()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1468,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test251()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1469,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test252()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1470,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test253()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1471,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test254()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1472,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test255()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1473,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test256()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1474,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test257()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1475,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test258()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1476,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test259()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1477,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test260()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1478,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test261()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1479,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test262()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1480,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test263()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1481,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test264()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1482,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test265()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1483,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test266()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1484,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test267()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1485,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test268()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1486,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test269()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1487,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test270()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1488,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test271()  throws Throwable  {
      Uri uri0 = new Uri(""+VR4W7fw;BJo>1"", ""o@"", ""=Ft$vI"", (-1), ""lLD"", ""o@"", (String) null);
      Uri uri1 = uri0.withNewScheme(""https"");
      String string0 = HttpUtils.originHeader(uri1);
}"
1489,,"  public void test272()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1490,,"  public void test273()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1491,,"  public void test274()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1492,,"  public void test275()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1493,,"  public void test276()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1494,,"  public void test277()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1495,,"  public void test278()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1496,,"  public void test279()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1497,,"  public void test280()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1498,,"  public void test281()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1499,,"  public void test282()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1500,,"  public void test283()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
}"
1501,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test284()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1502,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test285()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1503,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test286()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1504,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test287()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1505,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test288()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1506,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test289()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1507,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test290()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1508,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test291()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1509,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test292()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1510,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test293()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1511,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test294()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1512,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test295()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1513,"  public static String originHeader(Uri uri) {
    StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();
    sb.append(uri.isSecured() ? ""https://"" : ""http://"").append(uri.getHost());
    if (uri.getExplicitPort() != uri.getSchemeDefaultPort()) {
      sb.append(':').append(uri.getPort());
    }
    return sb.toString();
  }","  public void test296()  throws Throwable  {
      Uri uri0 = new Uri(""#*NK}=rvL;%]v"", (String) null, ""#*NK}=rvL;%]v"", 61, """", ""F(z/`~V9"", ""F(z/`~V9"");
      String string0 = HttpUtils.originHeader(uri0);
}"
1514,,"  public void test297()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1515,,"  public void test298()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1516,,"  public void test299()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1517,,"  public void test300()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1518,,"  public void test301()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1519,,"  public void test302()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1520,,"  public void test303()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1521,,"  public void test304()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1522,,"  public void test305()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1523,,"  public void test306()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1524,,"  public void test307()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1525,,"  public void test308()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
}"
1526,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test309()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1527,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test310()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1528,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test311()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1529,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test312()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1530,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test313()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1531,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test314()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1532,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test315()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1533,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test316()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1534,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test317()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1535,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test318()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1536,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test319()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1537,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test320()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1538,"  public static String hostHeader(Uri uri) {
    String host = uri.getHost();
    int port = uri.getPort();
    return port == -1 || port == uri.getSchemeDefaultPort() ? host : host + "":"" + port;
  }","  public void test321()  throws Throwable  {
      Uri uri0 = new Uri(""@"", ""@"", ""htcharset=arset=omain"", (-1), "", br"", ""@"", (String) null);
      String string0 = HttpUtils.hostHeader(uri0);
}"
1539,,"  public void test322()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
}"
1540,,"  public void test323()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
}"
1541,,"  public void test324()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
}"
1542,,"  public void test325()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
}"
1543,,"  public void test326()  throws Throwable  {
      Vector<Param> vector0 = new Vector<Param>();
}"
1544,"  public static String extractContentTypeBoundaryAttribute(String contentType) {
    return extractContentTypeAttribute(contentType, CONTENT_TYPE_BOUNDARY_ATTRIBUTE);
  }","  public void test327()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(16384);
      byte[] byteArray0 = new byte[2];
      String string0 = HttpUtils.patchContentTypeWithBoundaryAttribute(charBuffer0, byteArray0);
      // Undeclared exception!
      HttpUtils.extractContentTypeBoundaryAttribute(string0);
  }"
1545,"  public static StringBuilder encodeAndAppendPercentEncoded(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, RFC3986_UNRESERVED_CHARS, false);
  }","  public void test0()  throws Throwable  {
      String string0 = """";
      Utf8UrlEncoder.encodeAndAppendQuery((StringBuilder) null, """");
      // Undeclared exception!
      try { 
        Utf8UrlEncoder.encodeAndAppendPercentEncoded((StringBuilder) null, (CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1546,"  public static StringBuilder encodeAndAppendQueryElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, false);
  }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utf8UrlEncoder.encodeAndAppendQueryElement((StringBuilder) null, (CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1547,"  public static StringBuilder encodeAndAppendFormElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, true);
  }","  public void test2()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder0, """");
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      StringBuilder stringBuilder3 = stringBuilder1.append((float) 0);
      StringBuilder stringBuilder4 = stringBuilder1.insert(0, (CharSequence) stringBuilder3);
      char[] charArray0 = new char[3];
      stringBuilder4.insert(0, charArray0);
      StringBuilder stringBuilder5 = stringBuilder3.append((Object) stringBuilder4);
      stringBuilder5.insert(0, 3487.520685);
      StringBuilder stringBuilder6 = stringBuilder5.append(false);
      // Undeclared exception!
      Utf8UrlEncoder.encodeAndAppendFormElement(stringBuilder2, stringBuilder6);
  }"
1548,"  public static String encodeQueryElement(String input) {
    StringBuilder sb = new StringBuilder(input.length() + 6);
    encodeAndAppendQueryElement(sb, input);
    return sb.toString();
  }","  public void test3()  throws Throwable  {
      String string0 = null;
      Utf8UrlEncoder.percentEncodeQueryElement((String) null);
      // Undeclared exception!
      try { 
        Utf8UrlEncoder.encodeQueryElement((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.Utf8UrlEncoder"", e);
      }
  }"
1549,"  public static StringBuilder encodeAndAppendFormElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, true);
  }","  public void test4()  throws Throwable  {
      String string0 = """";
      Utf8UrlEncoder.percentEncodeQueryElement("""");
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        Utf8UrlEncoder.encodeAndAppendFormElement((StringBuilder) null, (CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1550,"  public static String encodePath(String input) {
    StringBuilder sb = lazyAppendEncoded(null, input, BUILT_PATH_UNTOUCHED_CHARS, false);
    return sb == null ? input : sb.toString();
  }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utf8UrlEncoder.encodePath((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.Utf8UrlEncoder"", e);
      }
  }"
1551,"  public static StringBuilder encodeAndAppendQueryElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, false);
  }","  public void test6()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(""@nDR:!;I"");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringBuilder stringBuilder2 = Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder1, ""@nDR:!;I"");
      stringBuilder2.insert(0, ""@nDR:!;I"");
      StringBuilder stringBuilder3 = stringBuilder2.deleteCharAt(0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\""';
      charArray0[1] = '#';
      stringBuffer0.appendCodePoint(1);
      charArray0[2] = ')';
      charArray0[3] = ']';
      stringBuilder3.insert(0, charArray0, 0, 0);
      Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder3, ""@nDR:!;I"");
      String string0 = ""x@C%56&zyh}xhQ"";
      Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder2, ""x@C%56&zyh}xhQ"");
      Utf8UrlEncoder.percentEncodeQueryElement(""x@C%56&zyh}xhQ"");
      Utf8UrlEncoder.encodeAndAppendFormElement(stringBuilder3, ""@nDR:!;I"");
      String string1 = ""p\\<a~Q%rb8 yfF"";
      StringBuilder stringBuilder4 = new StringBuilder(""p<a~Q%rb8 yfF"");
      Utf8UrlEncoder.encodeAndAppendPercentEncoded(stringBuilder3, stringBuilder4);
      // Undeclared exception!
      Utf8UrlEncoder.encodeAndAppendQueryElement(stringBuilder0, stringBuilder2);
  }"
1552,"  public static String encodePath(String input) {
    StringBuilder sb = lazyAppendEncoded(null, input, BUILT_PATH_UNTOUCHED_CHARS, false);
    return sb == null ? input : sb.toString();
  }","  public void test7()  throws Throwable  {
      Utf8UrlEncoder.percentEncodeQueryElement((String) null);
      Utf8UrlEncoder.percentEncodeQueryElement((String) null);
      Utf8UrlEncoder.encodeQueryElement("""");
      // Undeclared exception!
      try { 
        Utf8UrlEncoder.encodePath((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.Utf8UrlEncoder"", e);
      }
  }"
1553,"  public static StringBuilder encodeAndAppendPercentEncoded(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, RFC3986_UNRESERVED_CHARS, false);
  }","  public void test8()  throws Throwable  {
      Utf8UrlEncoder.percentEncodeQueryElement(""SytZ,Av@4d"");
      Utf8UrlEncoder.percentEncodeQueryElement("""");
      Utf8UrlEncoder.encodePath("""");
      Utf8UrlEncoder.encodeAndAppendFormElement((StringBuilder) null, """");
      Utf8UrlEncoder.encodeAndAppendPercentEncoded((StringBuilder) null, """");
  }"
1554,"  public static StringBuilder encodeAndAppendQuery(StringBuilder sb, String query) {
    return appendEncoded(sb, query, BUILT_QUERY_UNTOUCHED_CHARS, false);
  }","  public void test9()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      String string0 = ""0123456789ABCDEF"";
      // Undeclared exception!
      try { 
        Utf8UrlEncoder.encodeAndAppendQuery((StringBuilder) null, ""0123456789ABCDEF"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1555,"  public static StringBuilder encodeAndAppendPercentEncoded(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, RFC3986_UNRESERVED_CHARS, false);
  }","  public void test10()  throws Throwable  {
      Utf8UrlEncoder.encodePath("" |8)'!xQF^\"""");
      Utf8UrlEncoder.percentEncodeQueryElement("" |8)'!xQF^\"""");
      Utf8UrlEncoder.encodeQueryElement(""%20%7C8)'!xQF%5E%22%7F"");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Utf8UrlEncoder.encodeQueryElement("""");
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (CharSequence) ""%20%7C8%29%27%21xQF%5E%22%7F"", 0, 0);
      StringBuilder stringBuilder2 = Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder0, ""M\""wA?}>M{A:qR"");
      String string0 = ""0123456789ABCDEF"";
      Utf8UrlEncoder.encodeQueryElement(""0123456789ABCDEF"");
      StringBuilder stringBuilder3 = Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder2, ""%20%7C8%29%27%21xQF%5E%22%7F"");
      StringBuilder stringBuilder4 = Utf8UrlEncoder.encodeAndAppendQueryElement(stringBuilder1, ""0123456789ABCDEF"");
      Utf8UrlEncoder.percentEncodeQueryElement(""M\""wA?}>M{A:qR"");
      Utf8UrlEncoder.encodeQueryElement(""M%22wA%3F%7D%3EM%7BA%3AqR"");
      stringBuilder3.append((-1932.8896042013878));
      StringBuilder stringBuilder5 = Utf8UrlEncoder.encodeAndAppendPercentEncoded(stringBuilder4, ""0123456789ABCDEF"");
      StringBuilder stringBuilder6 = Utf8UrlEncoder.encodeAndAppendQueryElement(stringBuilder3, ""%2520%257C8%29%27%21xQF%255E%2522%257F"");
      Utf8UrlEncoder.percentEncodeQueryElement(""M%2522wA%253F%257D%253EM%257BA%253AqR"");
      Utf8UrlEncoder.encodeAndAppendFormElement(stringBuilder6, ""%20%7C8%29%27%21xQF%5E%22%7F"");
      Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder5, ""0i9j*S||;b!aYnd5<^o"");
      int int1 = 998;
      StringBuilder stringBuilder7 = stringBuilder3.appendCodePoint(998);
      // Undeclared exception!
      Utf8UrlEncoder.encodeAndAppendPercentEncoded(stringBuilder7, stringBuilder0);
  }"
1556,"  public static StringBuilder encodeAndAppendQueryElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, false);
  }","  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) stringBuilder0);
      stringBuilder1.appendCodePoint(1716);
      StringBuilder stringBuilder2 = new StringBuilder(1716);
      Utf8UrlEncoder.encodeAndAppendQueryElement(stringBuilder2, stringBuilder1);
  }"
1557,"  public static StringBuilder encodeAndAppendFormElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, true);
  }","  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(2690);
      stringBuilder0.reverse();
      StringBuilder stringBuilder2 = Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder1, ""o-\""n+"");
      // Undeclared exception!
      Utf8UrlEncoder.encodeAndAppendFormElement(stringBuilder2, stringBuilder0);
  }"
1558,"  public static String encodePath(String input) {
    StringBuilder sb = lazyAppendEncoded(null, input, BUILT_PATH_UNTOUCHED_CHARS, false);
    return sb == null ? input : sb.toString();
  }","  public void test13()  throws Throwable  {
      Utf8UrlEncoder.encodePath(""Q1x%\""gvvT4D*#2"");
  }"
1559,"  public static String percentEncodeQueryElement(String input) {
    if (input == null) {
      return null;
    }
    StringBuilder sb = new StringBuilder(input.length() + 6);
    encodeAndAppendPercentEncoded(sb, input);
    return sb.toString();
  }","  public void test14()  throws Throwable  {
      Utf8UrlEncoder.percentEncodeQueryElement(""IEd sWLBNL>"");
  }"
1560,"  public static StringBuilder encodeAndAppendFormElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, true);
  }","  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = Utf8UrlEncoder.encodeAndAppendPercentEncoded(stringBuilder0, stringBuilder0);
      Utf8UrlEncoder.encodeAndAppendFormElement(stringBuilder0, stringBuilder1);
  }"
1561,"  public static StringBuilder encodeAndAppendQuery(StringBuilder sb, String query) {
    return appendEncoded(sb, query, BUILT_QUERY_UNTOUCHED_CHARS, false);
  }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utf8UrlEncoder.encodeAndAppendQuery((StringBuilder) null, ""c9U~~-c&0,&sG-"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1562,"  public static String encodePath(String input) {
    StringBuilder sb = lazyAppendEncoded(null, input, BUILT_PATH_UNTOUCHED_CHARS, false);
    return sb == null ? input : sb.toString();
  }","  public void test17()  throws Throwable  {
      Utf8UrlEncoder.encodeQueryElement("""");
      Utf8UrlEncoder.encodeAndAppendQueryElement((StringBuilder) null, """");
      Utf8UrlEncoder.encodePath("""");
  }"
1563,"  public static String encodeQueryElement(String input) {
    StringBuilder sb = new StringBuilder(input.length() + 6);
    encodeAndAppendQueryElement(sb, input);
    return sb.toString();
  }","  public void test18()  throws Throwable  {
      Utf8UrlEncoder.encodePath("""");
      Utf8UrlEncoder.encodeQueryElement("""");
      Utf8UrlEncoder.encodeQueryElement("""");
  }"
1564,"  public static String encodeQueryElement(String input) {
    StringBuilder sb = new StringBuilder(input.length() + 6);
    encodeAndAppendQueryElement(sb, input);
    return sb.toString();
  }","  public void test19()  throws Throwable  {
      Utf8UrlEncoder.encodeQueryElement(""org.asynchttpclient.util.Utf8UrlEncoder"");
  }"
1565,"  public static StringBuilder encodeAndAppendQueryElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, false);
  }","  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) stringBuilder0);
      stringBuilder1.appendCodePoint(911);
      stringBuilder1.appendCodePoint(1746);
      // Undeclared exception!
      Utf8UrlEncoder.encodeAndAppendQueryElement(stringBuilder0, stringBuilder1);
  }"
1566,"  public static String encodePath(String input) {
    StringBuilder sb = lazyAppendEncoded(null, input, BUILT_PATH_UNTOUCHED_CHARS, false);
    return sb == null ? input : sb.toString();
  }","  public void test21()  throws Throwable  {
      Utf8UrlEncoder.percentEncodeQueryElement((String) null);
      Utf8UrlEncoder.percentEncodeQueryElement("""");
      Utf8UrlEncoder.encodePath("""");
      // Undeclared exception!
      try { 
        Utf8UrlEncoder.encodePath((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.Utf8UrlEncoder"", e);
      }
  }"
1567,"  public static StringBuilder encodeAndAppendFormElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, true);
  }","  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder0, """");
      stringBuilder1.chars();
      char[] charArray0 = new char[3];
      stringBuilder0.insert(0, charArray0);
      stringBuilder1.append((Object) stringBuilder1);
      // Undeclared exception!
      Utf8UrlEncoder.encodeAndAppendFormElement(stringBuilder1, stringBuilder0);
  }"
1568,"  public static StringBuilder encodeAndAppendFormElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, true);
  }","  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = Utf8UrlEncoder.encodeAndAppendQuery(stringBuilder0, """");
      StringBuilder stringBuilder2 = stringBuilder1.append((float) 0);
      char[] charArray0 = new char[3];
      stringBuilder0.insert(0, charArray0);
      StringBuilder stringBuilder3 = stringBuilder2.append((Object) stringBuilder1);
      StringBuilder stringBuilder4 = stringBuilder3.append(false);
      // Undeclared exception!
      Utf8UrlEncoder.encodeAndAppendFormElement(stringBuilder1, stringBuilder4);
  }"
1569,"  public static String encodeQueryElement(String input) {
    StringBuilder sb = new StringBuilder(input.length() + 6);
    encodeAndAppendQueryElement(sb, input);
    return sb.toString();
  }","  public void test24()  throws Throwable  {
      Utf8UrlEncoder.encodePath(""cF!8~=Dv<"");
      Utf8UrlEncoder.encodeQueryElement(""cF!8~=Dv<"");
  }"
1570,"  public static String encodeQueryElement(String input) {
    StringBuilder sb = new StringBuilder(input.length() + 6);
    encodeAndAppendQueryElement(sb, input);
    return sb.toString();
  }","  public void test25()  throws Throwable  {
      Utf8UrlEncoder.encodePath("" |8)'!xQF^\"""");
      Utf8UrlEncoder.percentEncodeQueryElement("" |8)'!xQF^\"""");
      Utf8UrlEncoder.encodeQueryElement(""%20%7C8%29%27%21xQF%5E%22%7F"");
  }"
1571,"  public static StringBuilder encodeAndAppendQueryElement(StringBuilder sb, CharSequence input) {
    return appendEncoded(sb, input, FORM_URL_ENCODED_SAFE_CHARS, false);
  }","  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(2289);
      // Undeclared exception!
      Utf8UrlEncoder.encodeAndAppendQueryElement(stringBuilder1, stringBuilder0);
  }"
1572,"  public StringBuilder stringBuilder() {
    StringBuilder sb = pool.get();
    sb.setLength(0);
    return sb;
  }","  public void test0()  throws Throwable  {
      StringBuilderPool stringBuilderPool0 = new StringBuilderPool();
      StringBuilder stringBuilder0 = stringBuilderPool0.stringBuilder();
}"
1573,"  public static <T extends Throwable> T unknownStackTrace(T t, Class<?> clazz, String method) {
    t.setStackTrace(new StackTraceElement[]{new StackTraceElement(clazz.getName(), method, null, -1)});
    return t;
  }","  public void test0()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""y#4x;;q+qV=x{p+Aoi"");
      Class<MockThrowable> class0 = MockThrowable.class;
      MockThrowable mockThrowable1 = ThrowableUtil.unknownStackTrace(mockThrowable0, (Class<?>) class0, ""y#4x;;q+qV=x{p+Aoi"");
}"
1574,"  public static String perConnectionAuthorizationHeader(Request request, ProxyServer proxyServer, Realm realm) {
    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {
      switch (realm.getScheme()) {
        case NTLM:
          String msg = NtlmEngine.INSTANCE.generateType1Msg();
          authorizationHeader = ""NTLM "" + msg;
          break;
        case KERBEROS:
        case SPNEGO:
          String host;
          if (proxyServer != null)
            host = proxyServer.getHost();
          else if (request.getVirtualHost() != null)
            host = request.getVirtualHost();
          else
            host = request.getUri().getHost();

          try {
            authorizationHeader = NEGOTIATE + "" "" + SpnegoEngine.instance(
                realm.getPrincipal(),
                realm.getPassword(),
                realm.getServicePrincipalName(),
                realm.getRealmName(),
                realm.isUseCanonicalHostname(),
                realm.getCustomLoginConfig(),
                realm.getLoginContextName()).generateToken(host);
          } catch (SpnegoEngineException e) {
            throw new RuntimeException(e);
          }
          break;
        default:
          break;
      }
    }

    return authorizationHeader;
  }","  public void test0()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn(""http"", (String) null).when(request0).getVirtualHost();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(realm0).getCustomLoginConfig();
      doReturn((String) null).when(realm0).getLoginContextName();
      doReturn((String) null).when(realm0).getPassword();
      doReturn((String) null).when(realm0).getPrincipal();
      doReturn((String) null).when(realm0).getRealmName();
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn((String) null).when(realm0).getServicePrincipalName();
      doReturn(false).when(realm0).isUseCanonicalHostname();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      // Undeclared exception!
      try { 
        AuthenticatorUtils.perConnectionAuthorizationHeader(request0, (ProxyServer) null, realm0);
        fail(""Expecting exception: VerifyError"");
      } catch(VerifyError e) {
         //
         // Bad return type
         // Exception Details:
         //   Location:
         //     org/ietf/jgss/GSSManager.getInstance()Lorg/ietf/jgss/GSSManager; @10: areturn
         //   Reason:
         //     Type 'sun/security/jgss/GSSManagerImpl' (current frame, stack[0]) is not assignable to 'org/ietf/jgss/GSSManager' (from method signature)
         //   Current Frame:
         //     bci: @10
         //     flags: { }
         //     locals: { }
         //     stack: { 'sun/security/jgss/GSSManagerImpl' }
         //   Bytecode:
         //     0x0000000: b800 18bb 001a 59b7 001b b0            
         //
         verifyException(""org.asynchttpclient.spnego.SpnegoEngine"", e);
      }
  }"
1575,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test1()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Charset charset0 = Charset.defaultCharset();
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(charset0).when(realm0).getCharset();
      doReturn(""Bsic "").when(realm0).getPassword();
      doReturn("",b799"").when(realm0).getPrincipal();
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestProxyAuthorizationHeader(request0, realm0);
}"
1576,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test2()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Charset charset0 = Charset.defaultCharset();
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(charset0).when(realm0).getCharset();
      doReturn(""Bsic "").when(realm0).getPassword();
      doReturn("",b799"").when(realm0).getPrincipal();
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestProxyAuthorizationHeader(request0, realm0);
}"
1577,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test3()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Charset charset0 = Charset.defaultCharset();
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(charset0).when(realm0).getCharset();
      doReturn(""netbsd"").when(realm0).getPassword();
      doReturn(""Negotiate"").when(realm0).getPrincipal();
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestAuthorizationHeader(request0, realm0);
}"
1578,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test4()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Charset charset0 = Charset.defaultCharset();
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(charset0).when(realm0).getCharset();
      doReturn(""netbsd"").when(realm0).getPassword();
      doReturn(""Negotiate"").when(realm0).getPrincipal();
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestAuthorizationHeader(request0, realm0);
}"
1579,"  public static String computeRealmURI(Uri uri, boolean useAbsoluteURI, boolean omitQuery) {
    if (useAbsoluteURI) {
      return omitQuery && MiscUtils.isNonEmpty(uri.getQuery()) ? uri.withNewQuery(null).toUrl() : uri.toUrl();
    } else {
      String path = uri.getNonEmptyPath();
      return omitQuery || !MiscUtils.isNonEmpty(uri.getQuery()) ? path : path + ""?"" + uri.getQuery();
    }
  }","  public void test5()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(uri0).getNonEmptyPath();
      String string0 = AuthenticatorUtils.computeRealmURI(uri0, false, true);
}"
1580,"  public static String computeRealmURI(Uri uri, boolean useAbsoluteURI, boolean omitQuery) {
    if (useAbsoluteURI) {
      return omitQuery && MiscUtils.isNonEmpty(uri.getQuery()) ? uri.withNewQuery(null).toUrl() : uri.toUrl();
    } else {
      String path = uri.getNonEmptyPath();
      return omitQuery || !MiscUtils.isNonEmpty(uri.getQuery()) ? path : path + ""?"" + uri.getQuery();
    }
  }","  public void test6()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(uri0).getNonEmptyPath();
      String string0 = AuthenticatorUtils.computeRealmURI(uri0, false, true);
}"
1581,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test7()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(request0).getMethod();
      doReturn(uri0).when(request0).getUri();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realm0).getAlgorithm();
      doReturn((Charset) null).when(realm0).getCharset();
      doReturn((Map<Object, Object>) null).when(realm0).getCustomLoginConfig();
      doReturn((String) null).when(realm0).getLoginContextName();
      doReturn((String) null).when(realm0).getNc();
      doReturn(""RarFsA"", (String) null).when(realm0).getNonce();
      doReturn((String) null).when(realm0).getNtlmDomain();
      doReturn((String) null).when(realm0).getNtlmHost();
      doReturn((String) null).when(realm0).getOpaque();
      doReturn((String) null).when(realm0).getPassword();
      doReturn((String) null).when(realm0).getPrincipal();
      doReturn((String) null).when(realm0).getQop();
      doReturn((String) null).when(realm0).getRealmName();
      doReturn(realm_AuthScheme0, (Realm.AuthScheme) null).when(realm0).getScheme();
      doReturn((String) null).when(realm0).getServicePrincipalName();
      doReturn((Uri) null).when(realm0).getUri();
      doReturn(false).when(realm0).isOmitQuery();
      doReturn(false).when(realm0).isUseAbsoluteURI();
      doReturn(false).when(realm0).isUseCanonicalHostname();
      doReturn(true, false).when(realm0).isUsePreemptiveAuth();
      // Undeclared exception!
      try { 
        AuthenticatorUtils.perRequestProxyAuthorizationHeader(request0, realm0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1582,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test8()  throws Throwable  {
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realm0).getAlgorithm();
      doReturn((Charset) null).when(realm0).getCharset();
      doReturn((Map<Object, Object>) null).when(realm0).getCustomLoginConfig();
      doReturn((String) null).when(realm0).getLoginContextName();
      doReturn((String) null).when(realm0).getNc();
      doReturn(""z*6rRE@"", (String) null).when(realm0).getNonce();
      doReturn((String) null).when(realm0).getNtlmDomain();
      doReturn((String) null).when(realm0).getNtlmHost();
      doReturn((String) null).when(realm0).getOpaque();
      doReturn((String) null).when(realm0).getPassword();
      doReturn((String) null).when(realm0).getPrincipal();
      doReturn((String) null).when(realm0).getQop();
      doReturn((String) null).when(realm0).getRealmName();
      doReturn(realm_AuthScheme0, (Realm.AuthScheme) null).when(realm0).getScheme();
      doReturn((String) null).when(realm0).getServicePrincipalName();
      doReturn((Uri) null).when(realm0).getUri();
      doReturn(false).when(realm0).isOmitQuery();
      doReturn(false).when(realm0).isUseAbsoluteURI();
      doReturn(false).when(realm0).isUseCanonicalHostname();
      doReturn(true, false).when(realm0).isUsePreemptiveAuth();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(request0).getMethod();
      doReturn((Uri) null).when(request0).getUri();
      // Undeclared exception!
      try { 
        AuthenticatorUtils.perRequestAuthorizationHeader(request0, realm0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1583,"  public static String getHeaderWithPrefix(List<String> authenticateHeaders, String prefix) {
    if (authenticateHeaders != null) {
      for (String authenticateHeader : authenticateHeaders) {
        if (authenticateHeader.regionMatches(true, 0, prefix, 0, prefix.length()))
          return authenticateHeader;
      }
    }

    return null;
  }","  public void test9()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add((String) null);
      // Undeclared exception!
      try { 
        AuthenticatorUtils.getHeaderWithPrefix(stack0, ""/)c8="");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
1584,"  public static String computeRealmURI(Uri uri, boolean useAbsoluteURI, boolean omitQuery) {
    if (useAbsoluteURI) {
      return omitQuery && MiscUtils.isNonEmpty(uri.getQuery()) ? uri.withNewQuery(null).toUrl() : uri.toUrl();
    } else {
      String path = uri.getNonEmptyPath();
      return omitQuery || !MiscUtils.isNonEmpty(uri.getQuery()) ? path : path + ""?"" + uri.getQuery();
    }
  }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        AuthenticatorUtils.computeRealmURI((Uri) null, true, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.AuthenticatorUtils"", e);
      }
  }"
1585,"  public static String computeRealmURI(Uri uri, boolean useAbsoluteURI, boolean omitQuery) {
    if (useAbsoluteURI) {
      return omitQuery && MiscUtils.isNonEmpty(uri.getQuery()) ? uri.withNewQuery(null).toUrl() : uri.toUrl();
    } else {
      String path = uri.getNonEmptyPath();
      return omitQuery || !MiscUtils.isNonEmpty(uri.getQuery()) ? path : path + ""?"" + uri.getQuery();
    }
  }","  public void test11()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).getQuery();
      doReturn((String) null).when(uri0).toUrl();
      String string0 = AuthenticatorUtils.computeRealmURI(uri0, true, true);
}"
1586,"  public static String getHeaderWithPrefix(List<String> authenticateHeaders, String prefix) {
    if (authenticateHeaders != null) {
      for (String authenticateHeader : authenticateHeaders) {
        if (authenticateHeader.regionMatches(true, 0, prefix, 0, prefix.length()))
          return authenticateHeader;
      }
    }

    return null;
  }","  public void test12()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add(""-Dio.netty.processId: {} (user-set)"");
      String string0 = AuthenticatorUtils.getHeaderWithPrefix(stack0, ""Negotiate"");
}"
1587,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test13()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realm0).getNonce();
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestAuthorizationHeader(request0, realm0);
}"
1588,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test14()  throws Throwable  {
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Charset charset0 = mock(Charset.class, new ViolatedAssumptionAnswer());
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn((Charset) null).when(realm0).getCharset();
      doReturn((String) null).when(realm0).getPassword();
      doReturn((String) null).when(realm0).getPrincipal();
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      // Undeclared exception!
      try { 
        AuthenticatorUtils.perRequestAuthorizationHeader(request0, realm0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
1589,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test15()  throws Throwable  {
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestAuthorizationHeader(request0, realm0);
}"
1590,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test16()  throws Throwable  {
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestAuthorizationHeader((Request) null, realm0);
}"
1591,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test17()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestAuthorizationHeader(request0, realm0);
}"
1592,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test18()  throws Throwable  {
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestAuthorizationHeader((Request) null, realm0);
}"
1593,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test19()  throws Throwable  {
      String string0 = AuthenticatorUtils.perRequestAuthorizationHeader((Request) null, (Realm) null);
}"
1594,"  public static String perConnectionAuthorizationHeader(Request request, ProxyServer proxyServer, Realm realm) {
    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {
      switch (realm.getScheme()) {
        case NTLM:
          String msg = NtlmEngine.INSTANCE.generateType1Msg();
          authorizationHeader = ""NTLM "" + msg;
          break;
        case KERBEROS:
        case SPNEGO:
          String host;
          if (proxyServer != null)
            host = proxyServer.getHost();
          else if (request.getVirtualHost() != null)
            host = request.getVirtualHost();
          else
            host = request.getUri().getHost();

          try {
            authorizationHeader = NEGOTIATE + "" "" + SpnegoEngine.instance(
                realm.getPrincipal(),
                realm.getPassword(),
                realm.getServicePrincipalName(),
                realm.getRealmName(),
                realm.isUseCanonicalHostname(),
                realm.getCustomLoginConfig(),
                realm.getLoginContextName()).generateToken(host);
          } catch (SpnegoEngineException e) {
            throw new RuntimeException(e);
          }
          break;
        default:
          break;
      }
    }

    return authorizationHeader;
  }","  public void test20()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((Uri) null).when(request0).getUri();
      doReturn((String) null).when(request0).getVirtualHost();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      // Undeclared exception!
      try { 
        AuthenticatorUtils.perConnectionAuthorizationHeader(request0, (ProxyServer) null, realm0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.AuthenticatorUtils"", e);
      }
  }"
1595,"  public static String perConnectionAuthorizationHeader(Request request, ProxyServer proxyServer, Realm realm) {
    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {
      switch (realm.getScheme()) {
        case NTLM:
          String msg = NtlmEngine.INSTANCE.generateType1Msg();
          authorizationHeader = ""NTLM "" + msg;
          break;
        case KERBEROS:
        case SPNEGO:
          String host;
          if (proxyServer != null)
            host = proxyServer.getHost();
          else if (request.getVirtualHost() != null)
            host = request.getVirtualHost();
          else
            host = request.getUri().getHost();

          try {
            authorizationHeader = NEGOTIATE + "" "" + SpnegoEngine.instance(
                realm.getPrincipal(),
                realm.getPassword(),
                realm.getServicePrincipalName(),
                realm.getRealmName(),
                realm.isUseCanonicalHostname(),
                realm.getCustomLoginConfig(),
                realm.getLoginContextName()).generateToken(host);
          } catch (SpnegoEngineException e) {
            throw new RuntimeException(e);
          }
          break;
        default:
          break;
      }
    }

    return authorizationHeader;
  }","  public void test21()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      ProxyServer proxyServer0 = mock(ProxyServer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(proxyServer0).getHost();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(realm0).getCustomLoginConfig();
      doReturn((String) null).when(realm0).getLoginContextName();
      doReturn((String) null).when(realm0).getPassword();
      doReturn((String) null).when(realm0).getPrincipal();
      doReturn((String) null).when(realm0).getRealmName();
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn((String) null).when(realm0).getServicePrincipalName();
      doReturn(false).when(realm0).isUseCanonicalHostname();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      // Undeclared exception!
      try { 
        AuthenticatorUtils.perConnectionAuthorizationHeader(request0, proxyServer0, realm0);
        fail(""Expecting exception: VerifyError"");
      } catch(VerifyError e) {
         //
         // Bad return type
         // Exception Details:
         //   Location:
         //     org/ietf/jgss/GSSManager.getInstance()Lorg/ietf/jgss/GSSManager; @10: areturn
         //   Reason:
         //     Type 'sun/security/jgss/GSSManagerImpl' (current frame, stack[0]) is not assignable to 'org/ietf/jgss/GSSManager' (from method signature)
         //   Current Frame:
         //     bci: @10
         //     flags: { }
         //     locals: { }
         //     stack: { 'sun/security/jgss/GSSManagerImpl' }
         //   Bytecode:
         //     0x0000000: b800 18bb 001a 59b7 001b b0            
         //
         verifyException(""org.asynchttpclient.spnego.SpnegoEngine"", e);
      }
  }"
1596,"  public static String perConnectionAuthorizationHeader(Request request, ProxyServer proxyServer, Realm realm) {
    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {
      switch (realm.getScheme()) {
        case NTLM:
          String msg = NtlmEngine.INSTANCE.generateType1Msg();
          authorizationHeader = ""NTLM "" + msg;
          break;
        case KERBEROS:
        case SPNEGO:
          String host;
          if (proxyServer != null)
            host = proxyServer.getHost();
          else if (request.getVirtualHost() != null)
            host = request.getVirtualHost();
          else
            host = request.getUri().getHost();

          try {
            authorizationHeader = NEGOTIATE + "" "" + SpnegoEngine.instance(
                realm.getPrincipal(),
                realm.getPassword(),
                realm.getServicePrincipalName(),
                realm.getRealmName(),
                realm.isUseCanonicalHostname(),
                realm.getCustomLoginConfig(),
                realm.getLoginContextName()).generateToken(host);
          } catch (SpnegoEngineException e) {
            throw new RuntimeException(e);
          }
          break;
        default:
          break;
      }
    }

    return authorizationHeader;
  }","  public void test22()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      ProxyServer proxyServer0 = mock(ProxyServer.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.BASIC;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perConnectionAuthorizationHeader(request0, proxyServer0, realm0);
}"
1597,"  public static String perConnectionAuthorizationHeader(Request request, ProxyServer proxyServer, Realm realm) {
    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {
      switch (realm.getScheme()) {
        case NTLM:
          String msg = NtlmEngine.INSTANCE.generateType1Msg();
          authorizationHeader = ""NTLM "" + msg;
          break;
        case KERBEROS:
        case SPNEGO:
          String host;
          if (proxyServer != null)
            host = proxyServer.getHost();
          else if (request.getVirtualHost() != null)
            host = request.getVirtualHost();
          else
            host = request.getUri().getHost();

          try {
            authorizationHeader = NEGOTIATE + "" "" + SpnegoEngine.instance(
                realm.getPrincipal(),
                realm.getPassword(),
                realm.getServicePrincipalName(),
                realm.getRealmName(),
                realm.isUseCanonicalHostname(),
                realm.getCustomLoginConfig(),
                realm.getLoginContextName()).generateToken(host);
          } catch (SpnegoEngineException e) {
            throw new RuntimeException(e);
          }
          break;
        default:
          break;
      }
    }

    return authorizationHeader;
  }","  public void test23()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perConnectionAuthorizationHeader(request0, (ProxyServer) null, realm0);
}"
1598,"  public static String perConnectionAuthorizationHeader(Request request, ProxyServer proxyServer, Realm realm) {
    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {
      switch (realm.getScheme()) {
        case NTLM:
          String msg = NtlmEngine.INSTANCE.generateType1Msg();
          authorizationHeader = ""NTLM "" + msg;
          break;
        case KERBEROS:
        case SPNEGO:
          String host;
          if (proxyServer != null)
            host = proxyServer.getHost();
          else if (request.getVirtualHost() != null)
            host = request.getVirtualHost();
          else
            host = request.getUri().getHost();

          try {
            authorizationHeader = NEGOTIATE + "" "" + SpnegoEngine.instance(
                realm.getPrincipal(),
                realm.getPassword(),
                realm.getServicePrincipalName(),
                realm.getRealmName(),
                realm.isUseCanonicalHostname(),
                realm.getCustomLoginConfig(),
                realm.getLoginContextName()).generateToken(host);
          } catch (SpnegoEngineException e) {
            throw new RuntimeException(e);
          }
          break;
        default:
          break;
      }
    }

    return authorizationHeader;
  }","  public void test24()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      ProxyType proxyType0 = ProxyType.HTTP;
      ProxyServer proxyServer0 = new ProxyServer((String) null, 512, 512, realm0, stack0, proxyType0);
      Realm realm1 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(realm1).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perConnectionAuthorizationHeader((Request) null, proxyServer0, realm1);
}"
1599,"  public static String perConnectionAuthorizationHeader(Request request, ProxyServer proxyServer, Realm realm) {
    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {
      switch (realm.getScheme()) {
        case NTLM:
          String msg = NtlmEngine.INSTANCE.generateType1Msg();
          authorizationHeader = ""NTLM "" + msg;
          break;
        case KERBEROS:
        case SPNEGO:
          String host;
          if (proxyServer != null)
            host = proxyServer.getHost();
          else if (request.getVirtualHost() != null)
            host = request.getVirtualHost();
          else
            host = request.getUri().getHost();

          try {
            authorizationHeader = NEGOTIATE + "" "" + SpnegoEngine.instance(
                realm.getPrincipal(),
                realm.getPassword(),
                realm.getServicePrincipalName(),
                realm.getRealmName(),
                realm.isUseCanonicalHostname(),
                realm.getCustomLoginConfig(),
                realm.getLoginContextName()).generateToken(host);
          } catch (SpnegoEngineException e) {
            throw new RuntimeException(e);
          }
          break;
        default:
          break;
      }
    }

    return authorizationHeader;
  }","  public void test25()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      String string0 = AuthenticatorUtils.perConnectionAuthorizationHeader(request0, (ProxyServer) null, (Realm) null);
}"
1600,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test26()  throws Throwable  {
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realm0).getNonce();
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestProxyAuthorizationHeader((Request) null, realm0);
}"
1601,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test27()  throws Throwable  {
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestProxyAuthorizationHeader((Request) null, realm0);
}"
1602,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test28()  throws Throwable  {
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      String string0 = AuthenticatorUtils.perRequestProxyAuthorizationHeader(request0, realm0);
}"
1603,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test29()  throws Throwable  {
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestProxyAuthorizationHeader((Request) null, realm0);
}"
1604,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test30()  throws Throwable  {
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perRequestProxyAuthorizationHeader((Request) null, realm0);
}"
1605,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test31()  throws Throwable  {
      String string0 = AuthenticatorUtils.perRequestProxyAuthorizationHeader((Request) null, (Realm) null);
}"
1606,"  public static String perConnectionProxyAuthorizationHeader(Request request, Realm proxyRealm) {
    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {
      switch (proxyRealm.getScheme()) {
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          List<String> auth = request.getHeaders().getAll(PROXY_AUTHORIZATION);
          if (getHeaderWithPrefix(auth, ""NTLM"") == null) {
            String msg = NtlmEngine.INSTANCE.generateType1Msg();
            proxyAuthorization = ""NTLM "" + msg;
          }

          break;
        default:
      }
    }

    return proxyAuthorization;
  }","  public void test32()  throws Throwable  {
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.KERBEROS;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      // Undeclared exception!
      try { 
        AuthenticatorUtils.perConnectionProxyAuthorizationHeader((Request) null, realm0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.AuthenticatorUtils"", e);
      }
  }"
1607,"  public static String perConnectionProxyAuthorizationHeader(Request request, Realm proxyRealm) {
    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {
      switch (proxyRealm.getScheme()) {
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          List<String> auth = request.getHeaders().getAll(PROXY_AUTHORIZATION);
          if (getHeaderWithPrefix(auth, ""NTLM"") == null) {
            String msg = NtlmEngine.INSTANCE.generateType1Msg();
            proxyAuthorization = ""NTLM "" + msg;
          }

          break;
        default:
      }
    }

    return proxyAuthorization;
  }","  public void test33()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perConnectionProxyAuthorizationHeader(request0, realm0);
}"
1608,"  public static String perConnectionProxyAuthorizationHeader(Request request, Realm proxyRealm) {
    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {
      switch (proxyRealm.getScheme()) {
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          List<String> auth = request.getHeaders().getAll(PROXY_AUTHORIZATION);
          if (getHeaderWithPrefix(auth, ""NTLM"") == null) {
            String msg = NtlmEngine.INSTANCE.generateType1Msg();
            proxyAuthorization = ""NTLM "" + msg;
          }

          break;
        default:
      }
    }

    return proxyAuthorization;
  }","  public void test34()  throws Throwable  {
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      String string0 = AuthenticatorUtils.perConnectionProxyAuthorizationHeader(request0, (Realm) null);
}"
1609,"  public static String computeRealmURI(Uri uri, boolean useAbsoluteURI, boolean omitQuery) {
    if (useAbsoluteURI) {
      return omitQuery && MiscUtils.isNonEmpty(uri.getQuery()) ? uri.withNewQuery(null).toUrl() : uri.toUrl();
    } else {
      String path = uri.getNonEmptyPath();
      return omitQuery || !MiscUtils.isNonEmpty(uri.getQuery()) ? path : path + ""?"" + uri.getQuery();
    }
  }","  public void test35()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).getNonEmptyPath();
      doReturn((String) null).when(uri0).getQuery();
      String string0 = AuthenticatorUtils.computeRealmURI(uri0, false, false);
}"
1610,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test36()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(uri0).getNonEmptyPath();
      doReturn(""lKTt-D"", ""lKTt-D"").when(uri0).getQuery();
      AuthenticatorUtils.computeRealmURI(uri0, false, false);
      AuthenticatorUtils authenticatorUtils0 = new AuthenticatorUtils();
      Uri uri1 = mock(Uri.class, new ViolatedAssumptionAnswer());
      String string0 = AuthenticatorUtils.NEGOTIATE;
      AuthenticatorUtils.getHeaderWithPrefix((List<String>) null, ""realm"");
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(realm0).isUsePreemptiveAuth();
      AuthenticatorUtils.perConnectionProxyAuthorizationHeader(request0, realm0);
      Request request1 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm realm1 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(realm1).isUsePreemptiveAuth();
      AuthenticatorUtils.perConnectionProxyAuthorizationHeader(request1, realm1);
      Request request2 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(request2).getMethod();
      doReturn((Uri) null).when(request2).getUri();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Realm realm2 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realm2).getAlgorithm();
      doReturn((Charset) null).when(realm2).getCharset();
      doReturn((Map) null).when(realm2).getCustomLoginConfig();
      doReturn((String) null).when(realm2).getLoginContextName();
      doReturn((String) null).when(realm2).getNc();
      doReturn(""RarFsA"", (String) null).when(realm2).getNonce();
      doReturn((String) null).when(realm2).getNtlmDomain();
      doReturn((String) null).when(realm2).getNtlmHost();
      doReturn((String) null).when(realm2).getOpaque();
      doReturn((String) null).when(realm2).getPassword();
      doReturn((String) null).when(realm2).getPrincipal();
      doReturn((String) null).when(realm2).getQop();
      doReturn((String) null).when(realm2).getRealmName();
      doReturn(realm_AuthScheme0, (Realm.AuthScheme) null).when(realm2).getScheme();
      doReturn((String) null).when(realm2).getServicePrincipalName();
      doReturn((Uri) null).when(realm2).getUri();
      doReturn(false).when(realm2).isOmitQuery();
      doReturn(false).when(realm2).isUseAbsoluteURI();
      doReturn(false).when(realm2).isUseCanonicalHostname();
      doReturn(true, false).when(realm2).isUsePreemptiveAuth();
      // Undeclared exception!
      try { 
        AuthenticatorUtils.perRequestProxyAuthorizationHeader(request2, realm2);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1611,"  public static String computeRealmURI(Uri uri, boolean useAbsoluteURI, boolean omitQuery) {
    if (useAbsoluteURI) {
      return omitQuery && MiscUtils.isNonEmpty(uri.getQuery()) ? uri.withNewQuery(null).toUrl() : uri.toUrl();
    } else {
      String path = uri.getNonEmptyPath();
      return omitQuery || !MiscUtils.isNonEmpty(uri.getQuery()) ? path : path + ""?"" + uri.getQuery();
    }
  }","  public void test37()  throws Throwable  {
      Uri uri0 = new Uri(""Negotiate"", ""Negotiate"", ""Negotiate"", 2325, ""Negotiate"", ""Negotiate"", ""Negotiate"");
      String string0 = AuthenticatorUtils.computeRealmURI(uri0, true, true);
}"
1612,"  public static String computeRealmURI(Uri uri, boolean useAbsoluteURI, boolean omitQuery) {
    if (useAbsoluteURI) {
      return omitQuery && MiscUtils.isNonEmpty(uri.getQuery()) ? uri.withNewQuery(null).toUrl() : uri.toUrl();
    } else {
      String path = uri.getNonEmptyPath();
      return omitQuery || !MiscUtils.isNonEmpty(uri.getQuery()) ? path : path + ""?"" + uri.getQuery();
    }
  }","  public void test38()  throws Throwable  {
      Uri uri0 = new Uri(""Negotiate"", ""Negotiate"", ""Negotiate"", 3777, ""Negotiate"", ""Negotiate"", ""Negotiate"");
      String string0 = AuthenticatorUtils.computeRealmURI(uri0, true, false);
}"
1613,"  public static String perRequestProxyAuthorizationHeader(Request request, Realm proxyRealm) {

    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {

      switch (proxyRealm.getScheme()) {
        case BASIC:
          proxyAuthorization = computeBasicAuthentication(proxyRealm);
          break;
        case DIGEST:
          if (isNonEmpty(proxyRealm.getNonce())) {
            // update realm with request information
            proxyRealm = realm(proxyRealm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            proxyAuthorization = computeDigestAuthentication(proxyRealm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionProxyAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication scheme "" + proxyRealm.getScheme());
      }
    }

    return proxyAuthorization;
  }","  public void test39()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.DIGEST;
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      utf8Encoder0.charset();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Uri uri1 = new Uri("", "", (String) null, ""Negotiate"", (-3), ""u6bC"", (String) null, ""TT\""hYgVPbRlf2jJ"");
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(realm0).isUsePreemptiveAuth();
      AuthenticatorUtils.perRequestProxyAuthorizationHeader(request0, realm0);
  }"
1614,"  public static String perRequestAuthorizationHeader(Request request, Realm realm) {

    String authorizationHeader = null;

    if (realm != null && realm.isUsePreemptiveAuth()) {

      switch (realm.getScheme()) {
        case BASIC:
          authorizationHeader = computeBasicAuthentication(realm);
          break;
        case DIGEST:
          if (isNonEmpty(realm.getNonce())) {
            // update realm with request information
            realm = realm(realm)
                    .setUri(request.getUri())
                    .setMethodName(request.getMethod())
                    .build();
            authorizationHeader = computeDigestAuthentication(realm);
          }
          break;
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          // NTLM, KERBEROS and SPNEGO are only set on the first request with a connection,
          // see perConnectionAuthorizationHeader
          break;
        default:
          throw new IllegalStateException(""Invalid Authentication "" + realm);
      }
    }

    return authorizationHeader;
  }","  public void test40()  throws Throwable  {
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      Stack<String> stack0 = new Stack<String>();
      stack0.add(""netbsd"");
      stack0.listIterator();
      Boolean boolean0 = new Boolean(true);
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(httpHeaders0).getAll(any(java.lang.CharSequence.class));
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn(httpHeaders0).when(request0).getHeaders();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.SPNEGO;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      AuthenticatorUtils.perConnectionProxyAuthorizationHeader(request0, realm0);
      AuthenticatorUtils authenticatorUtils0 = new AuthenticatorUtils();
      Request request1 = mock(Request.class, new ViolatedAssumptionAnswer());
      Realm.AuthScheme realm_AuthScheme1 = Realm.AuthScheme.DIGEST;
      Realm realm1 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme1).when(realm1).getScheme();
      doReturn(true).when(realm1).isUsePreemptiveAuth();
      AuthenticatorUtils.perConnectionProxyAuthorizationHeader(request1, realm1);
      Request request2 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(request2).getMethod();
      doReturn((Uri) null).when(request2).getUri();
      Realm.AuthScheme realm_AuthScheme2 = Realm.AuthScheme.DIGEST;
      Realm realm2 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(realm2).getAlgorithm();
      doReturn((Charset) null).when(realm2).getCharset();
      doReturn((Map) null).when(realm2).getCustomLoginConfig();
      doReturn((String) null).when(realm2).getLoginContextName();
      doReturn((String) null).when(realm2).getNc();
      doReturn(""p&Q6>s!4q"", (String) null).when(realm2).getNonce();
      doReturn((String) null).when(realm2).getNtlmDomain();
      doReturn((String) null).when(realm2).getNtlmHost();
      doReturn((String) null).when(realm2).getOpaque();
      doReturn((String) null).when(realm2).getPassword();
      doReturn((String) null).when(realm2).getPrincipal();
      doReturn((String) null).when(realm2).getQop();
      doReturn((String) null).when(realm2).getRealmName();
      doReturn(realm_AuthScheme2, (Realm.AuthScheme) null).when(realm2).getScheme();
      doReturn((String) null).when(realm2).getServicePrincipalName();
      doReturn((Uri) null).when(realm2).getUri();
      doReturn(false).when(realm2).isOmitQuery();
      doReturn(false).when(realm2).isUseAbsoluteURI();
      doReturn(false).when(realm2).isUseCanonicalHostname();
      doReturn(true, false).when(realm2).isUsePreemptiveAuth();
      // Undeclared exception!
      try { 
        AuthenticatorUtils.perRequestAuthorizationHeader(request2, realm2);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1615,"  public static String getHeaderWithPrefix(List<String> authenticateHeaders, String prefix) {
    if (authenticateHeaders != null) {
      for (String authenticateHeader : authenticateHeaders) {
        if (authenticateHeader.regionMatches(true, 0, prefix, 0, prefix.length()))
          return authenticateHeader;
      }
    }

    return null;
  }","  public void test41()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add(""netbsd"");
      String string0 = AuthenticatorUtils.getHeaderWithPrefix(stack0, ""netbsd"");
}"
1616,"  public static String getHeaderWithPrefix(List<String> authenticateHeaders, String prefix) {
    if (authenticateHeaders != null) {
      for (String authenticateHeader : authenticateHeaders) {
        if (authenticateHeader.regionMatches(true, 0, prefix, 0, prefix.length()))
          return authenticateHeader;
      }
    }

    return null;
  }","  public void test42()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add(""netbsd"");
      String string0 = AuthenticatorUtils.getHeaderWithPrefix(stack0, ""netbsd"");
}"
1617,"  public static String perConnectionProxyAuthorizationHeader(Request request, Realm proxyRealm) {
    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {
      switch (proxyRealm.getScheme()) {
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          List<String> auth = request.getHeaders().getAll(PROXY_AUTHORIZATION);
          if (getHeaderWithPrefix(auth, ""NTLM"") == null) {
            String msg = NtlmEngine.INSTANCE.generateType1Msg();
            proxyAuthorization = ""NTLM "" + msg;
          }

          break;
        default:
      }
    }

    return proxyAuthorization;
  }","  public void test43()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add(""-Dio.netty.processId: {} (user-set)"");
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(httpHeaders0).getAll(any(java.lang.CharSequence.class));
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn(httpHeaders0).when(request0).getHeaders();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perConnectionProxyAuthorizationHeader(request0, realm0);
}"
1618,"  public static String perConnectionProxyAuthorizationHeader(Request request, Realm proxyRealm) {
    String proxyAuthorization = null;
    if (proxyRealm != null && proxyRealm.isUsePreemptiveAuth()) {
      switch (proxyRealm.getScheme()) {
        case NTLM:
        case KERBEROS:
        case SPNEGO:
          List<String> auth = request.getHeaders().getAll(PROXY_AUTHORIZATION);
          if (getHeaderWithPrefix(auth, ""NTLM"") == null) {
            String msg = NtlmEngine.INSTANCE.generateType1Msg();
            proxyAuthorization = ""NTLM "" + msg;
          }

          break;
        default:
      }
    }

    return proxyAuthorization;
  }","  public void test44()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add(""-Dio.netty.processId: {} (user-set)"");
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(httpHeaders0).getAll(any(java.lang.CharSequence.class));
      Request request0 = mock(Request.class, new ViolatedAssumptionAnswer());
      doReturn(httpHeaders0).when(request0).getHeaders();
      Realm.AuthScheme realm_AuthScheme0 = Realm.AuthScheme.NTLM;
      Realm realm0 = mock(Realm.class, new ViolatedAssumptionAnswer());
      doReturn(realm_AuthScheme0).when(realm0).getScheme();
      doReturn(true).when(realm0).isUsePreemptiveAuth();
      String string0 = AuthenticatorUtils.perConnectionProxyAuthorizationHeader(request0, realm0);
}"
1619,"  public static void appendBase16(StringBuilder buf, byte[] bytes) {
    int base = 16;
    for (byte b : bytes) {
      int bi = 0xff & b;
      int c = '0' + (bi / base) % base;
      if (c > '9')
        c = 'a' + (c - '0' - 10);
      buf.append((char) c);
      c = '0' + bi % base;
      if (c > '9')
        c = 'a' + (c - '0' - 10);
      buf.append((char) c);
    }
  }","  public void test0()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(""^("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      StringUtils.appendBase16(stringBuilder0, byteArray0);
}"
1620,"  public static void appendBase16(StringBuilder buf, byte[] bytes) {
    int base = 16;
    for (byte b : bytes) {
      int bi = 0xff & b;
      int c = '0' + (bi / base) % base;
      if (c > '9')
        c = 'a' + (c - '0' - 10);
      buf.append((char) c);
      c = '0' + bi % base;
      if (c > '9')
        c = 'a' + (c - '0' - 10);
      buf.append((char) c);
    }
  }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      // Undeclared exception!
      try { 
        StringUtils.appendBase16((StringBuilder) null, byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.StringUtils"", e);
      }
  }"
1621,"  public static String toHexString(byte[] data) {
    StringBuilder buffer = StringBuilderPool.DEFAULT.stringBuilder();
    for (byte aData : data) {
      buffer.append(Integer.toHexString((aData & 0xf0) >>> 4));
      buffer.append(Integer.toHexString(aData & 0x0f));
    }
    return buffer.toString();
  }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      String string0 = StringUtils.toHexString(byteArray0);
}"
1622,"  public static ByteBuffer charSequence2ByteBuffer(CharSequence cs, Charset charset) {
    return charset.encode(CharBuffer.wrap(cs));
  }","  public void test3()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = StringUtils.charSequence2ByteBuffer(stringBuilder0, charset0);
}"
1623,"  public static String toHexString(byte[] data) {
    StringBuilder buffer = StringBuilderPool.DEFAULT.stringBuilder();
    for (byte aData : data) {
      buffer.append(Integer.toHexString((aData & 0xf0) >>> 4));
      buffer.append(Integer.toHexString(aData & 0x0f));
    }
    return buffer.toString();
  }","  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toHexString(byteArray0);
}"
1624,"  public static byte[] charSequence2Bytes(CharSequence sb, Charset charset) {
    ByteBuffer bb = charSequence2ByteBuffer(sb, charset);
    return byteBuffer2ByteArray(bb);
  }","  public void test5()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = StringUtils.charSequence2Bytes(""ed00"", charset0);
}"
1625,"  public static byte[] charSequence2Bytes(CharSequence sb, Charset charset) {
    ByteBuffer bb = charSequence2ByteBuffer(sb, charset);
    return byteBuffer2ByteArray(bb);
  }","  public void test6()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = StringUtils.charSequence2Bytes(stringBuffer0, charset0);
}"
1626,"  public static byte[] byteBuffer2ByteArray(ByteBuffer bb) {
    byte[] rawBase = new byte[bb.remaining()];
    bb.get(rawBase);
    return rawBase;
  }","  public void test7()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(4613);
      byte[] byteArray0 = StringUtils.byteBuffer2ByteArray(byteBuffer0);
}"
1627,"  public static byte[] byteBuffer2ByteArray(ByteBuffer bb) {
    byte[] rawBase = new byte[bb.remaining()];
    bb.get(rawBase);
    return rawBase;
  }","  public void test8()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      byte[] byteArray0 = StringUtils.byteBuffer2ByteArray(byteBuffer0);
}"
1628,"  public static String toHexString(byte[] data) {
    StringBuilder buffer = StringBuilderPool.DEFAULT.stringBuilder();
    for (byte aData : data) {
      buffer.append(Integer.toHexString((aData & 0xf0) >>> 4));
      buffer.append(Integer.toHexString(aData & 0x0f));
    }
    return buffer.toString();
  }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toHexString((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.StringUtils"", e);
      }
  }"
1629,"  public static ByteBuffer charSequence2ByteBuffer(CharSequence cs, Charset charset) {
    return charset.encode(CharBuffer.wrap(cs));
  }","  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        StringUtils.charSequence2ByteBuffer((CharSequence) null, charset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.CharBuffer"", e);
      }
  }"
1630,"  public static void appendBase16(StringBuilder buf, byte[] bytes) {
    int base = 16;
    for (byte b : bytes) {
      int bi = 0xff & b;
      int c = '0' + (bi / base) % base;
      if (c > '9')
        c = 'a' + (c - '0' - 10);
      buf.append((char) c);
      c = '0' + bi % base;
      if (c > '9')
        c = 'a' + (c - '0' - 10);
      buf.append((char) c);
    }
  }","  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-17);
      StringUtils.appendBase16(stringBuilder0, byteArray0);
}"
1631,"  public static byte[] byteBuffer2ByteArray(ByteBuffer bb) {
    byte[] rawBase = new byte[bb.remaining()];
    bb.get(rawBase);
    return rawBase;
  }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.byteBuffer2ByteArray((ByteBuffer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.StringUtils"", e);
      }
  }"
1632,"  public static byte[] charSequence2Bytes(CharSequence sb, Charset charset) {
    ByteBuffer bb = charSequence2ByteBuffer(sb, charset);
    return byteBuffer2ByteArray(bb);
  }","  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        StringUtils.charSequence2Bytes((CharSequence) null, charset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.CharBuffer"", e);
      }
  }"
1633,,"  public void test0()  throws Throwable  {
      UriEncoder[] uriEncoderArray0 = UriEncoder.values();
}"
1634,,"  public void test1()  throws Throwable  {
      UriEncoder.valueOf(""RAW"");
  }"
1635,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test2()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(""wss"").when(uri0).getFragment();
      doReturn(""wss"").when(uri0).getHost();
      doReturn(""wss"").when(uri0).getPath();
      doReturn(303).when(uri0).getPort();
      doReturn(""E~#q(r,-,%-e"").when(uri0).getQuery();
      doReturn(""wss"").when(uri0).getScheme();
      doReturn(""E~#q(r,-,%-e"").when(uri0).getUserInfo();
      Uri uri1 = uriEncoder0.encode(uri0, (List<Param>) null);
}"
1636,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test3()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn(""wss"").when(uri0).getFragment();
      doReturn(""wss"").when(uri0).getHost();
      doReturn(""wss"").when(uri0).getPath();
      doReturn(303).when(uri0).getPort();
      doReturn(""E~#q(r,-,%-e"").when(uri0).getQuery();
      doReturn(""wss"").when(uri0).getScheme();
      doReturn(""E~#q(r,-,%-e"").when(uri0).getUserInfo();
      Uri uri1 = uriEncoder0.encode(uri0, (List<Param>) null);
}"
1637,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test4()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.RAW;
      Uri uri0 = new Uri(""FIXING"", ""$VALUES"", ""$VALUES"", 0, ""&;R)~@3>\""dpO)%pj}"", """", ""~l=nhqqv{PA!C"");
      Uri uri1 = uriEncoder0.encode(uri0, (List<Param>) null);
}"
1638,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test5()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).getPath();
      // Undeclared exception!
      try { 
        uriEncoder0.encode(uri0, (List<Param>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.Utf8UrlEncoder"", e);
      }
  }"
1639,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test6()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(true);
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).getFragment();
      doReturn((String) null).when(uri0).getHost();
      doReturn(""-<$FTD*tw"").when(uri0).getPath();
      doReturn(0).when(uri0).getPort();
      doReturn(""Q"").when(uri0).getQuery();
      doReturn("""").when(uri0).getScheme();
      doReturn(""8Gx"").when(uri0).getUserInfo();
      // Undeclared exception!
      try { 
        uriEncoder0.encode(uri0, (List<Param>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // empty scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1640,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test7()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(true);
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uri0).getFragment();
      doReturn((String) null).when(uri0).getHost();
      doReturn((String) null).when(uri0).getPath();
      doReturn(0).when(uri0).getPort();
      doReturn((String) null).when(uri0).getQuery();
      doReturn((String) null).when(uri0).getScheme();
      doReturn((String) null).when(uri0).getUserInfo();
      // Undeclared exception!
      try { 
        uriEncoder0.encode(uri0, (List<Param>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // scheme
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1641,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test8()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(false);
      Uri uri0 = new Uri(""nnYRt"", ""nnYRt"", ""nnYRt"", (-1), ""nnYRt"", ""nnYRt"", ""nnYRt"");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""ws"");
      hashMap0.put(""io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector"", linkedList0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
      Uri uri1 = uriEncoder0.encode(uri0, list0);
}"
1642,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test9()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(false);
      Uri uri0 = new Uri(""nnYRt"", ""nnYRt"", ""nnYRt"", (-1), ""nnYRt"", ""nnYRt"", ""nnYRt"");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""ws"");
      hashMap0.put(""io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector"", linkedList0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
      Uri uri1 = uriEncoder0.encode(uri0, list0);
}"
1643,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test10()  throws Throwable  {
      Uri uri0 = new Uri("" &Rt"", "" &Rt"", "" &Rt"", 48, "" &Rt"", "" &Rt"", "" &Rt"");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      hashMap0.put(""ws"", linkedList0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(true);
      Uri uri1 = uriEncoder0.encode(uri0, list0);
}"
1644,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test11()  throws Throwable  {
      Uri uri0 = new Uri("" &Rt"", "" &Rt"", "" &Rt"", 48, "" &Rt"", "" &Rt"", "" &Rt"");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      hashMap0.put(""ws"", linkedList0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
      UriEncoder uriEncoder0 = UriEncoder.uriEncoder(true);
      Uri uri1 = uriEncoder0.encode(uri0, list0);
}"
1645,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test12()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.RAW;
      Uri uri0 = new Uri(""org.eclipse.jetty.util.thread.SerializedExecutor"", ""org.eclipse.jetty.util.thread.SerializedExecutor"", ""org.eclipse.jetty.util.thread.SerializedExecutor"", (-3949), ""org.eclipse.jetty.util.thread.SerializedExecutor"", ""org.eclipse.jetty.util.thread.SerializedExecutor"", (String) null);
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Param param0 = new Param(""ws"", ""http"");
      linkedList0.add(param0);
      Uri uri1 = Uri.create(uri0, ""http"");
      Uri uri2 = uriEncoder0.encode(uri1, linkedList0);
}"
1646,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test13()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.RAW;
      Uri uri0 = new Uri(""org.eclipse.jetty.util.thread.SerializedExecutor"", ""org.eclipse.jetty.util.thread.SerializedExecutor"", ""org.eclipse.jetty.util.thread.SerializedExecutor"", (-3949), ""org.eclipse.jetty.util.thread.SerializedExecutor"", ""org.eclipse.jetty.util.thread.SerializedExecutor"", (String) null);
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Param param0 = new Param(""ws"", ""http"");
      linkedList0.add(param0);
      Uri uri1 = Uri.create(uri0, ""http"");
      Uri uri2 = uriEncoder0.encode(uri1, linkedList0);
}"
1647,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test14()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.RAW;
      Uri uri0 = new Uri(""org.eclipse.jetty.util.thread.SerializedExecutor"", ""org.eclipse.jetty.util.thread.SerializedExecutor"", ""org.eclipse.jetty.util.thread.SerializedExecutor"", (-3949), ""org.eclipse.jetty.util.thread.SerializedExecutor"", ""org.eclipse.jetty.util.thread.SerializedExecutor"", (String) null);
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Param param0 = new Param(""ws"", ""http"");
      linkedList0.add(param0);
      Uri uri1 = Uri.create(uri0, ""http"");
      Uri uri2 = uriEncoder0.encode(uri1, linkedList0);
}"
1648,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test15()  throws Throwable  {
      Uri uri0 = new Uri("" &Rt"", "" &Rt"", "" &Rt"", 48, "" &Rt"", "" &Rt"", "" &Rt"");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      hashMap0.put(""ws"", linkedList0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri1 = uriEncoder0.encode(uri0, list0);
}"
1649,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test16()  throws Throwable  {
      Uri uri0 = new Uri("" &Rt"", "" &Rt"", "" &Rt"", 48, "" &Rt"", "" &Rt"", "" &Rt"");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      hashMap0.put(""ws"", linkedList0);
      List<Param> list0 = Param.map2ParamList(hashMap0);
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri1 = uriEncoder0.encode(uri0, list0);
}"
1650,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test17()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri0 = new Uri(""org.asynchttpclient.util.UriEncoder"", ""org.asynchttpclient.util.UriEncoder"", ""org.asynchttpclient.util.UriEncoder"", (-1027), ""org.asynchttpclient.util.UriEncoder"", ""org.asynchttpclient.util.UriEncoder"", (String) null);
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Param param0 = new Param(""ws"", ""ws"");
      linkedList0.add(param0);
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uriEncoder0.encode(uri1, linkedList0);
}"
1651,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test18()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri0 = new Uri(""org.asynchttpclient.util.UriEncoder"", ""org.asynchttpclient.util.UriEncoder"", ""org.asynchttpclient.util.UriEncoder"", (-1027), ""org.asynchttpclient.util.UriEncoder"", ""org.asynchttpclient.util.UriEncoder"", (String) null);
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Param param0 = new Param(""ws"", ""ws"");
      linkedList0.add(param0);
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uriEncoder0.encode(uri1, linkedList0);
}"
1652,"  public Uri encode(Uri uri, List<Param> queryParams) {
    String newPath = encodePath(uri.getPath());
    String newQuery = encodeQuery(uri.getQuery(), queryParams);
    return new Uri(uri.getScheme(),
            uri.getUserInfo(),
            uri.getHost(),
            uri.getPort(),
            newPath,
            newQuery,
            uri.getFragment());
  }","  public void test19()  throws Throwable  {
      UriEncoder uriEncoder0 = UriEncoder.FIXING;
      Uri uri0 = new Uri(""org.asynchttpclient.util.UriEncoder"", ""org.asynchttpclient.util.UriEncoder"", ""org.asynchttpclient.util.UriEncoder"", (-1027), ""org.asynchttpclient.util.UriEncoder"", ""org.asynchttpclient.util.UriEncoder"", (String) null);
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      Param param0 = new Param(""ws"", ""ws"");
      linkedList0.add(param0);
      Uri uri1 = Uri.create(uri0, ""https"");
      Uri uri2 = uriEncoder0.encode(uri1, linkedList0);
}"
1653,"  public static <T> T withDefault(T value, T def) {
    return value == null ? def : value;
  }","  public void test0()  throws Throwable  {
      String string0 = MiscUtils.withDefault((String) null, ""@ZnNkMiugh~AA"");
}"
1654,"  public static <T> T withDefault(T value, T def) {
    return value == null ? def : value;
  }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(62);
      Integer integer1 = new Integer(0);
      Integer integer2 = MiscUtils.withDefault(integer0, integer1);
}"
1655,"  public static void closeSilently(Closeable closeable) {
    if (closeable != null)
      try {
        closeable.close();
      } catch (IOException e) {
        //
      }
  }","  public void test2()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((File) null, ""ZtrvX>><Vw~"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MiscUtils.closeSilently(mockFileWriter0);
  }"
1656,"  public static Throwable getCause(Throwable t) {
    Throwable cause = t.getCause();
    return cause != null ? getCause(cause) : t;
  }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        MiscUtils.getCause((Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.util.MiscUtils"", e);
      }
  }"
1657,"  public static void closeSilently(Closeable closeable) {
    if (closeable != null)
      try {
        closeable.close();
      } catch (IOException e) {
        //
      }
  }","  public void test4()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      // Undeclared exception!
      try { 
        MiscUtils.closeSilently(mockPrintStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1658,"  public static boolean isEmpty(String string) {
    return string == null || string.isEmpty();
  }","  public void test5()  throws Throwable  {
      boolean boolean0 = MiscUtils.isEmpty("""");
}"
1659,"  public static boolean isEmpty(String string) {
    return string == null || string.isEmpty();
  }","  public void test6()  throws Throwable  {
      boolean boolean0 = MiscUtils.isEmpty((String) null);
}"
1660,"  public static boolean isEmpty(String string) {
    return string == null || string.isEmpty();
  }","  public void test7()  throws Throwable  {
      boolean boolean0 = MiscUtils.isEmpty(""org.asynchttpclient.util.MiscUtils"");
}"
1661,"  public static Throwable getCause(Throwable t) {
    Throwable cause = t.getCause();
    return cause != null ? getCause(cause) : t;
  }","  public void test8()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""^vq0oZYP~Z%W w"");
      MockThrowable mockThrowable1 = new MockThrowable(""{vg/O.7W&d|dd>K1"", mockThrowable0);
      Throwable throwable0 = MiscUtils.getCause(mockThrowable1);
}"
1662,"  public static Throwable getCause(Throwable t) {
    Throwable cause = t.getCause();
    return cause != null ? getCause(cause) : t;
  }","  public void test9()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""^vq0oZYP~Z%W w"");
      Throwable throwable0 = MiscUtils.getCause(mockThrowable0);
}"
1663,"  public static void closeSilently(Closeable closeable) {
    if (closeable != null)
      try {
        closeable.close();
      } catch (IOException e) {
        //
      }
  }","  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, ""ZtrvX>><Vw~"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MiscUtils.closeSilently(mockFileWriter0);
  }"
1664,"  public static void closeSilently(Closeable closeable) {
    if (closeable != null)
      try {
        closeable.close();
      } catch (IOException e) {
        //
      }
  }","  public void test11()  throws Throwable  {
      MiscUtils.closeSilently((Closeable) null);
  }"
1665,"  public static <T> T withDefault(T value, T def) {
    return value == null ? def : value;
  }","  public void test12()  throws Throwable  {
      Object object0 = MiscUtils.withDefault((Object) null, (Object) null);
}"
1666,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test13()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("""", """");
      boolean boolean0 = MiscUtils.isNonEmpty((Map<?, ?>) hashMap0);
}"
1667,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test14()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      boolean boolean0 = MiscUtils.isNonEmpty((Map<?, ?>) hashMap0);
}"
1668,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test15()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((Map<?, ?>) null);
}"
1669,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test16()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Integer integer0 = new Integer(0);
      linkedHashSet0.add(integer0);
      boolean boolean0 = MiscUtils.isNonEmpty((Collection<?>) linkedHashSet0);
}"
1670,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test17()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      boolean boolean0 = MiscUtils.isNonEmpty((Collection<?>) linkedHashSet0);
}"
1671,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test18()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((Collection<?>) null);
}"
1672,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = MiscUtils.isNonEmpty(byteArray0);
}"
1673,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = MiscUtils.isNonEmpty(byteArray0);
}"
1674,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test21()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((byte[]) null);
}"
1675,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      boolean boolean0 = MiscUtils.isNonEmpty(objectArray0);
}"
1676,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = MiscUtils.isNonEmpty(objectArray0);
}"
1677,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test24()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((Object[]) null);
}"
1678,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test25()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty((String) null);
}"
1679,"  public static boolean isNonEmpty(String string) {
    return !isEmpty(string);
  }","  public void test26()  throws Throwable  {
      boolean boolean0 = MiscUtils.isNonEmpty(""test({}) -> [depth {}>{}]"");
}"
1680,"  public static MessageDigest pooledSha1MessageDigest() {
    MessageDigest md = SHA1_MESSAGE_DIGESTS.get();
    md.reset();
    return md;
  }","  public void test0()  throws Throwable  {
      MessageDigest messageDigest0 = MessageDigestUtils.pooledSha1MessageDigest();
}"
1681,,"  public void test1()  throws Throwable  {
      MessageDigestUtils messageDigestUtils0 = new MessageDigestUtils();
  }"
1682,"  public static MessageDigest pooledMd5MessageDigest() {
    MessageDigest md = MD5_MESSAGE_DIGESTS.get();
    md.reset();
    return md;
  }","  public void test2()  throws Throwable  {
      MessageDigest messageDigest0 = MessageDigestUtils.pooledMd5MessageDigest();
}"
1683,,"  public void test0()  throws Throwable  {
      NoopChannelPool[] noopChannelPoolArray0 = NoopChannelPool.values();
}"
1684,"  public boolean isOpen() {
    return true;
  }","  public void test1()  throws Throwable  {
      NoopChannelPool noopChannelPool0 = NoopChannelPool.valueOf(""INSTANCE"");
}"
1685,"  public boolean isOpen() {
    return true;
  }","  public void test2()  throws Throwable  {
      NoopChannelPool noopChannelPool0 = NoopChannelPool.INSTANCE;
      noopChannelPool0.destroy();
}"
1686,"  public boolean offer(Channel channel, Object partitionKey) {
    return false;
  }","  public void test3()  throws Throwable  {
      NoopChannelPool noopChannelPool0 = NoopChannelPool.INSTANCE;
      boolean boolean0 = noopChannelPool0.offer((Channel) null, (Object) null);
}"
1687,"  public Channel poll(Object partitionKey) {
    return null;
  }","  public void test4()  throws Throwable  {
      NoopChannelPool noopChannelPool0 = NoopChannelPool.INSTANCE;
      IncludeExclude<Object> includeExclude0 = new IncludeExclude<Object>();
      Channel channel0 = noopChannelPool0.poll(includeExclude0);
}"
1688,"  public boolean isOpen() {
    return true;
  }","  public void test5()  throws Throwable  {
      NoopChannelPool noopChannelPool0 = NoopChannelPool.INSTANCE;
      IncludeExclude<Object> includeExclude0 = new IncludeExclude<Object>();
      noopChannelPool0.flushPartitions(includeExclude0);
}"
1689,"  public Map<String, Long> getIdleChannelCountPerHost() {
    return Collections.emptyMap();
  }","  public void test6()  throws Throwable  {
      NoopChannelPool noopChannelPool0 = NoopChannelPool.INSTANCE;
      Map<String, Long> map0 = noopChannelPool0.getIdleChannelCountPerHost();
}"
1690,"  public boolean removeAll(Channel channel) {
    return false;
  }","  public void test7()  throws Throwable  {
      NoopChannelPool noopChannelPool0 = NoopChannelPool.INSTANCE;
      boolean boolean0 = noopChannelPool0.removeAll((Channel) null);
}"
1691,"  public boolean isOpen() {
    return true;
  }","  public void test8()  throws Throwable  {
      NoopChannelPool noopChannelPool0 = NoopChannelPool.INSTANCE;
      boolean boolean0 = noopChannelPool0.isOpen();
}"
1692,"  NtlmEngineException(String message) {
    super(message);
  }","  public void test0()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""org.apache.commons.io.filefilter.NameFileFilter"");
      NtlmEngineException ntlmEngineException0 = new NtlmEngineException(""org.apache.commons.io.filefilter.NameFileFilter"", mockThrowable0);
  }"
1693,"  NtlmEngineException(String message) {
    super(message);
  }","  public void test1()  throws Throwable  {
      NtlmEngineException ntlmEngineException0 = new NtlmEngineException("""");
  }"
1694,,"  public void test0()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      ntlmEngine_MD4_0.count = (-4014L);
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
}"
1695,,"  public void test1()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      ntlmEngine_MD4_0.count = 2360L;
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
}"
1696,,"  public void test2()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message((String) null, (String) null, ""Error getting md5 message digest implementation: "", ""TlRMTVNTUAADAAAAGAAYAEgAAAAYABgAYAAAACYAJgB4AAAAJgAmAJ4AAAAmACYAxAAAABAAEADqAAAAtYKI4gUBKAoAAAAP/JlyWYeZLeAAAAAAAAAAAAAAAAAAAAAAAnwLZ4KSKUwbMMQz4rCHITNObeAPHJZkPwBTAFUAKQB8ADUAIQBFAEQAXABCAFwAKgBIAFQAYABMAFgAQQA/AFMAVQApAHwANQAhAEUAZABcAGIAXAAqAEgAVABgAGwAeABhAD8AUwBVACkAfAA1ACEARQBEAFwAQgBcACoASABUAGAATABYAEEAgY/nKCbwx9T/wg91i5BWhQ=="", byteArray0, (-2903), ""The list of names must not be null"", byteArray0);
  }"
1697,"    static int rotintlft(final int val, final int numbits) {
        return ((val << numbits) | (val >>> (32 - numbits)));
    }","  public void test3()  throws Throwable  {
      int int0 = NtlmEngine.rotintlft(2382, 0);
}"
1698,,"  public void test4()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message(""?SU)|5!Ed\b*HT`lxa"", ""?SU)|5!Ed\b*HT`lxa"", ""?SU)|5!Ed\b*HT`lxa"", ""?SU)|5!Ed\b*HT`lxa"", byteArray0, (-9), (String) null, byteArray0);
      byte[] byteArray1 = new byte[0];
      ntlmEngine_Type3Message0.addBytes(byteArray1);
}"
1699,"    static void writeULong(final byte[] buffer, final int value, final int offset) {
        buffer[offset] = (byte) (value & 0xff);
        buffer[offset + 1] = (byte) (value >> 8 & 0xff);
        buffer[offset + 2] = (byte) (value >> 16 & 0xff);
        buffer[offset + 3] = (byte) (value >> 24 & 0xff);
    }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      NtlmEngine.writeULong(byteArray0, (byte)7, (byte)1);
}"
1700,,"  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message(""8}zP("", ""D1W_|@(BK3YNtL<q"", ""8}zP("", ""D1W_|@(BK3YNtL<q"", byteArray0, (-1455), """", byteArray0);
      ntlmEngine_Type3Message0.prepareResponse((byte)40, (byte) (-36));
  }"
1701,,"  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message(""NTLM type "", ""NTLM type "", ""YJNCC@ba6)UT;ug/"", ""YJNCC@ba6)UT;ug/"", byteArray0, 11, ""YJNCC@ba6)UT;ug/"", byteArray0);
      // Undeclared exception!
      try { 
        ntlmEngine_Type3Message0.addUShort((byte) (-1));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage"", e);
      }
  }"
1702,,"  public void test8()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message(""?SU)|5!Ed\b*HT`lxa"", ""?SU)|5!Ed\b*HT`lxa"", ""?SU)|5!Ed\b*HT`lxa"", ""?SU)|5!Ed\b*HT`lxa"", byteArray0, 3, (String) null, byteArray0);
      // Undeclared exception!
      try { 
        ntlmEngine_Type3Message0.addULong((-161));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage"", e);
      }
  }"
1703,,"  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message(""8}zP("", ""D1W_|@(BK3YNtL<q"", ""8}zP("", ""D1W_|@(BK3YNtL<q"", byteArray0, (-1455), """", byteArray0);
      // Undeclared exception!
      try { 
        ntlmEngine_Type3Message0.addByte((byte)6);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage"", e);
      }
  }"
1704,,"  public void test10()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = new byte[0];
      ntlmEngine_MD4_0.update(byteArray0);
}"
1705,,"  public void test11()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      int[] intArray0 = new int[20];
      ntlmEngine_MD4_0.round3(intArray0);
}"
1706,,"  public void test12()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        ntlmEngine_MD4_0.round2(intArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine$MD4"", e);
      }
  }"
1707,,"  public void test13()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      // Undeclared exception!
      try { 
        ntlmEngine_MD4_0.round1((int[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine$MD4"", e);
      }
  }"
1708,,"  public void test14()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      ntlmEngine_MD4_0.processBuffer();
  }"
1709,"    static int rotintlft(final int val, final int numbits) {
        return ((val << numbits) | (val >>> (32 - numbits)));
    }","  public void test15()  throws Throwable  {
      int int0 = NtlmEngine.rotintlft(0, 0);
}"
1710,"    static int rotintlft(final int val, final int numbits) {
        return ((val << numbits) | (val >>> (32 - numbits)));
    }","  public void test16()  throws Throwable  {
      int int0 = NtlmEngine.rotintlft((-2087), (-2087));
}"
1711,"    static int H(final int x, final int y, final int z) {
        return (x ^ y ^ z);
    }","  public void test17()  throws Throwable  {
      int int0 = NtlmEngine.H(40, 40, 0);
}"
1712,"    static int H(final int x, final int y, final int z) {
        return (x ^ y ^ z);
    }","  public void test18()  throws Throwable  {
      int int0 = NtlmEngine.H(4, 4, 4);
}"
1713,"    static int H(final int x, final int y, final int z) {
        return (x ^ y ^ z);
    }","  public void test19()  throws Throwable  {
      int int0 = NtlmEngine.H((-271733879), (-271733879), (-271733879));
}"
1714,"    static int G(final int x, final int y, final int z) {
        return ((x & y) | (x & z) | (y & z));
    }","  public void test20()  throws Throwable  {
      int int0 = NtlmEngine.G(0, 0, 805351646);
}"
1715,"    static int G(final int x, final int y, final int z) {
        return ((x & y) | (x & z) | (y & z));
    }","  public void test21()  throws Throwable  {
      int int0 = NtlmEngine.G(2, 4, (-2146));
}"
1716,"    static int G(final int x, final int y, final int z) {
        return ((x & y) | (x & z) | (y & z));
    }","  public void test22()  throws Throwable  {
      int int0 = NtlmEngine.G((-271733879), (-271733879), (-271733879));
}"
1717,"    static int F(final int x, final int y, final int z) {
        return ((x & y) | (~x & z));
    }","  public void test23()  throws Throwable  {
      int int0 = NtlmEngine.F(1732584193, 56, 1732584193);
}"
1718,"    static int F(final int x, final int y, final int z) {
        return ((x & y) | (~x & z));
    }","  public void test24()  throws Throwable  {
      int int0 = NtlmEngine.F(38, (-1576500735), 1138);
}"
1719,"    static int F(final int x, final int y, final int z) {
        return ((x & y) | (~x & z));
    }","  public void test25()  throws Throwable  {
      int int0 = NtlmEngine.F((-2486), (-2486), (-2486));
}"
1720,"    static void writeULong(final byte[] buffer, final int value, final int offset) {
        buffer[offset] = (byte) (value & 0xff);
        buffer[offset + 1] = (byte) (value >> 8 & 0xff);
        buffer[offset + 2] = (byte) (value >> 16 & 0xff);
        buffer[offset + 3] = (byte) (value >> 24 & 0xff);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        NtlmEngine.writeULong((byte[]) null, (-1), 8);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine"", e);
      }
  }"
1721,"    static void writeULong(final byte[] buffer, final int value, final int offset) {
        buffer[offset] = (byte) (value & 0xff);
        buffer[offset + 1] = (byte) (value >> 8 & 0xff);
        buffer[offset + 2] = (byte) (value >> 16 & 0xff);
        buffer[offset + 3] = (byte) (value >> 24 & 0xff);
    }","  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NtlmEngine.writeULong(byteArray0, (-3278), 0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine"", e);
      }
  }"
1722,"    public String generateType3Msg(final String username, final String password, final String domain, final String workstation,
            final String challenge) throws NtlmEngineException {
        final Type2Message t2m = new Type2Message(challenge);
        return getType3Message(username, password, workstation, domain, t2m.getChallenge(), t2m.getFlags(), t2m.getTarget(),
                t2m.getTargetInfo());
    }","  public void test28()  throws Throwable  {
      NtlmEngine ntlmEngine0 = new NtlmEngine();
      try { 
        ntlmEngine0.INSTANCE.generateType3Msg(""NTLM message decoding error - packet too short"", ""NTLM message decoding error - packet too short"", ""i]"", """", """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // NTLM message decoding error - packet too short
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage"", e);
      }
  }"
1723,"    public String generateType3Msg(final String username, final String password, final String domain, final String workstation,
            final String challenge) throws NtlmEngineException {
        final Type2Message t2m = new Type2Message(challenge);
        return getType3Message(username, password, workstation, domain, t2m.getChallenge(), t2m.getFlags(), t2m.getTarget(),
                t2m.getTargetInfo());
    }","  public void test29()  throws Throwable  {
      NtlmEngine ntlmEngine0 = new NtlmEngine();
      // Undeclared exception!
      try { 
        ntlmEngine0.generateType3Msg((String) null, ""EaVt"", """", "" raU| KD <nV@"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Base64$Decoder"", e);
      }
  }"
1724,,"  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = null;
      try {
        ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message(""The offset cannot be negative"", ""The offset cannot be negative"", ""The offset cannot be negative"", ""The offset cannot be negative"", byteArray0, (byte) (-15), ""The offset cannot be negative"", byteArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Input length not multiple of 8 bytes
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine"", e);
      }
  }"
1725,,"  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message(""NTLM type "", ""NTLM type "", ""NTLM type "", ""NTLM type "", byteArray0, 17, ""NTLM type "", byteArray0);
  }"
1726,,"  public void test32()  throws Throwable  {
      NtlmEngine.Type2Message ntlmEngine_Type2Message0 = null;
      try {
        ntlmEngine_Type2Message0 = new NtlmEngine.Type2Message(""Insensitive"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // NTLM message expected - instead got unrecognized bytes
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage"", e);
      }
  }"
1727,,"  public void test33()  throws Throwable  {
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = null;
      try {
        ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message(""d'x:96o\"""", ""d'x:96o\"""", ""d'x:96o\"""", ""d'x:96o\"""", (byte[]) null, (-2749), ""d'x:96o\"""", (byte[]) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Null input buffer
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine"", e);
      }
  }"
1728,,"  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("""", """", """", ""B~E1-`$%p+}cQ#f%Z\"""", byteArray0, (-992), """", (byte[]) null);
  }"
1729,,"  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message("""", ""UKh.|DeJ"", ""UKh.|DeJ"", ""-7"", byteArray0, (-2), """", byteArray0);
  }"
1730,,"  public void test36()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message(""?SU)|5!Ed\b*HT`lxa"", ""?SU)|5!Ed\b*HT`lxa"", ""?SU)|5!Ed\b*HT`lxa"", ""?SU)|5!Ed\b*HT`lxa"", byteArray0, 128, (String) null, byteArray0);
      String string0 = ntlmEngine_Type3Message0.getResponse();
}"
1731,,"  public void test37()  throws Throwable  {
      NtlmEngine.Type2Message ntlmEngine_Type2Message0 = null;
      try {
        ntlmEngine_Type2Message0 = new NtlmEngine.Type2Message(""TlRMTVNTUAABAAAAAYIIogAAAAAoAAAAAAAAACgAAAAFASgKAAAADw=="");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // NTLM type 2 message expected - instead got type 1
         //
         verifyException(""org.asynchttpclient.ntlm.NtlmEngine$NTLMMessage"", e);
      }
  }"
1732,"    public String generateType1Msg() {
        return TYPE_1_MESSAGE;
    }","  public void test38()  throws Throwable  {
      NtlmEngine ntlmEngine0 = new NtlmEngine();
      String string0 = ntlmEngine0.generateType1Msg();
}"
1733,,"  public void test39()  throws Throwable  {
      NtlmEngine.MD4 ntlmEngine_MD4_0 = new NtlmEngine.MD4();
      byte[] byteArray0 = ntlmEngine_MD4_0.getOutput();
      NtlmEngine.Type3Message ntlmEngine_Type3Message0 = new NtlmEngine.Type3Message((String) null, (String) null, ""TlRMTVNTUAADAAAAGAAYAEgAAAAYABgAYAAAACYAJgB4AAAAJgAmAJ4AAAAmACYAxAAAAAAAAADqAAAAgAAAAgUBKAoAAAAPhDdVWEKTK1KSOkqHAxdYbv7oWVlGD8pR7Qgs8FdSoUex1hFfMdfO/QiB1VtypiRVPwBTAFUAKQB8ADUAIQBFAEQAXABCAFwAKgBIAFQAYABMAFgAQQA/AFMAVQApAHwANQAhAEUAZABcAGIAXAAqAEgAVABgAGwAeABhAD8AUwBVACkAfAA1ACEARQBEAFwAQgBcACoASABUAGAATABYAEEA"", ""registerTree {} {} {}"", byteArray0, 583263097, ""TlRMTVNTUAADAAAAGAAYAEgAAAAYABgAYAAAACYAJgB4AAAAJgAmAJ4AAAAmACYAxAAAAAAAAADqAAAAgAAAAgUBKAoAAAAPhDdVWEKTK1KSOkqHAxdYbv7oWVlGD8pR7Qgs8FdSoUex1hFfMdfO/QiB1VtypiRVPwBTAFUAKQB8ADUAIQBFAEQAXABCAFwAKgBIAFQAYABMAFgAQQA/AFMAVQApAHwANQAhAEUAZABcAGIAXAAqAEgAVABgAGwAeABhAD8AUwBVACkAfAA1ACEARQBEAFwAQgBcACoASABUAGAATABYAEEA"", byteArray0);
      String string0 = ntlmEngine_Type3Message0.getResponse();
}"
1734,"    public String generateType3Msg(final String username, final String password, final String domain, final String workstation,
            final String challenge) throws NtlmEngineException {
        final Type2Message t2m = new Type2Message(challenge);
        return getType3Message(username, password, workstation, domain, t2m.getChallenge(), t2m.getFlags(), t2m.getTarget(),
                t2m.getTargetInfo());
    }","  public void test40()  throws Throwable  {
      NtlmEngine ntlmEngine0 = new NtlmEngine();
      // Undeclared exception!
      try { 
        ntlmEngine0.INSTANCE.generateType3Msg("""", ""B~E1-`$%p+}cQ#f%Z\"""", ""x$3Xw\""/Jr 7"", ""x$3Xw\""/Jr 7"", ""NTLM type 2 message indicates no support for Unicode. Flags are: "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal base64 character 20
         //
         verifyException(""java.util.Base64$Decoder"", e);
      }
  }"
1735,"  public State onHeadersWritten() {
    if (headers != null) {
      fireOnHeadersSent(headers);
    }
    return State.CONTINUE;
  }","  public void test0()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(true);
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler1.onContentWriteProgress(1821L, 9223372036854775807L, 0L);
      AsyncHandler.State asyncHandler_State1 = transferCompletionHandler1.onHeadersWritten();
}"
1736,"  public Response onCompleted(Response response) throws Exception {
    fireOnEnd();
    return response;
  }","  public void test1()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      Response response0 = transferCompletionHandler0.onCompleted((Response) null);
}"
1737,"  public Response onCompleted(Response response) throws Exception {
    fireOnEnd();
    return response;
  }","  public void test2()  throws Throwable  {
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpResponseStatus0).getStatusCode();
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(true);
      ArrayList<HttpResponseBodyPart> arrayList0 = new ArrayList<HttpResponseBodyPart>();
      NettyResponse nettyResponse0 = new NettyResponse(httpResponseStatus0, (HttpHeaders) null, arrayList0);
      Response response0 = transferCompletionHandler0.onCompleted((Response) nettyResponse0);
}"
1738,"  public Response onCompleted(Response response) throws Exception {
    fireOnEnd();
    return response;
  }","  public void test3()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(true);
      EmptyHttpHeaders emptyHttpHeaders0 = EmptyHttpHeaders.INSTANCE;
      Stack<HttpResponseBodyPart> stack0 = new Stack<HttpResponseBodyPart>();
      NettyResponse nettyResponse0 = new NettyResponse((HttpResponseStatus) null, emptyHttpHeaders0, stack0);
      Response response0 = transferCompletionHandler0.onCompleted((Response) nettyResponse0);
}"
1739,"  public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
    fireOnHeaderReceived(headers);
    return super.onHeadersReceived(headers);
  }","  public void test4()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      transferCompletionHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(httpHeaders0).iterator();
      try { 
        transferCompletionHandler0.onTrailingHeadersReceived(httpHeaders0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.handler.codec.http.HttpHeaders"", e);
      }
  }"
1740,"  public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
    fireOnHeaderReceived(headers);
    return super.onHeadersReceived(headers);
  }","  public void test5()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      transferCompletionHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
      try { 
        transferCompletionHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException(""io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl"", e);
      }
  }"
1741,"  public State onHeadersReceived(final HttpHeaders headers) throws Exception {
    fireOnHeaderReceived(headers);
    return super.onHeadersReceived(headers);
  }","  public void test6()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ""Sq_QBkDN$0qk"";
      io.netty.handler.codec.http.HttpResponseStatus httpResponseStatus0 = io.netty.handler.codec.http.HttpResponseStatus.NOT_FOUND;
      AsciiString asciiString0 = httpResponseStatus0.codeAsText();
      charSequenceArray0[1] = (CharSequence) asciiString0;
      ReadOnlyHttpHeaders readOnlyHttpHeaders0 = new ReadOnlyHttpHeaders(true, charSequenceArray0);
      transferCompletionHandler0.onHeadersReceived(readOnlyHttpHeaders0);
      try { 
        transferCompletionHandler0.onHeadersReceived(readOnlyHttpHeaders0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // read only
         //
         verifyException(""io.netty.handler.codec.http.ReadOnlyHttpHeaders"", e);
      }
  }"
1742,"  public State onHeadersReceived(final HttpHeaders headers) throws Exception {
    fireOnHeaderReceived(headers);
    return super.onHeadersReceived(headers);
  }","  public void test7()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      DefaultHttpHeaders defaultHttpHeaders0 = new DefaultHttpHeaders();
      transferCompletionHandler0.onTrailingHeadersReceived(defaultHttpHeaders0);
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(httpHeaders0).iterator();
      try { 
        transferCompletionHandler0.onHeadersReceived(httpHeaders0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.handler.codec.http.HttpHeaders"", e);
      }
  }"
1743,"  public State onBodyPartReceived(final HttpResponseBodyPart content) throws Exception {
    State s = State.CONTINUE;
    if (accumulateResponseBytes) {
      s = super.onBodyPartReceived(content);
    }
    fireOnBytesReceived(content.getBodyPartBytes());
    return s;
  }","  public void test8()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(true);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, true, 28);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.addComponents((Iterable<ByteBuf>) compositeByteBuf0);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(compositeByteBuf1, true);
      // Undeclared exception!
      try { 
        transferCompletionHandler0.onBodyPartReceived(lazyResponseBodyPart0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1744,"  public State onBodyPartReceived(final HttpResponseBodyPart content) throws Exception {
    State s = State.CONTINUE;
    if (accumulateResponseBytes) {
      s = super.onBodyPartReceived(content);
    }
    fireOnBytesReceived(content.getBodyPartBytes());
    return s;
  }","  public void test9()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart((ByteBuf) null, true);
      try { 
        transferCompletionHandler0.onBodyPartReceived(lazyResponseBodyPart0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.LazyResponseBodyPart"", e);
      }
  }"
1745,"  public TransferCompletionHandler addTransferListener(TransferListener t) {
    listeners.offer(t);
    return this;
  }","  public void test10()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(false);
      // Undeclared exception!
      try { 
        transferCompletionHandler0.addTransferListener((TransferListener) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentLinkedQueue"", e);
      }
  }"
1746,"  public State onHeadersWritten() {
    if (headers != null) {
      fireOnHeadersSent(headers);
    }
    return State.CONTINUE;
  }","  public void test11()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      transferCompletionHandler1.onThrowable(throwable0);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler0.onHeadersWritten();
}"
1747,"  public State onBodyPartReceived(final HttpResponseBodyPart content) throws Exception {
    State s = State.CONTINUE;
    if (accumulateResponseBytes) {
      s = super.onBodyPartReceived(content);
    }
    fireOnBytesReceived(content.getBodyPartBytes());
    return s;
  }","  public void test12()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      transferCompletionHandler1.onContentWriteProgress(0L, 0L, 0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)1;
      HttpResponseBodyPart httpResponseBodyPart0 = mock(HttpResponseBodyPart.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(httpResponseBodyPart0).getBodyPartBytes();
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler0.onBodyPartReceived(httpResponseBodyPart0);
}"
1748,"  public State onHeadersWritten() {
    if (headers != null) {
      fireOnHeadersSent(headers);
    }
    return State.CONTINUE;
  }","  public void test13()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      transferCompletionHandler0.onCompleted();
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler1.onHeadersWritten();
}"
1749,"  public State onHeadersWritten() {
    if (headers != null) {
      fireOnHeadersSent(headers);
    }
    return State.CONTINUE;
  }","  public void test14()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      transferCompletionHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler1.onHeadersWritten();
}"
1750,"  public State onHeadersWritten() {
    if (headers != null) {
      fireOnHeadersSent(headers);
    }
    return State.CONTINUE;
  }","  public void test15()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      TransferListener transferListener0 = mock(TransferListener.class, new ViolatedAssumptionAnswer());
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.addTransferListener(transferListener0);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      transferCompletionHandler1.headers(combinedHttpHeaders0);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler0.onHeadersWritten();
}"
1751,"  public State onHeadersWritten() {
    if (headers != null) {
      fireOnHeadersSent(headers);
    }
    return State.CONTINUE;
  }","  public void test16()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler(true);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, true, 28);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(compositeByteBuf0, true);
      transferCompletionHandler0.onBodyPartReceived(lazyResponseBodyPart0);
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler0.onHeadersWritten();
}"
1752,"  public State onHeadersReceived(final HttpHeaders headers) throws Exception {
    fireOnHeaderReceived(headers);
    return super.onHeadersReceived(headers);
  }","  public void test17()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      boolean boolean0 = false;
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      transferCompletionHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
      try { 
        transferCompletionHandler0.onHeadersReceived(combinedHttpHeaders0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException(""io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl"", e);
      }
  }"
1753,"  public State onHeadersWritten() {
    if (headers != null) {
      fireOnHeadersSent(headers);
    }
    return State.CONTINUE;
  }","  public void test18()  throws Throwable  {
      TransferCompletionHandler transferCompletionHandler0 = new TransferCompletionHandler();
      AsyncHandler.State asyncHandler_State0 = transferCompletionHandler0.onContentWriteProgress(479L, 479L, 479L);
      TransferCompletionHandler transferCompletionHandler1 = transferCompletionHandler0.removeTransferListener((TransferListener) null);
      AsyncHandler.State asyncHandler_State1 = transferCompletionHandler1.onHeadersWritten();
}"
1754,"  protected void closeOut() throws IOException {
    try {
      output.flush();
    } finally {
      output.close();
    }
  }","  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(517);
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(byteArrayOutputStream0);
      bodyDeferringAsyncHandler0.closeOut();
  }"
1755,"  public void onThrowable(Throwable t) {
    this.throwable = t;
    // Counting down to handle error cases too.
    // In ""premature exceptions"" cases, the onBodyPartReceived() and
    // onCompleted()
    // methods will never be invoked, leaving caller of getResponse() method
    // blocked forever.
    try {
      semaphore.acquire();
    } catch (InterruptedException e) {
      // Ignore
    } finally {
      headersArrived.countDown();
      semaphore.release();
    }

    try {
      closeOut();
    } catch (IOException e) {
      // ignore
    }
  }","  public void test1()  throws Throwable  {
      File file0 = MockFile.createTempFile(""U*C/LfWCEjDCESg"", ""Lyor"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockFileOutputStream0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (Map<String, ClientInfoStatus>) null);
      bodyDeferringAsyncHandler0.onThrowable(sQLClientInfoException0);
}"
1756,"  public State onHeadersReceived(HttpHeaders headers) {
    responseBuilder.accumulate(headers);
    return State.CONTINUE;
  }","  public void test2()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""c&b`g`%{"", true);
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockFileOutputStream0);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      bodyDeferringAsyncHandler0.onHeadersReceived(combinedHttpHeaders0);
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler0.onHeadersReceived(combinedHttpHeaders0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException(""io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl"", e);
      }
  }"
1757,"  public Response onCompleted() throws IOException {

    if (!responseSet) {
      response = responseBuilder.build();
      responseSet = true;
    }

    // Counting down to handle error cases too.
    // In ""normal"" cases, latch is already at 0 here
    // But in other cases, for example when because of some error
    // onBodyPartReceived() is never called, the caller
    // of getResponse() would remain blocked infinitely.
    // By contract, onCompleted() is always invoked, even in case of errors
    headersArrived.countDown();

    closeOut();

    try {
      semaphore.acquire();
      if (throwable != null) {
        throw new IOException(throwable);
      } else {
        // sending out current response
        return responseBuilder.build();
      }
    } catch (InterruptedException e) {
      return null;
    } finally {
      semaphore.release();
    }
  }","  public void test3()  throws Throwable  {
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler((OutputStream) null);
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler0.onCompleted();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.BodyDeferringAsyncHandler"", e);
      }
  }"
1758,"  public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
    // body arrived, flush headers
    if (!responseSet) {
      response = responseBuilder.build();
      responseSet = true;
      headersArrived.countDown();
    }

    output.write(bodyPart.getBodyPartBytes());
    return State.CONTINUE;
  }","  public void test4()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(517);
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(byteArrayOutputStream0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).duplicate();
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, true);
      try { 
        bodyDeferringAsyncHandler0.onBodyPartReceived(lazyResponseBodyPart0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.util.ByteBufUtils"", e);
      }
  }"
1759,"  protected void closeOut() throws IOException {
    try {
      output.flush();
    } finally {
      output.close();
    }
  }","  public void test5()  throws Throwable  {
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler((OutputStream) null);
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler0.closeOut();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.BodyDeferringAsyncHandler"", e);
      }
  }"
1760,"  public Response onCompleted() throws IOException {

    if (!responseSet) {
      response = responseBuilder.build();
      responseSet = true;
    }

    // Counting down to handle error cases too.
    // In ""normal"" cases, latch is already at 0 here
    // But in other cases, for example when because of some error
    // onBodyPartReceived() is never called, the caller
    // of getResponse() would remain blocked infinitely.
    // By contract, onCompleted() is always invoked, even in case of errors
    headersArrived.countDown();

    closeOut();

    try {
      semaphore.acquire();
      if (throwable != null) {
        throw new IOException(throwable);
      } else {
        // sending out current response
        return responseBuilder.build();
      }
    } catch (InterruptedException e) {
      return null;
    } finally {
      semaphore.release();
    }
  }","  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("" cannot retry a request."", "" cannot retry a request."");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockFileOutputStream0);
      bodyDeferringAsyncHandler0.onCompleted();
      Response response0 = bodyDeferringAsyncHandler0.onCompleted();
}"
1761,"  public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
    // body arrived, flush headers
    if (!responseSet) {
      response = responseBuilder.build();
      responseSet = true;
      headersArrived.countDown();
    }

    output.write(bodyPart.getBodyPartBytes());
    return State.CONTINUE;
  }","  public void test7()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(""V@s>L>vKskp*~8"");
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockPrintStream0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 1038, 1038);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(unpooledUnsafeDirectByteBuf0, false);
      bodyDeferringAsyncHandler0.onBodyPartReceived(lazyResponseBodyPart0);
      AsyncHandler.State asyncHandler_State0 = bodyDeferringAsyncHandler0.onBodyPartReceived(lazyResponseBodyPart0);
}"
1762,"  public State onTrailingHeadersReceived(HttpHeaders headers) {
    responseBuilder.accumulate(headers);
    return State.CONTINUE;
  }","  public void test8()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""AKK{Y2_z4LP?B,n{tR"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockPrintStream0);
      EmptyHttpHeaders emptyHttpHeaders0 = EmptyHttpHeaders.INSTANCE;
      HttpHeaders httpHeaders0 = emptyHttpHeaders0.copy();
      bodyDeferringAsyncHandler0.onTrailingHeadersReceived(httpHeaders0);
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler0.onTrailingHeadersReceived(httpHeaders0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException(""io.netty.handler.codec.DefaultHeaders"", e);
      }
  }"
1763,"  public State onStatusReceived(HttpResponseStatus responseStatus) {
    responseBuilder.reset();
    responseBuilder.accumulate(responseStatus);
    return State.CONTINUE;
  }","  public void test9()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""PB+p"", ""PB+p"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockPrintStream0);
      AsyncHandler.State asyncHandler_State0 = bodyDeferringAsyncHandler0.onStatusReceived((HttpResponseStatus) null);
}"
1764,"  public void onRetry() {
    throw new UnsupportedOperationException(this.getClass().getSimpleName() + "" cannot retry a request."");
  }","  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler(mockPrintStream0);
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler0.onRetry();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // BodyDeferringAsyncHandler cannot retry a request.
         //
         verifyException(""org.asynchttpclient.handler.BodyDeferringAsyncHandler"", e);
      }
  }"
1765,"  public void onThrowable(Throwable t) {
    this.throwable = t;
    // Counting down to handle error cases too.
    // In ""premature exceptions"" cases, the onBodyPartReceived() and
    // onCompleted()
    // methods will never be invoked, leaving caller of getResponse() method
    // blocked forever.
    try {
      semaphore.acquire();
    } catch (InterruptedException e) {
      // Ignore
    } finally {
      headersArrived.countDown();
      semaphore.release();
    }

    try {
      closeOut();
    } catch (IOException e) {
      // ignore
    }
  }","  public void test11()  throws Throwable  {
      BodyDeferringAsyncHandler bodyDeferringAsyncHandler0 = new BodyDeferringAsyncHandler((OutputStream) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""2gd"", ""2gd"");
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler0.onThrowable(sQLFeatureNotSupportedException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.BodyDeferringAsyncHandler"", e);
      }
  }"
1766,"  public BodyDeferringAsyncHandler(final OutputStream os) {
    this.output = os;
    this.responseSet = false;
  }","  public void test12()  throws Throwable  {
      Future<Response> future0 = (Future<Response>) mock(Future.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BodyDeferringAsyncHandler.BodyDeferringInputStream bodyDeferringAsyncHandler_BodyDeferringInputStream0 = new BodyDeferringAsyncHandler.BodyDeferringInputStream(future0, (BodyDeferringAsyncHandler) null, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler_BodyDeferringInputStream0.getAsapResponse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.BodyDeferringAsyncHandler$BodyDeferringInputStream"", e);
      }
  }"
1767,"  public BodyDeferringAsyncHandler(final OutputStream os) {
    this.output = os;
    this.responseSet = false;
  }","  public void test13()  throws Throwable  {
      BodyDeferringAsyncHandler.BodyDeferringInputStream bodyDeferringAsyncHandler_BodyDeferringInputStream0 = new BodyDeferringAsyncHandler.BodyDeferringInputStream((Future<Response>) null, (BodyDeferringAsyncHandler) null, (InputStream) null);
      // Undeclared exception!
      try { 
        bodyDeferringAsyncHandler_BodyDeferringInputStream0.getLastResponse();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.BodyDeferringAsyncHandler$BodyDeferringInputStream"", e);
      }
  }"
1768,"  public MaxRedirectException(String msg) {
    super(msg, null, true, false);
  }","  public void test0()  throws Throwable  {
      MaxRedirectException maxRedirectException0 = null;
      try {
        maxRedirectException0 = new MaxRedirectException(""C;*=~3E:1yO:x(*%Qzp"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1769,"  public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {

    if (accumulateBody) {
      responseBuilder.accumulate(bodyPart);
    }

    State state = State.CONTINUE;
    try {
      resumableListener.onBytesReceived(bodyPart.getBodyByteBuffer());
    } catch (IOException ex) {
      return AsyncHandler.State.ABORT;
    }

    if (decoratedAsyncHandler != null) {
      state = decoratedAsyncHandler.onBodyPartReceived(bodyPart);
    }

    byteTransferred.addAndGet(bodyPart.getBodyPartBytes().length);
    resumableProcessor.put(url, byteTransferred.get());

    return state;
  }","  public void test0()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(0L);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 1, 1);
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.writerIndex(1);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, false);
      AsyncHandler.State asyncHandler_State0 = resumableAsyncHandler0.onBodyPartReceived(lazyResponseBodyPart0);
}"
1770,,"  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
          propertiesBasedResumableProcessor0.save((Map<String, Long>) null);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }"
1771,,"  public void test2()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      propertiesBasedResumableProcessor0.remove(""_Aw'k[eK%wd5I'E"");
  }"
1772,,"  public void test3()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      propertiesBasedResumableProcessor0.put(""ASYNC"", 2145L);
  }"
1773,,"  public void test4()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      Map<String, Long> map0 = propertiesBasedResumableProcessor0.load();
}"
1774,"  private ResumableAsyncHandler(long byteTransferred, ResumableProcessor resumableProcessor,
                                AsyncHandler<Response> decoratedAsyncHandler, boolean accumulateBody) {

    this.byteTransferred = new AtomicLong(byteTransferred);

    if (resumableProcessor == null) {
      resumableProcessor = new NULLResumableHandler();
    }
    this.resumableProcessor = resumableProcessor;

    resumableIndex = resumableProcessor.load();
    resumeIndexThread.addResumableProcessor(resumableProcessor);

    this.decoratedAsyncHandler = decoratedAsyncHandler;
    this.accumulateBody = accumulateBody;
  }","  public void test5()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0);
      ResumableAsyncHandler resumableAsyncHandler1 = new ResumableAsyncHandler(resumableAsyncHandler0);
}"
1775,"  private ResumableAsyncHandler(long byteTransferred, ResumableProcessor resumableProcessor,
                                AsyncHandler<Response> decoratedAsyncHandler, boolean accumulateBody) {

    this.byteTransferred = new AtomicLong(byteTransferred);

    if (resumableProcessor == null) {
      resumableProcessor = new NULLResumableHandler();
    }
    this.resumableProcessor = resumableProcessor;

    resumableIndex = resumableProcessor.load();
    resumeIndexThread.addResumableProcessor(resumableProcessor);

    this.decoratedAsyncHandler = decoratedAsyncHandler;
    this.accumulateBody = accumulateBody;
  }","  public void test6()  throws Throwable  {
      AsyncCompletionHandlerBase asyncCompletionHandlerBase0 = new AsyncCompletionHandlerBase();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(0L, asyncCompletionHandlerBase0);
  }"
1776,"  public State onStatusReceived(final HttpResponseStatus status) throws Exception {
    responseBuilder.accumulate(status);
    if (status.getStatusCode() == 200 || status.getStatusCode() == 206) {
      url = status.getUri().toUrl();
    } else {
      return AsyncHandler.State.ABORT;
    }

    if (decoratedAsyncHandler != null) {
      return decoratedAsyncHandler.onStatusReceived(status);
    }

    return AsyncHandler.State.CONTINUE;
  }","  public void test7()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(false);
      try { 
        resumableAsyncHandler0.onStatusReceived((HttpResponseStatus) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.resumable.ResumableAsyncHandler"", e);
      }
  }"
1777,"  public State onHeadersReceived(HttpHeaders headers) throws Exception {
    responseBuilder.accumulate(headers);
    String contentLengthHeader = headers.get(CONTENT_LENGTH);
    if (contentLengthHeader != null) {
      if (Long.parseLong(contentLengthHeader) == -1L) {
        return AsyncHandler.State.ABORT;
      }
    }

    if (decoratedAsyncHandler != null) {
      return decoratedAsyncHandler.onHeadersReceived(headers);
    }
    return State.CONTINUE;
  }","  public void test8()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0);
      try { 
        resumableAsyncHandler0.onHeadersReceived((HttpHeaders) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.resumable.ResumableAsyncHandler"", e);
      }
  }"
1778,"  public State onHeadersReceived(HttpHeaders headers) throws Exception {
    responseBuilder.accumulate(headers);
    String contentLengthHeader = headers.get(CONTENT_LENGTH);
    if (contentLengthHeader != null) {
      if (Long.parseLong(contentLengthHeader) == -1L) {
        return AsyncHandler.State.ABORT;
      }
    }

    if (decoratedAsyncHandler != null) {
      return decoratedAsyncHandler.onHeadersReceived(headers);
    }
    return State.CONTINUE;
  }","  public void test9()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(true);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      resumableAsyncHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
      try { 
        resumableAsyncHandler0.onHeadersReceived(combinedHttpHeaders0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException(""io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl"", e);
      }
  }"
1779,"  public Request adjustRequestRange(Request request) {

    Long ri = resumableIndex.get(request.getUrl());
    if (ri != null) {
      byteTransferred.set(ri);
    }

    // The Resumable
    if (resumableListener != null && resumableListener.length() > 0 && byteTransferred.get() != resumableListener.length()) {
      byteTransferred.set(resumableListener.length());
    }

    RequestBuilder builder = request.toBuilder();
    if (request.getHeaders().get(RANGE) == null && byteTransferred.get() != 0) {
      builder.setHeader(RANGE, ""bytes="" + byteTransferred.get() + ""-"");
    }
    return builder.build();
  }","  public void test10()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler();
      // Undeclared exception!
      try { 
        resumableAsyncHandler0.adjustRequestRange((Request) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.resumable.ResumableAsyncHandler"", e);
      }
  }"
1780,"  public State onHeadersReceived(HttpHeaders headers) throws Exception {
    responseBuilder.accumulate(headers);
    String contentLengthHeader = headers.get(CONTENT_LENGTH);
    if (contentLengthHeader != null) {
      if (Long.parseLong(contentLengthHeader) == -1L) {
        return AsyncHandler.State.ABORT;
      }
    }

    if (decoratedAsyncHandler != null) {
      return decoratedAsyncHandler.onHeadersReceived(headers);
    }
    return State.CONTINUE;
  }","  public void test11()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0, false);
      ResumableAsyncHandler resumableAsyncHandler1 = new ResumableAsyncHandler(resumableAsyncHandler0);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      AsyncHandler.State asyncHandler_State0 = resumableAsyncHandler1.onHeadersReceived(combinedHttpHeaders0);
}"
1781,"  public State onTrailingHeadersReceived(HttpHeaders headers) {
    responseBuilder.accumulate(headers);
    return State.CONTINUE;
  }","  public void test12()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler();
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      resumableAsyncHandler0.onHeadersReceived(combinedHttpHeaders0);
      // Undeclared exception!
      try { 
        resumableAsyncHandler0.onTrailingHeadersReceived(combinedHttpHeaders0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // can't add to itself.
         //
         verifyException(""io.netty.handler.codec.http.CombinedHttpHeaders$CombinedHttpHeadersImpl"", e);
      }
  }"
1782,"  public Response onCompleted() throws Exception {
    resumableProcessor.remove(url);
    resumableListener.onAllBytesReceived();

    if (decoratedAsyncHandler != null) {
      decoratedAsyncHandler.onCompleted();
    }
    // Not sure
    return responseBuilder.build();
  }","  public void test13()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0);
      ResumableAsyncHandler resumableAsyncHandler1 = new ResumableAsyncHandler(2410L, resumableAsyncHandler0);
      Response response0 = resumableAsyncHandler1.onCompleted();
}"
1783,"  public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {

    if (accumulateBody) {
      responseBuilder.accumulate(bodyPart);
    }

    State state = State.CONTINUE;
    try {
      resumableListener.onBytesReceived(bodyPart.getBodyByteBuffer());
    } catch (IOException ex) {
      return AsyncHandler.State.ABORT;
    }

    if (decoratedAsyncHandler != null) {
      state = decoratedAsyncHandler.onBodyPartReceived(bodyPart);
    }

    byteTransferred.addAndGet(bodyPart.getBodyPartBytes().length);
    resumableProcessor.put(url, byteTransferred.get());

    return state;
  }","  public void test14()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(true);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart((ByteBuf) null, false);
      try { 
        resumableAsyncHandler0.onBodyPartReceived(lazyResponseBodyPart0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.LazyResponseBodyPart"", e);
      }
  }"
1784,"  public void onThrowable(Throwable t) {
    if (decoratedAsyncHandler != null) {
      decoratedAsyncHandler.onThrowable(t);
    } else {
      logger.debug("""", t);
    }
  }","  public void test15()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0, false);
      ResumableAsyncHandler resumableAsyncHandler1 = new ResumableAsyncHandler(549755813888L, resumableAsyncHandler0);
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("""", """", intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("""", batchUpdateException0);
      resumableAsyncHandler1.onThrowable(sQLTransactionRollbackException0);
}"
1785,"  public void onThrowable(Throwable t) {
    if (decoratedAsyncHandler != null) {
      decoratedAsyncHandler.onThrowable(t);
    } else {
      logger.debug("""", t);
    }
  }","  public void test16()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0);
      resumableAsyncHandler0.onThrowable((Throwable) null);
  }"
1786,"  public Response onCompleted() throws Exception {
    resumableProcessor.remove(url);
    resumableListener.onAllBytesReceived();

    if (decoratedAsyncHandler != null) {
      decoratedAsyncHandler.onCompleted();
    }
    // Not sure
    return responseBuilder.build();
  }","  public void test17()  throws Throwable  {
      PropertiesBasedResumableProcessor propertiesBasedResumableProcessor0 = new PropertiesBasedResumableProcessor();
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(propertiesBasedResumableProcessor0, true);
      ResumableAsyncHandler resumableAsyncHandler1 = resumableAsyncHandler0.setResumableListener((ResumableListener) null);
      try { 
        resumableAsyncHandler1.onCompleted();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.resumable.ResumableAsyncHandler"", e);
      }
  }"
1787,"  public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {

    if (accumulateBody) {
      responseBuilder.accumulate(bodyPart);
    }

    State state = State.CONTINUE;
    try {
      resumableListener.onBytesReceived(bodyPart.getBodyByteBuffer());
    } catch (IOException ex) {
      return AsyncHandler.State.ABORT;
    }

    if (decoratedAsyncHandler != null) {
      state = decoratedAsyncHandler.onBodyPartReceived(bodyPart);
    }

    byteTransferred.addAndGet(bodyPart.getBodyPartBytes().length);
    resumableProcessor.put(url, byteTransferred.get());

    return state;
  }","  public void test18()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler(false);
      ResumableAsyncHandler resumableAsyncHandler1 = new ResumableAsyncHandler(resumableAsyncHandler0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(emptyByteBuf0, false);
      try { 
        resumableAsyncHandler1.onBodyPartReceived(lazyResponseBodyPart0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
1788,"  public Response onCompleted() throws Exception {
    resumableProcessor.remove(url);
    resumableListener.onAllBytesReceived();

    if (decoratedAsyncHandler != null) {
      decoratedAsyncHandler.onCompleted();
    }
    // Not sure
    return responseBuilder.build();
  }","  public void test19()  throws Throwable  {
      ResumableAsyncHandler resumableAsyncHandler0 = new ResumableAsyncHandler((ResumableAsyncHandler.ResumableProcessor) null, false);
      Response response0 = resumableAsyncHandler0.onCompleted();
}"
1789,"  public void onBytesReceived(ByteBuffer buffer) throws IOException {
    file.seek(file.length());
    if (buffer.hasArray()) {
      file.write(buffer.array(), buffer.arrayOffset() + buffer.position(), buffer.remaining());
    } else { // if the buffer is direct or backed by a String...
      byte[] b = new byte[buffer.remaining()];
      int pos = buffer.position();
      buffer.get(b);
      buffer.position(pos);
      file.write(b);
    }
  }","  public void test0()  throws Throwable  {
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener((RandomAccessFile) null);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      // Undeclared exception!
      try { 
        resumableRandomAccessFileListener0.onBytesReceived(byteBuffer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.resumable.ResumableRandomAccessFileListener"", e);
      }
  }"
1790,"  public long length() {
    try {
      return file.length();
    } catch (IOException e) {
      return 0;
    }
  }","  public void test1()  throws Throwable  {
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener((RandomAccessFile) null);
      // Undeclared exception!
      try { 
        resumableRandomAccessFileListener0.length();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.handler.resumable.ResumableRandomAccessFileListener"", e);
      }
  }"
1791,"  public void onAllBytesReceived() {
    closeSilently(file);
  }","  public void test2()  throws Throwable  {
      ResumableRandomAccessFileListener resumableRandomAccessFileListener0 = new ResumableRandomAccessFileListener((RandomAccessFile) null);
      resumableRandomAccessFileListener0.onAllBytesReceived();
  }"
1792,"  public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
    try {
      if (logger.isDebugEnabled()) {
        logger.debug(""Current Throttling Status {}"", available.availablePermits());
      }
      if (!available.tryAcquire(maxWait, TimeUnit.MILLISECONDS)) {
        throw new FilterException(String.format(""No slot available for processing Request %s with AsyncHandler %s"",
                ctx.getRequest(), ctx.getAsyncHandler()));
      }
    } catch (InterruptedException e) {
      throw new FilterException(String.format(""Interrupted Request %s with AsyncHandler %s"",
              ctx.getRequest(), ctx.getAsyncHandler()));
    }

    return new FilterContext.FilterContextBuilder<>(ctx)
            .asyncHandler(ReleasePermitOnComplete.wrap(ctx.getAsyncHandler(), available))
            .build();
  }","  public void test0()  throws Throwable  {
      ThrottleRequestFilter throttleRequestFilter0 = new ThrottleRequestFilter((-391), (-391), false);
      FilterContext<String> filterContext0 = (FilterContext<String>) mock(FilterContext.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler) null).when(filterContext0).getAsyncHandler();
      doReturn((Request) null).when(filterContext0).getRequest();
      try { 
        throttleRequestFilter0.filter((FilterContext<String>) filterContext0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No slot available for processing Request null with AsyncHandler null
         //
         verifyException(""org.asynchttpclient.filter.ThrottleRequestFilter"", e);
      }
  }"
1793,"  public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
    try {
      if (logger.isDebugEnabled()) {
        logger.debug(""Current Throttling Status {}"", available.availablePermits());
      }
      if (!available.tryAcquire(maxWait, TimeUnit.MILLISECONDS)) {
        throw new FilterException(String.format(""No slot available for processing Request %s with AsyncHandler %s"",
                ctx.getRequest(), ctx.getAsyncHandler()));
      }
    } catch (InterruptedException e) {
      throw new FilterException(String.format(""Interrupted Request %s with AsyncHandler %s"",
              ctx.getRequest(), ctx.getAsyncHandler()));
    }

    return new FilterContext.FilterContextBuilder<>(ctx)
            .asyncHandler(ReleasePermitOnComplete.wrap(ctx.getAsyncHandler(), available))
            .build();
  }","  public void test1()  throws Throwable  {
      ThrottleRequestFilter throttleRequestFilter0 = new ThrottleRequestFilter(1795);
      FilterContext<String> filterContext0 = (FilterContext<String>) mock(FilterContext.class, new ViolatedAssumptionAnswer());
      doReturn((AsyncHandler) null, (AsyncHandler) null).when(filterContext0).getAsyncHandler();
      doReturn((IOException) null).when(filterContext0).getIOException();
      doReturn((Request) null).when(filterContext0).getRequest();
      doReturn((HttpResponseStatus) null).when(filterContext0).getResponseStatus();
      doReturn(false).when(filterContext0).replayRequest();
      // Undeclared exception!
      try { 
        throttleRequestFilter0.filter(filterContext0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.filter.ReleasePermitOnComplete"", e);
      }
  }"
1794,"  public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
    try {
      if (logger.isDebugEnabled()) {
        logger.debug(""Current Throttling Status {}"", available.availablePermits());
      }
      if (!available.tryAcquire(maxWait, TimeUnit.MILLISECONDS)) {
        throw new FilterException(String.format(""No slot available for processing Request %s with AsyncHandler %s"",
                ctx.getRequest(), ctx.getAsyncHandler()));
      }
    } catch (InterruptedException e) {
      throw new FilterException(String.format(""Interrupted Request %s with AsyncHandler %s"",
              ctx.getRequest(), ctx.getAsyncHandler()));
    }

    return new FilterContext.FilterContextBuilder<>(ctx)
            .asyncHandler(ReleasePermitOnComplete.wrap(ctx.getAsyncHandler(), available))
            .build();
  }","  public void test2()  throws Throwable  {
      ThrottleRequestFilter throttleRequestFilter0 = new ThrottleRequestFilter(0, 0);
      // Undeclared exception!
      try { 
        throttleRequestFilter0.filter((FilterContext<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.filter.ThrottleRequestFilter"", e);
      }
  }"
1795,"  public FilterException(final String message) {
    super(message);
  }","  public void test0()  throws Throwable  {
      FilterException filterException0 = new FilterException(""`udgIZ^b"");
      FilterException filterException1 = new FilterException(""`udgIZ^b"", filterException0);
}"
1796,"  public static <T> AsyncHandler<T> wrap(final AsyncHandler<T> handler, final Semaphore available) {
    Class<?> handlerClass = handler.getClass();
    ClassLoader classLoader = handlerClass.getClassLoader();
    Class<?>[] interfaces = allInterfaces(handlerClass);

    return (AsyncHandler<T>) Proxy.newProxyInstance(classLoader, interfaces, (proxy, method, args) -> {
        try {
          return method.invoke(handler, args);
        } finally {
          switch (method.getName()) {
            case ""onCompleted"":
            case ""onThrowable"":
              available.release();
            default:
          }
        }
    });
  }","  public void test0()  throws Throwable  {
      Semaphore semaphore0 = new Semaphore((-1286498783));
      // Undeclared exception!
      try { 
        ReleasePermitOnComplete.wrap((AsyncHandler<AsyncCompletionHandlerBase>) null, semaphore0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.filter.ReleasePermitOnComplete"", e);
      }
  }"
1797,,"  public void test1()  throws Throwable  {
      ReleasePermitOnComplete releasePermitOnComplete0 = new ReleasePermitOnComplete();
  }"
1798,"  public static <T> AsyncHandler<T> wrap(final AsyncHandler<T> handler, final Semaphore available) {
    Class<?> handlerClass = handler.getClass();
    ClassLoader classLoader = handlerClass.getClassLoader();
    Class<?>[] interfaces = allInterfaces(handlerClass);

    return (AsyncHandler<T>) Proxy.newProxyInstance(classLoader, interfaces, (proxy, method, args) -> {
        try {
          return method.invoke(handler, args);
        } finally {
          switch (method.getName()) {
            case ""onCompleted"":
            case ""onThrowable"":
              available.release();
            default:
          }
        }
    });
  }","  public void test2()  throws Throwable  {
      AsyncHandler<AsyncCompletionHandlerBase> asyncHandler0 = (AsyncHandler<AsyncCompletionHandlerBase>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncHandler0).toString();
      Semaphore semaphore0 = new Semaphore((-1286498783));
      AsyncHandler<AsyncCompletionHandlerBase> asyncHandler1 = ReleasePermitOnComplete.wrap((AsyncHandler<AsyncCompletionHandlerBase>) asyncHandler0, semaphore0);
}"
1799,"  public File getFile() {
    return file;
  }","  public void test0()  throws Throwable  {
      File file0 = MockFile.createTempFile(""^l#Inr4jAD.pM^K"", ""^l#Inr4jAD.pM^K"");
      Charset charset0 = Charset.defaultCharset();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/^l#Inr4jAD.pM^K0^l#Inr4jAD.pM^K"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""\""S;IfvY4L"");
      FilePart filePart0 = new FilePart(""[]Ig5g"", file0, ""?S hn|Z|z=YK4$g@}Ni"", charset0, ""File is not readable "", ""[]Ig5g"");
      File file1 = filePart0.getFile();
}"
1800,"  public File getFile() {
    return file;
  }","  public void test1()  throws Throwable  {
      File file0 = MockFile.createTempFile(""$:m'#W): /.g&l=yQ"", ""$:m'#W): /.g&l=yQ"");
      FilePart filePart0 = new FilePart(""$:m'#W): /.g&l=yQ"", file0);
      File file1 = filePart0.getFile();
}"
1801,"  public File getFile() {
    return file;
  }","  public void test2()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""`fX6ouLA"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, """");
      MockFile mockFile0 = new MockFile(""`fX6ouLA"");
      FilePart filePart0 = new FilePart("""", mockFile0);
      File file0 = filePart0.getFile();
}"
1802,"  public File getFile() {
    return file;
  }","  public void test3()  throws Throwable  {
      File file0 = MockFile.createTempFile(""3>DN"", ""3>DN"", (File) null);
      FilePart filePart0 = new FilePart(""3>DN"", file0, ""3>DN"");
      file0.delete();
      File file1 = filePart0.getFile();
}"
1803,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test4()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart(""Invaid IOCase nam: "", (File) null, (String) null, charset0, (String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1804,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test5()  throws Throwable  {
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart(""Zj.`\""k$rq}Ah)n\""4"", (File) null, ""Zj.`\""k$rq}Ah)n\""4"", (Charset) null, ""Zj.`\""k$rq}Ah)n\""4"", ""Zj.`\""k$rq}Ah)n\""4"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1805,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test6()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("""", (File) null, """", charset0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1806,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test7()  throws Throwable  {
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart(""t/H]C9F{;R|_90"", (File) null, ""t/H]C9F{;R|_90"", (Charset) null, ""h'pa$xPaNU2}lH"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1807,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test8()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", """");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("""", mockFile0, """", charset0, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // File is not a normal file /
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1808,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test9()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("""", (File) null, ""PAUSED {}"", charset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1809,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""File is not readable "", ""File is not readable "");
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("""", mockFile0, ""m9 bJ$[\"""", charset0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // File is not readable /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/async-http-client/client/File is not readable /File is not readable 
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1810,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("""", mockFile0, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // File is not a normal file /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/async-http-client/client
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1811,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test12()  throws Throwable  {
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart(""|PTe"", (File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1812,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", """");
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart(""q9iF_o@`F:Wf@l"", mockFile0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // File is not a normal file /
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1813,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""UJ]q`OJX"");
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart(""UJ]q`OJX"", mockFile0, ""UJ]q`OJX"", charset0, "".)|"", "".)|"", "">|qMv}d"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // File is not readable /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/async-http-client/client/UJ]q`OJX
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1814,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile(""org.eclipse.jetty.util.PathWatcher$PathMatcherSet"", ""8}U6d~gR?"");
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = new FilePart(""org.eclipse.jetty.util.PathWatcher$PathMatcherSet"", file0, (String) null, charset0, """", """", ""The filter must not be null"");
}"
1815,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("""", mockFile0, """", charset0, """", """", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // File is not a normal file /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/async-http-client/client
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1816,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test17()  throws Throwable  {
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("""", (File) null, """", (Charset) null, ""f'g#[eFj,B"", ""The offset cannot be negative"", ""f'g#[eFj,B"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1817,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test18()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart((String) null, (File) null, ""j"", charset0, (String) null, ""(b$"", ""(b$"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1818,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test19()  throws Throwable  {
      File file0 = MockFile.createTempFile(""File is not a normal file "", (String) null);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = new FilePart(""File is not a normal file "", file0, """", charset0, ""stopping {}"");
}"
1819,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test20()  throws Throwable  {
      File file0 = MockFile.createTempFile(""p2L"", (String) null);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = new FilePart(""p2L"", file0, ""p2L"", charset0);
}"
1820,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""HR9@;HF1!\""1!H"", ""HR9@;HF1!\""1!H"");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart(""HR9@;HF1!\""1!H"", mockFile0, ""H!,"", charset0, ""H!,"", ""HR9@;HF1!\""1!H"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // File is not readable /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/async-http-client/client/HR9@;HF1!\""1!H/HR9@;HF1!\""1!H
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1821,"  public FilePart(String name, File file) {
    this(name, file, null);
  }","  public void test22()  throws Throwable  {
      FilePart filePart0 = null;
      try {
        filePart0 = new FilePart("""", (File) null, ""kO?MMUZ4H[L"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.FilePart"", e);
      }
  }"
1822,"  public long getContentLength() {
    return contentLength;
  }","  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""ENTER"", pushbackInputStream0, ""ENTER"", (-1L), ""ENTER"", charset0, """", ""ENTER"");
}"
1823,"  public InputStreamPart(String name, InputStream inputStream, String fileName) {
    this(name, inputStream, fileName, -1);
  }","  public void test1()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart((String) null, (InputStream) null, """", 0L, (String) null, charset0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1824,"  public InputStreamPart(String name, InputStream inputStream, String fileName) {
    this(name, inputStream, fileName, -1);
  }","  public void test2()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart("""", (InputStream) null, ""=Px[P!/K/"", 0L, ""=Px[P!/K/"", charset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1825,"  public InputStreamPart(String name, InputStream inputStream, String fileName) {
    this(name, inputStream, fileName, -1);
  }","  public void test3()  throws Throwable  {
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart(""The prefix must not be null"", (InputStream) null, ""~9JmQiF?77ZZY]"", 0L, ""inputStream"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1826,"  public InputStreamPart(String name, InputStream inputStream, String fileName) {
    this(name, inputStream, fileName, -1);
  }","  public void test4()  throws Throwable  {
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart(""!R%Bzc^f.n]t>UzU"", (InputStream) null, ""!R%Bzc^f.n]t>UzU"", 1256L);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1827,"  public InputStreamPart(String name, InputStream inputStream, String fileName) {
    this(name, inputStream, fileName, -1);
  }","  public void test5()  throws Throwable  {
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart(""$VALUES"", (InputStream) null, ""Bp"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1828,"  public long getContentLength() {
    return contentLength;
  }","  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1327);
      InputStreamPart inputStreamPart0 = new InputStreamPart((String) null, pipedInputStream0, (String) null, 1327, (String) null, (Charset) null, """");
      long long0 = inputStreamPart0.getContentLength();
}"
1829,"  public long getContentLength() {
    return contentLength;
  }","  public void test7()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""7S6nk-2RbjMe"", mockFileInputStream0, ""A]vPDjaVx{"", 0L, ""A]vPDjaVx{"");
      long long0 = inputStreamPart0.getContentLength();
}"
1830,"  public long getContentLength() {
    return contentLength;
  }","  public void test8()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pipedInputStream0);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""xnpb<mXf7\""NIxBFwE"", sequenceInputStream0, ""xnpb<mXf7\""NIxBFwE"", 2429L, ""xnpb<mXf7\""NIxBFwE"", (Charset) null);
}"
1831,"  public InputStreamPart(String name, InputStream inputStream, String fileName) {
    this(name, inputStream, fileName, -1);
  }","  public void test9()  throws Throwable  {
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart("""", (InputStream) null, ""org.eclipse.jetty.util.RegexSet"", 1000L, """", (Charset) null, ""@iQY0?"", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1832,"  public long getContentLength() {
    return contentLength;
  }","  public void test10()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", inputStream0, ""L?Ul<'5*/V@"");
      long long0 = inputStreamPart0.getContentLength();
}"
1833,"  public InputStream getInputStream() {
    return inputStream;
  }","  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", pipedInputStream0, ""W'rn9&W%g.1!#sT"", 0L);
      InputStream inputStream0 = inputStreamPart0.getInputStream();
}"
1834,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""vdjJK:!NZu"", byteArray0, "":VbCml$:1Ne"", charset0, ""org.asynchttpclient.request.body.multipart.ByteArrayPart"", ""vdjJK:!NZu"", """");
}"
1835,"  public byte[] getBytes() {
    return bytes;
  }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""JZQaKCg0#kG("", byteArray0, ""JZQaKCg0#kG("");
      byte[] byteArray1 = byteArrayPart0.getBytes();
}"
1836,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test2()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = null;
      try {
        byteArrayPart0 = new ByteArrayPart(""lz"", (byte[]) null, """", charset0, """", ""lz"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // bytes
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1837,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test3()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = null;
      try {
        byteArrayPart0 = new ByteArrayPart((String) null, (byte[]) null, ""uVP<RtSJ*<C{p"", charset0, ""org.asynchttpclient.request.body.multipart.ByteArrayPart"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // bytes
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1838,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test4()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = null;
      try {
        byteArrayPart0 = new ByteArrayPart(""EnD!J~J\""BPABt9^["", (byte[]) null, ""org.eclipse.jetty.util.InetAddressSet$SingletonInetRange"", charset0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // bytes
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1839,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test5()  throws Throwable  {
      ByteArrayPart byteArrayPart0 = null;
      try {
        byteArrayPart0 = new ByteArrayPart("";U"", (byte[]) null, ""arDh?-3<S/nyx`m>pC"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // bytes
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1840,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""2$*L{"", byteArray0, ""2$*L{"", charset0, ""S$%jVq.(g 8z_nu"");
}"
1841,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""#G0:I@Kx3]"", byteArray0, ""#G0:I@Kx3]"", charset0);
}"
1842,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test8()  throws Throwable  {
      ByteArrayPart byteArrayPart0 = null;
      try {
        byteArrayPart0 = new ByteArrayPart(""V $c,MpC2QS!Z:M~_%v"", (byte[]) null, ""V $c,MpC2QS!Z:M~_%v"", (Charset) null, ""V $c,MpC2QS!Z:M~_%v"", ""V $c,MpC2QS!Z:M~_%v"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // bytes
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1843,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""OE*wG"", byteArray0, ""OE*wG"", (Charset) null, (String) null, ""Include Predicate"");
}"
1844,"  public byte[] getBytes() {
    return bytes;
  }","  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("""", byteArray0);
      byte[] byteArray1 = byteArrayPart0.getBytes();
}"
1845,"  public ByteArrayPart(String name, byte[] bytes) {
    this(name, bytes, null);
  }","  public void test11()  throws Throwable  {
      ByteArrayPart byteArrayPart0 = null;
      try {
        byteArrayPart0 = new ByteArrayPart("""", (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // bytes
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1846,"  public StringPart(String name, String value) {
    this(name, value, null);
  }","  public void test0()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = null;
      try {
        stringPart0 = new StringPart((String) null, (String) null, (String) null, charset0, ""bCdsU5\""+4SE"", ""bCdsU5\""+4SE"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1847,"  public StringPart(String name, String value) {
    this(name, value, null);
  }","  public void test1()  throws Throwable  {
      StringPart stringPart0 = null;
      try {
        stringPart0 = new StringPart((String) null, (String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1848,"  public StringPart(String name, String value) {
    this(name, value, null);
  }","  public void test2()  throws Throwable  {
      StringPart stringPart0 = null;
      try {
        stringPart0 = new StringPart("""", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1849,"  public StringPart(String name, String value) {
    this(name, value, null);
  }","  public void test3()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart(""]"", ""]"", ""]"", charset0, ""]"", ""]"");
}"
1850,"  public String getValue() {
    return value;
  }","  public void test4()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("""", """", """", charset0, ""K0+Eq"");
      String string0 = stringPart0.getValue();
}"
1851,"  public String getValue() {
    return value;
  }","  public void test5()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("""", """", """", charset0, ""K0+Eq"");
      String string0 = stringPart0.getValue();
}"
1852,"  public StringPart(String name, String value) {
    this(name, value, null);
  }","  public void test6()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("""", """", """", charset0);
}"
1853,"  public StringPart(String name, String value) {
    this(name, value, null);
  }","  public void test7()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", """", """");
}"
1854,"  public String getValue() {
    return value;
  }","  public void test8()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Ya'`K]hG0%Bq. 18"", ""Ya'`K]hG0%Bq. 18"");
      String string0 = stringPart0.getValue();
}"
1855,"  public StringPart(String name, String value) {
    this(name, value, null);
  }","  public void test9()  throws Throwable  {
      StringPart stringPart0 = null;
      try {
        stringPart0 = new StringPart(""`Y"", (String) null, ""`Y"", (Charset) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1856,"  public StringPart(String name, String value) {
    this(name, value, null);
  }","  public void test10()  throws Throwable  {
      StringPart stringPart0 = null;
      try {
        stringPart0 = new StringPart((String) null, (String) null, """", (Charset) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // value
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1857,"  public String getTransferEncoding() {
    return transferEncoding;
  }","  public void test0()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart(""_J{|9"", ""_J{|9"", ""_J{|9"", charset0, ""_J{|9"", ""_J{|9"");
      stringPart0.addCustomHeader(""p$HS"", ""_J{|9"");
}"
1858,"  public String getName() {
    return this.name;
  }","  public void test1()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""lT7/ao\""WZdXgxJFdI(2"", ""lT7/ao\""WZdXgxJFdI(2"", ""lT7/ao\""WZdXgxJFdI(2"", (Charset) null, ""lT7/ao\""WZdXgxJFdI(2"", "" dispositionType="");
      String string0 = stringPart0.getTransferEncoding();
}"
1859,"  public String getTransferEncoding() {
    return transferEncoding;
  }","  public void test2()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""lT7/ao\""WZdXgxJFdI(2"", ""lT7/ao\""WZdXgxJFdI(2"", ""lT7/ao\""WZdXgxJFdI(2"", (Charset) null, ""lT7/ao\""WZdXgxJFdI(2"", "" dispositionType="");
      String string0 = stringPart0.getTransferEncoding();
}"
1860,"  public String getContentType() {
    return this.contentType;
  }","  public void test3()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""lT7/ao\""WZdXgxJFdI(2"", ""lT7/ao\""WZdXgxJFdI(2"", ""lT7/ao\""WZdXgxJFdI(2"", (Charset) null, ""lT7/ao\""WZdXgxJFdI(2"", "" dispositionType="");
      String string0 = stringPart0.getTransferEncoding();
}"
1861,"  public String getContentId() {
    return contentId;
  }","  public void test4()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""lT7/ao\""WZdXgxJFdI(2"", ""lT7/ao\""WZdXgxJFdI(2"", ""lT7/ao\""WZdXgxJFdI(2"", (Charset) null, ""lT7/ao\""WZdXgxJFdI(2"", "" dispositionType="");
      String string0 = stringPart0.getTransferEncoding();
}"
1862,"  public String getContentType() {
    return this.contentType;
  }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 12, 1791);
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", byteArrayInputStream0, ""}b"", 629L, ""c4"", (Charset) null, """", """");
      String string0 = inputStreamPart0.getTransferEncoding();
}"
1863,"  public String getContentId() {
    return contentId;
  }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 12, 1791);
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", byteArrayInputStream0, ""}b"", 629L, ""c4"", (Charset) null, """", """");
      String string0 = inputStreamPart0.getTransferEncoding();
}"
1864,"  public String getTransferEncoding() {
    return transferEncoding;
  }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 12, 1791);
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", byteArrayInputStream0, ""}b"", 629L, ""c4"", (Charset) null, """", """");
      String string0 = inputStreamPart0.getTransferEncoding();
}"
1865,"  public String getName() {
    return this.name;
  }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 12, 1791);
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", byteArrayInputStream0, ""}b"", 629L, ""c4"", (Charset) null, """", """");
      String string0 = inputStreamPart0.getTransferEncoding();
}"
1866,"  public String getName() {
    return this.name;
  }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0, ""Gu"", charset0);
      String string0 = byteArrayPart0.getName();
}"
1867,"  public String getContentType() {
    return this.contentType;
  }","  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""-GslQz.`T"", byteArray0, ""-GslQz.`T"", charset0, ""cQwB!fK!-sN}A`fO"", "":; G,v"");
      String string0 = byteArrayPart0.getName();
}"
1868,"  public String getName() {
    return this.name;
  }","  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""-GslQz.`T"", byteArray0, ""-GslQz.`T"", charset0, ""cQwB!fK!-sN}A`fO"", "":; G,v"");
      String string0 = byteArrayPart0.getName();
}"
1869,"  public String getName() {
    return this.name;
  }","  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""-GslQz.`T"", byteArray0, ""-GslQz.`T"", charset0, ""cQwB!fK!-sN}A`fO"", "":; G,v"");
      String string0 = byteArrayPart0.getName();
}"
1870,"  public String getContentId() {
    return contentId;
  }","  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""-GslQz.`T"", byteArray0, ""-GslQz.`T"", charset0, ""cQwB!fK!-sN}A`fO"", "":; G,v"");
      String string0 = byteArrayPart0.getName();
}"
1871,"  public String getName() {
    return this.name;
  }","  public void test14()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""DC1su*[W=Kl^"", ""Adding exclude: [{}]"", """", (Charset) null);
      stringPart0.setDispositionType(""org.asynchttpclient.request.body.multipart.FileLikePart"");
      stringPart0.getDispositionType();
}"
1872,"  public String getContentType() {
    return this.contentType;
  }","  public void test15()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""DC1su*[W=Kl^"", ""Adding exclude: [{}]"", """", (Charset) null);
      stringPart0.setDispositionType(""org.asynchttpclient.request.body.multipart.FileLikePart"");
      stringPart0.getDispositionType();
}"
1873,"  public String getDispositionType() {
    return dispositionType;
  }","  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("""", byteArray0, """", charset0, ""$:$r..!A["");
      byteArrayPart0.setDispositionType("""");
      String string0 = byteArrayPart0.getDispositionType();
}"
1874,"  public String getName() {
    return this.name;
  }","  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""$!$^``SPOr%umi"", byteArray0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Param> list0 = Param.map2ParamList(hashMap0);
      byteArrayPart0.setCustomHeaders(list0);
      byteArrayPart0.getCustomHeaders();
}"
1875,"  public String getContentType() {
    return this.contentType;
  }","  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""$!$^``SPOr%umi"", byteArray0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Param> list0 = Param.map2ParamList(hashMap0);
      byteArrayPart0.setCustomHeaders(list0);
      byteArrayPart0.getCustomHeaders();
}"
1876,"  public List<Param> getCustomHeaders() {
    return customHeaders;
  }","  public void test19()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", """");
      stringPart0.addCustomHeader("""", """");
      List<Param> list0 = stringPart0.getCustomHeaders();
}"
1877,"  public String getContentType() {
    return this.contentType;
  }","  public void test20()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""i"", ""i"");
      String string0 = stringPart0.getContentType();
}"
1878,"  public String getName() {
    return this.name;
  }","  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile(""org.apache.commons.io.filefilter.WildcardFileFilter"", ""org.apache.commons.io.filefilter.WildcardFileFilter"");
      FilePart filePart0 = new FilePart(""org.apache.commons.io.filefilter.WildcardFileFilter"", file0, """", (Charset) null);
      String string0 = filePart0.getContentType();
}"
1879,"  public String getContentType() {
    return this.contentType;
  }","  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile(""org.apache.commons.io.filefilter.WildcardFileFilter"", ""org.apache.commons.io.filefilter.WildcardFileFilter"");
      FilePart filePart0 = new FilePart(""org.apache.commons.io.filefilter.WildcardFileFilter"", file0, """", (Charset) null);
      String string0 = filePart0.getContentType();
}"
1880,"  public String getContentType() {
    return this.contentType;
  }","  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile(""org.apache.commons.io.filefilter.WildcardFileFilter"", ""org.apache.commons.io.filefilter.WildcardFileFilter"");
      FilePart filePart0 = new FilePart(""org.apache.commons.io.filefilter.WildcardFileFilter"", file0, """", (Charset) null);
      String string0 = filePart0.getContentType();
}"
1881,"  public String getContentId() {
    return contentId;
  }","  public void test24()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart(""_J{|9"", ""_J{|9"", ""_J{|9"", charset0, ""_J{|9"", ""_J{|9"");
      String string0 = stringPart0.getContentId();
}"
1882,"  public String getContentId() {
    return contentId;
  }","  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("""", byteArray0, """", (Charset) null, """", """");
      String string0 = byteArrayPart0.getContentId();
}"
1883,"  public String getTransferEncoding() {
    return transferEncoding;
  }","  public void test26()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", """");
      String string0 = stringPart0.getTransferEncoding();
}"
1884,"  public String getName() {
    return this.name;
  }","  public void test27()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", """");
      String string0 = stringPart0.getName();
}"
1885,"  public String getContentType() {
    return this.contentType;
  }","  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""$!$^``SPOr%umi"", byteArray0);
      byteArrayPart0.getCharset();
}"
1886,"  public String getName() {
    return this.name;
  }","  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""$!$^``SPOr%umi"", byteArray0);
      byteArrayPart0.getCharset();
}"
1887,"  public String getContentId() {
    return contentId;
  }","  public void test30()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", pipedInputStream0, """");
      String string0 = inputStreamPart0.getContentId();
}"
1888,"  public String getContentType() {
    return this.contentType;
  }","  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", pipedInputStream0, """");
      String string0 = inputStreamPart0.getContentId();
}"
1889,"  public String getName() {
    return this.name;
  }","  public void test32()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", pipedInputStream0, """");
      String string0 = inputStreamPart0.getContentId();
}"
1890,"  public String getContentType() {
    return this.contentType;
  }","  public void test33()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", pipedInputStream0, """");
      String string0 = inputStreamPart0.getContentType();
}"
1891,"  public String getName() {
    return this.name;
  }","  public void test34()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", pipedInputStream0, """");
      String string0 = inputStreamPart0.getContentType();
}"
1892,"  public String getContentType() {
    return this.contentType;
  }","  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", pipedInputStream0, """");
      String string0 = inputStreamPart0.getContentType();
}"
1893,"  public String getDispositionType() {
    return dispositionType;
  }","  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart(""_J{|9"", ""_J{|9"", ""_J{|9"", charset0, ""_J{|9"", ""_J{|9"");
      String string0 = stringPart0.getDispositionType();
}"
1894,"  public String getContentType() {
    return this.contentType;
  }","  public void test37()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""5/oK"", ""5/oK"", ""5/oK"");
      stringPart0.addCustomHeader(""5/oK"", ""5/oK"");
      stringPart0.addCustomHeader(""StringPart name=5/oK contentType=5/oK charset=UTF-8 transferEncoding=null contentId=null dispositionType=null"", ""StringPart name=5/oK contentType=5/oK charset=UTF-8 transferEncoding=null contentId=null dispositionType=null"");
}"
1895,"  public List<Param> getCustomHeaders() {
    return customHeaders;
  }","  public void test38()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""5/oK"", ""5/oK"", ""5/oK"");
      List<Param> list0 = stringPart0.getCustomHeaders();
}"
1896,"  public String toString() {
    return getClass().getSimpleName() +
            "" name="" + getName() +
            "" contentType="" + getContentType() +
            "" charset="" + getCharset() +
            "" transferEncoding="" + getTransferEncoding() +
            "" contentId="" + getContentId() +
            "" dispositionType="" + getDispositionType();
  }","  public void test39()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""5/oK"", ""5/oK"", ""5/oK"");
      String string0 = stringPart0.toString();
}"
1897,"  public String getFileName() {
    return fileName;
  }","  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""T`2ag-Mp7Jr(%(u.R@"", pipedInputStream0, ""d5zMY?J{q4i1Oi"", 2246L, """", charset0, ""T`2ag-Mp7Jr(%(u.R@"", """");
      String string0 = inputStreamPart0.getFileName();
}"
1898,"  public String getFileName() {
    return fileName;
  }","  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""T`2ag-Mp7Jr(%(u.R@"", pipedInputStream0, ""d5zMY?J{q4i1Oi"", 2246L, """", charset0, ""T`2ag-Mp7Jr(%(u.R@"", """");
      String string0 = inputStreamPart0.getFileName();
}"
1899,"  public String getFileName() {
    return fileName;
  }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""null"", byteArray0, """", (Charset) null, """", ""sdR1+FWEI"", ""wV"");
      String string0 = byteArrayPart0.getFileName();
}"
1900,"  public String getFileName() {
    return fileName;
  }","  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""null"", byteArray0, """", (Charset) null, """", ""sdR1+FWEI"", ""wV"");
      String string0 = byteArrayPart0.getFileName();
}"
1901,,"  public void test4()  throws Throwable  {
      InputStreamPart inputStreamPart0 = null;
      try {
        inputStreamPart0 = new InputStreamPart(""org.apache.commons.io.filefilter.WildcardFileFilter"", (InputStream) null, ""org.apache.commons.io.filefilter.WildcardFileFilter"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // inputStream
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1902,"  public String toString() {
    return super.toString() + "" filename="" + fileName;
  }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("""", byteArray0, """");
      String string0 = byteArrayPart0.toString();
}"
1903,"  public String getFileName() {
    return fileName;
  }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("""", byteArray0, """");
      String string0 = byteArrayPart0.getFileName();
}"
1904,"  public String getFileName() {
    return fileName;
  }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("""", byteArray0, """");
      String string0 = byteArrayPart0.getFileName();
}"
1905,"  public static MultipartBody newMultipartBody(List<Part> parts, HttpHeaders requestHeaders) {
    assertNotNull(parts, ""parts"");

    byte[] boundary;
    String contentType;

    String contentTypeHeader = requestHeaders.get(CONTENT_TYPE);
    if (isNonEmpty(contentTypeHeader)) {
      int boundaryLocation = contentTypeHeader.indexOf(""boundary="");
      if (boundaryLocation != -1) {
        // boundary defined in existing Content-Type
        contentType = contentTypeHeader;
        boundary = (contentTypeHeader.substring(boundaryLocation + ""boundary="".length()).trim()).getBytes(US_ASCII);
      } else {
        // generate boundary and append it to existing Content-Type
        boundary = computeMultipartBoundary();
        contentType = patchContentTypeWithBoundaryAttribute(contentTypeHeader, boundary);
      }
    } else {
      boundary = computeMultipartBoundary();
      contentType = patchContentTypeWithBoundaryAttribute(HttpHeaderValues.MULTIPART_FORM_DATA, boundary);
    }

    List<MultipartPart<? extends Part>> multipartParts = generateMultipartParts(parts, boundary);

    return new MultipartBody(multipartParts, contentType, boundary);
  }","  public void test0()  throws Throwable  {
      Vector<Part> vector0 = new Vector<Part>();
      // Undeclared exception!
      try { 
        MultipartUtils.newMultipartBody(vector0, (HttpHeaders) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.MultipartUtils"", e);
      }
  }"
1906,"  public static MultipartBody newMultipartBody(List<Part> parts, HttpHeaders requestHeaders) {
    assertNotNull(parts, ""parts"");

    byte[] boundary;
    String contentType;

    String contentTypeHeader = requestHeaders.get(CONTENT_TYPE);
    if (isNonEmpty(contentTypeHeader)) {
      int boundaryLocation = contentTypeHeader.indexOf(""boundary="");
      if (boundaryLocation != -1) {
        // boundary defined in existing Content-Type
        contentType = contentTypeHeader;
        boundary = (contentTypeHeader.substring(boundaryLocation + ""boundary="".length()).trim()).getBytes(US_ASCII);
      } else {
        // generate boundary and append it to existing Content-Type
        boundary = computeMultipartBoundary();
        contentType = patchContentTypeWithBoundaryAttribute(contentTypeHeader, boundary);
      }
    } else {
      boundary = computeMultipartBoundary();
      contentType = patchContentTypeWithBoundaryAttribute(HttpHeaderValues.MULTIPART_FORM_DATA, boundary);
    }

    List<MultipartPart<? extends Part>> multipartParts = generateMultipartParts(parts, boundary);

    return new MultipartBody(multipartParts, contentType, boundary);
  }","  public void test1()  throws Throwable  {
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      // Undeclared exception!
      try { 
        MultipartUtils.newMultipartBody((List<Part>) null, combinedHttpHeaders0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // parts
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
1907,"  public static List<MultipartPart<? extends Part>> generateMultipartParts(List<Part> parts, byte[] boundary) {
    List<MultipartPart<? extends Part>> multipartParts = new ArrayList<>(parts.size());
    for (Part part : parts) {
      if (part instanceof FilePart) {
        multipartParts.add(new FileMultipartPart((FilePart) part, boundary));

      } else if (part instanceof ByteArrayPart) {
        multipartParts.add(new ByteArrayMultipartPart((ByteArrayPart) part, boundary));

      } else if (part instanceof StringPart) {
        multipartParts.add(new StringMultipartPart((StringPart) part, boundary));

      } else if (part instanceof InputStreamPart) {
        multipartParts.add(new InputStreamMultipartPart((InputStreamPart) part, boundary));

      } else {
        throw new IllegalArgumentException(""Unknown part type: "" + part);
      }
    }
    // add an extra fake part for terminating the message
    multipartParts.add(new MessageEndMultipartPart(boundary));

    return multipartParts;
  }","  public void test2()  throws Throwable  {
      LinkedList<Part> linkedList0 = new LinkedList<Part>();
      byte[] byteArray0 = new byte[1];
      linkedList0.push((Part) null);
      // Undeclared exception!
      try { 
        MultipartUtils.generateMultipartParts(linkedList0, byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unknown part type: null
         //
         verifyException(""org.asynchttpclient.request.body.multipart.MultipartUtils"", e);
      }
  }"
1908,"  public static List<MultipartPart<? extends Part>> generateMultipartParts(List<Part> parts, byte[] boundary) {
    List<MultipartPart<? extends Part>> multipartParts = new ArrayList<>(parts.size());
    for (Part part : parts) {
      if (part instanceof FilePart) {
        multipartParts.add(new FileMultipartPart((FilePart) part, boundary));

      } else if (part instanceof ByteArrayPart) {
        multipartParts.add(new ByteArrayMultipartPart((ByteArrayPart) part, boundary));

      } else if (part instanceof StringPart) {
        multipartParts.add(new StringMultipartPart((StringPart) part, boundary));

      } else if (part instanceof InputStreamPart) {
        multipartParts.add(new InputStreamMultipartPart((InputStreamPart) part, boundary));

      } else {
        throw new IllegalArgumentException(""Unknown part type: "" + part);
      }
    }
    // add an extra fake part for terminating the message
    multipartParts.add(new MessageEndMultipartPart(boundary));

    return multipartParts;
  }","  public void test3()  throws Throwable  {
      ArrayList<Part> arrayList0 = new ArrayList<Part>();
      StringPart stringPart0 = new StringPart(""D.Wpk.*D="", ""GZ"");
      arrayList0.add((Part) stringPart0);
      // Undeclared exception!
      try { 
        MultipartUtils.generateMultipartParts(arrayList0, (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.PartVisitor$CounterPartVisitor"", e);
      }
  }"
1909,"  public static MultipartBody newMultipartBody(List<Part> parts, HttpHeaders requestHeaders) {
    assertNotNull(parts, ""parts"");

    byte[] boundary;
    String contentType;

    String contentTypeHeader = requestHeaders.get(CONTENT_TYPE);
    if (isNonEmpty(contentTypeHeader)) {
      int boundaryLocation = contentTypeHeader.indexOf(""boundary="");
      if (boundaryLocation != -1) {
        // boundary defined in existing Content-Type
        contentType = contentTypeHeader;
        boundary = (contentTypeHeader.substring(boundaryLocation + ""boundary="".length()).trim()).getBytes(US_ASCII);
      } else {
        // generate boundary and append it to existing Content-Type
        boundary = computeMultipartBoundary();
        contentType = patchContentTypeWithBoundaryAttribute(contentTypeHeader, boundary);
      }
    } else {
      boundary = computeMultipartBoundary();
      contentType = patchContentTypeWithBoundaryAttribute(HttpHeaderValues.MULTIPART_FORM_DATA, boundary);
    }

    List<MultipartPart<? extends Part>> multipartParts = generateMultipartParts(parts, boundary);

    return new MultipartBody(multipartParts, contentType, boundary);
  }","  public void test4()  throws Throwable  {
      Vector<Part> vector0 = new Vector<Part>();
      EmptyHttpHeaders emptyHttpHeaders0 = EmptyHttpHeaders.INSTANCE;
      vector0.add((Part) null);
      // Undeclared exception!
      try { 
        MultipartUtils.newMultipartBody(vector0, emptyHttpHeaders0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unknown part type: null
         //
         verifyException(""org.asynchttpclient.request.body.multipart.MultipartUtils"", e);
      }
  }"
1910,,"  public void test5()  throws Throwable  {
      MultipartUtils multipartUtils0 = new MultipartUtils();
  }"
1911,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test0()  throws Throwable  {
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      StringPart stringPart0 = new StringPart("""", """", ""trn58ioP."", charset0, """");
      byte[] byteArray0 = new byte[3];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      long long0 = stringMultipartPart0.transferContentTo(fileChannel0);
}"
1912,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test1()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""!E)i(:WiTi?"", ""!E)i(:WiTi?"");
      byte[] byteArray0 = new byte[3];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""!E)i(:WiTi?"");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      long long0 = stringMultipartPart0.transferContentTo(fileChannel0);
}"
1913,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test2()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""bRDJ70ut6dh]luO"", ""v%\u0007"", ""F>L2S!goEa#"");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      long long0 = stringMultipartPart0.transferContentTo(emptyByteBuf0);
}"
1914,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test3()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""&O vwi8gcAJYh("", ""&O vwi8gcAJYh("");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo(datagramChannel0);
        fail(""Expecting exception: NotYetConnectedException"");
      } catch(NotYetConnectedException e) {
      }
  }"
1915,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test4()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""!E)i(:WiTi?"", ""!E)i(:WiTi?"");
      byte[] byteArray0 = new byte[3];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo(fileChannel0);
        fail(""Expecting exception: NonWritableChannelException"");
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.EvoFileChannel"", e);
      }
  }"
1916,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test5()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""EG!qK&"", ""EG!qK&"", ""JB1C6(lUCf+1jG"");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      datagramChannel0.close();
      try { 
        stringMultipartPart0.transferContentTo(datagramChannel0);
        fail(""Expecting exception: ClosedChannelException"");
      } catch(ClosedChannelException e) {
      }
  }"
1917,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test6()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", """", """");
      byte[] byteArray0 = new byte[7];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo((WritableByteChannel) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1918,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test7()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Vector<Param> vector0 = new Vector<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn(""+Qu{sC&y`"").when(stringPart0).getContentId();
      doReturn(""Wjwv"").when(stringPart0).getContentType();
      doReturn(vector0).when(stringPart0).getCustomHeaders();
      doReturn(""Wjwv"", """").when(stringPart0).getDispositionType();
      doReturn("" as capacity("", ""org.asynchttpclient.request.body.multipart.part.StringMultipartPart"").when(stringPart0).getName();
      doReturn(""b"").when(stringPart0).getTransferEncoding();
      doReturn("" as capacity("").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[3];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)107).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo(writableByteChannel0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 107, writerIndex: 13 (expected: 0 <= readerIndex <= writerIndex <= capacity(13))
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
1919,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test8()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""io.netty.util.internal.ReflectionUtil"", ""io.netty.util.internal.ReflectionUtil"", """");
      byte[] byteArray0 = new byte[6];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.asReadOnly();
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo(byteBuf0);
        fail(""Expecting exception: ReadOnlyBufferException"");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.ReadOnlyByteBuf"", e);
      }
  }"
1920,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test9()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", ""hgt51/'FSF(MT0uEPI"");
      byte[] byteArray0 = new byte[3];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo((ByteBuf) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1921,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test10()  throws Throwable  {
      StringPart stringPart0 = new StringPart((String) null, ""unpaused {}"");
      byte[] byteArray0 = new byte[2];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      ByteBuf byteBuf0 = pooledByteBufAllocator0.directBuffer(2323);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferContentTo(byteBuf0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // srcIndex: 0
         //
         verifyException(""io.netty.buffer.UnsafeByteBufUtil"", e);
      }
  }"
1922,"  public void close() {
    super.close();
    contentBuffer.release();
  }","  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      StringPart stringPart0 = new StringPart("""", ""io.netty.allocation.cacheTrimIntervalMillis"", """", charset0);
      byte[] byteArray0 = new byte[8];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      // Undeclared exception!
      try { 
        stringMultipartPart0.close();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, decrement: 1
         //
         verifyException(""io.netty.util.internal.ReferenceCountUpdater"", e);
      }
  }"
1923,"  public StringMultipartPart(StringPart part, byte[] boundary) {
    super(part, boundary);
    contentBuffer = Unpooled.wrappedBuffer(part.getValue().getBytes(part.getCharset()));
  }","  public void test12()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""org.asynchttpclient.request.body.multipart.part.StringMultipartPart"", ""org.asynchttpclient.request.body.multipart.part.StringMultipartPart"", ""hi?7>FiTUg}.G|u%Czb"");
      StringMultipartPart stringMultipartPart0 = null;
      try {
        stringMultipartPart0 = new StringMultipartPart(stringPart0, (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.PartVisitor$CounterPartVisitor"", e);
      }
  }"
1924,"  protected long getContentLength() {
    return contentBuffer.capacity();
  }","  public void test13()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", ""- 9/>$A"");
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      long long0 = stringMultipartPart0.getContentLength();
}"
1925,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test14()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Vector<Param> vector0 = new Vector<Param>();
      StringPart stringPart0 = mock(StringPart.class, new ViolatedAssumptionAnswer());
      doReturn(charset0, charset0, charset0, charset0, charset0).when(stringPart0).getCharset();
      doReturn(""+Qu{sC&y`"", ""+Qu{sC&y`"").when(stringPart0).getContentId();
      doReturn(""Wjwv"", """").when(stringPart0).getContentType();
      doReturn(vector0, vector0).when(stringPart0).getCustomHeaders();
      doReturn(""Wjwv"", """", "".slice("", ""Registering watch on {} {}"").when(stringPart0).getDispositionType();
      doReturn("" as capacity("", ""org.asynchttpclient.request.body.multipart.part.StringMultipartPart"", """", """").when(stringPart0).getName();
      doReturn(""b"", ""+Qu{sC&y`"").when(stringPart0).getTransferEncoding();
      doReturn("" as capacity("").when(stringPart0).getValue();
      byte[] byteArray0 = new byte[3];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePreContentBytes((byte)10);
      long long0 = stringMultipartPart0.transferContentTo(byteBuf0);
}"
1926,"  protected long getContentLength() {
    return contentBuffer.capacity();
  }","  public void test15()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", ""- 9/>$A"");
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      long long0 = stringMultipartPart0.getContentLength();
}"
1927,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test0()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn((-1985L)).when(file0).length();
      File file1 = MockFile.createTempFile(""9W%J0tMgd-3\""."", ""UD-Fq?xC,.&Gs%B9;ou"");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""z"", ""9W%J0tMgd-3\""."").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""z"").when(filePart0).getContentId();
      doReturn(""axU6c)E0`wYw"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""axU6c)E0`wYw"", """").when(filePart0).getDispositionType();
      doReturn(""axU6c)E0`wYw"", ""9`%GfuyIrs<)?CbX"").when(filePart0).getName();
      doReturn(""axU6c)E0`wYw"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      fileMultipartPart0.transferContentTo(socketChannel0);
}"
1928,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test1()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn((-1985L)).when(file0).length();
      File file1 = MockFile.createTempFile(""9W%J0tMgd-3\""."", ""UD-Fq?xC,.&Gs%B9;ou"");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""z"", ""9W%J0tMgd-3\""."").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""z"").when(filePart0).getContentId();
      doReturn(""axU6c)E0`wYw"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""axU6c)E0`wYw"", """").when(filePart0).getDispositionType();
      doReturn(""axU6c)E0`wYw"", ""9`%GfuyIrs<)?CbX"").when(filePart0).getName();
      doReturn(""axU6c)E0`wYw"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      long long0 = fileMultipartPart0.transferContentTo(emptyByteBuf0);
}"
1929,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test2()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn((-1985L)).when(file0).length();
      File file1 = MockFile.createTempFile(""9W%J0tMgd-3\""."", ""UD-Fq?xC,.&Gs%B9;ou"");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""z"", ""9W%J0tMgd-3\""."").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""z"").when(filePart0).getContentId();
      doReturn(""axU6c)E0`wYw"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""axU6c)E0`wYw"", """").when(filePart0).getDispositionType();
      doReturn(""axU6c)E0`wYw"", ""9`%GfuyIrs<)?CbX"").when(filePart0).getName();
      doReturn(""axU6c)E0`wYw"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      long long0 = fileMultipartPart0.transferContentTo(emptyByteBuf0);
}"
1930,"  protected long getContentLength() {
    return length;
  }","  public void test3()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(64L).when(file0).length();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""r"", ""9W%J0tMgd-3\""."").when(filePart0).getFileName();
      doReturn(file0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""r"").when(filePart0).getContentId();
      doReturn("""").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("""", ""9W%J0tMgd-3\""."").when(filePart0).getDispositionType();
      doReturn("""", ""9`%GfuyIrs<)?CbX"").when(filePart0).getName();
      doReturn("""").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.getContentLength();
}"
1931,"  protected long getContentLength() {
    return length;
  }","  public void test4()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn((-1985L)).when(file0).length();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""z"", ""9W%J0tMgd-3\""."").when(filePart0).getFileName();
      doReturn(file0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""z"").when(filePart0).getContentId();
      doReturn(""axU6c)E0`wYw"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""axU6c)E0`wYw"", """").when(filePart0).getDispositionType();
      doReturn(""axU6c)E0`wYw"", ""9`%GfuyIrs<)?CbX"").when(filePart0).getName();
      doReturn(""axU6c)E0`wYw"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.getContentLength();
}"
1932,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test5()  throws Throwable  {
      File file0 = MockFile.createTempFile(""|5bK.ev.b"", (String) null);
      FilePart filePart0 = new FilePart(""|5bK.ev.b"", file0, "",`L"");
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      MockFile mockFile0 = new MockFile("""");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      FileChannel fileChannel0 = FileChannel.open(path0, openOptionArray0);
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(fileChannel0);
        fail(""Expecting exception: NonWritableChannelException"");
      } catch(NonWritableChannelException e) {
      }
  }"
1933,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("""", ""recordLeakNonRefCountingOperation"").when(filePart0).getFileName();
      doReturn(mockFile0, (File) null).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("""").when(filePart0).getContentId();
      doReturn("""").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("""", """").when(filePart0).getDispositionType();
      doReturn("""", ""oqnr{xCOl@b"").when(filePart0).getName();
      doReturn("""").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-32);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePostContentBytes((byte)118);
      PartVisitor partVisitor0 = mock(PartVisitor.class, new ViolatedAssumptionAnswer());
      fileMultipartPart0.visitStart(partVisitor0);
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(byteBuf0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
      }
  }"
1934,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test7()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(0L).when(file0).length();
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""=U]\"""", ""Qu?Y&$#c(w:o$;r~th"").when(filePart0).getFileName();
      doReturn(file0, (File) null).when(filePart0).getFile();
      doReturn(charset0, charset0).when(filePart0).getCharset();
      doReturn(""=U]\"""").when(filePart0).getContentId();
      doReturn((String) null).when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn((String) null).when(filePart0).getDispositionType();
      doReturn(""=U]\"""", ""XjwD+Rya+[UW~'=VA`S"").when(filePart0).getName();
      doReturn(""v$+ b"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[7];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(writableByteChannel0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
      }
  }"
1935,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test8()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Charset charset0 = Charset.defaultCharset();
      mockFile0.toURL();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("""", """").when(filePart0).getFileName();
      doReturn(mockFile0, (File) null).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("""").when(filePart0).getContentId();
      doReturn("""").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("""", """").when(filePart0).getDispositionType();
      doReturn("""", ""oqnr{xCOl@b"").when(filePart0).getName();
      doReturn("""").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-39);
      byteArray0[0] = (byte) (-39);
      Charset.defaultCharset();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/async-http-client/client"");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(datagramChannel0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
      }
  }"
1936,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test9()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(5234L).when(file0).length();
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      MockFile mockFile0 = new MockFile(""XjwD+Rya+[UW~'=VA`S"");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""=U]\"""", ""Qu?Y&$#c(w:o$;r~th"").when(filePart0).getFileName();
      doReturn(file0, mockFile0).when(filePart0).getFile();
      doReturn(charset0, charset0).when(filePart0).getCharset();
      doReturn(""=U]\"""").when(filePart0).getContentId();
      doReturn((String) null).when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn((String) null).when(filePart0).getDispositionType();
      doReturn(""=U]\"""", ""XjwD+Rya+[UW~'=VA`S"").when(filePart0).getName();
      doReturn(""v$+ b"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[7];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      try { 
        fileMultipartPart0.transferContentTo(writableByteChannel0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
      }
  }"
1937,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test10()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2319L).when(file0).length();
      File file1 = MockFile.createTempFile(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""IZ'<Q6Y<;{*j[Q"").when(filePart0).getContentId();
      doReturn(""IZ'<Q6Y<;{*j[Q"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"").when(filePart0).getDispositionType();
      doReturn(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"").when(filePart0).getName();
      doReturn(""IZ'<Q6Y<;{*j[Q"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[12];
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, (byte)95, (byte)95);
      unpooledUnsafeDirectByteBuf0.release();
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
1938,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test11()  throws Throwable  {
      File file0 = MockFile.createTempFile(""aJ$[W.ZFrU"", ""J<N"");
      FilePart filePart0 = new FilePart(""aJ$[W.ZFrU"", file0, ""-Dio.netty.noResourceLeakDetection: {}"", (Charset) null, ""H- W\""Ln9"");
      byte[] byteArray0 = new byte[3];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.asReadOnly();
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferContentTo(byteBuf0);
        fail(""Expecting exception: ReadOnlyBufferException"");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.ReadOnlyByteBuf"", e);
      }
  }"
1939,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("""", ""recordLeakNonRefCountingOperation"").when(filePart0).getFileName();
      doReturn(mockFile0, mockFile0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("""").when(filePart0).getContentId();
      doReturn("""").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("""", """").when(filePart0).getDispositionType();
      doReturn("""", ""oqnr{xCOl@b"").when(filePart0).getName();
      doReturn("""").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/async-http-client/client"");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePostContentBytes((byte)118);
      try { 
        fileMultipartPart0.transferContentTo(byteBuf0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
1940,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("""", ""recordLeakNonRefCountingOperation"").when(filePart0).getFileName();
      doReturn(mockFile0, mockFile0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("""").when(filePart0).getContentId();
      doReturn("""").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("""", """").when(filePart0).getDispositionType();
      doReturn("""", ""oqnr{xCOl@b"").when(filePart0).getName();
      doReturn("""").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePostContentBytes((byte)118);
      mockFile0.delete();
      try { 
        fileMultipartPart0.transferContentTo(byteBuf0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
      }
  }"
1941,"  public FileMultipartPart(FilePart part, byte[] boundary) {
    super(part, boundary);
    File file = part.getFile();
    if (!file.exists()) {
      throw new IllegalArgumentException(""File part doesn't exist: "" + file.getAbsolutePath());
    } else if (!file.canRead()) {
      throw new IllegalArgumentException(""File part can't be read: "" + file.getAbsolutePath());
    }
    length = file.length();
  }","  public void test14()  throws Throwable  {
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(filePart0).getFileName();
      doReturn((File) null).when(filePart0).getFile();
      doReturn((String) null).when(filePart0).getContentId();
      doReturn((String) null).when(filePart0).getContentType();
      doReturn((List) null).when(filePart0).getCustomHeaders();
      doReturn((String) null).when(filePart0).getDispositionType();
      doReturn((String) null).when(filePart0).getName();
      doReturn((String) null).when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = null;
      try {
        fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.FileMultipartPart"", e);
      }
  }"
1942,"  protected long getContentLength() {
    return length;
  }","  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile(""|5bK.ev.b"", (String) null);
      FilePart filePart0 = new FilePart(""|5bK.ev.b"", file0, "",`L"");
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.getContentLength();
}"
1943,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test16()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2319L).when(file0).length();
      File file1 = MockFile.createTempFile(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""IZ'<Q6Y<;{*j[Q"").when(filePart0).getContentId();
      doReturn(""IZ'<Q6Y<;{*j[Q"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"").when(filePart0).getDispositionType();
      doReturn(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"").when(filePart0).getName();
      doReturn(""IZ'<Q6Y<;{*j[Q"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[7];
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, (byte)95, (byte)95);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
}"
1944,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test17()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2319L).when(file0).length();
      File file1 = MockFile.createTempFile(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"").when(filePart0).getFileName();
      doReturn(file0, file1).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""IZ'<Q6Y<;{*j[Q"").when(filePart0).getContentId();
      doReturn(""IZ'<Q6Y<;{*j[Q"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"").when(filePart0).getDispositionType();
      doReturn(""IZ'<Q6Y<;{*j[Q"", ""IZ'<Q6Y<;{*j[Q"").when(filePart0).getName();
      doReturn(""IZ'<Q6Y<;{*j[Q"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[7];
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, (byte)95, (byte)95);
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
}"
1945,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Charset charset0 = Charset.defaultCharset();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("""", ""recordLeakNonRefCountingOperation"").when(filePart0).getFileName();
      doReturn(mockFile0, mockFile0).when(filePart0).getFile();
      doReturn(charset0, charset0, charset0, charset0).when(filePart0).getCharset();
      doReturn("""").when(filePart0).getContentId();
      doReturn("""").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("""", """").when(filePart0).getDispositionType();
      doReturn("""", ""oqnr{xCOl@b"").when(filePart0).getName();
      doReturn("""").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePostContentBytes((byte)118);
      fileMultipartPart0.transferContentTo(byteBuf0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ArrayList<ByteBuf> arrayList0 = new ArrayList<ByteBuf>();
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, true, (byte)34, arrayList0);
      try { 
        fileMultipartPart0.transferContentTo(compositeByteBuf0);
        fail(""Expecting exception: ClosedChannelException"");
      } catch(ClosedChannelException e) {
      }
  }"
1946,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test19()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2374L).when(file0).length();
      MockFile mockFile0 = new MockFile(""q{YGe(5@A"", ""q{YGe(5@A"");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""q{YGe(5@A"", ""q{YGe(5@A"").when(filePart0).getFileName();
      doReturn(file0, mockFile0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""q{YGe(5@A"").when(filePart0).getContentId();
      doReturn(""q{YGe(5@A"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""q{YGe(5@A"", ""q{YGe(5@A"").when(filePart0).getDispositionType();
      doReturn(""q{YGe(5@A"", ""q{YGe(5@A"").when(filePart0).getName();
      doReturn(""q{YGe(5@A"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[2];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileMultipartPart0.transferContentTo(fileChannel0);
      long long0 = fileMultipartPart0.transferContentTo(emptyByteBuf0);
}"
1947,"  protected long transferContentTo(ByteBuf target) throws IOException {
    // can return -1 if file is empty or FileChannel was closed
    int transferred = target.writeBytes(getChannel(), target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == length || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      if (channel.isOpen()) {
        channel.close();
      }
    }
    return transferred;
  }","  public void test20()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2374L).when(file0).length();
      MockFile mockFile0 = new MockFile(""q{YGe(5@A"", ""q{YGe(5@A"");
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""q{YGe(5@A"", ""q{YGe(5@A"").when(filePart0).getFileName();
      doReturn(file0, mockFile0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""q{YGe(5@A"").when(filePart0).getContentId();
      doReturn(""q{YGe(5@A"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""q{YGe(5@A"", ""q{YGe(5@A"").when(filePart0).getDispositionType();
      doReturn(""q{YGe(5@A"", ""q{YGe(5@A"").when(filePart0).getName();
      doReturn(""q{YGe(5@A"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[2];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileMultipartPart0.transferContentTo(fileChannel0);
      long long0 = fileMultipartPart0.transferContentTo(emptyByteBuf0);
}"
1948,"  public FileMultipartPart(FilePart part, byte[] boundary) {
    super(part, boundary);
    File file = part.getFile();
    if (!file.exists()) {
      throw new IllegalArgumentException(""File part doesn't exist: "" + file.getAbsolutePath());
    } else if (!file.canRead()) {
      throw new IllegalArgumentException(""File part can't be read: "" + file.getAbsolutePath());
    }
    length = file.length();
  }","  public void test21()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn("""").when(file0).getAbsolutePath();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn("""", ""9W%J0tMgd-3\""."").when(filePart0).getFileName();
      doReturn(file0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn("""").when(filePart0).getContentId();
      doReturn("""").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn("""", """").when(filePart0).getDispositionType();
      doReturn("""", ""9`%GfuyIrs<)?CbX"").when(filePart0).getName();
      doReturn("""").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[6];
      FileMultipartPart fileMultipartPart0 = null;
      try {
        fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // File part can't be read: 
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.FileMultipartPart"", e);
      }
  }"
1949,"  public FileMultipartPart(FilePart part, byte[] boundary) {
    super(part, boundary);
    File file = part.getFile();
    if (!file.exists()) {
      throw new IllegalArgumentException(""File part doesn't exist: "" + file.getAbsolutePath());
    } else if (!file.canRead()) {
      throw new IllegalArgumentException(""File part can't be read: "" + file.getAbsolutePath());
    }
    length = file.length();
  }","  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile(""lHe4,K"", ""lHe4,K"");
      FilePart filePart0 = new FilePart(""lHe4,K"", file0);
      byte[] byteArray0 = new byte[1];
      file0.delete();
      FileMultipartPart fileMultipartPart0 = null;
      try {
        fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // File part doesn't exist: /tmp/lHe4,K0lHe4,K
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.FileMultipartPart"", e);
      }
  }"
1950,"  public void close() {
    super.close();
    closeSilently(channel);
  }","  public void test23()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).canRead();
      doReturn(true).when(file0).exists();
      doReturn(2374L).when(file0).length();
      FilePart filePart0 = mock(FilePart.class, new ViolatedAssumptionAnswer());
      doReturn(""q{YGe(5@A"", ""q{YGe(5@A"").when(filePart0).getFileName();
      doReturn(file0).when(filePart0).getFile();
      doReturn((Charset) null, (Charset) null).when(filePart0).getCharset();
      doReturn(""q{YGe(5@A"").when(filePart0).getContentId();
      doReturn(""q{YGe(5@A"").when(filePart0).getContentType();
      doReturn((List<Param>) null).when(filePart0).getCustomHeaders();
      doReturn(""q{YGe(5@A"", ""q{YGe(5@A"").when(filePart0).getDispositionType();
      doReturn(""q{YGe(5@A"", ""q{YGe(5@A"").when(filePart0).getName();
      doReturn(""q{YGe(5@A"").when(filePart0).getTransferEncoding();
      byte[] byteArray0 = new byte[2];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      fileMultipartPart0.close();
}"
1951,"  public long length() {
    long contentLength = getContentLength();
    if (contentLength < 0) {
      return contentLength;
    }
    return preContentLength + postContentLength + getContentLength();
  }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      long long0 = messageEndMultipartPart0.length();
}"
1952,"  public MultipartState getState() {
    return state;
  }","  public void test1()  throws Throwable  {
      File file0 = MockFile.createTempFile(""form-data"", "" ]n<B'<2^u{lSg"");
      FilePart filePart0 = new FilePart("" ]n<B'<2^u{lSg"", file0);
      byte[] byteArray0 = new byte[5];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      fileMultipartPart0.visitTransferEncodingHeader((PartVisitor) null);
}"
1953,"  protected void visitStart(PartVisitor visitor) {
    visitor.withBytes(EXTRA_BYTES);
    visitor.withBytes(boundary);
  }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("""", byteArray0, """");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitStart(partVisitor_CounterPartVisitor0);
}"
1954,"  protected void visitPreContent(PartVisitor visitor) {
    visitStart(visitor);
    visitDispositionHeader(visitor);
    visitContentTypeHeader(visitor);
    visitTransferEncodingHeader(visitor);
    visitContentIdHeader(visitor);
    visitCustomHeaders(visitor);
    visitEndOfHeaders(visitor);
  }","  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitPreContent(partVisitor_CounterPartVisitor0);
}"
1955,"  public boolean isTargetSlow() {
    return slowTarget;
  }","  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      messageEndMultipartPart0.visitPostContent(partVisitor_CounterPartVisitor0);
}"
1956,"  protected void visitDispositionHeader(PartVisitor visitor) {
    visitor.withBytes(CRLF_BYTES);
    visitor.withBytes(CONTENT_DISPOSITION_BYTES);
    visitor.withBytes(part.getDispositionType() != null ? part.getDispositionType().getBytes(US_ASCII) : FORM_DATA_DISPOSITION_TYPE_BYTES);
    if (part.getName() != null) {
      visitor.withBytes(NAME_BYTES);
      visitor.withByte(QUOTE_BYTE);
      visitor.withBytes(part.getName().getBytes(US_ASCII));
      visitor.withByte(QUOTE_BYTE);
    }
  }","  public void test5()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""cmig]k(Yf}/;_?u"", """");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      stringMultipartPart0.visitDispositionHeader(partVisitor_CounterPartVisitor0);
}"
1957,"  public MultipartState getState() {
    return state;
  }","  public void test6()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamPart inputStreamPart0 = new InputStreamPart((String) null, mockFileInputStream0, """", (-2770L), ""w;|:EL:B"");
      byte[] byteArray0 = new byte[7];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      inputStreamMultipartPart0.visitCustomHeaders(partVisitor_CounterPartVisitor0);
}"
1958,"  protected void visitContentTypeHeader(PartVisitor visitor) {
    String contentType = part.getContentType();
    if (contentType != null) {
      visitor.withBytes(CRLF_BYTES);
      visitor.withBytes(CONTENT_TYPE_BYTES);
      visitor.withBytes(contentType.getBytes(US_ASCII));
      Charset charSet = part.getCharset();
      if (charSet != null) {
        visitor.withBytes(CHARSET_BYTES);
        visitor.withBytes(part.getCharset().name().getBytes(US_ASCII));
      }
    }
  }","  public void test7()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition: "", ""Content-Disposition: "", (String) null, (Charset) null);
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      stringMultipartPart0.visitContentTypeHeader(partVisitor_CounterPartVisitor0);
}"
1959,"  public boolean isTargetSlow() {
    return slowTarget;
  }","  public void test8()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""<-]b#_MY"", pipedInputStream0, ""="", 553L);
      byte[] byteArray0 = new byte[5];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer();
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      inputStreamMultipartPart0.visitContentIdHeader(partVisitor_ByteBufVisitor0);
}"
1960,"  public boolean isTargetSlow() {
    return slowTarget;
  }","  public void test9()  throws Throwable  {
      File file0 = MockFile.createTempFile(""UTF-8"", """", (File) null);
      FilePart filePart0 = new FilePart("""", file0);
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      fileMultipartPart0.close();
}"
1961,"  protected long transfer(ByteBuf source, ByteBuf target, MultipartState sourceFullyWrittenState) {

    int sourceRemaining = source.readableBytes();
    int targetRemaining = target.writableBytes();

    if (sourceRemaining <= targetRemaining) {
      target.writeBytes(source);
      state = sourceFullyWrittenState;
      return sourceRemaining;
    } else {
      target.writeBytes(source, targetRemaining);
      return targetRemaining;
    }
  }","  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      SocketChannel socketChannel0 = SocketChannel.open();
      MultipartState multipartState0 = MultipartState.PRE_CONTENT;
      long long0 = messageEndMultipartPart0.transfer(emptyByteBuf0, socketChannel0, multipartState0);
}"
1962,"  public boolean isTargetSlow() {
    return slowTarget;
  }","  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      SocketChannel socketChannel0 = SocketChannel.open();
      MultipartState multipartState0 = MultipartState.PRE_CONTENT;
      long long0 = messageEndMultipartPart0.transfer(emptyByteBuf0, socketChannel0, multipartState0);
}"
1963,"  public MultipartState getState() {
    return state;
  }","  public void test12()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Conten-Disposition: "", ""Conten-Disposition: "");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes(31);
      MultipartState multipartState0 = MultipartState.DONE;
      MockFile mockFile0 = new MockFile(""Conten-Disposition: "", ""Conten-Disposition: "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      long long0 = stringMultipartPart0.transfer(byteBuf0, fileChannel0, multipartState0);
}"
1964,"  protected long transfer(ByteBuf source, ByteBuf target, MultipartState sourceFullyWrittenState) {

    int sourceRemaining = source.readableBytes();
    int targetRemaining = target.writableBytes();

    if (sourceRemaining <= targetRemaining) {
      target.writeBytes(source);
      state = sourceFullyWrittenState;
      return sourceRemaining;
    } else {
      target.writeBytes(source, targetRemaining);
      return targetRemaining;
    }
  }","  public void test13()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Conten-Disposition: "", ""Conten-Disposition: "");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes(31);
      MultipartState multipartState0 = MultipartState.DONE;
      MockFile mockFile0 = new MockFile(""Conten-Disposition: "", ""Conten-Disposition: "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      long long0 = stringMultipartPart0.transfer(byteBuf0, fileChannel0, multipartState0);
}"
1965,"  public boolean isTargetSlow() {
    return slowTarget;
  }","  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile(""Too many bytes to read - Need "", ""Too many bytes to read - Need "");
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = new FilePart(""Too many bytes to read - Need "", file0, ""Too many bytes to read - Need "", charset0, ""Too many bytes to read - Need "");
      byte[] byteArray0 = new byte[5];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      fileMultipartPart0.slowTarget = true;
      boolean boolean0 = fileMultipartPart0.isTargetSlow();
}"
1966,"  protected int computePreContentLength() {
    CounterPartVisitor counterVisitor = new CounterPartVisitor();
    visitPreContent(counterVisitor);
    return counterVisitor.getCount();
  }","  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      int int0 = byteArrayMultipartPart0.computePreContentLength();
}"
1967,"  protected ByteBuf computePreContentBytes(int preContentLength) {
    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(preContentLength);
    ByteBufVisitor bytesVisitor = new ByteBufVisitor(buffer);
    visitPreContent(bytesVisitor);
    return buffer;
  }","  public void test16()  throws Throwable  {
      File file0 = MockFile.createTempFile(""UTF-8"", """", (File) null);
      FilePart filePart0 = new FilePart("""", file0);
      byte[] byteArray0 = new byte[0];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteBuf byteBuf0 = fileMultipartPart0.computePreContentBytes(1297);
}"
1968,"  protected int computePostContentLength() {
    CounterPartVisitor counterVisitor = new CounterPartVisitor();
    visitPostContent(counterVisitor);
    return counterVisitor.getCount();
  }","  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", pipedInputStream0, """");
      byte[] byteArray0 = new byte[9];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      int int0 = inputStreamMultipartPart0.computePostContentLength();
}"
1969,"  protected void visitTransferEncodingHeader(PartVisitor visitor) {
    String transferEncoding = part.getTransferEncoding();
    if (transferEncoding != null) {
      visitor.withBytes(CRLF_BYTES);
      visitor.withBytes(CONTENT_TRANSFER_ENCODING_BYTES);
      visitor.withBytes(transferEncoding.getBytes(US_ASCII));
    }
  }","  public void test18()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""s390_32"", ""s390_32"", ""s390_32"", (Charset) null, ""s390_32"", ""s390_32"");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.asReadOnly();
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitTransferEncodingHeader(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: ReadOnlyBufferException"");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.ReadOnlyByteBuf"", e);
      }
  }"
1970,"  protected void visitTransferEncodingHeader(PartVisitor visitor) {
    String transferEncoding = part.getTransferEncoding();
    if (transferEncoding != null) {
      visitor.withBytes(CRLF_BYTES);
      visitor.withBytes(CONTENT_TRANSFER_ENCODING_BYTES);
      visitor.withBytes(transferEncoding.getBytes(US_ASCII));
    }
  }","  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitTransferEncodingHeader(partVisitor_CounterPartVisitor0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1971,"  protected void visitTransferEncodingHeader(PartVisitor visitor) {
    String transferEncoding = part.getTransferEncoding();
    if (transferEncoding != null) {
      visitor.withBytes(CRLF_BYTES);
      visitor.withBytes(CONTENT_TRANSFER_ENCODING_BYTES);
      visitor.withBytes(transferEncoding.getBytes(US_ASCII));
    }
  }","  public void test20()  throws Throwable  {
      StringPart stringPart0 = new StringPart((String) null, ""org.apache.commons.io.IOCase"", ""org.apache.commons.io.IOCase"", (Charset) null, (String) null, ""org.apache.commons.io.IOCase"");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitTransferEncodingHeader(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.EmptyByteBuf"", e);
      }
  }"
1972,"  protected void visitStart(PartVisitor visitor) {
    visitor.withBytes(EXTRA_BYTES);
    visitor.withBytes(boundary);
  }","  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitStart((PartVisitor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1973,"  protected void visitStart(PartVisitor visitor) {
    visitor.withBytes(EXTRA_BYTES);
    visitor.withBytes(boundary);
  }","  public void test22()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""~hMI:.jB&f`pz"", ""~hMI:.jB&f`pz"", ""~hMI:.jB&f`pz"", (Charset) null);
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitStart(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.EmptyByteBuf"", e);
      }
  }"
1974,"  protected void visitPreContent(PartVisitor visitor) {
    visitStart(visitor);
    visitDispositionHeader(visitor);
    visitContentTypeHeader(visitor);
    visitTransferEncodingHeader(visitor);
    visitContentIdHeader(visitor);
    visitCustomHeaders(visitor);
    visitEndOfHeaders(visitor);
  }","  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitPreContent((PartVisitor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1975,"  protected void visitPreContent(PartVisitor visitor) {
    visitStart(visitor);
    visitDispositionHeader(visitor);
    visitContentTypeHeader(visitor);
    visitTransferEncodingHeader(visitor);
    visitContentIdHeader(visitor);
    visitCustomHeaders(visitor);
    visitEndOfHeaders(visitor);
  }","  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitPreContent(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.EmptyByteBuf"", e);
      }
  }"
1976,"  protected void visitPostContent(PartVisitor visitor) {
    visitor.withBytes(CRLF_BYTES);
  }","  public void test25()  throws Throwable  {
      File file0 = MockFile.createTempFile(""`S,O~1g"", ""Ws3,zB#P/&"");
      FilePart filePart0 = new FilePart(""`S,O~1g"", file0, (String) null);
      byte[] byteArray0 = new byte[3];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      // Undeclared exception!
      try { 
        fileMultipartPart0.visitPostContent((PartVisitor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1977,"  protected void visitPostContent(PartVisitor visitor) {
    visitor.withBytes(CRLF_BYTES);
  }","  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart((String) null, byteArray0);
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitPostContent(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.EmptyByteBuf"", e);
      }
  }"
1978,"  protected void visitPostContent(PartVisitor visitor) {
    visitor.withBytes(CRLF_BYTES);
  }","  public void test27()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition:2"", ""Content-Disposition:2"", ""Content-Disposition:2"", (Charset) null);
      byte[] byteArray0 = new byte[6];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer(1214);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(compositeByteBuf0);
      // Undeclared exception!
      stringMultipartPart0.visitPostContent(partVisitor_ByteBufVisitor0);
  }"
1979,"  protected void visitEndOfHeaders(PartVisitor visitor) {
    visitor.withBytes(CRLF_BYTES);
    visitor.withBytes(CRLF_BYTES);
  }","  public void test28()  throws Throwable  {
      File file0 = MockFile.createTempFile(""form-data"", "" ]n<B'<2^u{lSg"");
      FilePart filePart0 = new FilePart("" ]n<B'<2^u{lSg"", file0);
      byte[] byteArray0 = new byte[5];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor((ByteBuf) null);
      // Undeclared exception!
      try { 
        fileMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1980,"  protected void visitEndOfHeaders(PartVisitor visitor) {
    visitor.withBytes(CRLF_BYTES);
    visitor.withBytes(CRLF_BYTES);
  }","  public void test29()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePreContentBytes(102);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.EmptyByteBuf"", e);
      }
  }"
1981,"  protected void visitEndOfHeaders(PartVisitor visitor) {
    visitor.withBytes(CRLF_BYTES);
    visitor.withBytes(CRLF_BYTES);
  }","  public void test30()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", """");
      byte[] byteArray0 = new byte[8];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer();
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(compositeByteBuf0);
      // Undeclared exception!
      stringMultipartPart0.visitEndOfHeaders(partVisitor_ByteBufVisitor0);
  }"
1982,"  protected void visitDispositionHeader(PartVisitor visitor) {
    visitor.withBytes(CRLF_BYTES);
    visitor.withBytes(CONTENT_DISPOSITION_BYTES);
    visitor.withBytes(part.getDispositionType() != null ? part.getDispositionType().getBytes(US_ASCII) : FORM_DATA_DISPOSITION_TYPE_BYTES);
    if (part.getName() != null) {
      visitor.withBytes(NAME_BYTES);
      visitor.withByte(QUOTE_BYTE);
      visitor.withBytes(part.getName().getBytes(US_ASCII));
      visitor.withByte(QUOTE_BYTE);
    }
  }","  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 1);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.addComponent(true, (ByteBuf) compositeByteBuf0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(compositeByteBuf1);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitDispositionHeader(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, decrement: 1
         //
         verifyException(""io.netty.util.internal.ReferenceCountUpdater"", e);
      }
  }"
1983,"  protected void visitDispositionHeader(PartVisitor visitor) {
    visitor.withBytes(CRLF_BYTES);
    visitor.withBytes(CONTENT_DISPOSITION_BYTES);
    visitor.withBytes(part.getDispositionType() != null ? part.getDispositionType().getBytes(US_ASCII) : FORM_DATA_DISPOSITION_TYPE_BYTES);
    if (part.getName() != null) {
      visitor.withBytes(NAME_BYTES);
      visitor.withByte(QUOTE_BYTE);
      visitor.withBytes(part.getName().getBytes(US_ASCII));
      visitor.withByte(QUOTE_BYTE);
    }
  }","  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitDispositionHeader(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.EmptyByteBuf"", e);
      }
  }"
1984,"  protected void visitCustomHeaders(PartVisitor visitor) {
    if (isNonEmpty(part.getCustomHeaders())) {
      for (Param param : part.getCustomHeaders()) {
        visitor.withBytes(CRLF_BYTES);
        visitor.withBytes(param.getName().getBytes(US_ASCII));
        visitor.withBytes(HEADER_NAME_VALUE_SEPARATOR_BYTES);
        visitor.withBytes(param.getValue().getBytes(US_ASCII));
      }
    }
  }","  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""--"", byteArray0, ""--"", charset0, ""G5e{E5^"", ""G5e{E5^"", """");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayPart0.addCustomHeader(""6<OQFX"", ""6<OQFX"");
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitCustomHeaders((PartVisitor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1985,"  protected void visitContentTypeHeader(PartVisitor visitor) {
    String contentType = part.getContentType();
    if (contentType != null) {
      visitor.withBytes(CRLF_BYTES);
      visitor.withBytes(CONTENT_TYPE_BYTES);
      visitor.withBytes(contentType.getBytes(US_ASCII));
      Charset charSet = part.getCharset();
      if (charSet != null) {
        visitor.withBytes(CHARSET_BYTES);
        visitor.withBytes(part.getCharset().name().getBytes(US_ASCII));
      }
    }
  }","  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitContentTypeHeader((PartVisitor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1986,"  protected void visitContentTypeHeader(PartVisitor visitor) {
    String contentType = part.getContentType();
    if (contentType != null) {
      visitor.withBytes(CRLF_BYTES);
      visitor.withBytes(CONTENT_TYPE_BYTES);
      visitor.withBytes(contentType.getBytes(US_ASCII));
      Charset charSet = part.getCharset();
      if (charSet != null) {
        visitor.withBytes(CHARSET_BYTES);
        visitor.withBytes(part.getCharset().name().getBytes(US_ASCII));
      }
    }
  }","  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart((String) null, pipedInputStream0, """", (-268L), ""com.ibm.vm.bitmode"");
      byte[] byteArray0 = new byte[1];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(byteBuf0);
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.visitContentTypeHeader(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.EmptyByteBuf"", e);
      }
  }"
1987,"  protected void visitContentTypeHeader(PartVisitor visitor) {
    String contentType = part.getContentType();
    if (contentType != null) {
      visitor.withBytes(CRLF_BYTES);
      visitor.withBytes(CONTENT_TYPE_BYTES);
      visitor.withBytes(contentType.getBytes(US_ASCII));
      Charset charSet = part.getCharset();
      if (charSet != null) {
        visitor.withBytes(CHARSET_BYTES);
        visitor.withBytes(part.getCharset().name().getBytes(US_ASCII));
      }
    }
  }","  public void test36()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition:2"", ""Content-Disposition:2"", ""Content-Disposition:2"", (Charset) null);
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(2004318076);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(compositeByteBuf0);
      // Undeclared exception!
      stringMultipartPart0.visitContentTypeHeader(partVisitor_ByteBufVisitor0);
  }"
1988,"  protected void visitContentIdHeader(PartVisitor visitor) {
    String contentId = part.getContentId();
    if (contentId != null) {
      visitor.withBytes(CRLF_BYTES);
      visitor.withBytes(CONTENT_ID_BYTES);
      visitor.withBytes(contentId.getBytes(US_ASCII));
    }
  }","  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.visitContentIdHeader(partVisitor_CounterPartVisitor0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1989,"  protected void visitContentIdHeader(PartVisitor visitor) {
    String contentId = part.getContentId();
    if (contentId != null) {
      visitor.withBytes(CRLF_BYTES);
      visitor.withBytes(CONTENT_ID_BYTES);
      visitor.withBytes(contentId.getBytes(US_ASCII));
    }
  }","  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""~hMI:.jB&f(`pz"", byteArray0, ""~hMI:.jB&f(`pz"", charset0, ""~hMI:.jB&f(`pz"", ""~hMI:.jB&f(`pz"", """");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitContentIdHeader(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.EmptyByteBuf"", e);
      }
  }"
1990,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test39()  throws Throwable  {
      StringPart stringPart0 = new StringPart("""", """");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""(88>rS\\^"");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.close();
      try { 
        stringMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail(""Expecting exception: ClosedChannelException"");
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.EvoFileChannel"", e);
      }
  }"
1991,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test40()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition: "", ""Content-Disposition: "", ""Content-Disposition: "", (Charset) null);
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      HashSet<ByteBuf> hashSet0 = new HashSet<ByteBuf>();
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, false, 2049870754, hashSet0);
      compositeByteBuf0.release();
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferTo((ByteBuf) compositeByteBuf0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
1992,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""XhMI:.jB&f(`pz"", sequenceInputStream0, ""(cwF"", 0L);
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      ByteBuf byteBuf0 = emptyByteBuf0.asReadOnly();
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.transferTo(byteBuf0);
        fail(""Expecting exception: ReadOnlyBufferException"");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.ReadOnlyByteBuf"", e);
      }
  }"
1993,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test42()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""~hMI:.jB&f(`pz"", ""~hMI:.jB&f(`pz"", ""~hMI:.jB&f(`pz"", (Charset) null);
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferTo((ByteBuf) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1994,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test43()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition: "", ""Content-Disposition: "", ""Content-Disposition: "", (Charset) null, ""Content-Disposition: "", ""Content-Disposition: "");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringMultipartPart0.close();
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes(0);
      MultipartState multipartState0 = MultipartState.CONTENT;
      stringMultipartPart0.state = multipartState0;
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferTo(byteBuf0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // srcIndex: 0
         //
         verifyException(""io.netty.buffer.UnsafeByteBufUtil"", e);
      }
  }"
1995,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test44()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""<-]b#_MY"", pipedInputStream0, ""="", 553L);
      byte[] byteArray0 = new byte[5];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer();
      MultipartState multipartState0 = MultipartState.CONTENT;
      inputStreamMultipartPart0.transfer(byteBuf0, byteBuf0, multipartState0);
      try { 
        inputStreamMultipartPart0.transferTo(byteBuf0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
1996,"  protected long transfer(ByteBuf source, ByteBuf target, MultipartState sourceFullyWrittenState) {

    int sourceRemaining = source.readableBytes();
    int targetRemaining = target.writableBytes();

    if (sourceRemaining <= targetRemaining) {
      target.writeBytes(source);
      state = sourceFullyWrittenState;
      return sourceRemaining;
    } else {
      target.writeBytes(source, targetRemaining);
      return targetRemaining;
    }
  }","  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)3;
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeHeapBuffer((int) (byte)54);
      StandardProtocolFamily standardProtocolFamily0 = StandardProtocolFamily.INET;
      DatagramChannel datagramChannel0 = DatagramChannel.open((ProtocolFamily) standardProtocolFamily0);
      MultipartState multipartState0 = MultipartState.DONE;
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transfer(compositeByteBuf0, datagramChannel0, multipartState0);
        fail(""Expecting exception: NotYetConnectedException"");
      } catch(NotYetConnectedException e) {
      }
  }"
1997,"  protected long transfer(ByteBuf source, ByteBuf target, MultipartState sourceFullyWrittenState) {

    int sourceRemaining = source.readableBytes();
    int targetRemaining = target.writableBytes();

    if (sourceRemaining <= targetRemaining) {
      target.writeBytes(source);
      state = sourceFullyWrittenState;
      return sourceRemaining;
    } else {
      target.writeBytes(source, targetRemaining);
      return targetRemaining;
    }
  }","  public void test46()  throws Throwable  {
      File file0 = MockFile.createTempFile(""Too many bytes to read - Need "", ""Too many bytes to read - Need "");
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = new FilePart(""Too many bytes to read - Need "", file0, ""Too many bytes to read - Need "", charset0, ""Too many bytes to read - Need "");
      byte[] byteArray0 = new byte[5];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""Too many bytes to read - Need "", byteArray0, ""Too many bytes to read - Need "", charset0, ""Too many bytes to read - Need "");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, true, 140);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        fileMultipartPart0.transfer(compositeByteBuf0, fileChannel0, byteArrayMultipartPart0.state);
        fail(""Expecting exception: NonWritableChannelException"");
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.EvoFileChannel"", e);
      }
  }"
1998,"  protected long transfer(ByteBuf source, ByteBuf target, MultipartState sourceFullyWrittenState) {

    int sourceRemaining = source.readableBytes();
    int targetRemaining = target.writableBytes();

    if (sourceRemaining <= targetRemaining) {
      target.writeBytes(source);
      state = sourceFullyWrittenState;
      return sourceRemaining;
    } else {
      target.writeBytes(source, targetRemaining);
      return targetRemaining;
    }
  }","  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      MultipartState multipartState0 = MultipartState.CONTENT;
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transfer((ByteBuf) null, (WritableByteChannel) null, multipartState0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
1999,"  protected long transfer(ByteBuf source, ByteBuf target, MultipartState sourceFullyWrittenState) {

    int sourceRemaining = source.readableBytes();
    int targetRemaining = target.writableBytes();

    if (sourceRemaining <= targetRemaining) {
      target.writeBytes(source);
      state = sourceFullyWrittenState;
      return sourceRemaining;
    } else {
      target.writeBytes(source, targetRemaining);
      return targetRemaining;
    }
  }","  public void test48()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""~hMI:.jB&f(`pz"", ""~hMI:.jB&f(`pz"", ""~hMI:.jB&f(`pz"", (Charset) null, ""~hMI:.jB&f(`pz"");
      byte[] byteArray0 = new byte[2];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      MultipartState multipartState0 = MultipartState.DONE;
      ByteBuf byteBuf0 = emptyByteBuf0.asReadOnly();
      // Undeclared exception!
      try { 
        stringMultipartPart0.transfer(emptyByteBuf0, byteBuf0, multipartState0);
        fail(""Expecting exception: ReadOnlyBufferException"");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.ReadOnlyByteBuf"", e);
      }
  }"
2000,"  protected long transfer(ByteBuf source, ByteBuf target, MultipartState sourceFullyWrittenState) {

    int sourceRemaining = source.readableBytes();
    int targetRemaining = target.writableBytes();

    if (sourceRemaining <= targetRemaining) {
      target.writeBytes(source);
      state = sourceFullyWrittenState;
      return sourceRemaining;
    } else {
      target.writeBytes(source, targetRemaining);
      return targetRemaining;
    }
  }","  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      MultipartState multipartState0 = MultipartState.CONTENT;
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transfer((ByteBuf) null, (ByteBuf) null, multipartState0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2001,"  public long length() {
    long contentLength = getContentLength();
    if (contentLength < 0) {
      return contentLength;
    }
    return preContentLength + postContentLength + getContentLength();
  }","  public void test50()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.length();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart"", e);
      }
  }"
2002,"  protected ByteBuf computePreContentBytes(int preContentLength) {
    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(preContentLength);
    ByteBufVisitor bytesVisitor = new ByteBufVisitor(buffer);
    visitPreContent(bytesVisitor);
    return buffer;
  }","  public void test51()  throws Throwable  {
      StringPart stringPart0 = new StringPart((String) null, ""Content-Disposition: "", ""Content-Disposition: "", (Charset) null, (String) null, ""Content-Disposition: "");
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      stringPart0.addCustomHeader("""", (String) null);
      // Undeclared exception!
      try { 
        stringMultipartPart0.computePreContentBytes(1871);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2003,"  protected ByteBuf computePreContentBytes(int preContentLength) {
    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(preContentLength);
    ByteBufVisitor bytesVisitor = new ByteBufVisitor(buffer);
    visitPreContent(bytesVisitor);
    return buffer;
  }","  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("""", byteArray0, """");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.computePreContentBytes((byte) (-38));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -38 (expected: >= 0)
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
2004,"  protected ByteBuf computePostContentBytes(int postContentLength) {
    ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(postContentLength);
    ByteBufVisitor bytesVisitor = new ByteBufVisitor(buffer);
    visitPostContent(bytesVisitor);
    return buffer;
  }","  public void test53()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition: "", ""Content-Disposition: "", (String) null, (Charset) null);
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.computePostContentBytes((-11));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity: -11 (expected: >= 0)
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
2005,"  public void close() {
    if (preContentBuffer != null)
      preContentBuffer.release();
    if (postContentBuffer != null)
      postContentBuffer.release();
  }","  public void test54()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""58d="", sequenceInputStream0, """");
      byte[] byteArray0 = new byte[2];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.SequenceInputStream"", e);
      }
  }"
2006,"  protected void visitCustomHeaders(PartVisitor visitor) {
    if (isNonEmpty(part.getCustomHeaders())) {
      for (Param param : part.getCustomHeaders()) {
        visitor.withBytes(CRLF_BYTES);
        visitor.withBytes(param.getName().getBytes(US_ASCII));
        visitor.withBytes(HEADER_NAME_VALUE_SEPARATOR_BYTES);
        visitor.withBytes(param.getValue().getBytes(US_ASCII));
      }
    }
  }","  public void test55()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""~hMI:.jB&f(`pz"", ""~hMI:.jB&f(`pz"", ""~hMI:.jB&f(`pz"", (Charset) null);
      byte[] byteArray0 = new byte[5];
      stringPart0.addCustomHeader(""~hMI:.jB&f(`pz"", "";Xz!jm,i"");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      PartVisitor.ByteBufVisitor partVisitor_ByteBufVisitor0 = new PartVisitor.ByteBufVisitor(emptyByteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.visitCustomHeaders(partVisitor_ByteBufVisitor0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.EmptyByteBuf"", e);
      }
  }"
2007,"  public boolean isTargetSlow() {
    return slowTarget;
  }","  public void test56()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition: "", ""Content-Disposition: "", (String) null, (Charset) null);
      byte[] byteArray0 = new byte[0];
      stringPart0.setDispositionType(""--"");
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
}"
2008,"  public MultipartState getState() {
    return state;
  }","  public void test57()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition:2"", ""Content-Disposition:2"", ""Content-Disposition:2"", (Charset) null, ""Content-Disposition:2"");
      byte[] byteArray0 = new byte[6];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer();
      stringMultipartPart0.transferContentTo(byteBuf0);
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(2004318076);
      stringMultipartPart0.transferTo((ByteBuf) compositeByteBuf0);
      stringMultipartPart0.close();
}"
2009,"  public MultipartState getState() {
    return state;
  }","  public void test58()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""h"", ""h"");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""(88>rS\\^"");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      stringMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
      stringMultipartPart0.close();
}"
2010,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test59()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition:2"", ""Content-Disposition:2"", ""Content-Disposition:2"", (Charset) null, ""Content-Disposition:2"");
      byte[] byteArray0 = new byte[6];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      ByteBuf byteBuf0 = pooledByteBufAllocator0.heapBuffer();
      stringMultipartPart0.transferContentTo(byteBuf0);
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeBuffer(2004318076);
      stringMultipartPart0.transferTo((ByteBuf) compositeByteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferTo((WritableByteChannel) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2011,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test60()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""rfqCnt"", ""rfqCnt"");
      byte[] byteArray0 = new byte[4];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeDirectBuffer(306);
      stringMultipartPart0.transferTo((ByteBuf) compositeByteBuf0);
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferTo((WritableByteChannel) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2012,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test61()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition: "", ""Content-Disposition: "", ""Content-Disposition: "", (Charset) null);
      byte[] byteArray0 = new byte[0];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      MultipartState multipartState0 = MultipartState.CONTENT;
      stringMultipartPart0.state = multipartState0;
      // Undeclared exception!
      try { 
        stringMultipartPart0.transferTo((WritableByteChannel) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2013,"  public MultipartState getState() {
    return state;
  }","  public void test62()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Conten-Disposition: "", ""Conten-Disposition: "", ""Conten-Disposition: "");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes(80);
      MultipartState multipartState0 = MultipartState.DONE;
      stringMultipartPart0.transfer(byteBuf0, byteBuf0, multipartState0);
}"
2014,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test63()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Conten-Disposition: "", ""Conten-Disposition: "", ""Conten-Disposition: "");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes(80);
      MultipartState multipartState0 = MultipartState.DONE;
      stringMultipartPart0.transfer(byteBuf0, byteBuf0, multipartState0);
      long long0 = stringMultipartPart0.transferTo((WritableByteChannel) null);
}"
2015,"  public MultipartState getState() {
    return state;
  }","  public void test64()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition: "", ""Content-Disposition: "", ""Content-Disposition: "", (Charset) null, ""Content-Disposition: "", ""Content-Disposition: "");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes(0);
      MultipartState multipartState0 = MultipartState.CONTENT;
      stringMultipartPart0.state = multipartState0;
      long long0 = stringMultipartPart0.transferTo(byteBuf0);
}"
2016,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test65()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""Content-Disposition: "", ""Content-Disposition: "", ""Content-Disposition: "", (Charset) null, ""Content-Disposition: "", ""Content-Disposition: "");
      byte[] byteArray0 = new byte[1];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      ByteBuf byteBuf0 = stringMultipartPart0.computePostContentBytes(0);
      MultipartState multipartState0 = MultipartState.CONTENT;
      stringMultipartPart0.state = multipartState0;
      long long0 = stringMultipartPart0.transferTo(byteBuf0);
}"
2017,"  public MultipartState getState() {
    return state;
  }","  public void test66()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""XhMI:.jB&f(`pz"", ""XhMI:.jB&f(`pz"", ""XhMI:.jB&f(`pz"", (Charset) null);
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      MultipartState multipartState0 = MultipartState.DONE;
      stringMultipartPart0.transfer(emptyByteBuf0, emptyByteBuf0, multipartState0);
      long long0 = stringMultipartPart0.transferTo((ByteBuf) emptyByteBuf0);
}"
2018,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test67()  throws Throwable  {
      StringPart stringPart0 = new StringPart(""XhMI:.jB&f(`pz"", ""XhMI:.jB&f(`pz"", ""XhMI:.jB&f(`pz"", (Charset) null);
      byte[] byteArray0 = new byte[5];
      StringMultipartPart stringMultipartPart0 = new StringMultipartPart(stringPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      MultipartState multipartState0 = MultipartState.DONE;
      stringMultipartPart0.transfer(emptyByteBuf0, emptyByteBuf0, multipartState0);
      long long0 = stringMultipartPart0.transferTo((ByteBuf) emptyByteBuf0);
}"
2019,"  public long length() {
    long contentLength = getContentLength();
    if (contentLength < 0) {
      return contentLength;
    }
    return preContentLength + postContentLength + getContentLength();
  }","  public void test68()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamPart inputStreamPart0 = new InputStreamPart((String) null, pipedInputStream0, (String) null, (-229L), (String) null);
      byte[] byteArray0 = new byte[7];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      long long0 = inputStreamMultipartPart0.length();
}"
2020,"  public long length() {
    long contentLength = getContentLength();
    if (contentLength < 0) {
      return contentLength;
    }
    return preContentLength + postContentLength + getContentLength();
  }","  public void test69()  throws Throwable  {
      File file0 = MockFile.createTempFile(""!;8I.~bBe+tivzL"", ""!;8I.~bBe+tivzL"");
      FilePart filePart0 = new FilePart(""!;8I.~bBe+tivzL"", file0, ""!;8I.~bBe+tivzL"");
      byte[] byteArray0 = new byte[3];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      long long0 = fileMultipartPart0.length();
}"
2021,"  public long transferTo(ByteBuf target) throws IOException {

    switch (state) {
      case DONE:
        return 0L;

      case PRE_CONTENT:
        return transfer(lazyLoadPreContentBuffer(), target, MultipartState.CONTENT);

      case CONTENT:
        return transferContentTo(target);

      case POST_CONTENT:
        return transfer(lazyLoadPostContentBuffer(), target, MultipartState.DONE);

      default:
        throw new IllegalStateException(""Unknown state "" + state);
    }
  }","  public void test70()  throws Throwable  {
      File file0 = MockFile.createTempFile(""!;8I.~bBe+tivzL"", ""!;8I.~bBe+tivzL"");
      FilePart filePart0 = new FilePart(""!;8I.~bBe+tivzL"", file0, ""!;8I.~bBe+tivzL"");
      byte[] byteArray0 = new byte[3];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        fileMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail(""Expecting exception: NonWritableChannelException"");
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.EvoFileChannel"", e);
      }
  }"
2022,"  public boolean isTargetSlow() {
    return slowTarget;
  }","  public void test71()  throws Throwable  {
      File file0 = MockFile.createTempFile(""Too many bytes to read - Need "", ""Too many bytes to read - Need "");
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      FilePart filePart0 = new FilePart(""Too many bytes to read - Need "", file0, ""Too many bytes to read - Need "", charset0, ""Too many bytes to read - Need "");
      byte[] byteArray0 = new byte[5];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      boolean boolean0 = fileMultipartPart0.isTargetSlow();
}"
2023,"  public MultipartState getState() {
    return state;
  }","  public void test72()  throws Throwable  {
      File file0 = MockFile.createTempFile(""!!;8I.~bBe+ivL"", ""!!;8I.~bBe+ivL"");
      FilePart filePart0 = new FilePart(""!!;8I.~bBe+ivL"", file0, ""!!;8I.~bBe+ivL"");
      byte[] byteArray0 = new byte[9];
      FileMultipartPart fileMultipartPart0 = new FileMultipartPart(filePart0, byteArray0);
      MultipartState multipartState0 = fileMultipartPart0.getState();
}"
2024,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      File file0 = MockFile.createTempFile(""54LC0Iq"", ""54LC0Iq"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      long long0 = messageEndMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
}"
2025,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      File file0 = MockFile.createTempFile(""54LC0Iq"", ""54LC0Iq"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      long long0 = messageEndMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
}"
2026,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = (PooledByteBufAllocator)ByteBufAllocator.DEFAULT;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 1437, 1437);
      long long0 = messageEndMultipartPart0.transferTo((ByteBuf) unpooledDirectByteBuf0);
}"
2027,"  protected long getContentLength() {
    return EXTRA_BYTES.length + boundary.length + EXTRA_BYTES.length + CRLF_BYTES.length;
  }","  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      long long0 = messageEndMultipartPart0.getContentLength();
}"
2028,"  protected int computePreContentLength() {
    return 0;
  }","  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      int int0 = messageEndMultipartPart0.computePreContentLength();
}"
2029,"  protected int computePostContentLength() {
    return 0;
  }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      int int0 = messageEndMultipartPart0.computePostContentLength();
}"
2030,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transferTo((WritableByteChannel) socketChannel0);
        fail(""Expecting exception: NotYetConnectedException"");
      } catch(NotYetConnectedException e) {
      }
  }"
2031,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      File file0 = MockFile.createTempFile(""L+m"", ""L+m"");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transferTo((WritableByteChannel) fileChannel0);
        fail(""Expecting exception: NonWritableChannelException"");
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.EvoFileChannel"", e);
      }
  }"
2032,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      datagramChannel0.close();
      try { 
        messageEndMultipartPart0.transferTo((WritableByteChannel) datagramChannel0);
        fail(""Expecting exception: ClosedChannelException"");
      } catch(ClosedChannelException e) {
      }
  }"
2033,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test9()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transferTo(writableByteChannel0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart"", e);
      }
  }"
2034,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)46).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transferTo(writableByteChannel0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: 46, writerIndex: 10 (expected: 0 <= readerIndex <= writerIndex <= capacity(10))
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
2035,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(unpooledByteBufAllocator0);
      ByteBuf byteBuf0 = emptyByteBuf0.asReadOnly();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transferTo(byteBuf0);
        fail(""Expecting exception: ReadOnlyBufferException"");
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.ReadOnlyByteBuf"", e);
      }
  }"
2036,"  protected long getContentLength() {
    return EXTRA_BYTES.length + boundary.length + EXTRA_BYTES.length + CRLF_BYTES.length;
  }","  public void test12()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.getContentLength();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart"", e);
      }
  }"
2037,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[44];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)0);
      messageEndMultipartPart0.transferTo(byteBuf0);
      messageEndMultipartPart0.close();
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transferTo(writableByteChannel0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
2038,"  public void close() {
    super.close();
    if (contentBuffer != null)
      contentBuffer.release();
  }","  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[44];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      messageEndMultipartPart0.close();
}"
2039,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[44];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePostContentBytes((byte)0);
      long long0 = messageEndMultipartPart0.transferTo(byteBuf0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      long long1 = messageEndMultipartPart0.transferTo(writableByteChannel0);
}"
2040,"  protected long transferContentTo(ByteBuf target) {
    throw new UnsupportedOperationException(""Not supposed to be called"");
  }","  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transferContentTo((WritableByteChannel) null);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Not supposed to be called
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart"", e);
      }
  }"
2041,"  protected long transferContentTo(ByteBuf target) {
    throw new UnsupportedOperationException(""Not supposed to be called"");
  }","  public void test17()  throws Throwable  {
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart((byte[]) null);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePreContentBytes((-15));
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transferContentTo(byteBuf0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Not supposed to be called
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MessageEndMultipartPart"", e);
      }
  }"
2042,"  public void close() {
    super.close();
    if (contentBuffer != null)
      contentBuffer.release();
  }","  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      ByteBuf byteBuf0 = messageEndMultipartPart0.computePreContentBytes((byte)0);
      messageEndMultipartPart0.transferTo(byteBuf0);
      messageEndMultipartPart0.close();
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.close();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, decrement: 1
         //
         verifyException(""io.netty.util.internal.ReferenceCountUpdater"", e);
      }
  }"
2043,"  public long transferTo(ByteBuf target) {
    return transfer(lazyLoadContentBuffer(), target, MultipartState.DONE);
  }","  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MessageEndMultipartPart messageEndMultipartPart0 = new MessageEndMultipartPart(byteArray0);
      // Undeclared exception!
      try { 
        messageEndMultipartPart0.transferTo((ByteBuf) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2044,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test0()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 6);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""Pattern is missing"", pushbackInputStream0, """", 6, """");
      byte[] byteArray0 = new byte[4];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      long long0 = inputStreamMultipartPart0.transferContentTo(emptyByteBuf0);
}"
2045,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 6);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""Pattern is missing"", pushbackInputStream0, """", 6, """");
      byte[] byteArray0 = new byte[4];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      long long0 = inputStreamMultipartPart0.transferContentTo(emptyByteBuf0);
}"
2046,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test2()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ArrayList<Param> arrayList0 = new ArrayList<Param>();
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = mock(InputStreamPart.class, new ViolatedAssumptionAnswer());
      doReturn(""increment"", ""increment"").when(inputStreamPart0).getFileName();
      doReturn((-562L)).when(inputStreamPart0).getContentLength();
      doReturn(sequenceInputStream0).when(inputStreamPart0).getInputStream();
      doReturn(charset0, charset0, charset0, charset0).when(inputStreamPart0).getCharset();
      doReturn(""increment"").when(inputStreamPart0).getContentId();
      doReturn(""increment"").when(inputStreamPart0).getContentType();
      doReturn(arrayList0).when(inputStreamPart0).getCustomHeaders();
      doReturn(""increment"", ""increment"").when(inputStreamPart0).getDispositionType();
      doReturn(""increment"", ""increment"").when(inputStreamPart0).getName();
      doReturn(""increment"").when(inputStreamPart0).getTransferEncoding();
      byte[] byteArray0 = new byte[9];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      ByteBuf byteBuf0 = inputStreamMultipartPart0.computePostContentBytes(34);
      long long0 = inputStreamMultipartPart0.transferContentTo(byteBuf0);
}"
2047,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test3()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ArrayList<Param> arrayList0 = new ArrayList<Param>();
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = mock(InputStreamPart.class, new ViolatedAssumptionAnswer());
      doReturn(""increment"", ""increment"").when(inputStreamPart0).getFileName();
      doReturn((-562L)).when(inputStreamPart0).getContentLength();
      doReturn(sequenceInputStream0).when(inputStreamPart0).getInputStream();
      doReturn(charset0, charset0, charset0, charset0).when(inputStreamPart0).getCharset();
      doReturn(""increment"").when(inputStreamPart0).getContentId();
      doReturn(""increment"").when(inputStreamPart0).getContentType();
      doReturn(arrayList0).when(inputStreamPart0).getCustomHeaders();
      doReturn(""increment"", ""increment"").when(inputStreamPart0).getDispositionType();
      doReturn(""increment"", ""increment"").when(inputStreamPart0).getName();
      doReturn(""increment"").when(inputStreamPart0).getTransferEncoding();
      byte[] byteArray0 = new byte[9];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      ByteBuf byteBuf0 = inputStreamMultipartPart0.computePostContentBytes(34);
      long long0 = inputStreamMultipartPart0.transferContentTo(byteBuf0);
}"
2048,"  protected long getContentLength() {
    return part.getContentLength();
  }","  public void test4()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""2X5eEhbZCI"", dataInputStream0, ""2X5eEhbZCI"", 0L, """", charset0, """");
      byte[] byteArray0 = new byte[1];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      long long0 = inputStreamMultipartPart0.getContentLength();
}"
2049,"  protected long getContentLength() {
    return part.getContentLength();
  }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamPart inputStreamPart0 = new InputStreamPart((String) null, byteArrayInputStream0, """", (byte)44, """");
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      long long0 = inputStreamMultipartPart0.getContentLength();
}"
2050,"  protected long getContentLength() {
    return part.getContentLength();
  }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 206, 206);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""=#16!&xd{vTjIiQwK9"", sequenceInputStream0, ""org.asynchttpclient.request.body.multipart.part.InputStreamMultipartPart"");
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      long long0 = inputStreamMultipartPart0.getContentLength();
}"
2051,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LinkedList<Param> linkedList0 = new LinkedList<Param>();
      InputStreamPart inputStreamPart0 = mock(InputStreamPart.class, new ViolatedAssumptionAnswer());
      doReturn("""", ""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"").when(inputStreamPart0).getFileName();
      doReturn(byteArrayInputStream0).when(inputStreamPart0).getInputStream();
      doReturn((Charset) null, (Charset) null).when(inputStreamPart0).getCharset();
      doReturn(""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"").when(inputStreamPart0).getContentId();
      doReturn(""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"").when(inputStreamPart0).getContentType();
      doReturn(linkedList0).when(inputStreamPart0).getCustomHeaders();
      doReturn(""4h3bTm5`tj=wAC*"", ""4h3bTm5`tj=wAC*"").when(inputStreamPart0).getDispositionType();
      doReturn(""4h3bTm5`tj=wAC*"", ""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"").when(inputStreamPart0).getName();
      doReturn(""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"").when(inputStreamPart0).getTransferEncoding();
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)1, (int)(byte)1, (int)(byte)1, (int)(byte) (-21), (int)(byte)15).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      // Undeclared exception!
      inputStreamMultipartPart0.transferContentTo(writableByteChannel0);
  }"
2052,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)0;
      byteArray0[7] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", byteArrayInputStream0, ""K;oY*Jur&,h5i87N"");
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.transferContentTo(datagramChannel0);
        fail(""Expecting exception: NotYetConnectedException"");
      } catch(NotYetConnectedException e) {
      }
  }"
2053,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = new InputStreamPart((String) null, byteArrayInputStream0, ""notifyEvent {} {}"", 1278L, (String) null, charset0);
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.transferContentTo(fileChannel0);
        fail(""Expecting exception: NonWritableChannelException"");
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.EvoFileChannel"", e);
      }
  }"
2054,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""tLY |k9R"", byteArrayInputStream0, "";HK-AR~#l"");
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""4h3bTm5`tj=wAC*"");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.close();
      try { 
        inputStreamMultipartPart0.transferContentTo(fileChannel0);
        fail(""Expecting exception: ClosedChannelException"");
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.EvoFileChannel"", e);
      }
  }"
2055,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test11()  throws Throwable  {
      Stack<DataInputStream> stack0 = new Stack<DataInputStream>();
      Enumeration<DataInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", dataInputStream0, """", 5142L, """");
      byte[] byteArray0 = new byte[8];
      stack0.add(dataInputStream0);
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.transferContentTo((WritableByteChannel) null);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2056,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test12()  throws Throwable  {
      InputStreamPart inputStreamPart0 = mock(InputStreamPart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(inputStreamPart0).getFileName();
      doReturn((InputStream) null).when(inputStreamPart0).getInputStream();
      doReturn((String) null).when(inputStreamPart0).getContentId();
      doReturn((String) null).when(inputStreamPart0).getContentType();
      doReturn((List) null).when(inputStreamPart0).getCustomHeaders();
      doReturn((String) null).when(inputStreamPart0).getDispositionType();
      doReturn((String) null).when(inputStreamPart0).getName();
      doReturn((String) null).when(inputStreamPart0).getTransferEncoding();
      byte[] byteArray0 = new byte[1];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.transferContentTo(writableByteChannel0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // \""in\"" is null!
         //
         verifyException(""java.nio.channels.Channels"", e);
      }
  }"
2057,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)4);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""2Rj=-D;T:3lC"", sequenceInputStream0, ""2Rj=-D;T:3lC"", (-51L), """", charset0);
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      DatagramChannel datagramChannel0 = DatagramChannel.open();
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.transferContentTo(datagramChannel0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
2058,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""TuF4[U:N{1,Z"", mockFileInputStream0, ""NW.sF{KtdGR]8f)"", 8589934592L, ""=zL{>4lzCa"", charset0, ""TuF4[U:N{1,Z"", ""NW.sF{KtdGR]8f)"");
      byte[] byteArray0 = new byte[6];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      try { 
        inputStreamMultipartPart0.transferContentTo((WritableByteChannel) null);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
      }
  }"
2059,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test15()  throws Throwable  {
      InputStreamPart inputStreamPart0 = mock(InputStreamPart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(inputStreamPart0).getFileName();
      doReturn((InputStream) null).when(inputStreamPart0).getInputStream();
      doReturn((String) null).when(inputStreamPart0).getContentId();
      doReturn((String) null).when(inputStreamPart0).getContentType();
      doReturn((List) null).when(inputStreamPart0).getCustomHeaders();
      doReturn((String) null).when(inputStreamPart0).getDispositionType();
      doReturn((String) null).when(inputStreamPart0).getName();
      doReturn((String) null).when(inputStreamPart0).getTransferEncoding();
      byte[] byteArray0 = new byte[7];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.transferContentTo((ByteBuf) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.InputStreamMultipartPart"", e);
      }
  }"
2060,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test16()  throws Throwable  {
      InputStreamPart inputStreamPart0 = mock(InputStreamPart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(inputStreamPart0).getFileName();
      doReturn((InputStream) null).when(inputStreamPart0).getInputStream();
      doReturn((String) null, (String) null).when(inputStreamPart0).getContentId();
      doReturn((String) null, (String) null).when(inputStreamPart0).getContentType();
      doReturn((List) null, (List) null).when(inputStreamPart0).getCustomHeaders();
      doReturn((String) null, (String) null).when(inputStreamPart0).getDispositionType();
      doReturn((String) null, (String) null).when(inputStreamPart0).getName();
      doReturn((String) null, (String) null).when(inputStreamPart0).getTransferEncoding();
      byte[] byteArray0 = new byte[5];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      ByteBuf byteBuf0 = inputStreamMultipartPart0.computePreContentBytes((byte)0);
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.transferContentTo(byteBuf0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.UnsafeByteBufUtil"", e);
      }
  }"
2061,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-991), 1475);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""KFv"", byteArrayInputStream0, ""KFv"", 3877L);
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, (byte)20, 957);
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
2062,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1374);
      Vector<Param> vector0 = new Vector<Param>();
      Charset charset0 = Charset.defaultCharset();
      pipedInputStream0.mark(1374);
      InputStreamPart inputStreamPart0 = new InputStreamPart("""", pipedInputStream0, """", 1374, ""3v@CMa=~H_;L9nk."", charset0, ""/LPG,!:u"", ""hPl Nl#5R/"");
      inputStreamPart0.getCharset();
      byte[] byteArray0 = new byte[7];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      CompositeByteBuf compositeByteBuf0 = pooledByteBufAllocator0.compositeDirectBuffer();
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeChar(451);
      try { 
        inputStreamMultipartPart0.transferContentTo(compositeByteBuf1);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
2063,"  public void close() {
    super.close();
    closeSilently(part.getInputStream());
    closeSilently(channel);
  }","  public void test19()  throws Throwable  {
      InputStreamPart inputStreamPart0 = mock(InputStreamPart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(inputStreamPart0).getFileName();
      doReturn((InputStream) null).when(inputStreamPart0).getInputStream();
      doReturn((String) null, (String) null).when(inputStreamPart0).getContentId();
      doReturn((String) null, (String) null).when(inputStreamPart0).getContentType();
      doReturn((List) null, (List) null).when(inputStreamPart0).getCustomHeaders();
      doReturn((String) null, (String) null).when(inputStreamPart0).getDispositionType();
      doReturn((String) null, (String) null).when(inputStreamPart0).getName();
      doReturn((String) null, (String) null).when(inputStreamPart0).getTransferEncoding();
      byte[] byteArray0 = new byte[1];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      inputStreamMultipartPart0.transferTo(writableByteChannel0);
      inputStreamMultipartPart0.close();
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.close();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, decrement: 1
         //
         verifyException(""io.netty.util.internal.ReferenceCountUpdater"", e);
      }
  }"
2064,"  public void close() {
    super.close();
    closeSilently(part.getInputStream());
    closeSilently(channel);
  }","  public void test20()  throws Throwable  {
      Stack<DataInputStream> stack0 = new Stack<DataInputStream>();
      Enumeration<DataInputStream> enumeration0 = stack0.elements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      InputStreamPart inputStreamPart0 = new InputStreamPart((String) null, dataInputStream0, ""org.asynchttpclient.request.body.multipart.part.InputStreamMultipartPart"");
      byte[] byteArray0 = new byte[8];
      stack0.add(dataInputStream0);
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.close();
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2065,"  public void close() {
    super.close();
    closeSilently(part.getInputStream());
    closeSilently(channel);
  }","  public void test21()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""y|pw&(V3>$;C\""O\""/K-"", dataInputStream0, ""y|pw&(V3>$;C\""O\""/K-"");
      byte[] byteArray0 = new byte[2];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      // Undeclared exception!
      try { 
        inputStreamMultipartPart0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.FilterInputStream"", e);
      }
  }"
2066,"  public InputStreamMultipartPart(InputStreamPart part, byte[] boundary) {
    super(part, boundary);
  }","  public void test22()  throws Throwable  {
      InputStreamPart inputStreamPart0 = mock(InputStreamPart.class, new ViolatedAssumptionAnswer());
      InputStreamMultipartPart inputStreamMultipartPart0 = null;
      try {
        inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.PartVisitor$CounterPartVisitor"", e);
      }
  }"
2067,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test23()  throws Throwable  {
      File file0 = MockFile.createTempFile(""'w5z"", ""'w5z"", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""'w5z"", mockFileInputStream0, ""'w5z"", 0L, ""'w5z"", charset0);
      byte[] byteArray0 = new byte[2];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      long long0 = inputStreamMultipartPart0.transferContentTo(fileChannel0);
}"
2068,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile(""'w5z"", ""'w5z"", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""'w5z"", mockFileInputStream0, ""'w5z"", 0L, ""'w5z"", charset0);
      byte[] byteArray0 = new byte[2];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      long long0 = inputStreamMultipartPart0.transferContentTo(fileChannel0);
}"
2069,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""@"", byteArrayInputStream0, ""@"");
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""@"");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      long long0 = inputStreamMultipartPart0.transferContentTo(fileChannel0);
}"
2070,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamPart inputStreamPart0 = new InputStreamPart(""@"", byteArrayInputStream0, ""@"");
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""@"");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      long long0 = inputStreamMultipartPart0.transferContentTo(fileChannel0);
}"
2071,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"", byteArrayInputStream0, ""\u0005~76z~@<cC=(/="", 8L, ""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"", charset0, ""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"", ""\u0005~76z~@<cC=(/="");
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, (byte)38, (byte)38);
      long long0 = inputStreamMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
}"
2072,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"", byteArrayInputStream0, ""\u0005~76z~@<cC=(/="", 8L, ""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"", charset0, ""io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory"", ""\u0005~76z~@<cC=(/="");
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, (byte)38, (byte)38);
      long long0 = inputStreamMultipartPart0.transferContentTo(unpooledUnsafeDirectByteBuf0);
}"
2073,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test29()  throws Throwable  {
      File file0 = MockFile.createTempFile(""'w5z"", ""'w5z"", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""'w5z"", mockFileInputStream0, ""'w5z"", 0L, ""'w5z"", charset0);
      byte[] byteArray0 = new byte[2];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      long long0 = inputStreamMultipartPart0.transferContentTo(emptyByteBuf0);
}"
2074,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile(""'w5z"", ""'w5z"", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      InputStreamPart inputStreamPart0 = new InputStreamPart(""'w5z"", mockFileInputStream0, ""'w5z"", 0L, ""'w5z"", charset0);
      byte[] byteArray0 = new byte[2];
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      EmptyByteBuf emptyByteBuf0 = new EmptyByteBuf(pooledByteBufAllocator0);
      long long0 = inputStreamMultipartPart0.transferContentTo(emptyByteBuf0);
}"
2075,"  protected long transferContentTo(ByteBuf target) throws IOException {
    InputStream inputStream = part.getInputStream();
    int transferred = target.writeBytes(inputStream, target.writableBytes());
    if (transferred > 0) {
      position += transferred;
    }
    if (position == getContentLength() || transferred < 0) {
      state = MultipartState.POST_CONTENT;
      inputStream.close();
    }
    return transferred;
  }","  public void test31()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[8];
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      InputStreamPart inputStreamPart0 = new InputStreamPart(""WDu| W;_L4a+rPTf=!"", sequenceInputStream0, ""directMemoryCacheAlignment: "");
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
      inputStreamMultipartPart0.transferContentTo((WritableByteChannel) null);
      try { 
        inputStreamMultipartPart0.transferContentTo(writableByteChannel0);
        fail(""Expecting exception: AsynchronousCloseException"");
      } catch(AsynchronousCloseException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.channels.spi.AbstractInterruptibleChannel"", e);
      }
  }"
2076,"  protected void visitDispositionHeader(PartVisitor visitor) {
    super.visitDispositionHeader(visitor);
    if (part.getFileName() != null) {
      visitor.withBytes(FILE_NAME_BYTES);
      visitor.withByte(QUOTE_BYTE);
      visitor.withBytes(part.getFileName().getBytes(part.getCharset() != null ? part.getCharset() : UTF_8));
      visitor.withByte(QUOTE_BYTE);
    }
  }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayPart byteArrayPart0 = new ByteArrayPart("""", byteArray0, """", (Charset) null, ""org.asynchttpclient.request.body.multipart.part.FileLikeMultipartPart"", ""0\tu"", ""0\tu"");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      PartVisitor.CounterPartVisitor partVisitor_CounterPartVisitor0 = new PartVisitor.CounterPartVisitor();
      byteArrayMultipartPart0.visitDispositionHeader(partVisitor_CounterPartVisitor0);
}"
2077,"  protected void visitDispositionHeader(PartVisitor visitor) {
    super.visitDispositionHeader(visitor);
    if (part.getFileName() != null) {
      visitor.withBytes(FILE_NAME_BYTES);
      visitor.withByte(QUOTE_BYTE);
      visitor.withBytes(part.getFileName().getBytes(part.getCharset() != null ? part.getCharset() : UTF_8));
      visitor.withByte(QUOTE_BYTE);
    }
  }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utf8Encoder utf8Encoder0 = new Utf8Encoder();
      Charset charset0 = utf8Encoder0.charset();
      ByteArrayPart byteArrayPart0 = new ByteArrayPart(""; filename="", byteArray0, """", charset0, ""org.asynchttpclient.request.body.multipart.part.FileLikeMultipartPart"");
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.visitDispositionHeader((PartVisitor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2078,,"  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      InputStreamPart inputStreamPart0 = mock(InputStreamPart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(inputStreamPart0).getFileName();
      doReturn((String) null).when(inputStreamPart0).getContentId();
      doReturn((String) null).when(inputStreamPart0).getContentType();
      doReturn((List) null).when(inputStreamPart0).getCustomHeaders();
      doReturn((String) null).when(inputStreamPart0).getDispositionType();
      doReturn((String) null).when(inputStreamPart0).getName();
      doReturn((String) null).when(inputStreamPart0).getTransferEncoding();
      InputStreamMultipartPart inputStreamMultipartPart0 = new InputStreamMultipartPart(inputStreamPart0, byteArray0);
}"
2079,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(byteArrayPart0).getBytes();
      doReturn(""K:p)`N0nK+@K['6K'"", "".tIq?lg"").when(byteArrayPart0).getFileName();
      doReturn((Charset) null, (Charset) null).when(byteArrayPart0).getCharset();
      doReturn(""K:p)`N0nK+@K['6K'"").when(byteArrayPart0).getContentId();
      doReturn(""/etc/os-release"").when(byteArrayPart0).getContentType();
      doReturn((List<Param>) null).when(byteArrayPart0).getCustomHeaders();
      doReturn(""io.netty.buffer.UnpooledUnsafeHeapByteBuf"", ""RH3+TE&$~"").when(byteArrayPart0).getDispositionType();
      doReturn("""", ""l\""[+O?f"").when(byteArrayPart0).getName();
      doReturn("""").when(byteArrayPart0).getTransferEncoding();
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)0).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      long long0 = byteArrayMultipartPart0.transferContentTo(writableByteChannel0);
}"
2080,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(byteArrayPart0).getBytes();
      doReturn(""K:p)`N0nKBI+@K['6K'"", "".tIq?lg"").when(byteArrayPart0).getFileName();
      doReturn((Charset) null, (Charset) null).when(byteArrayPart0).getCharset();
      doReturn(""K:p)`N0nKBI+@K['6K'"").when(byteArrayPart0).getContentId();
      doReturn(""/etc/os-release"").when(byteArrayPart0).getContentType();
      doReturn((List<Param>) null).when(byteArrayPart0).getCustomHeaders();
      doReturn(""io.netty.buffer.UnpooledUnsafeHeapByteBuf"", ""RH3+TE&$~"").when(byteArrayPart0).getDispositionType();
      doReturn("""", ""l\""[+O?f"").when(byteArrayPart0).getName();
      doReturn("""").when(byteArrayPart0).getTransferEncoding();
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)1).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      long long0 = byteArrayMultipartPart0.transferContentTo(writableByteChannel0);
      WritableByteChannel writableByteChannel1 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(writableByteChannel1).write(any(java.nio.ByteBuffer.class));
      long long1 = byteArrayMultipartPart0.transferContentTo(writableByteChannel1);
}"
2081,"  public ByteArrayMultipartPart(ByteArrayPart part, byte[] boundary) {
    super(part, boundary);
    contentBuffer = Unpooled.wrappedBuffer(part.getBytes());
  }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteArrayPart0).getDispositionType();
      doReturn("""", (String) null).when(byteArrayPart0).getName();
      byte[] byteArray1 = new byte[3];
      ByteArrayMultipartPart byteArrayMultipartPart0 = null;
      try {
        byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2082,"  public ByteArrayMultipartPart(ByteArrayPart part, byte[] boundary) {
    super(part, boundary);
    contentBuffer = Unpooled.wrappedBuffer(part.getBytes());
  }","  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteArrayPart0).getDispositionType();
      doReturn("""", (String) null).when(byteArrayPart0).getName();
      byte[] byteArray1 = new byte[3];
      ByteArrayMultipartPart byteArrayMultipartPart0 = null;
      try {
        byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2083,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(byteArrayPart0).getBytes();
      doReturn(""K:p)`N0nK+@K['6K'"", ""io.netty.buffer.UnpooledUnsafeHeapByteBuf"").when(byteArrayPart0).getFileName();
      doReturn((Charset) null, (Charset) null).when(byteArrayPart0).getCharset();
      doReturn(""K:p)`N0nK+@K['6K'"").when(byteArrayPart0).getContentId();
      doReturn(""/etc/os-release"").when(byteArrayPart0).getContentType();
      doReturn((List<Param>) null).when(byteArrayPart0).getCustomHeaders();
      doReturn(""io.netty.buffer.UnpooledUnsafeHeapByteBuf"", """").when(byteArrayPart0).getDispositionType();
      doReturn("""", ""K:p)`N0nK+@K['6K'"").when(byteArrayPart0).getName();
      doReturn("""").when(byteArrayPart0).getTransferEncoding();
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      WritableByteChannel writableByteChannel0 = mock(WritableByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((-859)).when(writableByteChannel0).write(any(java.nio.ByteBuffer.class));
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.transferContentTo(writableByteChannel0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // readerIndex: -859, writerIndex: 5 (expected: 0 <= readerIndex <= writerIndex <= capacity(5))
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
2084,"  public ByteArrayMultipartPart(ByteArrayPart part, byte[] boundary) {
    super(part, boundary);
    contentBuffer = Unpooled.wrappedBuffer(part.getBytes());
  }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn(""n*@Vc?/f5&3n&H`"", (String) null).when(byteArrayPart0).getDispositionType();
      ByteArrayMultipartPart byteArrayMultipartPart0 = null;
      try {
        byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2085,"  public ByteArrayMultipartPart(ByteArrayPart part, byte[] boundary) {
    super(part, boundary);
    contentBuffer = Unpooled.wrappedBuffer(part.getBytes());
  }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)0;
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn("""", (String) null).when(byteArrayPart0).getDispositionType();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-48);
      byteArray1[4] = (byte)0;
      ByteArrayMultipartPart byteArrayMultipartPart0 = null;
      try {
        byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2086,"  protected long getContentLength() {
    return part.getBytes().length;
  }","  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) byteArray0, (Object) byteArray0, (Object) byteArray0, (Object) null).when(byteArrayPart0).getBytes();
      doReturn(""K:p)`N0nK+@K['6K'"", "".tIq?lg"").when(byteArrayPart0).getFileName();
      doReturn((Charset) null, (Charset) null).when(byteArrayPart0).getCharset();
      doReturn(""K:p)`N0nK+@K['6K'"").when(byteArrayPart0).getContentId();
      doReturn(""/etc/os-release"").when(byteArrayPart0).getContentType();
      doReturn((List<Param>) null).when(byteArrayPart0).getCustomHeaders();
      doReturn(""io.netty.buffer.UnpooledUnsafeHeapByteBuf"", ""RH3+TE&$~"").when(byteArrayPart0).getDispositionType();
      doReturn("""", ""l\""[+O?f"").when(byteArrayPart0).getName();
      doReturn("""").when(byteArrayPart0).getTransferEncoding();
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      byteArrayMultipartPart0.length();
      byteArrayMultipartPart0.getContentLength();
      // Undeclared exception!
      try { 
        byteArrayMultipartPart0.getContentLength();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.ByteArrayMultipartPart"", e);
      }
  }"
2087,"  protected long transferContentTo(ByteBuf target) {
    return transfer(contentBuffer, target, MultipartState.POST_CONTENT);
  }","  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(byteArrayPart0).getBytes();
      doReturn(""K:p)`N0nK+@K['6K'"", "".tIq?lg"").when(byteArrayPart0).getFileName();
      doReturn((Charset) null, (Charset) null).when(byteArrayPart0).getCharset();
      doReturn(""K:p)`N0nK+@K['6K'"").when(byteArrayPart0).getContentId();
      doReturn(""/etc/os-release"").when(byteArrayPart0).getContentType();
      doReturn((List<Param>) null).when(byteArrayPart0).getCustomHeaders();
      doReturn(""io.netty.buffer.UnpooledUnsafeHeapByteBuf"", ""RH3+TE&$~"").when(byteArrayPart0).getDispositionType();
      doReturn("""", ""l\""[+O?f"").when(byteArrayPart0).getName();
      doReturn("""").when(byteArrayPart0).getTransferEncoding();
      ByteArrayMultipartPart byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray0);
      ByteBuf byteBuf0 = byteArrayMultipartPart0.computePostContentBytes((byte)0);
      long long0 = byteArrayMultipartPart0.transferContentTo(byteBuf0);
}"
2088,"  public ByteArrayMultipartPart(ByteArrayPart part, byte[] boundary) {
    super(part, boundary);
    contentBuffer = Unpooled.wrappedBuffer(part.getBytes());
  }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      ByteArrayPart byteArrayPart0 = mock(ByteArrayPart.class, new ViolatedAssumptionAnswer());
      doReturn(""7hBJ"", (String) null).when(byteArrayPart0).getDispositionType();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-32);
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte)48;
      ByteArrayMultipartPart byteArrayMultipartPart0 = null;
      try {
        byteArrayMultipartPart0 = new ByteArrayMultipartPart(byteArrayPart0, byteArray1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.multipart.part.MultipartPart"", e);
      }
  }"
2089,"  public long getRegionLength() {
    return regionLength;
  }","  public void test0()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 1L, 0L);
      long long0 = fileBodyGenerator0.getRegionSeek();
}"
2090,"  public long getRegionSeek() {
    return regionSeek;
  }","  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 1L, 0L);
      long long0 = fileBodyGenerator0.getRegionSeek();
}"
2091,"  public long getRegionLength() {
    return regionLength;
  }","  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, (-2358L), 488L);
      long long0 = fileBodyGenerator0.getRegionSeek();
}"
2092,"  public long getRegionSeek() {
    return regionSeek;
  }","  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, (-2358L), 488L);
      long long0 = fileBodyGenerator0.getRegionSeek();
}"
2093,"  public long getRegionLength() {
    return regionLength;
  }","  public void test4()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""p"");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0);
      long long0 = fileBodyGenerator0.getRegionLength();
}"
2094,"  public long getRegionSeek() {
    return regionSeek;
  }","  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, 1000L);
      long long0 = fileBodyGenerator0.getRegionLength();
}"
2095,"  public long getRegionLength() {
    return regionLength;
  }","  public void test6()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, 1000L);
      long long0 = fileBodyGenerator0.getRegionLength();
}"
2096,"  public File getFile() {
    return file;
  }","  public void test7()  throws Throwable  {
      File file0 = MockFile.createTempFile(""+y*^_B8!1hG'RY1>"", ""7vjr44oLU"");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(file0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/+y*^_B8!1hG'RY1>07vjr44oLU"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ""+y*^_B8!1hG'RY1>"");
      File file1 = fileBodyGenerator0.getFile();
}"
2097,"  public File getFile() {
    return file;
  }","  public void test8()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""./"");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0);
      File file0 = fileBodyGenerator0.getFile();
}"
2098,"  public FileBodyGenerator(File file) {
    this(file, 0L, file.length());
  }","  public void test9()  throws Throwable  {
      FileBodyGenerator fileBodyGenerator0 = null;
      try {
        fileBodyGenerator0 = new FileBodyGenerator((File) null, (-1L), (-1L));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // file
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
2099,"  public RandomAccessBody createBody() {
    throw new UnsupportedOperationException(""FileBodyGenerator.createBody isn't used, Netty direclt sends the file"");
  }","  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      // Undeclared exception!
      try { 
        fileBodyGenerator0.createBody();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // FileBodyGenerator.createBody isn't used, Netty direclt sends the file
         //
         verifyException(""org.asynchttpclient.request.body.generator.FileBodyGenerator"", e);
      }
  }"
2100,"  public long getRegionSeek() {
    return regionSeek;
  }","  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      long long0 = fileBodyGenerator0.getRegionSeek();
}"
2101,"  public long getRegionLength() {
    return regionLength;
  }","  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      long long0 = fileBodyGenerator0.getRegionSeek();
}"
2102,"  public FileBodyGenerator(File file) {
    this(file, 0L, file.length());
  }","  public void test13()  throws Throwable  {
      FileBodyGenerator fileBodyGenerator0 = null;
      try {
        fileBodyGenerator0 = new FileBodyGenerator((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.generator.FileBodyGenerator"", e);
      }
  }"
2103,"  public long getRegionSeek() {
    return regionSeek;
  }","  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      fileBodyGenerator0.getFile();
}"
2104,"  public long getRegionLength() {
    return regionLength;
  }","  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      fileBodyGenerator0.getFile();
}"
2105,"  public long getRegionLength() {
    return regionLength;
  }","  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      long long0 = fileBodyGenerator0.getRegionLength();
}"
2106,"  public long getRegionSeek() {
    return regionSeek;
  }","  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      FileBodyGenerator fileBodyGenerator0 = new FileBodyGenerator(mockFile0, 0L, (-1L));
      long long0 = fileBodyGenerator0.getRegionLength();
}"
2107,"  public Publisher<ByteBuf> getPublisher() {
    return this.publisher;
  }","  public void test0()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, 0L);
      Publisher<ByteBuf> publisher0 = reactiveStreamsBodyGenerator0.getPublisher();
}"
2108,"  public long getContentLength() {
    return contentLength;
  }","  public void test1()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, 0L);
      long long0 = reactiveStreamsBodyGenerator0.getContentLength();
}"
2109,"  public long getContentLength() {
    return contentLength;
  }","  public void test2()  throws Throwable  {
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator((Publisher<ByteBuf>) null, (-1954L));
      long long0 = reactiveStreamsBodyGenerator0.getContentLength();
}"
2110,"  public long getContentLength() {
    return contentLength;
  }","  public void test3()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      reactiveStreamsBodyGenerator0.feed(byteBuf0, false);
}"
2111,"  public long getContentLength() {
    return contentLength;
  }","  public void test4()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      Body body0 = reactiveStreamsBodyGenerator0.createBody();
}"
2112,"  public long getContentLength() {
    return contentLength;
  }","  public void test5()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      FeedListener feedListener0 = mock(FeedListener.class, new ViolatedAssumptionAnswer());
      reactiveStreamsBodyGenerator0.setListener(feedListener0);
}"
2113,"  public long getContentLength() {
    return contentLength;
  }","  public void test6()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(publisher0).toString();
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      reactiveStreamsBodyGenerator0.getPublisher();
}"
2114,"  public long getContentLength() {
    return contentLength;
  }","  public void test7()  throws Throwable  {
      Publisher<ByteBuf> publisher0 = (Publisher<ByteBuf>) mock(Publisher.class, new ViolatedAssumptionAnswer());
      ReactiveStreamsBodyGenerator reactiveStreamsBodyGenerator0 = new ReactiveStreamsBodyGenerator(publisher0, 1L);
      long long0 = reactiveStreamsBodyGenerator0.getContentLength();
}"
2115,"  BodyChunk(ByteBuf buffer, boolean last) {
    this.buffer = buffer;
    this.last = last;
  }","  public void test0()  throws Throwable  {
      BodyChunk bodyChunk0 = new BodyChunk((ByteBuf) null, false);
}"
2116,"  public boolean feed(final ByteBuf buffer, final boolean isLast) throws Exception {
    boolean offered = offer(new BodyChunk(buffer, isLast));
    if (offered && listener != null) {
      listener.onContentAdded();
    }
    return offered;
  }","  public void test0()  throws Throwable  {
      FeedListener feedListener0 = mock(FeedListener.class, new ViolatedAssumptionAnswer());
      UnboundedQueueFeedableBodyGenerator unboundedQueueFeedableBodyGenerator0 = new UnboundedQueueFeedableBodyGenerator();
      unboundedQueueFeedableBodyGenerator0.setListener(feedListener0);
      boolean boolean0 = unboundedQueueFeedableBodyGenerator0.feed((ByteBuf) null, false);
}"
2117,"  public boolean feed(final ByteBuf buffer, final boolean isLast) throws Exception {
    boolean offered = offer(new BodyChunk(buffer, isLast));
    if (offered && listener != null) {
      listener.onContentAdded();
    }
    return offered;
  }","  public void test1()  throws Throwable  {
      BoundedQueueFeedableBodyGenerator boundedQueueFeedableBodyGenerator0 = new BoundedQueueFeedableBodyGenerator(1);
      BodyChunk bodyChunk0 = new BodyChunk((ByteBuf) null, false);
      boolean boolean0 = boundedQueueFeedableBodyGenerator0.offer(bodyChunk0);
      boolean boolean1 = boundedQueueFeedableBodyGenerator0.feed((ByteBuf) null, false);
}"
2118,"  public Body createBody() {
    return new PushBody(queue);
  }","  public void test2()  throws Throwable  {
      BoundedQueueFeedableBodyGenerator boundedQueueFeedableBodyGenerator0 = new BoundedQueueFeedableBodyGenerator(1);
      Body body0 = boundedQueueFeedableBodyGenerator0.createBody();
}"
2119,"  public boolean feed(final ByteBuf buffer, final boolean isLast) throws Exception {
    boolean offered = offer(new BodyChunk(buffer, isLast));
    if (offered && listener != null) {
      listener.onContentAdded();
    }
    return offered;
  }","  public void test3()  throws Throwable  {
      UnboundedQueueFeedableBodyGenerator unboundedQueueFeedableBodyGenerator0 = new UnboundedQueueFeedableBodyGenerator();
      boolean boolean0 = unboundedQueueFeedableBodyGenerator0.feed((ByteBuf) null, false);
}"
2120,"  protected boolean offer(BodyChunk chunk) {
    return queue.offer(chunk);
  }","  public void test0()  throws Throwable  {
      UnboundedQueueFeedableBodyGenerator unboundedQueueFeedableBodyGenerator0 = new UnboundedQueueFeedableBodyGenerator();
      BodyChunk bodyChunk0 = new BodyChunk((ByteBuf) null, false);
      boolean boolean0 = unboundedQueueFeedableBodyGenerator0.offer(bodyChunk0);
}"
2121,"  protected boolean offer(BodyChunk chunk) {
    return queue.offer(chunk);
  }","  public void test1()  throws Throwable  {
      UnboundedQueueFeedableBodyGenerator unboundedQueueFeedableBodyGenerator0 = new UnboundedQueueFeedableBodyGenerator();
      // Undeclared exception!
      try { 
        unboundedQueueFeedableBodyGenerator0.offer((BodyChunk) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentLinkedQueue"", e);
      }
  }"
2122,"  public Body createBody() {
    return new ByteBody();
  }","  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayBodyGenerator byteArrayBodyGenerator0 = new ByteArrayBodyGenerator(byteArray0);
      Body body0 = byteArrayBodyGenerator0.createBody();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 0, 0);
      Body.BodyState body_BodyState0 = body0.transferTo(unpooledDirectByteBuf0);
}"
2123,"  public ByteArrayBodyGenerator(byte[] bytes) {
    this.bytes = bytes;
  }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayBodyGenerator byteArrayBodyGenerator0 = new ByteArrayBodyGenerator(byteArray0);
      ByteArrayBodyGenerator.ByteBody byteArrayBodyGenerator_ByteBody0 = byteArrayBodyGenerator0.new ByteBody();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 1553, 1553);
      byteArrayBodyGenerator_ByteBody0.transferTo(unpooledDirectByteBuf0);
      Body.BodyState body_BodyState0 = byteArrayBodyGenerator_ByteBody0.transferTo(unpooledDirectByteBuf0);
}"
2124,"  public ByteArrayBodyGenerator(byte[] bytes) {
    this.bytes = bytes;
  }","  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayBodyGenerator byteArrayBodyGenerator0 = new ByteArrayBodyGenerator(byteArray0);
      ByteArrayBodyGenerator.ByteBody byteArrayBodyGenerator_ByteBody0 = byteArrayBodyGenerator0.new ByteBody();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(pooledByteBufAllocator0, 1553, 1553);
      byteArrayBodyGenerator_ByteBody0.transferTo(unpooledDirectByteBuf0);
      Body.BodyState body_BodyState0 = byteArrayBodyGenerator_ByteBody0.transferTo(unpooledDirectByteBuf0);
}"
2125,"  public Body createBody() {
    return new ByteBody();
  }","  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayBodyGenerator byteArrayBodyGenerator0 = new ByteArrayBodyGenerator(byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      Body body0 = byteArrayBodyGenerator0.createBody();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 2, 1531);
      body0.transferTo(unpooledUnsafeDirectByteBuf0);
      Body.BodyState body_BodyState0 = body0.transferTo(unpooledUnsafeDirectByteBuf0);
}"
2126,"  public Body createBody() {
    return new ByteBody();
  }","  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayBodyGenerator byteArrayBodyGenerator0 = new ByteArrayBodyGenerator(byteArray0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      Body body0 = byteArrayBodyGenerator0.createBody();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(unpooledByteBufAllocator0, 2, 1531);
      body0.transferTo(unpooledUnsafeDirectByteBuf0);
      Body.BodyState body_BodyState0 = body0.transferTo(unpooledUnsafeDirectByteBuf0);
}"
2127,"  public ByteArrayBodyGenerator(byte[] bytes) {
    this.bytes = bytes;
  }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayBodyGenerator byteArrayBodyGenerator0 = new ByteArrayBodyGenerator(byteArray0);
      ByteArrayBodyGenerator.ByteBody byteArrayBodyGenerator_ByteBody0 = byteArrayBodyGenerator0.new ByteBody();
      long long0 = byteArrayBodyGenerator_ByteBody0.getContentLength();
}"
2128,"  public ByteArrayBodyGenerator(byte[] bytes) {
    this.bytes = bytes;
  }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayBodyGenerator byteArrayBodyGenerator0 = new ByteArrayBodyGenerator(byteArray0);
      ByteArrayBodyGenerator.ByteBody byteArrayBodyGenerator_ByteBody0 = byteArrayBodyGenerator0.new ByteBody();
      byteArrayBodyGenerator_ByteBody0.close();
}"
2129,"  protected boolean offer(BodyChunk chunk) throws InterruptedException {
    return queue.offer(chunk);
  }","  public void test0()  throws Throwable  {
      int int0 = 13;
      BoundedQueueFeedableBodyGenerator boundedQueueFeedableBodyGenerator0 = new BoundedQueueFeedableBodyGenerator(13);
      BodyChunk bodyChunk0 = null;
      FeedListener feedListener0 = mock(FeedListener.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.setListener(feedListener0);
      // Undeclared exception!
      try { 
        boundedQueueFeedableBodyGenerator0.offer((BodyChunk) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ArrayBlockingQueue"", e);
      }
  }"
2130,"  public BoundedQueueFeedableBodyGenerator(int capacity) {
    super(new ArrayBlockingQueue<>(capacity, true));
  }","  public void test1()  throws Throwable  {
      int int0 = 0;
      BoundedQueueFeedableBodyGenerator boundedQueueFeedableBodyGenerator0 = null;
      try {
        boundedQueueFeedableBodyGenerator0 = new BoundedQueueFeedableBodyGenerator(0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ArrayBlockingQueue"", e);
      }
  }"
2131,"  public BoundedQueueFeedableBodyGenerator(int capacity) {
    super(new ArrayBlockingQueue<>(capacity, true));
  }","  public void test2()  throws Throwable  {
      BoundedQueueFeedableBodyGenerator boundedQueueFeedableBodyGenerator0 = new BoundedQueueFeedableBodyGenerator(1073741824);
  }"
2132,"  protected boolean offer(BodyChunk chunk) throws InterruptedException {
    return queue.offer(chunk);
  }","  public void test3()  throws Throwable  {
      BoundedQueueFeedableBodyGenerator boundedQueueFeedableBodyGenerator0 = new BoundedQueueFeedableBodyGenerator(1);
      BodyChunk bodyChunk0 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      BodyChunk bodyChunk1 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk1);
      BodyChunk bodyChunk2 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      BodyChunk bodyChunk3 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk3);
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk2);
      BodyChunk bodyChunk4 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk4);
      boundedQueueFeedableBodyGenerator0.feed((ByteBuf) null, true);
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk0);
      BodyChunk bodyChunk5 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk5);
      BodyChunk bodyChunk6 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.feed((ByteBuf) null, true);
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk6);
      BodyChunk bodyChunk7 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk7);
      BodyChunk bodyChunk8 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk8);
      // Undeclared exception!
      try { 
        boundedQueueFeedableBodyGenerator0.offer((BodyChunk) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ArrayBlockingQueue"", e);
      }
  }"
2133,"  protected boolean offer(BodyChunk chunk) throws InterruptedException {
    return queue.offer(chunk);
  }","  public void test4()  throws Throwable  {
      BoundedQueueFeedableBodyGenerator boundedQueueFeedableBodyGenerator0 = new BoundedQueueFeedableBodyGenerator(1790);
      BodyChunk bodyChunk0 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      FeedListener feedListener0 = null;
      boundedQueueFeedableBodyGenerator0.createBody();
      boundedQueueFeedableBodyGenerator0.setListener((FeedListener) null);
      boundedQueueFeedableBodyGenerator0.createBody();
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk0);
      BodyChunk bodyChunk1 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk1);
      boundedQueueFeedableBodyGenerator0.setListener((FeedListener) null);
      boundedQueueFeedableBodyGenerator0.feed((ByteBuf) null, true);
      BodyChunk bodyChunk2 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk2);
      boundedQueueFeedableBodyGenerator0.setListener((FeedListener) null);
      BodyChunk bodyChunk3 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk3);
      BodyChunk bodyChunk4 = mock(BodyChunk.class, new ViolatedAssumptionAnswer());
      boundedQueueFeedableBodyGenerator0.offer(bodyChunk4);
      boundedQueueFeedableBodyGenerator0.setListener((FeedListener) null);
      BodyChunk bodyChunk5 = null;
      // Undeclared exception!
      try { 
        boundedQueueFeedableBodyGenerator0.offer((BodyChunk) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ArrayBlockingQueue"", e);
      }
  }"
2134,"  public long getContentLength() {
    return contentLength;
  }","  public void test0()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamBodyGenerator inputStreamBodyGenerator0 = new InputStreamBodyGenerator(mockFileInputStream0, 9223372036854775807L);
      inputStreamBodyGenerator0.getInputStream();
}"
2135,"  public long getContentLength() {
    return contentLength;
  }","  public void test1()  throws Throwable  {
      InputStreamBodyGenerator inputStreamBodyGenerator0 = new InputStreamBodyGenerator((InputStream) null, 0L);
      long long0 = inputStreamBodyGenerator0.getContentLength();
}"
2136,"  public long getContentLength() {
    return contentLength;
  }","  public void test2()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      InputStreamBodyGenerator inputStreamBodyGenerator0 = new InputStreamBodyGenerator(mockFileInputStream0, 9223372036854775807L);
      long long0 = inputStreamBodyGenerator0.getContentLength();
}"
2137,"  public long getContentLength() {
    return contentLength;
  }","  public void test3()  throws Throwable  {
      InputStreamBodyGenerator inputStreamBodyGenerator0 = new InputStreamBodyGenerator((InputStream) null);
      Body body0 = inputStreamBodyGenerator0.createBody();
}"
2138,"  public long getContentLength() {
    return contentLength;
  }","  public void test4()  throws Throwable  {
      InputStreamBodyGenerator inputStreamBodyGenerator0 = new InputStreamBodyGenerator((InputStream) null);
      inputStreamBodyGenerator0.getInputStream();
}"
2139,"  public long getContentLength() {
    return contentLength;
  }","  public void test5()  throws Throwable  {
      InputStreamBodyGenerator inputStreamBodyGenerator0 = new InputStreamBodyGenerator((InputStream) null);
      long long0 = inputStreamBodyGenerator0.getContentLength();
}"
2140,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test0()  throws Throwable  {
      PriorityQueue<BodyChunk> priorityQueue0 = new PriorityQueue<BodyChunk>();
      PushBody pushBody0 = new PushBody(priorityQueue0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 962, 962);
      unpooledUnsafeDirectByteBuf0.writeByte(962);
      ByteBuf byteBuf0 = pooledByteBufAllocator0.buffer(962);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeDirectByteBuf0, false);
      unpooledUnsafeDirectByteBuf0.release();
      priorityQueue0.add(bodyChunk0);
      // Undeclared exception!
      try { 
        pushBody0.transferTo(byteBuf0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
2141,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test1()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 5400, 5400);
      byte[] byteArray0 = new byte[1];
      ByteBuf byteBuf0 = unpooledUnsafeHeapByteBuf0.writeBytes(byteArray0);
      BodyChunk bodyChunk0 = new BodyChunk(byteBuf0, true);
      arrayDeque0.add(bodyChunk0);
      PushBody pushBody0 = new PushBody(arrayDeque0);
      // Undeclared exception!
      pushBody0.transferTo(unpooledUnsafeHeapByteBuf0);
  }"
2142,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test2()  throws Throwable  {
      PriorityQueue<BodyChunk> priorityQueue0 = new PriorityQueue<BodyChunk>();
      PushBody pushBody0 = new PushBody(priorityQueue0);
      // Undeclared exception!
      try { 
        pushBody0.transferTo((ByteBuf) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.request.body.generator.PushBody"", e);
      }
  }"
2143,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test3()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 5377, 5377);
      ByteBuf byteBuf0 = unpooledUnsafeHeapByteBuf0.writeDoubleLE((-2294.879));
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeHeapByteBuf0, true);
      arrayDeque0.add(bodyChunk0);
      PushBody pushBody0 = new PushBody(arrayDeque0);
      // Undeclared exception!
      try { 
        pushBody0.transferTo(byteBuf0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // writerIndex(5376) + minWritableBytes(8) exceeds maxCapacity(5377): UnpooledUnsafeHeapByteBuf(ridx: 5368, widx: 5376, cap: 5377/5377)
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
2144,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test4()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false);
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 5400, 5400);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeHeapByteBuf0, true);
      arrayDeque0.add(bodyChunk0);
      PushBody pushBody0 = new PushBody(arrayDeque0);
      Charset charset0 = Charset.defaultCharset();
      unpooledUnsafeHeapByteBuf0.readCharSequence(3568, charset0);
      // Undeclared exception!
      try { 
        pushBody0.transferTo(unpooledUnsafeHeapByteBuf0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // minWritableBytes: -3568 (expected: >= 0)
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
2145,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test5()  throws Throwable  {
      PriorityQueue<BodyChunk> priorityQueue0 = new PriorityQueue<BodyChunk>();
      PushBody pushBody0 = new PushBody(priorityQueue0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 967, 967);
      unpooledUnsafeDirectByteBuf0.writeByte(967);
      ByteBuf byteBuf0 = pooledByteBufAllocator0.buffer(967);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeDirectByteBuf0, false);
      priorityQueue0.add(bodyChunk0);
      Body.BodyState body_BodyState0 = pushBody0.transferTo(byteBuf0);
}"
2146,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test6()  throws Throwable  {
      PriorityQueue<BodyChunk> priorityQueue0 = new PriorityQueue<BodyChunk>();
      PushBody pushBody0 = new PushBody(priorityQueue0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 967, 967);
      unpooledUnsafeDirectByteBuf0.writeByte(967);
      ByteBuf byteBuf0 = pooledByteBufAllocator0.buffer(967);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeDirectByteBuf0, false);
      priorityQueue0.add(bodyChunk0);
      Body.BodyState body_BodyState0 = pushBody0.transferTo(byteBuf0);
}"
2147,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test7()  throws Throwable  {
      PriorityQueue<BodyChunk> priorityQueue0 = new PriorityQueue<BodyChunk>();
      PushBody pushBody0 = new PushBody(priorityQueue0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 967, 967);
      ByteBuf byteBuf0 = pooledByteBufAllocator0.buffer(967);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeDirectByteBuf0, false);
      priorityQueue0.add(bodyChunk0);
      Body.BodyState body_BodyState0 = pushBody0.transferTo(byteBuf0);
}"
2148,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test8()  throws Throwable  {
      PriorityQueue<BodyChunk> priorityQueue0 = new PriorityQueue<BodyChunk>();
      PushBody pushBody0 = new PushBody(priorityQueue0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 967, 967);
      ByteBuf byteBuf0 = pooledByteBufAllocator0.buffer(967);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeDirectByteBuf0, false);
      priorityQueue0.add(bodyChunk0);
      Body.BodyState body_BodyState0 = pushBody0.transferTo(byteBuf0);
}"
2149,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test9()  throws Throwable  {
      PriorityQueue<BodyChunk> priorityQueue0 = new PriorityQueue<BodyChunk>();
      PushBody pushBody0 = new PushBody(priorityQueue0);
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator();
      UnpooledUnsafeDirectByteBuf unpooledUnsafeDirectByteBuf0 = new UnpooledUnsafeDirectByteBuf(pooledByteBufAllocator0, 967, 967);
      ByteBuf byteBuf0 = unpooledUnsafeDirectByteBuf0.writeByte(967);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeDirectByteBuf0, false);
      priorityQueue0.add(bodyChunk0);
      Body.BodyState body_BodyState0 = pushBody0.transferTo(byteBuf0);
}"
2150,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test10()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 542, 542);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeHeapByteBuf0, true);
      arrayDeque0.add(bodyChunk0);
      PushBody pushBody0 = new PushBody(arrayDeque0);
      pushBody0.transferTo(bodyChunk0.buffer);
      Body.BodyState body_BodyState0 = pushBody0.transferTo(unpooledUnsafeHeapByteBuf0);
}"
2151,"  public BodyState transferTo(final ByteBuf target) {
    switch (state) {
      case CONTINUE:
        return readNextChunk(target);
      case STOP:
        return BodyState.STOP;
      default:
        throw new IllegalStateException(""Illegal process state."");
    }
  }","  public void test11()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 542, 542);
      BodyChunk bodyChunk0 = new BodyChunk(unpooledUnsafeHeapByteBuf0, true);
      arrayDeque0.add(bodyChunk0);
      PushBody pushBody0 = new PushBody(arrayDeque0);
      pushBody0.transferTo(bodyChunk0.buffer);
      Body.BodyState body_BodyState0 = pushBody0.transferTo(unpooledUnsafeHeapByteBuf0);
}"
2152,"  public long getContentLength() {
    return -1;
  }","  public void test12()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      PushBody pushBody0 = new PushBody(arrayDeque0);
      pushBody0.close();
}"
2153,"  public long getContentLength() {
    return -1;
  }","  public void test13()  throws Throwable  {
      ArrayDeque<BodyChunk> arrayDeque0 = new ArrayDeque<BodyChunk>();
      PushBody pushBody0 = new PushBody(arrayDeque0);
      long long0 = pushBody0.getContentLength();
}"
2154,"  public V get() throws InterruptedException, ExecutionException {
    return future.get();
  }","  public void test0()  throws Throwable  {
      AsyncHandler<TimeoutsHolder> asyncHandler0 = (AsyncHandler<TimeoutsHolder>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture0 = new NettyResponseFuture<TimeoutsHolder>((Request) null, asyncHandler0, (NettyRequest) null, 2755, channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.setStreamConsumed(false);
      AsyncHandler<Object> asyncHandler1 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning1 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore1 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture1 = new NettyResponseFuture<Object>((Request) null, asyncHandler1, (NettyRequest) null, 2755, channelPoolPartitioning1, connectionSemaphore1, (ProxyServer) null);
      nettyResponseFuture1.isAndSetInProxyAuth(false);
      nettyResponseFuture1.incrementAndGetCurrentRedirectCount();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      try { 
        nettyResponseFuture1.get(0L, timeUnit0);
        fail(""Expecting exception: TimeoutException"");
      } catch(TimeoutException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.CompletableFuture"", e);
      }
  }"
2155,"  public long getLastTouch() {
    return touch;
  }","  public void test1()  throws Throwable  {
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncHandler0).toString();
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = new NettyResponseFuture<Object>((Request) null, asyncHandler0, (NettyRequest) null, 334, (ChannelPoolPartitioning) null, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.isReuseChannel();
      nettyResponseFuture0.getRealm();
      Runnable runnable0 = mock(Runnable.class, new ViolatedAssumptionAnswer());
      Executor executor0 = mock(Executor.class, new ViolatedAssumptionAnswer());
      nettyResponseFuture0.addListener(runnable0, executor0);
      nettyResponseFuture0.getTimeoutsHolder();
      nettyResponseFuture0.getLastTouch();
  }"
2156,"  public void setTimeoutsHolder(TimeoutsHolder timeoutsHolder) {
    TimeoutsHolder ref = TIMEOUTS_HOLDER_FIELD.getAndSet(this, timeoutsHolder);
    if (ref != null) {
      ref.cancel();
    }
  }","  public void test2()  throws Throwable  {
      AsyncHandler<TimeoutsHolder> asyncHandler0 = (AsyncHandler<TimeoutsHolder>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture0 = new NettyResponseFuture<TimeoutsHolder>((Request) null, asyncHandler0, (NettyRequest) null, (-120), channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.setTimeoutsHolder((TimeoutsHolder) null);
  }"
2157,"  public Uri getUri() {
    return targetRequest.getUri();
  }","  public void test3()  throws Throwable  {
      Request request0 = null;
      AsyncHandler<NettyResponseFuture<Integer>> asyncHandler0 = (AsyncHandler<NettyResponseFuture<Integer>>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      NettyRequest nettyRequest0 = null;
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      ProxyServer proxyServer0 = null;
      NettyResponseFuture<NettyResponseFuture<Integer>> nettyResponseFuture0 = new NettyResponseFuture<NettyResponseFuture<Integer>>((Request) null, asyncHandler0, (NettyRequest) null, 0, channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.cancel(false);
      // Undeclared exception!
      try { 
        nettyResponseFuture0.getUri();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.NettyResponseFuture"", e);
      }
  }"
2158,"  public Object getPartitionKey() {
    return connectionPoolPartitioning.getPartitionKey(targetRequest.getUri(), targetRequest.getVirtualHost(),
            proxyServer);
  }","  public void test4()  throws Throwable  {
      Request request0 = null;
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncHandler0).toString();
      NettyRequest nettyRequest0 = null;
      int int0 = 0;
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      ProxyServer proxyServer0 = null;
      NettyResponseFuture<Object> nettyResponseFuture0 = new NettyResponseFuture<Object>((Request) null, asyncHandler0, (NettyRequest) null, 0, channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.takePartitionKeyLock();
      nettyResponseFuture0.getAsyncHandler();
      AsyncHandler<NettyResponseFuture<String>> asyncHandler1 = (AsyncHandler<NettyResponseFuture<String>>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning1 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore1 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<NettyResponseFuture<String>> nettyResponseFuture1 = new NettyResponseFuture<NettyResponseFuture<String>>((Request) null, asyncHandler1, (NettyRequest) null, 0, channelPoolPartitioning1, connectionSemaphore1, (ProxyServer) null);
      // Undeclared exception!
      try { 
        nettyResponseFuture1.getPartitionKey();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.NettyResponseFuture"", e);
      }
  }"
2159,"  public final Request getTargetRequest() {
    return targetRequest;
  }","  public void test5()  throws Throwable  {
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = new NettyResponseFuture<Object>((Request) null, asyncHandler0, (NettyRequest) null, 98, channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.getTargetRequest();
  }"
2160,"  public final AsyncHandler<V> getAsyncHandler() {
    return asyncHandler;
  }","  public void test6()  throws Throwable  {
      AsyncHandler<TimeoutsHolder> asyncHandler0 = (AsyncHandler<TimeoutsHolder>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncHandler0).toString();
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture0 = new NettyResponseFuture<TimeoutsHolder>((Request) null, asyncHandler0, (NettyRequest) null, 0, channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.getAsyncHandler();
  }"
2161,"  public void setConnectAllowed(boolean allowConnect) {
    this.allowConnect = allowConnect;
  }","  public void test7()  throws Throwable  {
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = new NettyResponseFuture<Object>((Request) null, asyncHandler0, (NettyRequest) null, 773, (ChannelPoolPartitioning) null, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.setNettyRequest((NettyRequest) null);
      nettyResponseFuture0.setTargetRequest((Request) null);
      nettyResponseFuture0.isAndSetInProxyAuth(false);
      nettyResponseFuture0.incrementAndGetCurrentRedirectCount();
      ChannelState channelState0 = ChannelState.CLOSED;
      nettyResponseFuture0.setChannelState(channelState0);
      nettyResponseFuture0.setTargetRequest((Request) null);
      nettyResponseFuture0.takePartitionKeyLock();
      nettyResponseFuture0.takePartitionKeyLock();
      AsyncHandler<TimeoutsHolder> asyncHandler1 = (AsyncHandler<TimeoutsHolder>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore1 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture1 = new NettyResponseFuture<TimeoutsHolder>((Request) null, asyncHandler1, (NettyRequest) null, 817, (ChannelPoolPartitioning) null, connectionSemaphore1, (ProxyServer) null);
      nettyResponseFuture1.setTargetRequest((Request) null);
      nettyResponseFuture1.isKeepAlive();
      nettyResponseFuture0.isStreamConsumed();
      nettyResponseFuture0.setConnectAllowed(false);
  }"
2162,"  public boolean isAndSetInAuth(boolean set) {
    return IN_AUTH_FIELD.getAndSet(this, set ? 1 : 0) != 0;
  }","  public void test8()  throws Throwable  {
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<String> nettyResponseFuture0 = new NettyResponseFuture<String>((Request) null, (AsyncHandler<String>) null, (NettyRequest) null, 2413, channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.isAndSetInAuth(false);
  }"
2163,"  public void acquirePartitionLockLazily() throws IOException {
    if (connectionSemaphore == null || partitionKeyLock != null) {
      return;
    }

    Object partitionKey = getPartitionKey();
    connectionSemaphore.acquireChannelLock(partitionKey);
    Object prevKey = PARTITION_KEY_LOCK_FIELD.getAndSet(this, partitionKey);
    if (prevKey != null) {
      // self-check

      connectionSemaphore.releaseChannelLock(prevKey);
      releasePartitionKeyLock();

      throw new IllegalStateException(""Trying to acquire partition lock concurrently. Please report."");
    }

    if (isDone()) {
      // may be cancelled while we acquired a lock
      releasePartitionKeyLock();
    }
  }","  public void test9()  throws Throwable  {
      Request request0 = null;
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      NettyRequest nettyRequest0 = null;
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      ProxyServer proxyServer0 = null;
      NettyResponseFuture<Object> nettyResponseFuture0 = new NettyResponseFuture<Object>((Request) null, asyncHandler0, (NettyRequest) null, (-511), channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.getChannelState();
      ChannelPoolPartitioning channelPoolPartitioning1 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore1 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      nettyResponseFuture0.incrementRetryAndCheck();
      NettyResponseFuture<NettyResponseFuture<TimeoutsHolder>> nettyResponseFuture1 = new NettyResponseFuture<NettyResponseFuture<TimeoutsHolder>>((Request) null, (AsyncHandler<NettyResponseFuture<TimeoutsHolder>>) null, (NettyRequest) null, 0, channelPoolPartitioning1, connectionSemaphore1, (ProxyServer) null);
      // Undeclared exception!
      try { 
        nettyResponseFuture0.acquirePartitionLockLazily();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.NettyResponseFuture"", e);
      }
  }"
2164,"  public final void setKeepAlive(final boolean keepAlive) {
    this.keepAlive = keepAlive;
  }","  public void test10()  throws Throwable  {
      AsyncHandler<TimeoutsHolder> asyncHandler0 = (AsyncHandler<TimeoutsHolder>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture0 = new NettyResponseFuture<TimeoutsHolder>((Request) null, asyncHandler0, (NettyRequest) null, (-1662), channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.incrementAndGetCurrentRedirectCount();
      nettyResponseFuture0.incrementAndGetCurrentRedirectCount();
      nettyResponseFuture0.cancelTimeouts();
      nettyResponseFuture0.isAndSetInAuth(true);
      nettyResponseFuture0.getCurrentRequest();
      AsyncHandler<Object> asyncHandler1 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning1 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore1 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture1 = new NettyResponseFuture<Object>((Request) null, asyncHandler1, (NettyRequest) null, 2404, channelPoolPartitioning1, connectionSemaphore1, (ProxyServer) null);
      nettyResponseFuture1.setKeepAlive(false);
  }"
2165,"  public NettyResponseFuture(Request originalRequest,
                             AsyncHandler<V> asyncHandler,
                             NettyRequest nettyRequest,
                             int maxRetry,
                             ChannelPoolPartitioning connectionPoolPartitioning,
                             ConnectionSemaphore connectionSemaphore,
                             ProxyServer proxyServer) {

    this.asyncHandler = asyncHandler;
    this.targetRequest = currentRequest = originalRequest;
    this.nettyRequest = nettyRequest;
    this.connectionPoolPartitioning = connectionPoolPartitioning;
    this.connectionSemaphore = connectionSemaphore;
    this.proxyServer = proxyServer;
    this.maxRetry = maxRetry;
  }","  public void test11()  throws Throwable  {
      AsyncHandler<TimeoutsHolder> asyncHandler0 = (AsyncHandler<TimeoutsHolder>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      NettyRequest nettyRequest0 = mock(NettyRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(nettyRequest0).toString();
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture0 = new NettyResponseFuture<TimeoutsHolder>((Request) null, asyncHandler0, nettyRequest0, 155, channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      NettyRequest nettyRequest1 = nettyResponseFuture0.getNettyRequest();
      ChannelPoolPartitioning channelPoolPartitioning1 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore1 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture1 = new NettyResponseFuture<TimeoutsHolder>((Request) null, asyncHandler0, nettyRequest1, 4409, channelPoolPartitioning1, connectionSemaphore1, (ProxyServer) null);
  }"
2166,"  public void acquirePartitionLockLazily() throws IOException {
    if (connectionSemaphore == null || partitionKeyLock != null) {
      return;
    }

    Object partitionKey = getPartitionKey();
    connectionSemaphore.acquireChannelLock(partitionKey);
    Object prevKey = PARTITION_KEY_LOCK_FIELD.getAndSet(this, partitionKey);
    if (prevKey != null) {
      // self-check

      connectionSemaphore.releaseChannelLock(prevKey);
      releasePartitionKeyLock();

      throw new IllegalStateException(""Trying to acquire partition lock concurrently. Please report."");
    }

    if (isDone()) {
      // may be cancelled while we acquired a lock
      releasePartitionKeyLock();
    }
  }","  public void test12()  throws Throwable  {
      Request request0 = null;
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      NettyRequest nettyRequest0 = null;
      int int0 = 0;
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      ProxyServer proxyServer0 = null;
      NettyResponseFuture<Object> nettyResponseFuture0 = new NettyResponseFuture<Object>((Request) null, asyncHandler0, (NettyRequest) null, 0, channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      ChannelState channelState0 = ChannelState.RECONNECTED;
      nettyResponseFuture0.setChannelState(channelState0);
      nettyResponseFuture0.getRealm();
      AsyncHandler<NettyResponseFuture<Object>> asyncHandler1 = (AsyncHandler<NettyResponseFuture<Object>>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning1 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore1 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<NettyResponseFuture<Object>> nettyResponseFuture1 = new NettyResponseFuture<NettyResponseFuture<Object>>((Request) null, asyncHandler1, (NettyRequest) null, 2077, channelPoolPartitioning1, connectionSemaphore1, (ProxyServer) null);
      nettyResponseFuture1.setConnectAllowed(true);
      // Undeclared exception!
      try { 
        nettyResponseFuture1.acquirePartitionLockLazily();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.NettyResponseFuture"", e);
      }
  }"
2167,"  public String toString() {
    return ""NettyResponseFuture{"" + //
            ""currentRetry="" + currentRetry + //
            "",\n\tisDone="" + isDone + //
            "",\n\tisCancelled="" + isCancelled + //
            "",\n\tasyncHandler="" + asyncHandler + //
            "",\n\tnettyRequest="" + nettyRequest + //
            "",\n\tfuture="" + future + //
            "",\n\turi="" + getUri() + //
            "",\n\tkeepAlive="" + keepAlive + //
            "",\n\tredirectCount="" + redirectCount + //
            "",\n\ttimeoutsHolder="" + TIMEOUTS_HOLDER_FIELD.get(this) + //
            "",\n\tinAuth="" + inAuth + //
            "",\n\ttouch="" + touch + //
            '}';
  }","  public void test13()  throws Throwable  {
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture0 = new NettyResponseFuture<TimeoutsHolder>((Request) null, (AsyncHandler<TimeoutsHolder>) null, (NettyRequest) null, (-3824), channelPoolPartitioning0, (ConnectionSemaphore) null, (ProxyServer) null);
      // Undeclared exception!
      try { 
        nettyResponseFuture0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.NettyResponseFuture"", e);
      }
  }"
2168,"  public void attachChannel(Channel channel, boolean reuseChannel) {

    // future could have been cancelled first
    if (isDone()) {
      Channels.silentlyCloseChannel(channel);
    }

    this.channel = channel;
    this.reuseChannel = reuseChannel;
  }","  public void test14()  throws Throwable  {
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(asyncHandler0).onCompleted();
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = new NettyResponseFuture<Object>((Request) null, asyncHandler0, (NettyRequest) null, 1132, channelPoolPartitioning0, (ConnectionSemaphore) null, (ProxyServer) null);
      ChannelPoolPartitioning channelPoolPartitioning1 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<String> nettyResponseFuture1 = new NettyResponseFuture<String>((Request) null, (AsyncHandler<String>) null, (NettyRequest) null, 1132, channelPoolPartitioning1, (ConnectionSemaphore) null, (ProxyServer) null);
      nettyResponseFuture0.touch();
      nettyResponseFuture1.setAsyncHandler((AsyncHandler<String>) null);
      nettyResponseFuture1.getProxyRealm();
      nettyResponseFuture0.setProxyRealm((Realm) null);
      nettyResponseFuture0.touch();
      nettyResponseFuture0.setConnectAllowed(true);
      nettyResponseFuture0.isHeadersAlreadyWrittenOnContinue();
      nettyResponseFuture0.setTargetRequest((Request) null);
      nettyResponseFuture0.setTargetRequest((Request) null);
      nettyResponseFuture1.incrementRetryAndCheck();
      nettyResponseFuture0.done();
      nettyResponseFuture1.isInProxyAuth();
      AsyncHandler<NettyResponseFuture<String>> asyncHandler1 = (AsyncHandler<NettyResponseFuture<String>>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning2 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<NettyResponseFuture<String>> nettyResponseFuture2 = new NettyResponseFuture<NettyResponseFuture<String>>((Request) null, asyncHandler1, (NettyRequest) null, 1132, channelPoolPartitioning2, (ConnectionSemaphore) null, (ProxyServer) null);
      nettyResponseFuture2.getCurrentRequest();
      AsyncHandler<NettyResponseFuture<Integer>> asyncHandler2 = (AsyncHandler<NettyResponseFuture<Integer>>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning3 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<NettyResponseFuture<Integer>> nettyResponseFuture3 = new NettyResponseFuture<NettyResponseFuture<Integer>>((Request) null, asyncHandler2, (NettyRequest) null, 3047, channelPoolPartitioning3, (ConnectionSemaphore) null, (ProxyServer) null);
      nettyResponseFuture3.attachChannel((Channel) null, false);
  }"
2169,"  public ProxyServer getProxyServer() {
    return proxyServer;
  }","  public void test15()  throws Throwable  {
      AsyncHandler<NettyResponseFuture<Integer>> asyncHandler0 = (AsyncHandler<NettyResponseFuture<Integer>>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<NettyResponseFuture<Integer>> nettyResponseFuture0 = new NettyResponseFuture<NettyResponseFuture<Integer>>((Request) null, asyncHandler0, (NettyRequest) null, 0, channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      ChannelState channelState0 = ChannelState.NEW;
      nettyResponseFuture0.setChannelState(channelState0);
      AsyncHandler<Object> asyncHandler1 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning1 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore1 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture1 = new NettyResponseFuture<Object>((Request) null, asyncHandler1, (NettyRequest) null, 0, channelPoolPartitioning1, connectionSemaphore1, (ProxyServer) null);
      nettyResponseFuture1.getTimeoutsHolder();
      AsyncHandler<TimeoutsHolder> asyncHandler2 = (AsyncHandler<TimeoutsHolder>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning2 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore2 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture2 = new NettyResponseFuture<TimeoutsHolder>((Request) null, asyncHandler2, (NettyRequest) null, 0, channelPoolPartitioning2, connectionSemaphore2, (ProxyServer) null);
      nettyResponseFuture2.getProxyServer();
  }"
2170,"  public String toString() {
    return ""NettyResponseFuture{"" + //
            ""currentRetry="" + currentRetry + //
            "",\n\tisDone="" + isDone + //
            "",\n\tisCancelled="" + isCancelled + //
            "",\n\tasyncHandler="" + asyncHandler + //
            "",\n\tnettyRequest="" + nettyRequest + //
            "",\n\tfuture="" + future + //
            "",\n\turi="" + getUri() + //
            "",\n\tkeepAlive="" + keepAlive + //
            "",\n\tredirectCount="" + redirectCount + //
            "",\n\ttimeoutsHolder="" + TIMEOUTS_HOLDER_FIELD.get(this) + //
            "",\n\tinAuth="" + inAuth + //
            "",\n\ttouch="" + touch + //
            '}';
  }","  public void test16()  throws Throwable  {
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      ChannelPoolPartitioning channelPoolPartitioning0 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      ConnectionSemaphore connectionSemaphore0 = mock(ConnectionSemaphore.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = new NettyResponseFuture<Object>((Request) null, asyncHandler0, (NettyRequest) null, (-1800), channelPoolPartitioning0, connectionSemaphore0, (ProxyServer) null);
      nettyResponseFuture0.incrementRetryAndCheck();
      nettyResponseFuture0.setCurrentRequest((Request) null);
      nettyResponseFuture0.isReplayPossible();
      nettyResponseFuture0.setCurrentRequest((Request) null);
      nettyResponseFuture0.setKeepAlive(true);
      nettyResponseFuture0.getProxyServer();
      nettyResponseFuture0.toCompletableFuture();
      AsyncHandler<TimeoutsHolder> asyncHandler1 = (AsyncHandler<TimeoutsHolder>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(asyncHandler1).toString();
      ChannelPoolPartitioning channelPoolPartitioning1 = mock(ChannelPoolPartitioning.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<TimeoutsHolder> nettyResponseFuture1 = new NettyResponseFuture<TimeoutsHolder>((Request) null, asyncHandler1, (NettyRequest) null, (-1423), channelPoolPartitioning1, (ConnectionSemaphore) null, (ProxyServer) null);
      nettyResponseFuture1.cancel(true);
      nettyResponseFuture1.touch();
      nettyResponseFuture0.setTargetRequest((Request) null);
      nettyResponseFuture1.setStreamConsumed(true);
      nettyResponseFuture1.isInAuth();
      // Undeclared exception!
      try { 
        nettyResponseFuture1.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.NettyResponseFuture"", e);
      }
  }"
2171,"  public int length() {
    return buf.readableBytes();
  }","  public void test0()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(624).when(byteBuf0).readableBytes();
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, false);
      int int0 = lazyResponseBodyPart0.length();
}"
2172,"  public int length() {
    return buf.readableBytes();
  }","  public void test1()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((-898)).when(byteBuf0).readableBytes();
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, false);
      int int0 = lazyResponseBodyPart0.length();
}"
2173,"  public ByteBuf getBuf() {
    return buf;
  }","  public void test2()  throws Throwable  {
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart((ByteBuf) null, true);
      ByteBuf byteBuf0 = lazyResponseBodyPart0.getBuf();
}"
2174,"  public byte[] getBodyPartBytes() {
    return ByteBufUtils.byteBuf2Bytes(buf.duplicate());
  }","  public void test3()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      UnpooledDirectByteBuf unpooledDirectByteBuf0 = new UnpooledDirectByteBuf(unpooledByteBufAllocator0, 0, 1418);
      ByteBuf byteBuf0 = unpooledDirectByteBuf0.writeMediumLE(0);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, true);
      byte[] byteArray0 = lazyResponseBodyPart0.getBodyPartBytes();
}"
2175,"  public byte[] getBodyPartBytes() {
    return ByteBufUtils.byteBuf2Bytes(buf.duplicate());
  }","  public void test4()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 0, 1);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(unpooledUnsafeHeapByteBuf0, true);
      byte[] byteArray0 = lazyResponseBodyPart0.getBodyPartBytes();
}"
2176,"  public int length() {
    return buf.readableBytes();
  }","  public void test5()  throws Throwable  {
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart((ByteBuf) null, false);
      // Undeclared exception!
      try { 
        lazyResponseBodyPart0.length();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.LazyResponseBodyPart"", e);
      }
  }"
2177,"  public ByteBuffer getBodyByteBuffer() {
    return buf.nioBuffer();
  }","  public void test6()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      ArrayList<ByteBuf> arrayList0 = new ArrayList<ByteBuf>(64);
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, true, 64, arrayList0);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.addFlattenedComponents(true, compositeByteBuf0);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(compositeByteBuf1, true);
      // Undeclared exception!
      try { 
        lazyResponseBodyPart0.getBodyByteBuffer();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
2178,"  public ByteBuffer getBodyByteBuffer() {
    return buf.nioBuffer();
  }","  public void test7()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, false, 690);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeChar(0);
      CompositeByteBuf compositeByteBuf2 = compositeByteBuf1.removeComponent(0);
      CompositeByteBuf compositeByteBuf3 = compositeByteBuf2.addComponents((Iterable<ByteBuf>) compositeByteBuf1);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(compositeByteBuf3, true);
      // Undeclared exception!
      try { 
        lazyResponseBodyPart0.getBodyByteBuffer();
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2179,"  public ByteBuffer getBodyByteBuffer() {
    return buf.nioBuffer();
  }","  public void test8()  throws Throwable  {
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart((ByteBuf) null, false);
      // Undeclared exception!
      try { 
        lazyResponseBodyPart0.getBodyByteBuffer();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.LazyResponseBodyPart"", e);
      }
  }"
2180,"  public ByteBuffer getBodyByteBuffer() {
    return buf.nioBuffer();
  }","  public void test9()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(true);
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(pooledByteBufAllocator0, false, 690);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeChar(0);
      compositeByteBuf1.removeComponent(0);
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(compositeByteBuf1, true);
      // Undeclared exception!
      try { 
        lazyResponseBodyPart0.getBodyByteBuffer();
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // index: 0, length: 2 (expected: range(0, 0))
         //
         verifyException(""io.netty.buffer.AbstractByteBuf"", e);
      }
  }"
2181,"  public int length() {
    return buf.readableBytes();
  }","  public void test10()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(byteBuf0).readableBytes();
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, false);
      int int0 = lazyResponseBodyPart0.length();
}"
2182,"  public ByteBuffer getBodyByteBuffer() {
    return buf.nioBuffer();
  }","  public void test11()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(byteBuf0).nioBuffer();
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, false);
      ByteBuffer byteBuffer0 = lazyResponseBodyPart0.getBodyByteBuffer();
}"
2183,"  public byte[] getBodyPartBytes() {
    return ByteBufUtils.byteBuf2Bytes(buf.duplicate());
  }","  public void test12()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuf) null).when(byteBuf0).duplicate();
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, false);
      // Undeclared exception!
      try { 
        lazyResponseBodyPart0.getBodyPartBytes();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.util.ByteBufUtils"", e);
      }
  }"
2184,"  public ByteBuf getBuf() {
    return buf;
  }","  public void test13()  throws Throwable  {
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(byteBuf0).toString();
      LazyResponseBodyPart lazyResponseBodyPart0 = new LazyResponseBodyPart(byteBuf0, false);
      ByteBuf byteBuf1 = lazyResponseBodyPart0.getBuf();
}"
2185,"  public boolean isReady() {
    return ready;
  }","  public void test0()  throws Throwable  {
      Attribute<ForkJoinTask<Object>> attribute0 = (Attribute<ForkJoinTask<Object>>) mock(Attribute.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(channel0).isActive();
      doReturn(attribute0).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      CloseWebSocketFrame closeWebSocketFrame0 = new CloseWebSocketFrame((-2), """");
      nettyWebSocket0.bufferFrame(closeWebSocketFrame0);
      nettyWebSocket0.processBufferedFrames();
}"
2186,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test1()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      Future<Void> future0 = nettyWebSocket0.sendTextFrame("""", false, 15);
}"
2187,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test2()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn("""", """").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendTextFrame("""");
}"
2188,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test3()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn(""Received continuation frame without an original text or binary frame, ignoring"").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      Future<Void> future0 = nettyWebSocket0.sendTextFrame(byteBuf0, true, 0);
}"
2189,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test4()  throws Throwable  {
      DefaultChannelProgressivePromise defaultChannelProgressivePromise0 = new DefaultChannelProgressivePromise((Channel) null);
      DelegatingChannelPromiseNotifier delegatingChannelPromiseNotifier0 = new DelegatingChannelPromiseNotifier(defaultChannelProgressivePromise0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(delegatingChannelPromiseNotifier0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      byte[] byteArray0 = new byte[7];
      Future<Void> future0 = nettyWebSocket0.sendPongFrame(byteArray0);
}"
2190,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test5()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf0).isReadable();
      doReturn(false).when(byteBuf0).release();
      Future<Void> future0 = nettyWebSocket0.sendPongFrame(byteBuf0);
}"
2191,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test6()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn(""(\""K%]#]<yLt"").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendPongFrame();
}"
2192,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test7()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      byte[] byteArray0 = new byte[3];
      Future<Void> future0 = nettyWebSocket0.sendPingFrame(byteArray0);
}"
2193,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test8()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn(""(\""K%]#]<yLt"").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      Future<Void> future0 = nettyWebSocket0.sendPingFrame(byteBuf0);
}"
2194,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test9()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendPingFrame();
}"
2195,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test10()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      byte[] byteArray0 = new byte[2];
      Future<Void> future0 = nettyWebSocket0.sendContinuationFrame(byteArray0, false, 0);
}"
2196,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test11()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn(""(\""K%]#]<yLt"", ""(\""K%]#]<yLt"").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      byte[] byteArray0 = new byte[0];
      Future<Void> future0 = nettyWebSocket0.sendContinuationFrame(byteArray0, true, 462);
}"
2197,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test12()  throws Throwable  {
      DefaultChannelProgressivePromise defaultChannelProgressivePromise0 = new DefaultChannelProgressivePromise((Channel) null);
      DelegatingChannelPromiseNotifier delegatingChannelPromiseNotifier0 = new DelegatingChannelPromiseNotifier(defaultChannelProgressivePromise0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(delegatingChannelPromiseNotifier0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendContinuationFrame("""", true, 2225);
}"
2198,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test13()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn(""~|t}bP"").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      Future<Void> future0 = nettyWebSocket0.sendContinuationFrame(byteBuf0, true, (-2563));
}"
2199,"  public Future<Void> sendCloseFrame() {
    return sendCloseFrame(1000, ""normal closure"");
  }","  public void test14()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(channel0).isOpen();
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendCloseFrame((-1918), """");
}"
2200,"  public Future<Void> sendCloseFrame() {
    return sendCloseFrame(1000, ""normal closure"");
  }","  public void test15()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(channel0).isOpen();
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      DefaultHttpHeaders defaultHttpHeaders0 = new DefaultHttpHeaders();
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, defaultHttpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendCloseFrame();
}"
2201,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test16()  throws Throwable  {
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel((ChannelId) null);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(embeddedChannel0, combinedHttpHeaders0);
      byte[] byteArray0 = new byte[2];
      Future<Void> future0 = nettyWebSocket0.sendBinaryFrame(byteArray0, false, 1616);
}"
2202,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test17()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn(""(\""K%]#]<yLt"", ""(\""K%]#]<yLt"", ""(\""K%]#]<yLt"").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      byte[] byteArray0 = new byte[0];
      Future<Void> future0 = nettyWebSocket0.sendBinaryFrame(byteArray0);
}"
2203,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test18()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn(""Received continuation frame without an original text or binary frame, ignoring"").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendBinaryFrame(byteBuf0, false, (int) (byte)32);
}"
2204,"  public boolean isOpen() {
    return channel.isOpen();
  }","  public void test19()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(channel0).isOpen();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      boolean boolean0 = nettyWebSocket0.isOpen();
}"
2205,"  public HttpHeaders getUpgradeHeaders() {
    return upgradeHeaders;
  }","  public void test20()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      DefaultHttpHeaders defaultHttpHeaders0 = new DefaultHttpHeaders();
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, defaultHttpHeaders0);
      HttpHeaders httpHeaders0 = nettyWebSocket0.getUpgradeHeaders();
}"
2206,"  public SocketAddress getRemoteAddress() {
    return channel.remoteAddress();
  }","  public void test21()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).remoteAddress();
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      SocketAddress socketAddress0 = nettyWebSocket0.getRemoteAddress();
}"
2207,"  public SocketAddress getLocalAddress() {
    return channel.localAddress();
  }","  public void test22()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((SocketAddress) null).when(channel0).localAddress();
      DefaultHttpHeaders defaultHttpHeaders0 = new DefaultHttpHeaders();
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, defaultHttpHeaders0);
      SocketAddress socketAddress0 = nettyWebSocket0.getLocalAddress();
}"
2208,"  public String toString() {
    return ""NettyWebSocket{channel="" + channel + '}';
  }","  public void test23()  throws Throwable  {
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel((ChannelId) null);
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(false);
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(embeddedChannel0, combinedHttpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.channel.AbstractChannel"", e);
      }
  }"
2209,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test24()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendTextFrame("""", true, 880);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2210,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test25()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendTextFrame((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2211,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test26()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendTextFrame(byteBuf0, true, (-1680));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2212,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test27()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendTextFrame((ByteBuf) null, true, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // data
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
2213,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test28()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendPongFrame(byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2214,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test29()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendPongFrame((ByteBuf) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.Unpooled"", e);
      }
  }"
2215,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test30()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(byteBuf0).isReadable();
      doReturn((ByteBuf) null).when(byteBuf0).slice();
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendPongFrame(byteBuf0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // data
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
2216,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test31()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendPongFrame();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2217,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test32()  throws Throwable  {
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[0];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(false, false, channelHandlerArray0);
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(embeddedChannel0, (HttpHeaders) null);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendPongFrame();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // channel not registered to an event loop
         //
         verifyException(""io.netty.channel.AbstractChannel"", e);
      }
  }"
2218,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test33()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendPingFrame((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.Unpooled"", e);
      }
  }"
2219,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test34()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendPingFrame(byteBuf0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2220,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test35()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendPingFrame((ByteBuf) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // data
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
2221,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test36()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendPingFrame();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2222,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test37()  throws Throwable  {
      DefaultHttpHeaders defaultHttpHeaders0 = new DefaultHttpHeaders();
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, defaultHttpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendContinuationFrame("""", false, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2223,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test38()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendContinuationFrame(byteBuf0, true, (-2154));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2224,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test39()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendContinuationFrame((ByteBuf) null, false, (-19));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // data
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
2225,"  public Future<Void> sendCloseFrame() {
    return sendCloseFrame(1000, ""normal closure"");
  }","  public void test40()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendCloseFrame((-737), ""TEXT"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2226,"  public Future<Void> sendCloseFrame() {
    return sendCloseFrame(1000, ""normal closure"");
  }","  public void test41()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendCloseFrame();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2227,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test42()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendBinaryFrame(byteArray0, true, 125);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2228,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test43()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendBinaryFrame(byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2229,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test44()  throws Throwable  {
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[0];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(false, false, channelHandlerArray0);
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(embeddedChannel0, (HttpHeaders) null);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendBinaryFrame(byteArray0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // channel not registered to an event loop
         //
         verifyException(""io.netty.channel.AbstractChannel"", e);
      }
  }"
2230,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test45()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendBinaryFrame(byteBuf0, false, 1304);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2231,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test46()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendBinaryFrame((ByteBuf) null, true, (-3752));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // data
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
2232,"  public void processBufferedFrames() {
    ready = true;
    if (bufferedFrames != null) {
      try {
        for (WebSocketFrame frame : bufferedFrames) {
          handleFrame(frame);
        }
      } finally {
        releaseBufferedFrames();
      }
      bufferedFrames = null;
    }
  }","  public void test47()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      ContinuationWebSocketFrame continuationWebSocketFrame0 = new ContinuationWebSocketFrame();
      nettyWebSocket0.bufferFrame(continuationWebSocketFrame0);
      continuationWebSocketFrame0.release(2);
      // Undeclared exception!
      try { 
        nettyWebSocket0.processBufferedFrames();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, decrement: 1
         //
         verifyException(""io.netty.util.internal.ReferenceCountUpdater"", e);
      }
  }"
2233,"  public boolean isOpen() {
    return channel.isOpen();
  }","  public void test48()  throws Throwable  {
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, (HttpHeaders) null);
      // Undeclared exception!
      try { 
        nettyWebSocket0.isOpen();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2234,"  public void handleFrame(WebSocketFrame frame) {
    if (frame instanceof TextWebSocketFrame) {
      onTextFrame((TextWebSocketFrame) frame);

    } else if (frame instanceof BinaryWebSocketFrame) {
      onBinaryFrame((BinaryWebSocketFrame) frame);

    } else if (frame instanceof CloseWebSocketFrame) {
      Channels.setDiscard(channel);
      CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
      onClose(closeFrame.statusCode(), closeFrame.reasonText());
      Channels.silentlyCloseChannel(channel);

    } else if (frame instanceof PingWebSocketFrame) {
      onPingFrame((PingWebSocketFrame) frame);

    } else if (frame instanceof PongWebSocketFrame) {
      onPongFrame((PongWebSocketFrame) frame);

    } else if (frame instanceof ContinuationWebSocketFrame) {
      onContinuationFrame((ContinuationWebSocketFrame) frame);
    }
  }","  public void test49()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      PingWebSocketFrame pingWebSocketFrame0 = new PingWebSocketFrame();
      pingWebSocketFrame0.release();
      // Undeclared exception!
      try { 
        nettyWebSocket0.handleFrame(pingWebSocketFrame0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException(""io.netty.buffer.ByteBufUtil"", e);
      }
  }"
2235,"  public SocketAddress getRemoteAddress() {
    return channel.remoteAddress();
  }","  public void test50()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.getRemoteAddress();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2236,"  public SocketAddress getLocalAddress() {
    return channel.localAddress();
  }","  public void test51()  throws Throwable  {
      CombinedHttpHeaders combinedHttpHeaders0 = new CombinedHttpHeaders(true);
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, combinedHttpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.getLocalAddress();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2237,"  public void bufferFrame(WebSocketFrame frame) {
    if (bufferedFrames == null) {
      bufferedFrames = new ArrayList<>(1);
    }
    frame.retain();
    bufferedFrames.add(frame);
  }","  public void test52()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      ContinuationWebSocketFrame continuationWebSocketFrame0 = new ContinuationWebSocketFrame();
      continuationWebSocketFrame0.release();
      // Undeclared exception!
      try { 
        nettyWebSocket0.bufferFrame(continuationWebSocketFrame0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // refCnt: 0, increment: 1
         //
         verifyException(""io.netty.util.internal.ReferenceCountUpdater"", e);
      }
  }"
2238,"  public void bufferFrame(WebSocketFrame frame) {
    if (bufferedFrames == null) {
      bufferedFrames = new ArrayList<>(1);
    }
    frame.retain();
    bufferedFrames.add(frame);
  }","  public void test53()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.bufferFrame((WebSocketFrame) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ws.NettyWebSocket"", e);
      }
  }"
2239,"  public WebSocket addWebSocketListener(WebSocketListener l) {
    listeners.add(l);
    return this;
  }","  public void test54()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.addWebSocketListener((WebSocketListener) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentLinkedQueue"", e);
      }
  }"
2240,"  public boolean isReady() {
    return ready;
  }","  public void test55()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      WebSocketFrame webSocketFrame0 = mock(WebSocketFrame.class, new ViolatedAssumptionAnswer());
      nettyWebSocket0.handleFrame(webSocketFrame0);
}"
2241,"  public boolean isReady() {
    return ready;
  }","  public void test56()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      ContinuationWebSocketFrame continuationWebSocketFrame0 = new ContinuationWebSocketFrame();
      nettyWebSocket0.handleFrame(continuationWebSocketFrame0);
}"
2242,"  public void handleFrame(WebSocketFrame frame) {
    if (frame instanceof TextWebSocketFrame) {
      onTextFrame((TextWebSocketFrame) frame);

    } else if (frame instanceof BinaryWebSocketFrame) {
      onBinaryFrame((BinaryWebSocketFrame) frame);

    } else if (frame instanceof CloseWebSocketFrame) {
      Channels.setDiscard(channel);
      CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
      onClose(closeFrame.statusCode(), closeFrame.reasonText());
      Channels.silentlyCloseChannel(channel);

    } else if (frame instanceof PingWebSocketFrame) {
      onPingFrame((PingWebSocketFrame) frame);

    } else if (frame instanceof PongWebSocketFrame) {
      onPongFrame((PongWebSocketFrame) frame);

    } else if (frame instanceof ContinuationWebSocketFrame) {
      onContinuationFrame((ContinuationWebSocketFrame) frame);
    }
  }","  public void test57()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      ByteBuf[] byteBufArray0 = new ByteBuf[0];
      CompositeByteBuf compositeByteBuf0 = new CompositeByteBuf(unpooledByteBufAllocator0, false, 59, byteBufArray0);
      CloseWebSocketFrame closeWebSocketFrame0 = new CloseWebSocketFrame(true, 1, compositeByteBuf0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.handleFrame(closeWebSocketFrame0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.Channels"", e);
      }
  }"
2243,"  public Future<Void> sendCloseFrame() {
    return sendCloseFrame(1000, ""normal closure"");
  }","  public void test58()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(channel0).isOpen();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendCloseFrame((-19), """");
}"
2244,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test59()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      Future<Void> future0 = nettyWebSocket0.sendBinaryFrame(byteBuf0, false, 0);
}"
2245,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test60()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      byte[] byteArray0 = new byte[2];
      Future<Void> future0 = nettyWebSocket0.sendBinaryFrame(byteArray0, false, 2749);
}"
2246,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test61()  throws Throwable  {
      DefaultChannelProgressivePromise defaultChannelProgressivePromise0 = new DefaultChannelProgressivePromise((Channel) null);
      DelegatingChannelPromiseNotifier delegatingChannelPromiseNotifier0 = new DelegatingChannelPromiseNotifier(defaultChannelProgressivePromise0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(delegatingChannelPromiseNotifier0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendTextFrame("""", true, 2225);
}"
2247,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test62()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn(""Received continuation frame without an original text or binary frame, ignoring"").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuf0).isReadable();
      doReturn(true).when(byteBuf0).release();
      Future<Void> future0 = nettyWebSocket0.sendPongFrame(byteBuf0);
}"
2248,"  public boolean isReady() {
    return ready;
  }","  public void test63()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(channel0).toString();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      WebSocketListener webSocketListener0 = mock(WebSocketListener.class, new ViolatedAssumptionAnswer());
      nettyWebSocket0.addWebSocketListener(webSocketListener0);
      PongWebSocketFrame pongWebSocketFrame0 = new PongWebSocketFrame();
      nettyWebSocket0.handleFrame(pongWebSocketFrame0);
}"
2249,"  public void handleFrame(WebSocketFrame frame) {
    if (frame instanceof TextWebSocketFrame) {
      onTextFrame((TextWebSocketFrame) frame);

    } else if (frame instanceof BinaryWebSocketFrame) {
      onBinaryFrame((BinaryWebSocketFrame) frame);

    } else if (frame instanceof CloseWebSocketFrame) {
      Channels.setDiscard(channel);
      CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
      onClose(closeFrame.statusCode(), closeFrame.reasonText());
      Channels.silentlyCloseChannel(channel);

    } else if (frame instanceof PingWebSocketFrame) {
      onPingFrame((PingWebSocketFrame) frame);

    } else if (frame instanceof PongWebSocketFrame) {
      onPongFrame((PongWebSocketFrame) frame);

    } else if (frame instanceof ContinuationWebSocketFrame) {
      onContinuationFrame((ContinuationWebSocketFrame) frame);
    }
  }","  public void test64()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(""Received continuation frame without an original text or binary fame, ignoring"").when(channel0).toString();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      WebSocketListener webSocketListener0 = mock(WebSocketListener.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket1 = (NettyWebSocket)nettyWebSocket0.addWebSocketListener(webSocketListener0);
      PingWebSocketFrame pingWebSocketFrame0 = new PingWebSocketFrame();
      nettyWebSocket1.handleFrame(pingWebSocketFrame0);
}"
2250,"  public boolean isReady() {
    return ready;
  }","  public void test65()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(channel0).toString();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      WebSocketListener webSocketListener0 = mock(WebSocketListener.class, new ViolatedAssumptionAnswer());
      nettyWebSocket0.addWebSocketListener(webSocketListener0);
      TextWebSocketFrame textWebSocketFrame0 = new TextWebSocketFrame(false, (byte) (-102), """");
      nettyWebSocket0.handleFrame(textWebSocketFrame0);
}"
2251,"  public void handleFrame(WebSocketFrame frame) {
    if (frame instanceof TextWebSocketFrame) {
      onTextFrame((TextWebSocketFrame) frame);

    } else if (frame instanceof BinaryWebSocketFrame) {
      onBinaryFrame((BinaryWebSocketFrame) frame);

    } else if (frame instanceof CloseWebSocketFrame) {
      Channels.setDiscard(channel);
      CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
      onClose(closeFrame.statusCode(), closeFrame.reasonText());
      Channels.silentlyCloseChannel(channel);

    } else if (frame instanceof PingWebSocketFrame) {
      onPingFrame((PingWebSocketFrame) frame);

    } else if (frame instanceof PongWebSocketFrame) {
      onPongFrame((PongWebSocketFrame) frame);

    } else if (frame instanceof ContinuationWebSocketFrame) {
      onContinuationFrame((ContinuationWebSocketFrame) frame);
    }
  }","  public void test66()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      TextWebSocketFrame textWebSocketFrame0 = new TextWebSocketFrame(false, (byte) (-102), """");
      nettyWebSocket0.handleFrame(textWebSocketFrame0);
      nettyWebSocket0.handleFrame(textWebSocketFrame0);
}"
2252,"  public void handleFrame(WebSocketFrame frame) {
    if (frame instanceof TextWebSocketFrame) {
      onTextFrame((TextWebSocketFrame) frame);

    } else if (frame instanceof BinaryWebSocketFrame) {
      onBinaryFrame((BinaryWebSocketFrame) frame);

    } else if (frame instanceof CloseWebSocketFrame) {
      Channels.setDiscard(channel);
      CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
      onClose(closeFrame.statusCode(), closeFrame.reasonText());
      Channels.silentlyCloseChannel(channel);

    } else if (frame instanceof PingWebSocketFrame) {
      onPingFrame((PingWebSocketFrame) frame);

    } else if (frame instanceof PongWebSocketFrame) {
      onPongFrame((PongWebSocketFrame) frame);

    } else if (frame instanceof ContinuationWebSocketFrame) {
      onContinuationFrame((ContinuationWebSocketFrame) frame);
    }
  }","  public void test67()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(channel0).toString();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      WebSocketListener webSocketListener0 = mock(WebSocketListener.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket1 = (NettyWebSocket)nettyWebSocket0.addWebSocketListener(webSocketListener0);
      BinaryWebSocketFrame binaryWebSocketFrame0 = new BinaryWebSocketFrame();
      nettyWebSocket1.handleFrame(binaryWebSocketFrame0);
}"
2253,"  public boolean isReady() {
    return ready;
  }","  public void test68()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      TextWebSocketFrame textWebSocketFrame0 = new TextWebSocketFrame(false, (byte) (-102), """");
      nettyWebSocket0.handleFrame(textWebSocketFrame0);
      BinaryWebSocketFrame binaryWebSocketFrame0 = new BinaryWebSocketFrame();
      nettyWebSocket0.handleFrame(binaryWebSocketFrame0);
}"
2254,"  public void onClose(int code, String reason) {
    try {
      for (WebSocketListener l : listeners) {
        try {
          l.onClose(this, code, reason);
        } catch (Throwable t) {
          l.onError(t);
        }
      }
      listeners.clear();
    } finally {
      releaseBufferedFrames();
    }
  }","  public void test69()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(channel0).toString();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      WebSocketListener webSocketListener0 = mock(WebSocketListener.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket1 = (NettyWebSocket)nettyWebSocket0.addWebSocketListener(webSocketListener0);
      nettyWebSocket1.onClose(1619, ""!"");
}"
2255,"  public void onError(Throwable t) {
    try {
      for (WebSocketListener listener : listeners) {
        try {
          listener.onError(t);
        } catch (Throwable t2) {
          LOGGER.error(""WebSocketListener.onError crash"", t2);
        }
      }
    } finally {
      releaseBufferedFrames();
    }
  }","  public void test70()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      WebSocketListener webSocketListener0 = mock(WebSocketListener.class, new ViolatedAssumptionAnswer());
      WebSocket webSocket0 = nettyWebSocket0.addWebSocketListener(webSocketListener0);
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      nettyWebSocket0.onError(throwable0);
}"
2256,"  public void handleFrame(WebSocketFrame frame) {
    if (frame instanceof TextWebSocketFrame) {
      onTextFrame((TextWebSocketFrame) frame);

    } else if (frame instanceof BinaryWebSocketFrame) {
      onBinaryFrame((BinaryWebSocketFrame) frame);

    } else if (frame instanceof CloseWebSocketFrame) {
      Channels.setDiscard(channel);
      CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
      onClose(closeFrame.statusCode(), closeFrame.reasonText());
      Channels.silentlyCloseChannel(channel);

    } else if (frame instanceof PingWebSocketFrame) {
      onPingFrame((PingWebSocketFrame) frame);

    } else if (frame instanceof PongWebSocketFrame) {
      onPongFrame((PongWebSocketFrame) frame);

    } else if (frame instanceof ContinuationWebSocketFrame) {
      onContinuationFrame((ContinuationWebSocketFrame) frame);
    }
  }","  public void test71()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 0, 0);
      BinaryWebSocketFrame binaryWebSocketFrame0 = new BinaryWebSocketFrame(false, 0, unpooledUnsafeHeapByteBuf0);
      nettyWebSocket0.handleFrame(binaryWebSocketFrame0);
}"
2257,"  public void handleFrame(WebSocketFrame frame) {
    if (frame instanceof TextWebSocketFrame) {
      onTextFrame((TextWebSocketFrame) frame);

    } else if (frame instanceof BinaryWebSocketFrame) {
      onBinaryFrame((BinaryWebSocketFrame) frame);

    } else if (frame instanceof CloseWebSocketFrame) {
      Channels.setDiscard(channel);
      CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
      onClose(closeFrame.statusCode(), closeFrame.reasonText());
      Channels.silentlyCloseChannel(channel);

    } else if (frame instanceof PingWebSocketFrame) {
      onPingFrame((PingWebSocketFrame) frame);

    } else if (frame instanceof PongWebSocketFrame) {
      onPongFrame((PongWebSocketFrame) frame);

    } else if (frame instanceof ContinuationWebSocketFrame) {
      onContinuationFrame((ContinuationWebSocketFrame) frame);
    }
  }","  public void test72()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      TextWebSocketFrame textWebSocketFrame0 = new TextWebSocketFrame("""");
      nettyWebSocket0.handleFrame(textWebSocketFrame0);
}"
2258,"  public boolean isReady() {
    return ready;
  }","  public void test73()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      nettyWebSocket0.processBufferedFrames();
      boolean boolean0 = nettyWebSocket0.isReady();
}"
2259,"  public void processBufferedFrames() {
    ready = true;
    if (bufferedFrames != null) {
      try {
        for (WebSocketFrame frame : bufferedFrames) {
          handleFrame(frame);
        }
      } finally {
        releaseBufferedFrames();
      }
      bufferedFrames = null;
    }
  }","  public void test74()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((Attribute) null).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      CloseWebSocketFrame closeWebSocketFrame0 = new CloseWebSocketFrame((-2), """");
      nettyWebSocket0.bufferFrame(closeWebSocketFrame0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.processBufferedFrames();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.Channels"", e);
      }
  }"
2260,"  public boolean isReady() {
    return ready;
  }","  public void test75()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      WebSocketFrame webSocketFrame0 = mock(WebSocketFrame.class, new ViolatedAssumptionAnswer());
      doReturn((WebSocketFrame) null).when(webSocketFrame0).retain();
      nettyWebSocket0.bufferFrame(webSocketFrame0);
      WebSocketFrame webSocketFrame1 = mock(WebSocketFrame.class, new ViolatedAssumptionAnswer());
      doReturn((WebSocketFrame) null).when(webSocketFrame1).retain();
      nettyWebSocket0.bufferFrame(webSocketFrame1);
}"
2261,"  public Future<Void> sendCloseFrame() {
    return sendCloseFrame(1000, ""normal closure"");
  }","  public void test76()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(channel0).isOpen();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendCloseFrame((int) (byte)8, ""tES{&h/{1Sr"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // WebSocket close status code does NOT comply with RFC-6455: 8
         //
         verifyException(""io.netty.handler.codec.http.websocketx.CloseWebSocketFrame"", e);
      }
  }"
2262,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test77()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      // Undeclared exception!
      try { 
        nettyWebSocket0.sendContinuationFrame((byte[]) null, true, 270);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""io.netty.buffer.Unpooled"", e);
      }
  }"
2263,"  public SocketAddress getLocalAddress() {
    return channel.localAddress();
  }","  public void test78()  throws Throwable  {
      SocketAddress socketAddress0 = mock(SocketAddress.class, new ViolatedAssumptionAnswer());
      doReturn(""org.asynchttpclient.netty.ws.NettyWebSocket$FragmentedFrameType"").when(socketAddress0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(socketAddress0).when(channel0).localAddress();
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      SocketAddress socketAddress1 = nettyWebSocket0.getLocalAddress();
}"
2264,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test79()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      Future<Void> future0 = nettyWebSocket0.sendPongFrame();
}"
2265,"  public String toString() {
    return ""NettyWebSocket{channel="" + channel + '}';
  }","  public void test80()  throws Throwable  {
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket((Channel) null, httpHeaders0);
      String string0 = nettyWebSocket0.toString();
}"
2266,"  public boolean isReady() {
    return ready;
  }","  public void test81()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(channel0).toString();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      NettyWebSocket nettyWebSocket1 = (NettyWebSocket)nettyWebSocket0.removeWebSocketListener((WebSocketListener) null);
}"
2267,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test82()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      Future<Void> future0 = nettyWebSocket0.sendContinuationFrame(byteBuf0, false, 2);
}"
2268,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test83()  throws Throwable  {
      ChannelFuture channelFuture0 = mock(ChannelFuture.class, new ViolatedAssumptionAnswer());
      doReturn(""Received continuation frame without an original text or binary frame, ignoring"", ""O!"").when(channelFuture0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelFuture0).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      byte[] byteArray0 = new byte[6];
      Future<Void> future0 = nettyWebSocket0.sendPingFrame(byteArray0);
}"
2269,"  public Future<Void> sendCloseFrame() {
    return sendCloseFrame(1000, ""normal closure"");
  }","  public void test84()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(channel0).isOpen();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendCloseFrame();
}"
2270,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test85()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      Future<Void> future0 = nettyWebSocket0.sendPingFrame(byteBuf0);
}"
2271,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test86()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      ByteBuf byteBuf0 = mock(ByteBuf.class, new ViolatedAssumptionAnswer());
      Future<Void> future0 = nettyWebSocket0.sendTextFrame(byteBuf0, false, (-2));
}"
2272,"  public SocketAddress getRemoteAddress() {
    return channel.remoteAddress();
  }","  public void test87()  throws Throwable  {
      SocketAddress socketAddress0 = mock(SocketAddress.class, new ViolatedAssumptionAnswer());
      doReturn(""org.asynchttpclient.netty.ws.NettyWebSocket$FragmentedFrameType"").when(socketAddress0).toString();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(socketAddress0).when(channel0).remoteAddress();
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      SocketAddress socketAddress1 = nettyWebSocket0.getRemoteAddress();
}"
2273,"  public Future<Void> sendPingFrame() {
    return channel.writeAndFlush(new PingWebSocketFrame());
  }","  public void test88()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendPingFrame();
}"
2274,"  public boolean isOpen() {
    return channel.isOpen();
  }","  public void test89()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(channel0).isOpen();
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      boolean boolean0 = nettyWebSocket0.isOpen();
}"
2275,"  public boolean isReady() {
    return ready;
  }","  public void test90()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      boolean boolean0 = nettyWebSocket0.isReady();
}"
2276,"  public Future<Void> sendPongFrame() {
    return channel.writeAndFlush(new PongWebSocketFrame());
  }","  public void test91()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      byte[] byteArray0 = new byte[9];
      Future<Void> future0 = nettyWebSocket0.sendPongFrame(byteArray0);
}"
2277,"  public Future<Void> sendContinuationFrame(String payload, boolean finalFragment, int rsv) {
    return channel.writeAndFlush(new ContinuationWebSocketFrame(finalFragment, rsv, payload));
  }","  public void test92()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendContinuationFrame("""", true, 2225);
}"
2278,"  public Future<Void> sendTextFrame(String message) {
    return sendTextFrame(message, true, 0);
  }","  public void test93()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      Future<Void> future0 = nettyWebSocket0.sendTextFrame("""");
}"
2279,"  public Future<Void> sendBinaryFrame(byte[] payload) {
    return sendBinaryFrame(payload, true, 0);
  }","  public void test94()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelFuture) null).when(channel0).writeAndFlush(any());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, httpHeaders0);
      byte[] byteArray0 = new byte[9];
      Future<Void> future0 = nettyWebSocket0.sendBinaryFrame(byteArray0);
}"
2280,"  public HttpHeaders getUpgradeHeaders() {
    return upgradeHeaders;
  }","  public void test95()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyWebSocket nettyWebSocket0 = new NettyWebSocket(channel0, (HttpHeaders) null);
      HttpHeaders httpHeaders0 = nettyWebSocket0.getUpgradeHeaders();
}"
2281,,"  public void test0()  throws Throwable  {
      NioTransportFactory[] nioTransportFactoryArray0 = NioTransportFactory.values();
}"
2282,,"  public void test1()  throws Throwable  {
      NioTransportFactory.valueOf(""INSTANCE"");
  }"
2283,"  public NioEventLoopGroup newEventLoopGroup(int ioThreadsCount, ThreadFactory threadFactory) {
    return new NioEventLoopGroup(ioThreadsCount, threadFactory);
  }","  public void test2()  throws Throwable  {
      NioTransportFactory nioTransportFactory0 = NioTransportFactory.INSTANCE;
      // Undeclared exception!
      nioTransportFactory0.newEventLoopGroup(1170, (ThreadFactory) null);
  }"
2284,"  public NioEventLoopGroup newEventLoopGroup(int ioThreadsCount, ThreadFactory threadFactory) {
    return new NioEventLoopGroup(ioThreadsCount, threadFactory);
  }","  public void test3()  throws Throwable  {
      NioTransportFactory nioTransportFactory0 = NioTransportFactory.INSTANCE;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null, (Thread) null, (Thread) null, (Thread) null, (Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      // Undeclared exception!
      try { 
        nioTransportFactory0.newEventLoopGroup(3059, threadFactory0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // failed to create a child event loop
         //
         verifyException(""io.netty.util.concurrent.MultithreadEventExecutorGroup"", e);
      }
  }"
2285,"  public NioEventLoopGroup newEventLoopGroup(int ioThreadsCount, ThreadFactory threadFactory) {
    return new NioEventLoopGroup(ioThreadsCount, threadFactory);
  }","  public void test4()  throws Throwable  {
      NioTransportFactory nioTransportFactory0 = NioTransportFactory.INSTANCE;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nioTransportFactory0.newEventLoopGroup((-1), threadFactory0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // nThreads: -1 (expected: > 0)
         //
         verifyException(""io.netty.util.concurrent.MultithreadEventExecutorGroup"", e);
      }
  }"
2286,"  public NioEventLoopGroup newEventLoopGroup(int ioThreadsCount, ThreadFactory threadFactory) {
    return new NioEventLoopGroup(ioThreadsCount, threadFactory);
  }","  public void test5()  throws Throwable  {
      NioTransportFactory nioTransportFactory0 = NioTransportFactory.INSTANCE;
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory(""_dkgI,|mNv\""HG-eK"", 2870);
      NioEventLoopGroup nioEventLoopGroup0 = nioTransportFactory0.newEventLoopGroup(0, rxThreadFactory0);
}"
2287,"  public NioSocketChannel newChannel() {
    return new NioSocketChannel();
  }","  public void test6()  throws Throwable  {
      NioTransportFactory nioTransportFactory0 = NioTransportFactory.INSTANCE;
      // Undeclared exception!
      try { 
        nioTransportFactory0.newChannel();
        fail(""Expecting exception: NoClassDefFoundError"");
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.DefaultChannelId
         //
         verifyException(""io.netty.channel.AbstractChannel"", e);
      }
  }"
2288,"  public void releaseChannelLock(Object partitionKey) {
    freeChannels.release();
  }","  public void test0()  throws Throwable  {
      MaxConnectionSemaphore maxConnectionSemaphore0 = new MaxConnectionSemaphore(Integer.MAX_VALUE, Integer.MAX_VALUE);
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      // Undeclared exception!
      try { 
        maxConnectionSemaphore0.releaseChannelLock(mockIOException0);
        fail(""Expecting exception: Error"");
      } catch(Error e) {
         //
         // Maximum permit count exceeded
         //
         verifyException(""java.util.concurrent.Semaphore$Sync"", e);
      }
  }"
2289,"  public void acquireChannelLock(Object partitionKey) throws IOException {
    try {
      if (!freeChannels.tryAcquire(acquireTimeout, TimeUnit.MILLISECONDS)) {
        throw tooManyConnections;
      }
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }","  public void test1()  throws Throwable  {
      MaxConnectionSemaphore maxConnectionSemaphore0 = new MaxConnectionSemaphore(1, 1);
      Object object0 = new Object();
      maxConnectionSemaphore0.acquireChannelLock(object0);
      try { 
        maxConnectionSemaphore0.acquireChannelLock(object0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Too many connections: 1
         //
         verifyException(""org.asynchttpclient.netty.channel.MaxConnectionSemaphore"", e);
      }
  }"
2290,"  public void acquireChannelLock(Object partitionKey) throws IOException {
    try {
      if (!freeChannels.tryAcquire(acquireTimeout, TimeUnit.MILLISECONDS)) {
        throw tooManyConnections;
      }
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }","  public void test2()  throws Throwable  {
      MaxConnectionSemaphore maxConnectionSemaphore0 = new MaxConnectionSemaphore((-1), (-123));
      MockIOException mockIOException0 = new MockIOException();
      maxConnectionSemaphore0.acquireChannelLock(mockIOException0);
  }"
2291,"  public void releaseChannelLock(Object partitionKey) {
    freeChannels.release();
  }","  public void test3()  throws Throwable  {
      MaxConnectionSemaphore maxConnectionSemaphore0 = new MaxConnectionSemaphore((-1), (-123));
      maxConnectionSemaphore0.releaseChannelLock(maxConnectionSemaphore0);
  }"
2292,"  public ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
    int acquireFreeChannelTimeout = Math.max(0, config.getAcquireFreeChannelTimeout());
    int maxConnections = config.getMaxConnections();
    int maxConnectionsPerHost = config.getMaxConnectionsPerHost();

    if (maxConnections > 0 && maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }
    if (maxConnections > 0) {
      return new MaxConnectionSemaphore(maxConnections, acquireFreeChannelTimeout);
    }
    if (maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }

    return new NoopConnectionSemaphore();
  }","  public void test0()  throws Throwable  {
      DefaultConnectionSemaphoreFactory defaultConnectionSemaphoreFactory0 = new DefaultConnectionSemaphoreFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-2549)).when(asyncHttpClientConfig0).getAcquireFreeChannelTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(39).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = defaultConnectionSemaphoreFactory0.newConnectionSemaphore(asyncHttpClientConfig0);
}"
2293,"  public ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
    int acquireFreeChannelTimeout = Math.max(0, config.getAcquireFreeChannelTimeout());
    int maxConnections = config.getMaxConnections();
    int maxConnectionsPerHost = config.getMaxConnectionsPerHost();

    if (maxConnections > 0 && maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }
    if (maxConnections > 0) {
      return new MaxConnectionSemaphore(maxConnections, acquireFreeChannelTimeout);
    }
    if (maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }

    return new NoopConnectionSemaphore();
  }","  public void test1()  throws Throwable  {
      DefaultConnectionSemaphoreFactory defaultConnectionSemaphoreFactory0 = new DefaultConnectionSemaphoreFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asyncHttpClientConfig0).getAcquireFreeChannelTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = defaultConnectionSemaphoreFactory0.newConnectionSemaphore(asyncHttpClientConfig0);
}"
2294,"  public ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
    int acquireFreeChannelTimeout = Math.max(0, config.getAcquireFreeChannelTimeout());
    int maxConnections = config.getMaxConnections();
    int maxConnectionsPerHost = config.getMaxConnectionsPerHost();

    if (maxConnections > 0 && maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }
    if (maxConnections > 0) {
      return new MaxConnectionSemaphore(maxConnections, acquireFreeChannelTimeout);
    }
    if (maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }

    return new NoopConnectionSemaphore();
  }","  public void test2()  throws Throwable  {
      DefaultConnectionSemaphoreFactory defaultConnectionSemaphoreFactory0 = new DefaultConnectionSemaphoreFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-144)).when(asyncHttpClientConfig0).getAcquireFreeChannelTimeout();
      doReturn(2240).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(988).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = defaultConnectionSemaphoreFactory0.newConnectionSemaphore(asyncHttpClientConfig0);
}"
2295,"  public ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
    int acquireFreeChannelTimeout = Math.max(0, config.getAcquireFreeChannelTimeout());
    int maxConnections = config.getMaxConnections();
    int maxConnectionsPerHost = config.getMaxConnectionsPerHost();

    if (maxConnections > 0 && maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }
    if (maxConnections > 0) {
      return new MaxConnectionSemaphore(maxConnections, acquireFreeChannelTimeout);
    }
    if (maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }

    return new NoopConnectionSemaphore();
  }","  public void test3()  throws Throwable  {
      DefaultConnectionSemaphoreFactory defaultConnectionSemaphoreFactory0 = new DefaultConnectionSemaphoreFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-2549)).when(asyncHttpClientConfig0).getAcquireFreeChannelTimeout();
      doReturn(335).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = defaultConnectionSemaphoreFactory0.newConnectionSemaphore(asyncHttpClientConfig0);
}"
2296,"  public ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
    int acquireFreeChannelTimeout = Math.max(0, config.getAcquireFreeChannelTimeout());
    int maxConnections = config.getMaxConnections();
    int maxConnectionsPerHost = config.getMaxConnectionsPerHost();

    if (maxConnections > 0 && maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }
    if (maxConnections > 0) {
      return new MaxConnectionSemaphore(maxConnections, acquireFreeChannelTimeout);
    }
    if (maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }

    return new NoopConnectionSemaphore();
  }","  public void test4()  throws Throwable  {
      DefaultConnectionSemaphoreFactory defaultConnectionSemaphoreFactory0 = new DefaultConnectionSemaphoreFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(335).when(asyncHttpClientConfig0).getAcquireFreeChannelTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn((-2549)).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = defaultConnectionSemaphoreFactory0.newConnectionSemaphore(asyncHttpClientConfig0);
}"
2297,"  public ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
    int acquireFreeChannelTimeout = Math.max(0, config.getAcquireFreeChannelTimeout());
    int maxConnections = config.getMaxConnections();
    int maxConnectionsPerHost = config.getMaxConnectionsPerHost();

    if (maxConnections > 0 && maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }
    if (maxConnections > 0) {
      return new MaxConnectionSemaphore(maxConnections, acquireFreeChannelTimeout);
    }
    if (maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }

    return new NoopConnectionSemaphore();
  }","  public void test5()  throws Throwable  {
      DefaultConnectionSemaphoreFactory defaultConnectionSemaphoreFactory0 = new DefaultConnectionSemaphoreFactory();
      // Undeclared exception!
      try { 
        defaultConnectionSemaphoreFactory0.newConnectionSemaphore((AsyncHttpClientConfig) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.DefaultConnectionSemaphoreFactory"", e);
      }
  }"
2298,"  public ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
    int acquireFreeChannelTimeout = Math.max(0, config.getAcquireFreeChannelTimeout());
    int maxConnections = config.getMaxConnections();
    int maxConnectionsPerHost = config.getMaxConnectionsPerHost();

    if (maxConnections > 0 && maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }
    if (maxConnections > 0) {
      return new MaxConnectionSemaphore(maxConnections, acquireFreeChannelTimeout);
    }
    if (maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }

    return new NoopConnectionSemaphore();
  }","  public void test6()  throws Throwable  {
      DefaultConnectionSemaphoreFactory defaultConnectionSemaphoreFactory0 = new DefaultConnectionSemaphoreFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(285).when(asyncHttpClientConfig0).getAcquireFreeChannelTimeout();
      doReturn((-322)).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn((-322)).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = defaultConnectionSemaphoreFactory0.newConnectionSemaphore(asyncHttpClientConfig0);
}"
2299,"  public ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
    int acquireFreeChannelTimeout = Math.max(0, config.getAcquireFreeChannelTimeout());
    int maxConnections = config.getMaxConnections();
    int maxConnectionsPerHost = config.getMaxConnectionsPerHost();

    if (maxConnections > 0 && maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }
    if (maxConnections > 0) {
      return new MaxConnectionSemaphore(maxConnections, acquireFreeChannelTimeout);
    }
    if (maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }

    return new NoopConnectionSemaphore();
  }","  public void test7()  throws Throwable  {
      DefaultConnectionSemaphoreFactory defaultConnectionSemaphoreFactory0 = new DefaultConnectionSemaphoreFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((-322)).when(asyncHttpClientConfig0).getAcquireFreeChannelTimeout();
      doReturn(285).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn((-322)).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = defaultConnectionSemaphoreFactory0.newConnectionSemaphore(asyncHttpClientConfig0);
}"
2300,"  public ConnectionSemaphore newConnectionSemaphore(AsyncHttpClientConfig config) {
    int acquireFreeChannelTimeout = Math.max(0, config.getAcquireFreeChannelTimeout());
    int maxConnections = config.getMaxConnections();
    int maxConnectionsPerHost = config.getMaxConnectionsPerHost();

    if (maxConnections > 0 && maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }
    if (maxConnections > 0) {
      return new MaxConnectionSemaphore(maxConnections, acquireFreeChannelTimeout);
    }
    if (maxConnectionsPerHost > 0) {
      return new CombinedConnectionSemaphore(maxConnections, maxConnectionsPerHost, acquireFreeChannelTimeout);
    }

    return new NoopConnectionSemaphore();
  }","  public void test8()  throws Throwable  {
      DefaultConnectionSemaphoreFactory defaultConnectionSemaphoreFactory0 = new DefaultConnectionSemaphoreFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(285).when(asyncHttpClientConfig0).getAcquireFreeChannelTimeout();
      doReturn((-322)).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(285).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      ConnectionSemaphore connectionSemaphore0 = defaultConnectionSemaphoreFactory0.newConnectionSemaphore(asyncHttpClientConfig0);
}"
2301,"  public int availablePermits() {
    return Integer.MAX_VALUE;
  }","  public void test0()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      int int0 = infiniteSemaphore0.availablePermits();
}"
2302,"  public int availablePermits() {
    return Integer.MAX_VALUE;
  }","  public void test1()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquire();
}"
2303,"  public boolean isFair() {
    return true;
  }","  public void test2()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      boolean boolean0 = infiniteSemaphore0.isFair();
}"
2304,"  protected Collection<Thread> getQueuedThreads() {
    return Collections.emptyList();
  }","  public void test3()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      Collection<Thread> collection0 = infiniteSemaphore0.getQueuedThreads();
}"
2305,"  public boolean tryAcquire() {
    return true;
  }","  public void test4()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.release(Integer.MAX_VALUE);
}"
2306,"  public boolean tryAcquire() {
    return true;
  }","  public void test5()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      boolean boolean0 = infiniteSemaphore0.tryAcquire(Integer.MAX_VALUE);
}"
2307,"  public boolean tryAcquire() {
    return true;
  }","  public void test6()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = infiniteSemaphore0.tryAcquire((long) Integer.MAX_VALUE, timeUnit0);
}"
2308,"  public boolean tryAcquire() {
    return true;
  }","  public void test7()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      boolean boolean0 = infiniteSemaphore0.tryAcquire();
}"
2309,"  public boolean tryAcquire() {
    return true;
  }","  public void test8()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.reducePermits(Integer.MAX_VALUE);
}"
2310,"  public int drainPermits() {
    return Integer.MAX_VALUE;
  }","  public void test9()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      int int0 = infiniteSemaphore0.drainPermits();
}"
2311,"  public int availablePermits() {
    return Integer.MAX_VALUE;
  }","  public void test10()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquireUninterruptibly(Integer.MAX_VALUE);
}"
2312,"  public int availablePermits() {
    return Integer.MAX_VALUE;
  }","  public void test11()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquireUninterruptibly();
}"
2313,"  public boolean tryAcquire() {
    return true;
  }","  public void test12()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      boolean boolean0 = infiniteSemaphore0.tryAcquire(Integer.MAX_VALUE, (long) Integer.MAX_VALUE, timeUnit0);
}"
2314,"  public int drainPermits() {
    return Integer.MAX_VALUE;
  }","  public void test13()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.release();
}"
2315,"  public boolean isFair() {
    return true;
  }","  public void test14()  throws Throwable  {
      InfiniteSemaphore infiniteSemaphore0 = InfiniteSemaphore.INSTANCE;
      infiniteSemaphore0.acquire(Integer.MAX_VALUE);
}"
2316,"  public void acquireChannelLock(Object partitionKey) throws IOException {
    try {
      if (!getFreeConnectionsForHost(partitionKey).tryAcquire(acquireTimeout, TimeUnit.MILLISECONDS)) {
        throw tooManyConnectionsPerHost;
      }
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }","  public void test0()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(1100, 4531);
      PerHostConnectionSemaphore perHostConnectionSemaphore1 = new PerHostConnectionSemaphore(47, 3846);
      perHostConnectionSemaphore0.acquireChannelLock(perHostConnectionSemaphore1);
      Semaphore semaphore0 = new Semaphore(3846, true);
      perHostConnectionSemaphore0.acquireChannelLock(semaphore0);
      perHostConnectionSemaphore0.acquireChannelLock(perHostConnectionSemaphore1);
      PerHostConnectionSemaphore perHostConnectionSemaphore2 = new PerHostConnectionSemaphore(47, (-1));
      perHostConnectionSemaphore2.acquireChannelLock(perHostConnectionSemaphore0);
      perHostConnectionSemaphore2.acquireChannelLock(perHostConnectionSemaphore1);
      perHostConnectionSemaphore1.acquireChannelLock(perHostConnectionSemaphore2);
      perHostConnectionSemaphore1.releaseChannelLock(""io.netty.handler.ssl.JdkAlpnSslEngine$AlpnSelector"");
      // Undeclared exception!
      try { 
        perHostConnectionSemaphore1.acquireChannelLock((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2317,"  protected Semaphore getFreeConnectionsForHost(Object partitionKey) {
    return maxConnectionsPerHost > 0 ?
            freeChannelsPerHost.computeIfAbsent(partitionKey, pk -> new Semaphore(maxConnectionsPerHost)) :
            InfiniteSemaphore.INSTANCE;
  }","  public void test1()  throws Throwable  {
      int int0 = 12;
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(124, 12);
      Object object0 = new Object();
      perHostConnectionSemaphore0.getFreeConnectionsForHost(object0);
      String string0 = ""4%Nr+3So9Fi]V,q"";
      Semaphore semaphore0 = perHostConnectionSemaphore0.getFreeConnectionsForHost(""4%Nr+3So9Fi]V,q"");
      perHostConnectionSemaphore0.acquireChannelLock(semaphore0);
      perHostConnectionSemaphore0.getFreeConnectionsForHost(""4%Nr+3So9Fi]V,q"");
      // Undeclared exception!
      try { 
        perHostConnectionSemaphore0.getFreeConnectionsForHost((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2318,"  public void releaseChannelLock(Object partitionKey) {
    getFreeConnectionsForHost(partitionKey).release();
  }","  public void test2()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(3562, 1388);
      Semaphore semaphore0 = new Semaphore(1388);
      semaphore0.isFair();
      perHostConnectionSemaphore0.acquireChannelLock(semaphore0);
      perHostConnectionSemaphore0.releaseChannelLock(semaphore0);
      PerHostConnectionSemaphore perHostConnectionSemaphore1 = new PerHostConnectionSemaphore(2340, (-3267));
      perHostConnectionSemaphore0.releaseChannelLock(perHostConnectionSemaphore1);
      perHostConnectionSemaphore1.getFreeConnectionsForHost(semaphore0);
      PerHostConnectionSemaphore perHostConnectionSemaphore2 = new PerHostConnectionSemaphore(2340, 3562);
      Object object0 = new Object();
      Semaphore semaphore1 = perHostConnectionSemaphore2.getFreeConnectionsForHost(object0);
      semaphore1.acquireUninterruptibly();
      perHostConnectionSemaphore1.releaseChannelLock(semaphore1);
      PerHostConnectionSemaphore perHostConnectionSemaphore3 = new PerHostConnectionSemaphore((-1814), 0);
      perHostConnectionSemaphore1.getFreeConnectionsForHost(perHostConnectionSemaphore3);
      perHostConnectionSemaphore3.acquireChannelLock(perHostConnectionSemaphore1);
      perHostConnectionSemaphore1.getFreeConnectionsForHost(perHostConnectionSemaphore0);
      Semaphore semaphore2 = new Semaphore(3562);
      semaphore2.release(1388);
      perHostConnectionSemaphore2.getFreeConnectionsForHost(semaphore2);
      perHostConnectionSemaphore2.acquireChannelLock(semaphore1);
      PerHostConnectionSemaphore perHostConnectionSemaphore4 = new PerHostConnectionSemaphore(2340, 819);
      perHostConnectionSemaphore3.getFreeConnectionsForHost(perHostConnectionSemaphore4);
      // Undeclared exception!
      try { 
        perHostConnectionSemaphore4.releaseChannelLock((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2319,"  public void acquireChannelLock(Object partitionKey) throws IOException {
    try {
      if (!getFreeConnectionsForHost(partitionKey).tryAcquire(acquireTimeout, TimeUnit.MILLISECONDS)) {
        throw tooManyConnectionsPerHost;
      }
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }","  public void test3()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(1, 0);
      Object object0 = new Object();
      Semaphore semaphore0 = perHostConnectionSemaphore0.getFreeConnectionsForHost(object0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      perHostConnectionSemaphore0.getFreeConnectionsForHost(timeUnit0);
      semaphore0.tryAcquire(1, 0L, timeUnit0);
      semaphore0.isFair();
      semaphore0.tryAcquire();
      perHostConnectionSemaphore0.releaseChannelLock(semaphore0);
      Object object1 = new Object();
      perHostConnectionSemaphore0.acquireChannelLock(object1);
      Object object2 = new Object();
      TimeUnit timeUnit1 = TimeUnit.HOURS;
      semaphore0.tryAcquire((long) 0, timeUnit1);
      perHostConnectionSemaphore0.releaseChannelLock(object2);
      try { 
        perHostConnectionSemaphore0.acquireChannelLock(object1);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Too many connections: 1
         //
         verifyException(""org.asynchttpclient.netty.channel.PerHostConnectionSemaphore"", e);
      }
  }"
2320,"  public void releaseChannelLock(Object partitionKey) {
    getFreeConnectionsForHost(partitionKey).release();
  }","  public void test4()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(4, 4);
      Object object0 = new Object();
      perHostConnectionSemaphore0.acquireChannelLock(object0);
      PerHostConnectionSemaphore perHostConnectionSemaphore1 = new PerHostConnectionSemaphore(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Object object1 = new Object();
      perHostConnectionSemaphore1.getFreeConnectionsForHost(perHostConnectionSemaphore0);
      perHostConnectionSemaphore1.getFreeConnectionsForHost(object1);
      // Undeclared exception!
      try { 
        perHostConnectionSemaphore1.releaseChannelLock(object1);
        fail(""Expecting exception: Error"");
      } catch(Error e) {
         //
         // Maximum permit count exceeded
         //
         verifyException(""java.util.concurrent.Semaphore$Sync"", e);
      }
  }"
2321,"  public void releaseChannelLock(Object partitionKey) {
    getFreeConnectionsForHost(partitionKey).release();
  }","  public void test5()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(2533, 2533);
      PerHostConnectionSemaphore perHostConnectionSemaphore1 = new PerHostConnectionSemaphore(0, 0);
      perHostConnectionSemaphore0.releaseChannelLock(perHostConnectionSemaphore1);
      Object object0 = null;
      // Undeclared exception!
      try { 
        perHostConnectionSemaphore0.releaseChannelLock((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2322,"  public void releaseChannelLock(Object partitionKey) {
    getFreeConnectionsForHost(partitionKey).release();
  }","  public void test6()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(0, (-3069));
      PerHostConnectionSemaphore perHostConnectionSemaphore1 = new PerHostConnectionSemaphore(0, 0);
      Semaphore semaphore0 = perHostConnectionSemaphore1.getFreeConnectionsForHost(perHostConnectionSemaphore0);
      perHostConnectionSemaphore0.releaseChannelLock(semaphore0);
  }"
2323,"  protected Semaphore getFreeConnectionsForHost(Object partitionKey) {
    return maxConnectionsPerHost > 0 ?
            freeChannelsPerHost.computeIfAbsent(partitionKey, pk -> new Semaphore(maxConnectionsPerHost)) :
            InfiniteSemaphore.INSTANCE;
  }","  public void test7()  throws Throwable  {
      int int0 = 2566;
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(2566, (-3588));
      Object object0 = null;
      // Undeclared exception!
      try { 
        perHostConnectionSemaphore0.getFreeConnectionsForHost((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2324,"  public void releaseChannelLock(Object partitionKey) {
    getFreeConnectionsForHost(partitionKey).release();
  }","  public void test8()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore((-1109), 3157);
      perHostConnectionSemaphore0.getFreeConnectionsForHost(""ZuEjxD4-^YdI+}oc"");
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("""", mockThrowable0);
      MockIOException mockIOException0 = new MockIOException(""ZuEjxD4-^YdI+}oc"", mockThrowable1);
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      mockIOException1.fillInStackTrace();
      perHostConnectionSemaphore0.releaseChannelLock(mockIOException1);
      perHostConnectionSemaphore0.getFreeConnectionsForHost(mockIOException0);
      perHostConnectionSemaphore0.getFreeConnectionsForHost(""org.asynchttpclient.netty.channel.PerHostConnectionSemaphore"");
      Object object0 = new Object();
      perHostConnectionSemaphore0.releaseChannelLock(object0);
  }"
2325,"  public void acquireChannelLock(Object partitionKey) throws IOException {
    try {
      if (!getFreeConnectionsForHost(partitionKey).tryAcquire(acquireTimeout, TimeUnit.MILLISECONDS)) {
        throw tooManyConnectionsPerHost;
      }
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }","  public void test9()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore((-184), (-89));
      Object object0 = new Object();
      perHostConnectionSemaphore0.releaseChannelLock(object0);
      Object object1 = new Object();
      Semaphore semaphore0 = perHostConnectionSemaphore0.getFreeConnectionsForHost(object1);
      Object object2 = new Object();
      perHostConnectionSemaphore0.getFreeConnectionsForHost(object2);
      semaphore0.acquireUninterruptibly();
      semaphore0.tryAcquire();
      Semaphore semaphore1 = perHostConnectionSemaphore0.getFreeConnectionsForHost(semaphore0);
      semaphore1.availablePermits();
      Object object3 = new Object();
      PerHostConnectionSemaphore perHostConnectionSemaphore1 = new PerHostConnectionSemaphore(1, 1120);
      perHostConnectionSemaphore0.getFreeConnectionsForHost(perHostConnectionSemaphore1);
      semaphore1.acquire();
      perHostConnectionSemaphore0.releaseChannelLock(object3);
      PerHostConnectionSemaphore perHostConnectionSemaphore2 = new PerHostConnectionSemaphore((-729), (-184));
      perHostConnectionSemaphore2.releaseChannelLock(semaphore1);
      perHostConnectionSemaphore0.releaseChannelLock(perHostConnectionSemaphore2);
      perHostConnectionSemaphore0.releaseChannelLock(semaphore1);
      perHostConnectionSemaphore2.acquireChannelLock((Object) null);
      MockIOException mockIOException0 = new MockIOException();
      Semaphore semaphore2 = perHostConnectionSemaphore2.getFreeConnectionsForHost(mockIOException0);
      semaphore2.acquireUninterruptibly();
      perHostConnectionSemaphore1.acquireChannelLock(semaphore2);
      TooManyConnectionsPerHostException tooManyConnectionsPerHostException0 = (TooManyConnectionsPerHostException)perHostConnectionSemaphore1.tooManyConnectionsPerHost;
      perHostConnectionSemaphore0.releaseChannelLock(tooManyConnectionsPerHostException0);
      try { 
        perHostConnectionSemaphore1.acquireChannelLock(semaphore0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Too many connections: 1
         //
         verifyException(""org.asynchttpclient.netty.channel.PerHostConnectionSemaphore"", e);
      }
  }"
2326,"  protected Semaphore getFreeConnectionsForHost(Object partitionKey) {
    return maxConnectionsPerHost > 0 ?
            freeChannelsPerHost.computeIfAbsent(partitionKey, pk -> new Semaphore(maxConnectionsPerHost)) :
            InfiniteSemaphore.INSTANCE;
  }","  public void test10()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(6, 6);
      Object object0 = new Object();
      Semaphore semaphore0 = perHostConnectionSemaphore0.getFreeConnectionsForHost(object0);
}"
2327,"  protected Semaphore getFreeConnectionsForHost(Object partitionKey) {
    return maxConnectionsPerHost > 0 ?
            freeChannelsPerHost.computeIfAbsent(partitionKey, pk -> new Semaphore(maxConnectionsPerHost)) :
            InfiniteSemaphore.INSTANCE;
  }","  public void test11()  throws Throwable  {
      PerHostConnectionSemaphore perHostConnectionSemaphore0 = new PerHostConnectionSemaphore(0, 1437);
      PerHostConnectionSemaphore perHostConnectionSemaphore1 = new PerHostConnectionSemaphore(1437, 1437);
      perHostConnectionSemaphore0.acquireChannelLock(perHostConnectionSemaphore1);
      perHostConnectionSemaphore0.getFreeConnectionsForHost((Object) null);
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable();
      mockIOException0.initCause(mockThrowable0);
      perHostConnectionSemaphore0.getFreeConnectionsForHost(mockIOException0);
      Semaphore semaphore0 = perHostConnectionSemaphore1.getFreeConnectionsForHost(perHostConnectionSemaphore0);
}"
2328,"  KQueueTransportFactory() {
    try {
      Class.forName(""io.netty.channel.kqueue.KQueue"");
    } catch (ClassNotFoundException e) {
      throw new IllegalStateException(""The kqueue transport is not available"");
    }
    if (!KQueue.isAvailable()) {
      throw new IllegalStateException(""The kqueue transport is not supported"");
    }
  }","  public void test0()  throws Throwable  {
      KQueueTransportFactory kQueueTransportFactory0 = null;
      try {
        kQueueTransportFactory0 = new KQueueTransportFactory();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // The kqueue transport is not supported
         //
         verifyException(""org.asynchttpclient.netty.channel.KQueueTransportFactory"", e);
      }
  }"
2329,"  public void releaseChannelLock(Object partitionKey) {
  }","  public void test0()  throws Throwable  {
      NoopConnectionSemaphore noopConnectionSemaphore0 = new NoopConnectionSemaphore();
      noopConnectionSemaphore0.releaseChannelLock("""");
  }"
2330,"  public void acquireChannelLock(Object partitionKey) throws IOException {
  }","  public void test1()  throws Throwable  {
      NoopConnectionSemaphore noopConnectionSemaphore0 = new NoopConnectionSemaphore();
      noopConnectionSemaphore0.acquireChannelLock("""");
  }"
2331,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test0()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, (Timer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2332,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test1()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""yu?E)]q`H<@p"";
      stringArray0[1] = ""XV,"";
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn(channelPool0).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(1).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn(0, 0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0, 0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0, 0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn(sslContext0, (SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(threadFactory0, (ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn(false).when(asyncHttpClientConfig0).isSoKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2333,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""c:!L-+T:G'2q$(:13"";
      stringArray0[1] = ""6pmH"";
      stringArray0[2] = ""ahc-http"";
      stringArray0[3] = ""IhuUI/~ '"";
      stringArray0[4] = ""7^:"";
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2334,"  public static boolean isSslHandlerConfigured(ChannelPipeline pipeline) {
    return pipeline.get(SSL_HANDLER) != null;
  }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChannelManager.isSslHandlerConfigured((ChannelPipeline) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2335,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn(channelPool0).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn(0, 0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0, 0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0, 0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn(sslContext0, (SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(threadFactory0, (ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn(false).when(asyncHttpClientConfig0).isSoKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2336,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = """";
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2337,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test6()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";+6QVF-iI"";
      stringArray0[1] = """";
      stringArray0[2] = ""Adding key: {} for channel {}"";
      stringArray0[3] = ""l'C`^gWC1oGy? 'e3B"";
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2338,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test7()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[0] = "".m}T'"";
      stringArray0[1] = ""hA~[5u}rP@G#CA"";
      stringArray0[2] = ""io.netty.util.internal.IntegerHolder"";
      stringArray0[3] = ""unavailable"";
      stringArray0[4] = """";
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBufAllocator) null).when(asyncHttpClientConfig0).getAllocator();
      doReturn((Map) null).when(asyncHttpClientConfig0).getChannelOptions();
      doReturn(channelPool0).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(0).when(asyncHttpClientConfig0).getConnectTimeout();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn((-1)).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn(0).when(asyncHttpClientConfig0).getIoThreadsCount();
      doReturn(0, 0).when(asyncHttpClientConfig0).getSoLinger();
      doReturn(0, 0).when(asyncHttpClientConfig0).getSoRcvBuf();
      doReturn(0, 0).when(asyncHttpClientConfig0).getSoSndBuf();
      doReturn(sslContext0, (SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(threadFactory0, (ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn(false).when(asyncHttpClientConfig0).isSoKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isSoReuseAddress();
      doReturn(false).when(asyncHttpClientConfig0).isTcpNoDelay();
      doReturn(false).when(asyncHttpClientConfig0).isUseNativeTransport();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2339,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test8()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""rl.TbQH8o"";
      stringArray0[1] = """";
      stringArray0[2] = ""'%JjB0T>KXj"";
      stringArray0[3] = ""9uil~O2HWi\""p]O"";
      stringArray0[4] = """";
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2340,"  public static boolean isSslHandlerConfigured(ChannelPipeline pipeline) {
    return pipeline.get(SSL_HANDLER) != null;
  }","  public void test9()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      doReturn(channelHandler0).when(channelPipeline0).get(anyString());
      boolean boolean0 = ChannelManager.isSslHandlerConfigured(channelPipeline0);
}"
2341,"  public static boolean isSslHandlerConfigured(ChannelPipeline pipeline) {
    return pipeline.get(SSL_HANDLER) != null;
  }","  public void test10()  throws Throwable  {
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelHandler) null).when(channelPipeline0).get(anyString());
      boolean boolean0 = ChannelManager.isSslHandlerConfigured(channelPipeline0);
}"
2342,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test11()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory1 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(channelPool0).when(asyncHttpClientConfig0).getChannelPool();
      doReturn((EventLoopGroup) null).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn(sslEngineFactory0, sslEngineFactory1).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(threadFactory0, (ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn(true).when(asyncHttpClientConfig0).isUseNativeTransport();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No suitable native transport (epoll or kqueue) available
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2343,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test12()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      DefaultEventLoopGroup defaultEventLoopGroup0 = new DefaultEventLoopGroup(0);
      SslContext sslContext1 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      RxThreadFactory rxThreadFactory0 = new RxThreadFactory(""io.netty.channel.embedded.EmbeddedSocketAddress"");
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(channelPool0).when(asyncHttpClientConfig0).getChannelPool();
      doReturn(defaultEventLoopGroup0, defaultEventLoopGroup0).when(asyncHttpClientConfig0).getEventLoopGroup();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn(sslContext0, sslContext1).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(threadFactory0, rxThreadFactory0).when(asyncHttpClientConfig0).getThreadFactory();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unknown event loop group DefaultEventLoopGroup
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2344,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test13()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPool) null).when(asyncHttpClientConfig0).getChannelPool();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn(0).when(asyncHttpClientConfig0).getHandshakeTimeout();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn((SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn((ThreadFactory) null).when(asyncHttpClientConfig0).getThreadFactory();
      doReturn((String) null).when(asyncHttpClientConfig0).getThreadPoolName();
      doReturn(false).when(asyncHttpClientConfig0).isFilterInsecureCipherSuites();
      doReturn(false).when(asyncHttpClientConfig0).isKeepAlive();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseOpenSsl();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // poolName
         //
         verifyException(""io.netty.util.internal.ObjectUtil"", e);
      }
  }"
2345,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test14()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""U#wzTG"";
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2346,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test15()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      Uri uri0 = mock(Uri.class, new ViolatedAssumptionAnswer());
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      Timer timer1 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2347,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[4];
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, (Timer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2348,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2349,"  public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {

    this.config = config;

    this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
    try {
      this.sslEngineFactory.init(config);
    } catch (SSLException e) {
      throw new RuntimeException(""Could not initialize sslEngineFactory"", e);
    }

    ChannelPool channelPool = config.getChannelPool();
    if (channelPool == null) {
      if (config.isKeepAlive()) {
        channelPool = new DefaultChannelPool(config, nettyTimer);
      } else {
        channelPool = NoopChannelPool.INSTANCE;
      }
    }
    this.channelPool = channelPool;

    openChannels = new DefaultChannelGroup(""asyncHttpClient"", GlobalEventExecutor.INSTANCE);

    handshakeTimeout = config.getHandshakeTimeout();

    // check if external EventLoopGroup is defined
    ThreadFactory threadFactory = config.getThreadFactory() != null ? config.getThreadFactory() : new DefaultThreadFactory(config.getThreadPoolName());
    allowReleaseEventLoopGroup = config.getEventLoopGroup() == null;
    TransportFactory<? extends Channel, ? extends EventLoopGroup> transportFactory;
    if (allowReleaseEventLoopGroup) {
      if (config.isUseNativeTransport()) {
        transportFactory = getNativeTransportFactory();
      } else {
        transportFactory = NioTransportFactory.INSTANCE;
      }
      eventLoopGroup = transportFactory.newEventLoopGroup(config.getIoThreadsCount(), threadFactory);

    } else {
      eventLoopGroup = config.getEventLoopGroup();

      if (eventLoopGroup instanceof NioEventLoopGroup) {
        transportFactory = NioTransportFactory.INSTANCE;
      } else if (eventLoopGroup instanceof EpollEventLoopGroup) {
        transportFactory = new EpollTransportFactory();
      } else if (eventLoopGroup instanceof KQueueEventLoopGroup) {
        transportFactory = new KQueueTransportFactory();
      } else {
        throw new IllegalArgumentException(""Unknown event loop group "" + eventLoopGroup.getClass().getSimpleName());
      }
    }

    httpBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);
    wsBootstrap = newBootstrap(transportFactory, eventLoopGroup, config);

    // for reactive streams
    httpBootstrap.option(ChannelOption.AUTO_READ, false);
  }","  public void test18()  throws Throwable  {
      ChannelPool channelPool0 = mock(ChannelPool.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      SslEngineFactory sslEngineFactory0 = mock(SslEngineFactory.class, new ViolatedAssumptionAnswer());
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslEngineFactory0, (SslEngineFactory) null).when(asyncHttpClientConfig0).getSslEngineFactory();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = null;
      try {
        channelManager0 = new ChannelManager(asyncHttpClientConfig0, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.ChannelManager"", e);
      }
  }"
2350,"  public boolean offer(Channel channel, Object partitionKey) {
    if (isClosed.get())
      return false;

    long now = unpreciseMillisTime();

    if (isTtlExpired(channel, now))
      return false;

    boolean offered = offer0(channel, partitionKey, now);
    if (connectionTtlEnabled && offered) {
      registerChannelCreation(channel, partitionKey, now);
    }

    return offered;
  }","  public void test0()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      Timeout timeout0 = mock(Timeout.class, new ViolatedAssumptionAnswer());
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn(timeout0).when(timer0).newTimeout(any(io.netty.util.TimerTask.class) , anyLong() , any(java.util.concurrent.TimeUnit.class));
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, timer0, 0);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      System.setCurrentTimeMillis(0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
}"
2351,"  public Channel poll(Object partitionKey) {

    IdleChannel idleChannel = null;
    ConcurrentLinkedDeque<IdleChannel> partition = partitions.get(partitionKey);
    if (partition != null) {
      while (idleChannel == null) {
        idleChannel = poolLeaseStrategy.lease(partition);

        if (idleChannel == null)
          // pool is empty
          break;
        else if (!Channels.isChannelActive(idleChannel.channel)) {
          idleChannel = null;
          LOGGER.trace(""Channel is inactive, probably remotely closed!"");
        } else if (!idleChannel.takeOwnership()) {
          idleChannel = null;
          LOGGER.trace(""Couldn't take ownership of channel, probably in the process of being expired!"");
        }
      }
    }
    return idleChannel != null ? idleChannel.channel : null;
  }","  public void test1()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 31);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      embeddedChannel0.deregister();
      defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      Channel channel0 = defaultChannelPool0.poll(channelDuplexHandler0);
}"
2352,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test2()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 31);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      embeddedChannel0.deregister();
      defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      Channel channel0 = defaultChannelPool0.poll(channelDuplexHandler0);
}"
2353,"  public boolean removeAll(Channel channel) {
    ChannelCreation creation = connectionTtlEnabled ? channel.attr(CHANNEL_CREATION_ATTRIBUTE_KEY).get() : null;
    return !isClosed.get() && creation != null && partitions.get(creation.partitionKey).remove(new IdleChannel(channel, Long.MIN_VALUE));
  }","  public void test3()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 0);
      // Undeclared exception!
      try { 
        defaultChannelPool0.removeAll((Channel) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.DefaultChannelPool"", e);
      }
  }"
2354,"  public Channel poll(Object partitionKey) {

    IdleChannel idleChannel = null;
    ConcurrentLinkedDeque<IdleChannel> partition = partitions.get(partitionKey);
    if (partition != null) {
      while (idleChannel == null) {
        idleChannel = poolLeaseStrategy.lease(partition);

        if (idleChannel == null)
          // pool is empty
          break;
        else if (!Channels.isChannelActive(idleChannel.channel)) {
          idleChannel = null;
          LOGGER.trace(""Channel is inactive, probably remotely closed!"");
        } else if (!idleChannel.takeOwnership()) {
          idleChannel = null;
          LOGGER.trace(""Couldn't take ownership of channel, probably in the process of being expired!"");
        }
      }
    }
    return idleChannel != null ? idleChannel.channel : null;
  }","  public void test4()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asyncHttpClientConfig0).getConnectionPoolCleanerPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(asyncHttpClientConfig0, (Timer) null);
      // Undeclared exception!
      try { 
        defaultChannelPool0.poll((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2355,"  public boolean offer(Channel channel, Object partitionKey) {
    if (isClosed.get())
      return false;

    long now = unpreciseMillisTime();

    if (isTtlExpired(channel, now))
      return false;

    boolean offered = offer0(channel, partitionKey, now);
    if (connectionTtlEnabled && offered) {
      registerChannelCreation(channel, partitionKey, now);
    }

    return offered;
  }","  public void test5()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      Timeout timeout0 = mock(Timeout.class, new ViolatedAssumptionAnswer());
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn(timeout0).when(timer0).newTimeout(any(io.netty.util.TimerTask.class) , anyLong() , any(java.util.concurrent.TimeUnit.class));
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(6, 6, defaultChannelPool_PoolLeaseStrategy0, timer0, 6);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      // Undeclared exception!
      try { 
        defaultChannelPool0.offer(embeddedChannel0, channelHandlerArray0[2]);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2356,"  public boolean offer(Channel channel, Object partitionKey) {
    if (isClosed.get())
      return false;

    long now = unpreciseMillisTime();

    if (isTtlExpired(channel, now))
      return false;

    boolean offered = offer0(channel, partitionKey, now);
    if (connectionTtlEnabled && offered) {
      registerChannelCreation(channel, partitionKey, now);
    }

    return offered;
  }","  public void test6()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asyncHttpClientConfig0).getConnectionPoolCleanerPeriod();
      doReturn(0).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn(0).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(asyncHttpClientConfig0, timer0);
      // Undeclared exception!
      try { 
        defaultChannelPool0.offer((Channel) null, defaultChannelPool0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // channel
         //
         verifyException(""org.asynchttpclient.util.Assertions"", e);
      }
  }"
2357,"  public Map<String, Long> getIdleChannelCountPerHost() {
    return partitions
            .values()
            .stream()
            .flatMap(ConcurrentLinkedDeque::stream)
            .map(idle -> idle.getChannel().remoteAddress())
            .filter(a -> a.getClass() == InetSocketAddress.class)
            .map(a -> (InetSocketAddress) a)
            .map(InetSocketAddress::getHostString)
            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
  }","  public void test7()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      Timeout timeout0 = mock(Timeout.class, new ViolatedAssumptionAnswer());
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn(timeout0).when(timer0).newTimeout(any(io.netty.util.TimerTask.class) , anyLong() , any(java.util.concurrent.TimeUnit.class));
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, timer0, 0);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      embeddedChannel0.finish();
      // Undeclared exception!
      try { 
        defaultChannelPool0.getIdleChannelCountPerHost();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.DefaultChannelPool"", e);
      }
  }"
2358,"  public void flushPartitions(Predicate<Object> predicate) {
    for (Map.Entry<Object, ConcurrentLinkedDeque<IdleChannel>> partitionsEntry : partitions.entrySet()) {
      Object partitionKey = partitionsEntry.getKey();
      if (predicate.test(partitionKey))
        flushPartition(partitionKey, partitionsEntry.getValue());
    }
  }","  public void test8()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      Timeout timeout0 = mock(Timeout.class, new ViolatedAssumptionAnswer());
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn(timeout0).when(timer0).newTimeout(any(io.netty.util.TimerTask.class) , anyLong() , any(java.util.concurrent.TimeUnit.class));
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, timer0, 0);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      // Undeclared exception!
      try { 
        defaultChannelPool0.flushPartitions((Predicate<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.DefaultChannelPool"", e);
      }
  }"
2359,"  public DefaultChannelPool(AsyncHttpClientConfig config, Timer hashedWheelTimer) {
    this(config.getPooledConnectionIdleTimeout(),
            config.getConnectionTtl(),
            hashedWheelTimer,
            config.getConnectionPoolCleanerPeriod());
  }","  public void test9()  throws Throwable  {
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = null;
      try {
        defaultChannelPool0 = new DefaultChannelPool((AsyncHttpClientConfig) null, timer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.DefaultChannelPool"", e);
      }
  }"
2360,"  public DefaultChannelPool(AsyncHttpClientConfig config, Timer hashedWheelTimer) {
    this(config.getPooledConnectionIdleTimeout(),
            config.getConnectionTtl(),
            hashedWheelTimer,
            config.getConnectionPoolCleanerPeriod());
  }","  public void test10()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(asyncHttpClientConfig0).getConnectionPoolCleanerPeriod();
      doReturn(1477).when(asyncHttpClientConfig0).getConnectionTtl();
      doReturn(1270).when(asyncHttpClientConfig0).getPooledConnectionIdleTimeout();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer(2048L, timeUnit0);
      hashedWheelTimer0.stop();
      DefaultChannelPool defaultChannelPool0 = null;
      try {
        defaultChannelPool0 = new DefaultChannelPool(asyncHttpClientConfig0, hashedWheelTimer0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // cannot be started once stopped
         //
         verifyException(""io.netty.util.HashedWheelTimer"", e);
      }
  }"
2361,"  public DefaultChannelPool(AsyncHttpClientConfig config, Timer hashedWheelTimer) {
    this(config.getPooledConnectionIdleTimeout(),
            config.getConnectionTtl(),
            hashedWheelTimer,
            config.getConnectionPoolCleanerPeriod());
  }","  public void test11()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      DefaultChannelPool defaultChannelPool0 = null;
      try {
        defaultChannelPool0 = new DefaultChannelPool(903, (-265), defaultChannelPool_PoolLeaseStrategy0, (Timer) null, 650);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.DefaultChannelPool"", e);
      }
  }"
2362,"  public DefaultChannelPool(AsyncHttpClientConfig config, Timer hashedWheelTimer) {
    this(config.getPooledConnectionIdleTimeout(),
            config.getConnectionTtl(),
            hashedWheelTimer,
            config.getConnectionPoolCleanerPeriod());
  }","  public void test12()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer(706, timeUnit0, 706);
      hashedWheelTimer0.stop();
      DefaultChannelPool defaultChannelPool0 = null;
      try {
        defaultChannelPool0 = new DefaultChannelPool(706, 706, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 1266);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // cannot be started once stopped
         //
         verifyException(""io.netty.util.HashedWheelTimer"", e);
      }
  }"
2363,"  public DefaultChannelPool(AsyncHttpClientConfig config, Timer hashedWheelTimer) {
    this(config.getPooledConnectionIdleTimeout(),
            config.getConnectionTtl(),
            hashedWheelTimer,
            config.getConnectionPoolCleanerPeriod());
  }","  public void test13()  throws Throwable  {
      DefaultChannelPool defaultChannelPool0 = null;
      try {
        defaultChannelPool0 = new DefaultChannelPool(42, 1683, (Timer) null, (-3317));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.DefaultChannelPool"", e);
      }
  }"
2364,"  public DefaultChannelPool(AsyncHttpClientConfig config, Timer hashedWheelTimer) {
    this(config.getPooledConnectionIdleTimeout(),
            config.getConnectionTtl(),
            hashedWheelTimer,
            config.getConnectionPoolCleanerPeriod());
  }","  public void test14()  throws Throwable  {
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      hashedWheelTimer0.stop();
      DefaultChannelPool defaultChannelPool0 = null;
      try {
        defaultChannelPool0 = new DefaultChannelPool(72, 58, hashedWheelTimer0, 72);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // cannot be started once stopped
         //
         verifyException(""io.netty.util.HashedWheelTimer"", e);
      }
  }"
2365,"  public boolean offer(Channel channel, Object partitionKey) {
    if (isClosed.get())
      return false;

    long now = unpreciseMillisTime();

    if (isTtlExpired(channel, now))
      return false;

    boolean offered = offer0(channel, partitionKey, now);
    if (connectionTtlEnabled && offered) {
      registerChannelCreation(channel, partitionKey, now);
    }

    return offered;
  }","  public void test15()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 2);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
}"
2366,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test16()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 2);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      IncludeExcludeSet<DefaultChannelPool, Object> includeExcludeSet0 = new IncludeExcludeSet<DefaultChannelPool, Object>();
      includeExcludeSet0.include(defaultChannelPool0);
      defaultChannelPool0.flushPartitions(includeExcludeSet0);
}"
2367,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test17()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-751), (-751), defaultChannelPool_PoolLeaseStrategy0, timer0, (-751));
      defaultChannelPool0.destroy();
      defaultChannelPool0.destroy();
}"
2368,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test18()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 31);
      boolean boolean0 = defaultChannelPool0.isOpen();
}"
2369,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test19()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-751), (-751), defaultChannelPool_PoolLeaseStrategy0, timer0, (-751));
}"
2370,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test20()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-751), (-751), defaultChannelPool_PoolLeaseStrategy0, timer0, (-751));
      defaultChannelPool0.destroy();
      boolean boolean0 = defaultChannelPool0.isOpen();
}"
2371,"  public Channel poll(Object partitionKey) {

    IdleChannel idleChannel = null;
    ConcurrentLinkedDeque<IdleChannel> partition = partitions.get(partitionKey);
    if (partition != null) {
      while (idleChannel == null) {
        idleChannel = poolLeaseStrategy.lease(partition);

        if (idleChannel == null)
          // pool is empty
          break;
        else if (!Channels.isChannelActive(idleChannel.channel)) {
          idleChannel = null;
          LOGGER.trace(""Channel is inactive, probably remotely closed!"");
        } else if (!idleChannel.takeOwnership()) {
          idleChannel = null;
          LOGGER.trace(""Couldn't take ownership of channel, probably in the process of being expired!"");
        }
      }
    }
    return idleChannel != null ? idleChannel.channel : null;
  }","  public void test21()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 31);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      Channel channel0 = defaultChannelPool0.poll(channelDuplexHandler0);
}"
2372,"  public boolean removeAll(Channel channel) {
    ChannelCreation creation = connectionTtlEnabled ? channel.attr(CHANNEL_CREATION_ATTRIBUTE_KEY).get() : null;
    return !isClosed.get() && creation != null && partitions.get(creation.partitionKey).remove(new IdleChannel(channel, Long.MIN_VALUE));
  }","  public void test22()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 31);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      Channel channel0 = defaultChannelPool0.poll(channelDuplexHandler0);
      boolean boolean0 = defaultChannelPool0.removeAll(embeddedChannel0);
}"
2373,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test23()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-751), (-751), defaultChannelPool_PoolLeaseStrategy0, timer0, (-751));
}"
2374,"  public boolean removeAll(Channel channel) {
    ChannelCreation creation = connectionTtlEnabled ? channel.attr(CHANNEL_CREATION_ATTRIBUTE_KEY).get() : null;
    return !isClosed.get() && creation != null && partitions.get(creation.partitionKey).remove(new IdleChannel(channel, Long.MIN_VALUE));
  }","  public void test24()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-751), (-751), defaultChannelPool_PoolLeaseStrategy0, timer0, (-751));
      defaultChannelPool0.destroy();
      boolean boolean0 = defaultChannelPool0.removeAll((Channel) null);
}"
2375,"  public boolean removeAll(Channel channel) {
    ChannelCreation creation = connectionTtlEnabled ? channel.attr(CHANNEL_CREATION_ATTRIBUTE_KEY).get() : null;
    return !isClosed.get() && creation != null && partitions.get(creation.partitionKey).remove(new IdleChannel(channel, Long.MIN_VALUE));
  }","  public void test25()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.removeAll(embeddedChannel0);
}"
2376,"  public boolean removeAll(Channel channel) {
    ChannelCreation creation = connectionTtlEnabled ? channel.attr(CHANNEL_CREATION_ATTRIBUTE_KEY).get() : null;
    return !isClosed.get() && creation != null && partitions.get(creation.partitionKey).remove(new IdleChannel(channel, Long.MIN_VALUE));
  }","  public void test26()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.removeAll(embeddedChannel0);
}"
2377,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test27()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.removeAll(embeddedChannel0);
}"
2378,"  public boolean offer(Channel channel, Object partitionKey) {
    if (isClosed.get())
      return false;

    long now = unpreciseMillisTime();

    if (isTtlExpired(channel, now))
      return false;

    boolean offered = offer0(channel, partitionKey, now);
    if (connectionTtlEnabled && offered) {
      registerChannelCreation(channel, partitionKey, now);
    }

    return offered;
  }","  public void test28()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      Timeout timeout0 = mock(Timeout.class, new ViolatedAssumptionAnswer());
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn(timeout0).when(timer0).newTimeout(any(io.netty.util.TimerTask.class) , anyLong() , any(java.util.concurrent.TimeUnit.class));
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, timer0, 31);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
}"
2379,"  public Channel poll(Object partitionKey) {

    IdleChannel idleChannel = null;
    ConcurrentLinkedDeque<IdleChannel> partition = partitions.get(partitionKey);
    if (partition != null) {
      while (idleChannel == null) {
        idleChannel = poolLeaseStrategy.lease(partition);

        if (idleChannel == null)
          // pool is empty
          break;
        else if (!Channels.isChannelActive(idleChannel.channel)) {
          idleChannel = null;
          LOGGER.trace(""Channel is inactive, probably remotely closed!"");
        } else if (!idleChannel.takeOwnership()) {
          idleChannel = null;
          LOGGER.trace(""Couldn't take ownership of channel, probably in the process of being expired!"");
        }
      }
    }
    return idleChannel != null ? idleChannel.channel : null;
  }","  public void test29()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      Timeout timeout0 = mock(Timeout.class, new ViolatedAssumptionAnswer());
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn(timeout0).when(timer0).newTimeout(any(io.netty.util.TimerTask.class) , anyLong() , any(java.util.concurrent.TimeUnit.class));
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, timer0, 31);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      embeddedChannel0.finish();
      Channel channel0 = defaultChannelPool0.poll(channelDuplexHandler0);
}"
2380,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test30()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      Timeout timeout0 = mock(Timeout.class, new ViolatedAssumptionAnswer());
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn(timeout0).when(timer0).newTimeout(any(io.netty.util.TimerTask.class) , anyLong() , any(java.util.concurrent.TimeUnit.class));
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, timer0, 31);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      embeddedChannel0.finish();
      Channel channel0 = defaultChannelPool0.poll(channelDuplexHandler0);
}"
2381,"  public boolean removeAll(Channel channel) {
    ChannelCreation creation = connectionTtlEnabled ? channel.attr(CHANNEL_CREATION_ATTRIBUTE_KEY).get() : null;
    return !isClosed.get() && creation != null && partitions.get(creation.partitionKey).remove(new IdleChannel(channel, Long.MIN_VALUE));
  }","  public void test31()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 2);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      boolean boolean0 = defaultChannelPool0.removeAll(embeddedChannel0);
}"
2382,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test32()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(31, 31, defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, 2);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      defaultChannelPool0.offer(embeddedChannel0, channelDuplexHandler0);
      boolean boolean0 = defaultChannelPool0.removeAll(embeddedChannel0);
      defaultChannelPool0.poll(channelDuplexHandler0);
}"
2383,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test33()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      defaultChannelPool0.poll(channelDuplexHandler0);
}"
2384,"  public Channel poll(Object partitionKey) {

    IdleChannel idleChannel = null;
    ConcurrentLinkedDeque<IdleChannel> partition = partitions.get(partitionKey);
    if (partition != null) {
      while (idleChannel == null) {
        idleChannel = poolLeaseStrategy.lease(partition);

        if (idleChannel == null)
          // pool is empty
          break;
        else if (!Channels.isChannelActive(idleChannel.channel)) {
          idleChannel = null;
          LOGGER.trace(""Channel is inactive, probably remotely closed!"");
        } else if (!idleChannel.takeOwnership()) {
          idleChannel = null;
          LOGGER.trace(""Couldn't take ownership of channel, probably in the process of being expired!"");
        }
      }
    }
    return idleChannel != null ? idleChannel.channel : null;
  }","  public void test34()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      defaultChannelPool0.poll(channelDuplexHandler0);
}"
2385,"  public boolean offer(Channel channel, Object partitionKey) {
    if (isClosed.get())
      return false;

    long now = unpreciseMillisTime();

    if (isTtlExpired(channel, now))
      return false;

    boolean offered = offer0(channel, partitionKey, now);
    if (connectionTtlEnabled && offered) {
      registerChannelCreation(channel, partitionKey, now);
    }

    return offered;
  }","  public void test35()  throws Throwable  {
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      doReturn((Timeout) null).when(timer0).newTimeout(any(io.netty.util.TimerTask.class) , anyLong() , any(java.util.concurrent.TimeUnit.class));
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool(32768, 32768, timer0, 32768);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[1];
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      ChannelInboundHandlerAdapter channelInboundHandlerAdapter0 = new ChannelInboundHandlerAdapter();
      CombinedChannelDuplexHandler<ChannelInboundHandlerAdapter, ChannelOutboundHandlerAdapter> combinedChannelDuplexHandler0 = new CombinedChannelDuplexHandler<ChannelInboundHandlerAdapter, ChannelOutboundHandlerAdapter>(channelInboundHandlerAdapter0, channelOutboundHandlerAdapter0);
      defaultChannelPool0.offer(embeddedChannel0, combinedChannelDuplexHandler0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, combinedChannelDuplexHandler0);
}"
2386,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test36()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-751), (-751), defaultChannelPool_PoolLeaseStrategy0, timer0, (-751));
}"
2387,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test37()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-751), (-751), defaultChannelPool_PoolLeaseStrategy0, timer0, (-751));
      defaultChannelPool0.destroy();
}"
2388,"  public boolean offer(Channel channel, Object partitionKey) {
    if (isClosed.get())
      return false;

    long now = unpreciseMillisTime();

    if (isTtlExpired(channel, now))
      return false;

    boolean offered = offer0(channel, partitionKey, now);
    if (connectionTtlEnabled && offered) {
      registerChannelCreation(channel, partitionKey, now);
    }

    return offered;
  }","  public void test38()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.FIFO;
      Timer timer0 = mock(Timer.class, new ViolatedAssumptionAnswer());
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-751), (-751), defaultChannelPool_PoolLeaseStrategy0, timer0, (-751));
      defaultChannelPool0.destroy();
      boolean boolean0 = defaultChannelPool0.offer((Channel) null, "">"");
}"
2389,"  public boolean offer(Channel channel, Object partitionKey) {
    if (isClosed.get())
      return false;

    long now = unpreciseMillisTime();

    if (isTtlExpired(channel, now))
      return false;

    boolean offered = offer0(channel, partitionKey, now);
    if (connectionTtlEnabled && offered) {
      registerChannelCreation(channel, partitionKey, now);
    }

    return offered;
  }","  public void test39()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, defaultChannelPool_PoolLeaseStrategy0);
}"
2390,"  public Map<String, Long> getIdleChannelCountPerHost() {
    return partitions
            .values()
            .stream()
            .flatMap(ConcurrentLinkedDeque::stream)
            .map(idle -> idle.getChannel().remoteAddress())
            .filter(a -> a.getClass() == InetSocketAddress.class)
            .map(a -> (InetSocketAddress) a)
            .map(InetSocketAddress::getHostString)
            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
  }","  public void test40()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, defaultChannelPool_PoolLeaseStrategy0);
      defaultChannelPool0.getIdleChannelCountPerHost();
}"
2391,"  public boolean offer(Channel channel, Object partitionKey) {
    if (isClosed.get())
      return false;

    long now = unpreciseMillisTime();

    if (isTtlExpired(channel, now))
      return false;

    boolean offered = offer0(channel, partitionKey, now);
    if (connectionTtlEnabled && offered) {
      registerChannelCreation(channel, partitionKey, now);
    }

    return offered;
  }","  public void test41()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, defaultChannelPool_PoolLeaseStrategy0);
}"
2392,"  public void flushPartitions(Predicate<Object> predicate) {
    for (Map.Entry<Object, ConcurrentLinkedDeque<IdleChannel>> partitionsEntry : partitions.entrySet()) {
      Object partitionKey = partitionsEntry.getKey();
      if (predicate.test(partitionKey))
        flushPartition(partitionKey, partitionsEntry.getValue());
    }
  }","  public void test42()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, defaultChannelPool_PoolLeaseStrategy0);
      IncludeExcludeSet<DefaultChannelPool, Object> includeExcludeSet0 = new IncludeExcludeSet<DefaultChannelPool, Object>();
      defaultChannelPool0.flushPartitions(includeExcludeSet0);
}"
2393,"  public boolean isOpen() {
    return !isClosed.get();
  }","  public void test43()  throws Throwable  {
      DefaultChannelPool.PoolLeaseStrategy defaultChannelPool_PoolLeaseStrategy0 = DefaultChannelPool.PoolLeaseStrategy.LIFO;
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      DefaultChannelPool defaultChannelPool0 = new DefaultChannelPool((-1049), (-1049), defaultChannelPool_PoolLeaseStrategy0, hashedWheelTimer0, (-1049));
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[5];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(channelHandlerArray0);
      boolean boolean0 = defaultChannelPool0.offer(embeddedChannel0, defaultChannelPool_PoolLeaseStrategy0);
      IncludeExcludeSet<DefaultChannelPool, Object> includeExcludeSet0 = new IncludeExcludeSet<DefaultChannelPool, Object>();
      defaultChannelPool0.flushPartitions(includeExcludeSet0);
}"
2394,"  public void acquireChannelLock(Object partitionKey) throws IOException {
    long remainingTime = super.acquireTimeout > 0 ? acquireGlobalTimed(partitionKey) : acquireGlobal(partitionKey);

    try {
      if (remainingTime < 0 || !getFreeConnectionsForHost(partitionKey).tryAcquire(remainingTime, TimeUnit.MILLISECONDS)) {
        releaseGlobal(partitionKey);
        throw tooManyConnectionsPerHost;
      }
    } catch (InterruptedException e) {
      releaseGlobal(partitionKey);
      throw new RuntimeException(e);
    }
  }","  public void test0()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(3300, 3300, 3300);
      Object object0 = new Object();
      System.setCurrentTimeMillis(0L);
      combinedConnectionSemaphore0.acquireChannelLock(object0);
  }"
2395,"  protected long acquireGlobalTimed(Object partitionKey) throws IOException {
    long beforeGlobalAcquire = System.currentTimeMillis();
    acquireGlobal(partitionKey);
    long lockTime = System.currentTimeMillis() - beforeGlobalAcquire;
    return this.acquireTimeout - lockTime;
  }","  public void test1()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(1961, 1961, 0);
      Object object0 = new Object();
      long long0 = combinedConnectionSemaphore0.acquireGlobalTimed(object0);
}"
2396,"  protected long acquireGlobal(Object partitionKey) throws IOException {
    this.globalMaxConnectionSemaphore.acquireChannelLock(partitionKey);
    return 0;
  }","  public void test2()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(1961, 1961, 0);
      long long0 = combinedConnectionSemaphore0.acquireGlobal(""qDozxn!o<no'd1c0zw"");
}"
2397,"  protected void releaseGlobal(Object partitionKey) {
    this.globalMaxConnectionSemaphore.releaseChannelLock(partitionKey);
  }","  public void test3()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        combinedConnectionSemaphore0.releaseGlobal(""Include Set"");
        fail(""Expecting exception: Error"");
      } catch(Error e) {
         //
         // Maximum permit count exceeded
         //
         verifyException(""java.util.concurrent.Semaphore$Sync"", e);
      }
  }"
2398,"  public void releaseChannelLock(Object partitionKey) {
    this.globalMaxConnectionSemaphore.releaseChannelLock(partitionKey);
    super.releaseChannelLock(partitionKey);
  }","  public void test4()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(1961, 1961, 0);
      // Undeclared exception!
      try { 
        combinedConnectionSemaphore0.releaseChannelLock((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2399,"  public void releaseChannelLock(Object partitionKey) {
    this.globalMaxConnectionSemaphore.releaseChannelLock(partitionKey);
    super.releaseChannelLock(partitionKey);
  }","  public void test5()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(240, Integer.MAX_VALUE, (-705));
      // Undeclared exception!
      try { 
        combinedConnectionSemaphore0.releaseChannelLock(""AXpVT;<{_D"");
        fail(""Expecting exception: Error"");
      } catch(Error e) {
         //
         // Maximum permit count exceeded
         //
         verifyException(""java.util.concurrent.Semaphore$Sync"", e);
      }
  }"
2400,"  protected long acquireGlobalTimed(Object partitionKey) throws IOException {
    long beforeGlobalAcquire = System.currentTimeMillis();
    acquireGlobal(partitionKey);
    long lockTime = System.currentTimeMillis() - beforeGlobalAcquire;
    return this.acquireTimeout - lockTime;
  }","  public void test6()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(1, 1, 1);
      Object object0 = new Object();
      combinedConnectionSemaphore0.acquireGlobalTimed(object0);
      try { 
        combinedConnectionSemaphore0.acquireGlobalTimed("""");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Too many connections: 1
         //
         verifyException(""org.asynchttpclient.netty.channel.MaxConnectionSemaphore"", e);
      }
  }"
2401,"  protected long acquireGlobal(Object partitionKey) throws IOException {
    this.globalMaxConnectionSemaphore.acquireChannelLock(partitionKey);
    return 0;
  }","  public void test7()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(1, 1, 1);
      Object object0 = new Object();
      combinedConnectionSemaphore0.acquireGlobalTimed(object0);
      combinedConnectionSemaphore0.releaseGlobal(""n(FWlk]:_m4e"");
      combinedConnectionSemaphore0.acquireChannelLock(object0);
      try { 
        combinedConnectionSemaphore0.acquireGlobal(object0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Too many connections: 1
         //
         verifyException(""org.asynchttpclient.netty.channel.MaxConnectionSemaphore"", e);
      }
  }"
2402,"  public void acquireChannelLock(Object partitionKey) throws IOException {
    long remainingTime = super.acquireTimeout > 0 ? acquireGlobalTimed(partitionKey) : acquireGlobal(partitionKey);

    try {
      if (remainingTime < 0 || !getFreeConnectionsForHost(partitionKey).tryAcquire(remainingTime, TimeUnit.MILLISECONDS)) {
        releaseGlobal(partitionKey);
        throw tooManyConnectionsPerHost;
      }
    } catch (InterruptedException e) {
      releaseGlobal(partitionKey);
      throw new RuntimeException(e);
    }
  }","  public void test8()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(1792, 909, 1792);
      // Undeclared exception!
      try { 
        combinedConnectionSemaphore0.acquireChannelLock((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2403,"  public void acquireChannelLock(Object partitionKey) throws IOException {
    long remainingTime = super.acquireTimeout > 0 ? acquireGlobalTimed(partitionKey) : acquireGlobal(partitionKey);

    try {
      if (remainingTime < 0 || !getFreeConnectionsForHost(partitionKey).tryAcquire(remainingTime, TimeUnit.MILLISECONDS)) {
        releaseGlobal(partitionKey);
        throw tooManyConnectionsPerHost;
      }
    } catch (InterruptedException e) {
      releaseGlobal(partitionKey);
      throw new RuntimeException(e);
    }
  }","  public void test9()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(0, 1, 1);
      Object object0 = new Object();
      combinedConnectionSemaphore0.acquireChannelLock(object0);
      try { 
        combinedConnectionSemaphore0.acquireChannelLock(object0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Too many connections: 1
         //
         verifyException(""org.asynchttpclient.netty.channel.PerHostConnectionSemaphore"", e);
      }
  }"
2404,"  public void releaseChannelLock(Object partitionKey) {
    this.globalMaxConnectionSemaphore.releaseChannelLock(partitionKey);
    super.releaseChannelLock(partitionKey);
  }","  public void test10()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore(0, 1, 1);
      Object object0 = new Object();
      combinedConnectionSemaphore0.releaseChannelLock(object0);
  }"
2405,"  public void acquireChannelLock(Object partitionKey) throws IOException {
    long remainingTime = super.acquireTimeout > 0 ? acquireGlobalTimed(partitionKey) : acquireGlobal(partitionKey);

    try {
      if (remainingTime < 0 || !getFreeConnectionsForHost(partitionKey).tryAcquire(remainingTime, TimeUnit.MILLISECONDS)) {
        releaseGlobal(partitionKey);
        throw tooManyConnectionsPerHost;
      }
    } catch (InterruptedException e) {
      releaseGlobal(partitionKey);
      throw new RuntimeException(e);
    }
  }","  public void test11()  throws Throwable  {
      CombinedConnectionSemaphore combinedConnectionSemaphore0 = new CombinedConnectionSemaphore((-329), (-329), (-329));
      combinedConnectionSemaphore0.acquireChannelLock(""["");
  }"
2406,"  public static void setDiscard(Channel channel) {
    setAttribute(channel, DiscardEvent.DISCARD);
  }","  public void test0()  throws Throwable  {
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[8];
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(true, channelHandlerArray0);
      Channels.setDiscard(embeddedChannel0);
}"
2407,"  public static void setAttribute(Channel channel, Object o) {
    channel.attr(DEFAULT_ATTRIBUTE).set(o);
  }","  public void test1()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((Attribute) null).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      // Undeclared exception!
      try { 
        Channels.setAttribute(channel0, channel0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.Channels"", e);
      }
  }"
2408,"  public static void setActiveToken(Channel channel) {
    channel.attr(ACTIVE_TOKEN_ATTRIBUTE).set(Active.INSTANCE);
  }","  public void test2()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((Attribute) null).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      // Undeclared exception!
      try { 
        Channels.setActiveToken(channel0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.Channels"", e);
      }
  }"
2409,"  public static boolean isActiveTokenSet(Channel channel) {
    return channel != null && channel.attr(ACTIVE_TOKEN_ATTRIBUTE).getAndSet(null) != null;
  }","  public void test3()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((Attribute) null).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      // Undeclared exception!
      try { 
        Channels.isActiveTokenSet(channel0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.Channels"", e);
      }
  }"
2410,"  public static Object getAttribute(Channel channel) {
    Attribute<Object> attr = channel.attr(DEFAULT_ATTRIBUTE);
    return attr != null ? attr.get() : null;
  }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Channels.getAttribute((Channel) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.Channels"", e);
      }
  }"
2411,"  public static Object getAttribute(Channel channel) {
    Attribute<Object> attr = channel.attr(DEFAULT_ATTRIBUTE);
    return attr != null ? attr.get() : null;
  }","  public void test5()  throws Throwable  {
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel();
      Channels.setAttribute(embeddedChannel0, embeddedChannel0);
      Object object0 = Channels.getAttribute(embeddedChannel0);
}"
2412,"  public static void silentlyCloseChannel(Channel channel) {
    try {
      if (channel != null && channel.isActive())
        channel.close();
    } catch (Throwable t) {
      LOGGER.debug(""Failed to close channel"", t);
    }
  }","  public void test6()  throws Throwable  {
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel();
      Channels.silentlyCloseChannel(embeddedChannel0);
      Channels.silentlyCloseChannel(embeddedChannel0);
}"
2413,"  public static void silentlyCloseChannel(Channel channel) {
    try {
      if (channel != null && channel.isActive())
        channel.close();
    } catch (Throwable t) {
      LOGGER.debug(""Failed to close channel"", t);
    }
  }","  public void test7()  throws Throwable  {
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel();
      Channels.silentlyCloseChannel(embeddedChannel0);
      Channels.silentlyCloseChannel(embeddedChannel0);
}"
2414,"  public static void silentlyCloseChannel(Channel channel) {
    try {
      if (channel != null && channel.isActive())
        channel.close();
    } catch (Throwable t) {
      LOGGER.debug(""Failed to close channel"", t);
    }
  }","  public void test8()  throws Throwable  {
      Channels.silentlyCloseChannel((Channel) null);
  }"
2415,"  public static boolean isActiveTokenSet(Channel channel) {
    return channel != null && channel.attr(ACTIVE_TOKEN_ATTRIBUTE).getAndSet(null) != null;
  }","  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Attribute<Object> attribute0 = (Attribute<Object>) mock(Attribute.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(attribute0).getAndSet(any());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(attribute0).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      boolean boolean0 = Channels.isActiveTokenSet(channel0);
}"
2416,"  public static boolean isActiveTokenSet(Channel channel) {
    return channel != null && channel.attr(ACTIVE_TOKEN_ATTRIBUTE).getAndSet(null) != null;
  }","  public void test10()  throws Throwable  {
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel();
      boolean boolean0 = Channels.isActiveTokenSet(embeddedChannel0);
}"
2417,"  public static boolean isActiveTokenSet(Channel channel) {
    return channel != null && channel.attr(ACTIVE_TOKEN_ATTRIBUTE).getAndSet(null) != null;
  }","  public void test11()  throws Throwable  {
      boolean boolean0 = Channels.isActiveTokenSet((Channel) null);
}"
2418,"  public static boolean isChannelActive(Channel channel) {
    return channel != null && channel.isActive();
  }","  public void test12()  throws Throwable  {
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel();
      boolean boolean0 = Channels.isChannelActive(embeddedChannel0);
}"
2419,"  public static boolean isChannelActive(Channel channel) {
    return channel != null && channel.isActive();
  }","  public void test13()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(channel0).isActive();
      boolean boolean0 = Channels.isChannelActive(channel0);
}"
2420,"  public static boolean isChannelActive(Channel channel) {
    return channel != null && channel.isActive();
  }","  public void test14()  throws Throwable  {
      boolean boolean0 = Channels.isChannelActive((Channel) null);
}"
2421,"  public static Object getAttribute(Channel channel) {
    Attribute<Object> attr = channel.attr(DEFAULT_ATTRIBUTE);
    return attr != null ? attr.get() : null;
  }","  public void test15()  throws Throwable  {
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel();
      Object object0 = Channels.getAttribute(embeddedChannel0);
}"
2422,"  public static Object getAttribute(Channel channel) {
    Attribute<Object> attr = channel.attr(DEFAULT_ATTRIBUTE);
    return attr != null ? attr.get() : null;
  }","  public void test16()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((Attribute<Delayed>) null).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      Object object0 = Channels.getAttribute(channel0);
}"
2423,"  public static void setActiveToken(Channel channel) {
    channel.attr(ACTIVE_TOKEN_ATTRIBUTE).set(Active.INSTANCE);
  }","  public void test17()  throws Throwable  {
      Attribute<FormatStyle> attribute0 = (Attribute<FormatStyle>) mock(Attribute.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(attribute0).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      Channels.setActiveToken(channel0);
  }"
2424,,"  public void test18()  throws Throwable  {
      Channels channels0 = new Channels();
  }"
2425,"  public static void setDiscard(Channel channel) {
    setAttribute(channel, DiscardEvent.DISCARD);
  }","  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Channels.setDiscard((Channel) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.Channels"", e);
      }
  }"
2426,"  public HttpHandler(AsyncHttpClientConfig config, ChannelManager channelManager, NettyRequestSender requestSender) {
    super(config, channelManager, requestSender);
  }","  public void test0()  throws Throwable  {
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyRequestSender nettyRequestSender0 = mock(NettyRequestSender.class, new ViolatedAssumptionAnswer());
      HttpHandler httpHandler0 = null;
      try {
        httpHandler0 = new HttpHandler((AsyncHttpClientConfig) null, channelManager0, nettyRequestSender0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.handler.intercept.Redirect30xInterceptor"", e);
      }
  }"
2427,"  public HttpHandler(AsyncHttpClientConfig config, ChannelManager channelManager, NettyRequestSender requestSender) {
    super(config, channelManager, requestSender);
  }","  public void test1()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      HttpHandler httpHandler0 = null;
      try {
        httpHandler0 = new HttpHandler(asyncHttpClientConfig0, channelManager0, (NettyRequestSender) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2428,"  public boolean hasOutstandingRequest() {
    return hasOutstandingRequest;
  }","  public void test0()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, (NettyResponseFuture<?>) null, channel0);
      streamedResponsePublisher0.cancelled();
}"
2429,"  public boolean hasOutstandingRequest() {
    return hasOutstandingRequest;
  }","  public void test1()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(eventExecutor0).inEventLoop();
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channelHandlerContext0).when(channelHandlerContext1).fireChannelRegistered();
      doReturn(channelHandlerContext0).when(channelHandlerContext1).read();
      NettyResponseFuture<String> nettyResponseFuture0 = (NettyResponseFuture<String>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, nettyResponseFuture0, channel0);
      streamedResponsePublisher0.channelRegistered(channelHandlerContext1);
}"
2430,"  public boolean hasOutstandingRequest() {
    return hasOutstandingRequest;
  }","  public void test2()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(eventExecutor0).inEventLoop();
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channelHandlerContext0).when(channelHandlerContext1).fireChannelRegistered();
      doReturn(channelHandlerContext0).when(channelHandlerContext1).read();
      NettyResponseFuture<String> nettyResponseFuture0 = (NettyResponseFuture<String>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, nettyResponseFuture0, channel0);
      streamedResponsePublisher0.channelRegistered(channelHandlerContext1);
      streamedResponsePublisher0.requestDemand();
      boolean boolean0 = streamedResponsePublisher0.hasOutstandingRequest();
}"
2431,"  public boolean hasOutstandingRequest() {
    return hasOutstandingRequest;
  }","  public void test3()  throws Throwable  {
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher((EventExecutor) null, channelManager0, (NettyResponseFuture<?>) null, channel0);
      streamedResponsePublisher0.future();
}"
2432,"  public void subscribe(Subscriber<? super HttpResponseBodyPart> subscriber) {
    super.subscribe(new ErrorReplacingSubscriber(subscriber));
  }","  public void test4()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, (NettyResponseFuture<?>) null, channel0);
      Subscriber<Object> subscriber0 = (Subscriber<Object>) mock(Subscriber.class, new ViolatedAssumptionAnswer());
      streamedResponsePublisher0.subscribe(subscriber0);
      // Undeclared exception!
      try { 
        streamedResponsePublisher0.subscribe((Subscriber<? super HttpResponseBodyPart>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.handler.StreamedResponsePublisher$ErrorReplacingSubscriber"", e);
      }
  }"
2433,"  protected void cancelled() {
    logger.debug(""Subscriber cancelled, ignoring the rest of the body"");

    try {
      future.done();
    } catch (Exception t) {
      // Never propagate exception once we know we are done.
      logger.debug(t.getMessage(), t);
    }

    // The subscriber cancelled early - this channel is dead and should be closed.
    channelManager.closeChannel(channel);
  }","  public void test5()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Integer> nettyResponseFuture0 = (NettyResponseFuture<Integer>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, (ChannelManager) null, nettyResponseFuture0, channel0);
      // Undeclared exception!
      try { 
        streamedResponsePublisher0.cancelled();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.handler.StreamedResponsePublisher"", e);
      }
  }"
2434,"  protected void requestDemand() {
    hasOutstandingRequest = true;
    super.requestDemand();
  }","  public void test6()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, nettyResponseFuture0, channel0);
      // Undeclared exception!
      try { 
        streamedResponsePublisher0.requestDemand();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.typesafe.netty.HandlerPublisher"", e);
      }
  }"
2435,"  public boolean hasOutstandingRequest() {
    return hasOutstandingRequest;
  }","  public void test7()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, nettyResponseFuture0, channel0);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      streamedResponsePublisher0.channelReadComplete(channelHandlerContext0);
}"
2436,"  public boolean hasOutstandingRequest() {
    return hasOutstandingRequest;
  }","  public void test8()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, nettyResponseFuture0, channel0);
      boolean boolean0 = streamedResponsePublisher0.hasOutstandingRequest();
}"
2437,"  public boolean hasOutstandingRequest() {
    return hasOutstandingRequest;
  }","  public void test9()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, nettyResponseFuture0, channel0);
      Subscriber<Object> subscriber0 = (Subscriber<Object>) mock(Subscriber.class, new ViolatedAssumptionAnswer());
      streamedResponsePublisher0.subscribe(subscriber0);
      Subscriber<Object> subscriber1 = (Subscriber<Object>) mock(Subscriber.class, new ViolatedAssumptionAnswer());
      streamedResponsePublisher0.subscribe(subscriber1);
}"
2438,"  public boolean hasOutstandingRequest() {
    return hasOutstandingRequest;
  }","  public void test10()  throws Throwable  {
      EventExecutor eventExecutor0 = mock(EventExecutor.class, new ViolatedAssumptionAnswer());
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      StreamedResponsePublisher streamedResponsePublisher0 = new StreamedResponsePublisher(eventExecutor0, channelManager0, nettyResponseFuture0, channel0);
      streamedResponsePublisher0.setError((Throwable) null);
}"
2439,,"  public void test0()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asyncHttpClientConfig0).getAcquireFreeChannelTimeout();
      doReturn((ConnectionSemaphoreFactory) null).when(asyncHttpClientConfig0).getConnectionSemaphoreFactory();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnections();
      doReturn(0).when(asyncHttpClientConfig0).getMaxConnectionsPerHost();
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      doReturn(false).when(asyncHttpClientConfig0).isUseLaxCookieEncoder();
      HashedWheelTimer hashedWheelTimer0 = new HashedWheelTimer();
      AsyncHttpClientState asyncHttpClientState0 = mock(AsyncHttpClientState.class, new ViolatedAssumptionAnswer());
      NettyRequestSender nettyRequestSender0 = new NettyRequestSender(asyncHttpClientConfig0, (ChannelManager) null, hashedWheelTimer0, asyncHttpClientState0);
      HttpHandler httpHandler0 = null;
      try {
        httpHandler0 = new HttpHandler(asyncHttpClientConfig0, (ChannelManager) null, nettyRequestSender0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""org.evosuite.runtime.mock.java.lang.MockException"", e);
      }
  }"
2440,"  public WebSocketHandler(AsyncHttpClientConfig config,
                          ChannelManager channelManager,
                          NettyRequestSender requestSender) {
    super(config, channelManager, requestSender);
  }","  public void test0()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      WebSocketHandler webSocketHandler0 = null;
      try {
        webSocketHandler0 = new WebSocketHandler(asyncHttpClientConfig0, (ChannelManager) null, (NettyRequestSender) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""org.evosuite.runtime.mock.java.lang.MockException"", e);
      }
  }"
2441,"  public WebSocketHandler(AsyncHttpClientConfig config,
                          ChannelManager channelManager,
                          NettyRequestSender requestSender) {
    super(config, channelManager, requestSender);
  }","  public void test1()  throws Throwable  {
      WebSocketHandler webSocketHandler0 = null;
      try {
        webSocketHandler0 = new WebSocketHandler((AsyncHttpClientConfig) null, (ChannelManager) null, (NettyRequestSender) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.handler.intercept.Redirect30xInterceptor"", e);
      }
  }"
2442,"  public boolean exitAfterHandling100(final Channel channel, final NettyResponseFuture<?> future) {
    future.setHeadersAlreadyWrittenOnContinue(true);
    future.setDontWriteBodyBecauseExpectContinue(false);
    // directly send the body
    Channels.setAttribute(channel, new OnLastHttpContentCallback(future) {
      @Override
      public void call() {
        Channels.setAttribute(channel, future);
        requestSender.writeRequest(future, channel);
      }
    });
    return true;
  }","  public void test0()  throws Throwable  {
      NettyRequestSender nettyRequestSender0 = mock(NettyRequestSender.class, new ViolatedAssumptionAnswer());
      Continue100Interceptor continue100Interceptor0 = new Continue100Interceptor(nettyRequestSender0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((Attribute) null).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        continue100Interceptor0.exitAfterHandling100(channel0, nettyResponseFuture0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.channel.Channels"", e);
      }
  }"
2443,"  public boolean exitAfterHandling100(final Channel channel, final NettyResponseFuture<?> future) {
    future.setHeadersAlreadyWrittenOnContinue(true);
    future.setDontWriteBodyBecauseExpectContinue(false);
    // directly send the body
    Channels.setAttribute(channel, new OnLastHttpContentCallback(future) {
      @Override
      public void call() {
        Channels.setAttribute(channel, future);
        requestSender.writeRequest(future, channel);
      }
    });
    return true;
  }","  public void test1()  throws Throwable  {
      NettyRequestSender nettyRequestSender0 = mock(NettyRequestSender.class, new ViolatedAssumptionAnswer());
      Attribute<String> attribute0 = (Attribute<String>) mock(Attribute.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(attribute0).when(channel0).attr(nullable(io.netty.util.AttributeKey.class));
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      Continue100Interceptor continue100Interceptor0 = new Continue100Interceptor(nettyRequestSender0);
      boolean boolean0 = continue100Interceptor0.exitAfterHandling100(channel0, nettyResponseFuture0);
}"
2444,"  public boolean exitAfterProcessingFilters(Channel channel,
                                            NettyResponseFuture<?> future,
                                            AsyncHandler<?> handler,
                                            HttpResponseStatus status,
                                            HttpHeaders responseHeaders) {

    FilterContext fc = new FilterContext.FilterContextBuilder().asyncHandler(handler).request(future.getCurrentRequest()).responseStatus(status)
            .responseHeaders(responseHeaders).build();

    for (ResponseFilter asyncFilter : config.getResponseFilters()) {
      try {
        fc = asyncFilter.filter(fc);
        // FIXME Is it worth protecting against this?
        assertNotNull(""fc"", ""filterContext"");
      } catch (FilterException fe) {
        requestSender.abort(channel, future, fe);
      }
    }

    // The handler may have been wrapped.
    future.setAsyncHandler(fc.getAsyncHandler());

    // The request has changed
    if (fc.replayRequest()) {
      requestSender.replayRequest(future, fc, channel);
      return true;
    }
    return false;
  }","  public void test0()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(asyncHttpClientConfig0).getResponseFilters();
      NettyRequestSender nettyRequestSender0 = mock(NettyRequestSender.class, new ViolatedAssumptionAnswer());
      ResponseFiltersInterceptor responseFiltersInterceptor0 = new ResponseFiltersInterceptor(asyncHttpClientConfig0, nettyRequestSender0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      NettyResponseFuture<Object> nettyResponseFuture0 = (NettyResponseFuture<Object>) mock(NettyResponseFuture.class, new ViolatedAssumptionAnswer());
      doReturn((Request) null).when(nettyResponseFuture0).getCurrentRequest();
      AsyncHandler<Object> asyncHandler0 = (AsyncHandler<Object>) mock(AsyncHandler.class, new ViolatedAssumptionAnswer());
      HttpResponseStatus httpResponseStatus0 = mock(HttpResponseStatus.class, new ViolatedAssumptionAnswer());
      HttpHeaders httpHeaders0 = mock(HttpHeaders.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        responseFiltersInterceptor0.exitAfterProcessingFilters(channel0, nettyResponseFuture0, asyncHandler0, httpResponseStatus0, httpHeaders0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.handler.intercept.ResponseFiltersInterceptor"", e);
      }
  }"
2445,"  Redirect30xInterceptor(ChannelManager channelManager, AsyncHttpClientConfig config, NettyRequestSender requestSender) {
    this.channelManager = channelManager;
    this.config = config;
    this.requestSender = requestSender;
    maxRedirectException = unknownStackTrace(new MaxRedirectException(""Maximum redirect reached: "" + config.getMaxRedirects()), Redirect30xInterceptor.class,
            ""exitAfterHandlingRedirect"");
  }","  public void test0()  throws Throwable  {
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      NettyRequestSender nettyRequestSender0 = mock(NettyRequestSender.class, new ViolatedAssumptionAnswer());
      Redirect30xInterceptor redirect30xInterceptor0 = null;
      try {
        redirect30xInterceptor0 = new Redirect30xInterceptor(channelManager0, (AsyncHttpClientConfig) null, nettyRequestSender0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.handler.intercept.Redirect30xInterceptor"", e);
      }
  }"
2446,"  Redirect30xInterceptor(ChannelManager channelManager, AsyncHttpClientConfig config, NettyRequestSender requestSender) {
    this.channelManager = channelManager;
    this.config = config;
    this.requestSender = requestSender;
    maxRedirectException = unknownStackTrace(new MaxRedirectException(""Maximum redirect reached: "" + config.getMaxRedirects()), Redirect30xInterceptor.class,
            ""exitAfterHandlingRedirect"");
  }","  public void test1()  throws Throwable  {
      ChannelManager channelManager0 = mock(ChannelManager.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asyncHttpClientConfig0).getMaxRedirects();
      NettyRequestSender nettyRequestSender0 = mock(NettyRequestSender.class, new ViolatedAssumptionAnswer());
      Redirect30xInterceptor redirect30xInterceptor0 = null;
      try {
        redirect30xInterceptor0 = new Redirect30xInterceptor(channelManager0, asyncHttpClientConfig0, nettyRequestSender0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""org.evosuite.runtime.mock.java.lang.MockException"", e);
      }
  }"
2447,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test0()  throws Throwable  {
      ClosedChannelException closedChannelException0 = new ClosedChannelException();
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(closedChannelException0);
}"
2448,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test1()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      Throwable throwable1 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      Throwable throwable2 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn(throwable1, (Throwable) null).when(throwable2).getCause();
      // Undeclared exception!
      try { 
        StackTraceInspector.recoverOnNettyDisconnectException(throwable2);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.future.StackTraceInspector"", e);
      }
  }"
2449,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test2()  throws Throwable  {
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(throwable0).getCause();
      StackTraceInspector.recoverOnNettyDisconnectException(throwable0);
      Throwable throwable1 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(throwable1).getCause();
      StackTraceInspector.recoverOnNettyDisconnectException(throwable1);
      Throwable throwable2 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(throwable2).getCause();
      StackTraceInspector.recoverOnReadOrWriteException(throwable2);
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
      Throwable throwable3 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(throwable3).getCause();
      StackTraceInspector.recoverOnNettyDisconnectException(throwable3);
      Throwable throwable4 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(throwable4).getCause();
      StackTraceInspector.recoverOnReadOrWriteException(throwable4);
      Throwable throwable5 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(throwable5).getCause();
      StackTraceInspector.recoverOnNettyDisconnectException(throwable5);
      Throwable throwable6 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(throwable6).getCause();
      StackTraceInspector.recoverOnNettyDisconnectException(throwable6);
      Throwable throwable7 = null;
      // Undeclared exception!
      try { 
        StackTraceInspector.recoverOnNettyDisconnectException((Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.future.StackTraceInspector"", e);
      }
  }"
2450,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test3()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException((String) null);
      MockThrowable mockThrowable0 = new MockThrowable(""[m3BrW98"", mockIOException0);
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockThrowable0);
}"
2451,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test4()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("""");
      MockIOException mockIOException0 = new MockIOException("""", mockThrowable0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""io.netty.handler.ssl.SslHandler"", """", ""sun.nio.ch.SocketChannelImpl"", 926);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      mockIOException1.getStackTrace();
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
}"
2452,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test5()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("""");
      MockIOException mockIOException0 = new MockIOException("""", mockThrowable0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""io.netty.handler.ssl.SslHandler"", """", ""sun.nio.ch.SocketChannelImpl"", 926);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      mockIOException1.getStackTrace();
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
}"
2453,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test6()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      mockIOException0.getCause();
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
}"
2454,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test7()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      mockIOException0.getCause();
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException(""Connection reset by peer"");
      mockIOException1.getCause();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""Connection reset by peer"", ""Connection reset by peer"", ""{} {}"", 597);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(""sun.nio.ch.SocketDispatcher"", ""{} {}"", ""DNIN&;Inz"", 597);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
      mockIOException0.toString();
      MockIOException mockIOException2 = new MockIOException((String) null);
      Throwable throwable0 = mockIOException0.initCause(mockIOException1);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(throwable0);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      boolean boolean2 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
}"
2455,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test8()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      mockIOException0.getCause();
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException(""Connection reset by peer"");
      mockIOException1.getCause();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""Connection reset by peer"", ""Connection reset by peer"", ""{} {}"", 597);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(""sun.nio.ch.SocketDispatcher"", ""{} {}"", ""DNIN&;Inz"", 597);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
      mockIOException0.toString();
      MockIOException mockIOException2 = new MockIOException((String) null);
      Throwable throwable0 = mockIOException0.initCause(mockIOException1);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(throwable0);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      boolean boolean2 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
}"
2456,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test9()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""8stw$]Dc1k"");
      MockThrowable.getDefaultStackTrace();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      StackTraceInspector.recoverOnReadOrWriteException(mockThrowable0);
      StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
      StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockThrowable0);
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
}"
2457,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test10()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""8stw$]Dc1k"");
      MockThrowable.getDefaultStackTrace();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      StackTraceInspector.recoverOnReadOrWriteException(mockThrowable0);
      StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
      StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockThrowable0);
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
}"
2458,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test11()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      mockIOException0.getCause();
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
}"
2459,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test12()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      mockIOException0.getCause();
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException(""Connection reset by peer"");
      mockIOException1.getCause();
      MockIOException mockIOException2 = new MockIOException(""Connection reset by peer"", mockIOException1);
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      MockIOException mockIOException3 = new MockIOException((String) null);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
      boolean boolean2 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
}"
2460,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test13()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      mockIOException0.getCause();
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException(""Connection reset by peer"");
      mockIOException1.getCause();
      MockIOException mockIOException2 = new MockIOException(""Connection reset by peer"", mockIOException1);
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      MockIOException mockIOException3 = new MockIOException((String) null);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
      boolean boolean2 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
}"
2461,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test14()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      MockIOException mockIOException0 = new MockIOException(mockThrowable1);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
}"
2462,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""disconnect"");
      MockIOException mockIOException0 = new MockIOException(""disconnect"");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""io.netty.handler.ssl.SslHandler"", ""disconnect"", ""sun.nio.ch.SocketChannelImpl"", 926);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      boolean boolean2 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
}"
2463,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""disconnect"");
      MockIOException mockIOException0 = new MockIOException(""disconnect"");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""io.netty.handler.ssl.SslHandler"", ""disconnect"", ""sun.nio.ch.SocketChannelImpl"", 926);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      boolean boolean2 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
}"
2464,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test17()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""disconnect"");
      MockIOException mockIOException0 = new MockIOException(""disconnect"");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""io.netty.handler.ssl.SslHandler"", ""disconnect"", ""sun.nio.ch.SocketChannelImpl"", 926);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      boolean boolean2 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
}"
2465,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test18()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
}"
2466,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test19()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""disconneXt"");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""io.netty.handler.ssl.SslHandler"", ""disconneXt"", ""disconneXt"", 926);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
}"
2467,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test20()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""disconneXt"");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""io.netty.handler.ssl.SslHandler"", ""disconneXt"", ""disconneXt"", 926);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
}"
2468,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test21()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      mockIOException0.getCause();
      MockIOException mockIOException1 = new MockIOException((Throwable) null);
      mockIOException1.getCause();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""{} {}"", ""{} {}"", ""{} {}"", 597);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(""sun.nio.ch.SocketDisFatcher"", ""sun.nio.ch.SocketDisFatcher"", ""{} {}"", 597);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      MockIOException mockIOException2 = new MockIOException(""{} {}"");
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      mockIOException0.toString();
      MockIOException mockIOException3 = new MockIOException((String) null);
      Throwable throwable0 = mockIOException0.initCause(mockIOException1);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException2);
      mockIOException2.getLocalizedMessage();
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
      StackTraceInspector.recoverOnReadOrWriteException(throwable0);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException2);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
}"
2469,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test22()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      mockIOException0.getCause();
      MockIOException mockIOException1 = new MockIOException((Throwable) null);
      mockIOException1.getCause();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""{} {}"", ""{} {}"", ""{} {}"", 597);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(""sun.nio.ch.SocketDisFatcher"", ""sun.nio.ch.SocketDisFatcher"", ""{} {}"", 597);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      MockIOException mockIOException2 = new MockIOException(""{} {}"");
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      mockIOException0.toString();
      MockIOException mockIOException3 = new MockIOException((String) null);
      Throwable throwable0 = mockIOException0.initCause(mockIOException1);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException2);
      mockIOException2.getLocalizedMessage();
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
      StackTraceInspector.recoverOnReadOrWriteException(throwable0);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException2);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
}"
2470,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test23()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException();
      MockIOException mockIOException2 = new MockIOException(""{} {}"", mockIOException1);
      mockIOException2.toString();
      MockIOException mockIOException3 = new MockIOException(""org.evosuite.runtime.mock.java.lang.MockThrowable: {} {}"", mockIOException0);
      mockIOException0.initCause(mockIOException1);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
}"
2471,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test24()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException0);
      MockIOException mockIOException1 = new MockIOException();
      MockIOException mockIOException2 = new MockIOException(""{} {}"", mockIOException1);
      mockIOException2.toString();
      MockIOException mockIOException3 = new MockIOException(""org.evosuite.runtime.mock.java.lang.MockThrowable: {} {}"", mockIOException0);
      mockIOException0.initCause(mockIOException1);
      StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException3);
}"
2472,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test25()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
      MockIOException mockIOException0 = new MockIOException(""}{}"");
      MockIOException mockIOException1 = new MockIOException(""Connection Qeset by peer"");
      mockIOException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""Connection Qeset by peer"", ""Connection Qeset by peer"", ""}{}"", 597);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(""sun.nio.ch.SocketDispatcher"", ""}{}"", ""write"", 597);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      Throwable throwable0 = mockIOException0.initCause(mockIOException1);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(throwable0);
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
}"
2473,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test26()  throws Throwable  {
      StackTraceInspector stackTraceInspector0 = new StackTraceInspector();
      MockIOException mockIOException0 = new MockIOException(""}{}"");
      MockIOException mockIOException1 = new MockIOException(""Connection Qeset by peer"");
      mockIOException0.getCause();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""Connection Qeset by peer"", ""Connection Qeset by peer"", ""}{}"", 597);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(""sun.nio.ch.SocketDispatcher"", ""}{}"", ""write"", 597);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      Throwable throwable0 = mockIOException0.initCause(mockIOException1);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
      boolean boolean0 = StackTraceInspector.recoverOnReadOrWriteException(throwable0);
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException1);
      boolean boolean2 = StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
}"
2474,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test27()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      MockIOException mockIOException1 = new MockIOException(""Connection reset by peer"");
      mockIOException1.getCause();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""Connection reset by peer"", ""Connection reset by peer"", ""{} {}"", 572);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(""sun.nio.ch.SocketDispatcher"", ""{} {}"", ""DNIN&;Inz"", 572);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      mockIOException0.toString();
      MockIOException mockIOException2 = new MockIOException(""Connection reset by peer"");
      Throwable throwable0 = mockIOException0.initCause(mockIOException1);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(throwable0);
}"
2475,"  public static boolean recoverOnReadOrWriteException(Throwable t) {

    if (t instanceof IOException && ""Connection reset by peer"".equalsIgnoreCase(t.getMessage()))
      return true;

    try {
      for (StackTraceElement element : t.getStackTrace()) {
        String className = element.getClassName();
        String methodName = element.getMethodName();
        if (className.equals(""sun.nio.ch.SocketDispatcher"") && (methodName.equals(""read"") || methodName.equals(""write"")))
          return true;
      }
    } catch (Throwable ignore) {
    }

    return t.getCause() != null && recoverOnReadOrWriteException(t.getCause());
  }","  public void test28()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""{} {}"");
      MockIOException mockIOException1 = new MockIOException(""Connection reset by peer"");
      mockIOException1.getCause();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""Connection reset by peer"", ""Connection reset by peer"", ""{} {}"", 572);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(""sun.nio.ch.SocketDispatcher"", ""{} {}"", ""DNIN&;Inz"", 572);
      stackTraceElementArray0[1] = stackTraceElement1;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      mockIOException0.toString();
      MockIOException mockIOException2 = new MockIOException(""Connection reset by peer"");
      Throwable throwable0 = mockIOException0.initCause(mockIOException1);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException2);
      StackTraceInspector.recoverOnReadOrWriteException(mockIOException1);
      boolean boolean1 = StackTraceInspector.recoverOnReadOrWriteException(throwable0);
}"
2476,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test29()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException(""disconnect"");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""io.netty.handler.ssl.SslHandler"", ""disconnect"", ""disconnect"", 926);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockIOException0.setStackTrace(stackTraceElementArray0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockIOException0);
}"
2477,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test30()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""ro.netty.handler.ssl.SslHandler"");
      StackTraceElement stackTraceElement0 = new StackTraceElement(""ro.netty.handler.ssl.SslHandler"", ""ro.netty.handler.ssl.SslHandler"", ""ro.netty.handler.ssl.SslHandler"", (byte)18);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
}"
2478,"  public static boolean recoverOnNettyDisconnectException(Throwable t) {
    return t instanceof ClosedChannelException
            || exceptionInMethod(t, ""io.netty.handler.ssl.SslHandler"", ""disconnect"")
            || (t.getCause() != null && recoverOnConnectCloseException(t.getCause()));
  }","  public void test31()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""ro.netty.handler.ssl.SslHandler"");
      StackTraceElement stackTraceElement0 = new StackTraceElement(""ro.netty.handler.ssl.SslHandler"", ""ro.netty.handler.ssl.SslHandler"", ""ro.netty.handler.ssl.SslHandler"", (byte)18);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      boolean boolean0 = StackTraceInspector.recoverOnNettyDisconnectException(mockThrowable0);
      ClosedChannelException closedChannelException0 = new ClosedChannelException();
      Throwable throwable0 = closedChannelException0.fillInStackTrace();
      boolean boolean1 = StackTraceInspector.recoverOnNettyDisconnectException(throwable0);
}"
2479,"  protected String domain(String hostname) {
    int fqdnLength = hostname.length() - 1;
    return hostname.charAt(fqdnLength) == '.' ?
            hostname.substring(0, fqdnLength) :
            hostname;
  }","  public void test0()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      String string0 = defaultSslEngineFactory0.domain(""8S$"");
}"
2480,"  protected String domain(String hostname) {
    int fqdnLength = hostname.length() - 1;
    return hostname.charAt(fqdnLength) == '.' ?
            hostname.substring(0, fqdnLength) :
            hostname;
  }","  public void test1()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      String string0 = defaultSslEngineFactory0.domain(""."");
}"
2481,"  protected String domain(String hostname) {
    int fqdnLength = hostname.length() - 1;
    return hostname.charAt(fqdnLength) == '.' ?
            hostname.substring(0, fqdnLength) :
            hostname;
  }","  public void test2()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.domain("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2482,"  protected String domain(String hostname) {
    int fqdnLength = hostname.length() - 1;
    return hostname.charAt(fqdnLength) == '.' ?
            hostname.substring(0, fqdnLength) :
            hostname;
  }","  public void test3()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.domain((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ssl.SslEngineFactoryBase"", e);
      }
  }"
2483,"  protected void configureSslEngine(SSLEngine sslEngine, AsyncHttpClientConfig config) {
    sslEngine.setUseClientMode(true);
    if (!config.isDisableHttpsEndpointIdentificationAlgorithm()) {
      SSLParameters params = sslEngine.getSSLParameters();
      params.setEndpointIdentificationAlgorithm(""HTTPS"");
      sslEngine.setSSLParameters(params);
    }
  }","  public void test4()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.configureSslEngine((SSLEngine) null, asyncHttpClientConfig0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ssl.SslEngineFactoryBase"", e);
      }
  }"
2484,,"  public void test5()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory(sSLContext0);
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(asyncHttpClientConfig0).isDisableHttpsEndpointIdentificationAlgorithm();
      SSLEngine sSLEngine0 = jsseSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, "" V<ovB7"", (-2648));
}"
2485,"  protected void configureSslEngine(SSLEngine sslEngine, AsyncHttpClientConfig config) {
    sslEngine.setUseClientMode(true);
    if (!config.isDisableHttpsEndpointIdentificationAlgorithm()) {
      SSLParameters params = sslEngine.getSSLParameters();
      params.setEndpointIdentificationAlgorithm(""HTTPS"");
      sslEngine.setSSLParameters(params);
    }
  }","  public void test6()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(asyncHttpClientConfig0).isDisableHttpsEndpointIdentificationAlgorithm();
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(asyncHttpClientConfig1).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig1).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig1).getSslContext();
      doReturn(0).when(asyncHttpClientConfig1).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig1).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig1).isFilterInsecureCipherSuites();
      doReturn(false).when(asyncHttpClientConfig1).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig1).isUseOpenSsl();
      defaultSslEngineFactory0.init(asyncHttpClientConfig1);
      SSLEngine sSLEngine0 = defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, ""Ew+7"", 600);
      AsyncHttpClientConfig asyncHttpClientConfig2 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig2).isDisableHttpsEndpointIdentificationAlgorithm();
      defaultSslEngineFactory0.configureSslEngine(sSLEngine0, asyncHttpClientConfig2);
  }"
2486,"  public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort) {
    SSLEngine sslEngine = sslContext.createSSLEngine(domain(peerHost), peerPort);
    configureSslEngine(sslEngine, config);
    return sslEngine;
  }","  public void test0()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory(sSLContext0);
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig0).isDisableHttpsEndpointIdentificationAlgorithm();
      SSLEngine sSLEngine0 = jsseSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, ""tUntO"", 0);
}"
2487,"  public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort) {
    SSLEngine sslEngine = sslContext.createSSLEngine(domain(peerHost), peerPort);
    configureSslEngine(sslEngine, config);
    return sslEngine;
  }","  public void test1()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory(sSLContext0);
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jsseSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, """", 1559);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2488,"  public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort) {
    SSLEngine sslEngine = sslContext.createSSLEngine(domain(peerHost), peerPort);
    configureSslEngine(sslEngine, config);
    return sslEngine;
  }","  public void test2()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory(sSLContext0);
      // Undeclared exception!
      try { 
        jsseSslEngineFactory0.newSslEngine((AsyncHttpClientConfig) null, ""6srhTkIsY"", 1106);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ssl.SslEngineFactoryBase"", e);
      }
  }"
2489,"  public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort) {
    SSLEngine sslEngine = sslContext.createSSLEngine(domain(peerHost), peerPort);
    configureSslEngine(sslEngine, config);
    return sslEngine;
  }","  public void test3()  throws Throwable  {
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      SSLContext sSLContext0 = SSLContext.getInstance(""SSLv3"");
      JsseSslEngineFactory jsseSslEngineFactory0 = new JsseSslEngineFactory(sSLContext0);
      // Undeclared exception!
      try { 
        jsseSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, ""SSLv3"", 0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
      }
  }"
2490,"  protected SslContextBuilder configureSslContextBuilder(SslContextBuilder builder) {
    // default to no op
    return builder;
  }","  public void test0()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      SslContextBuilder sslContextBuilder0 = defaultSslEngineFactory0.configureSslContextBuilder((SslContextBuilder) null);
}"
2491,"  protected SslContextBuilder configureSslContextBuilder(SslContextBuilder builder) {
    // default to no op
    return builder;
  }","  public void test1()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      SslContextBuilder sslContextBuilder0 = mock(SslContextBuilder.class, new ViolatedAssumptionAnswer());
      doReturn("">%pV@"").when(sslContextBuilder0).toString();
      SslContextBuilder sslContextBuilder1 = defaultSslEngineFactory0.configureSslContextBuilder(sslContextBuilder0);
}"
2492,"  public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort) {
    SSLEngine sslEngine =
      config.isDisableHttpsEndpointIdentificationAlgorithm() ?
        sslContext.newEngine(ByteBufAllocator.DEFAULT) :
        sslContext.newEngine(ByteBufAllocator.DEFAULT, domain(peerHost), peerPort);
    configureSslEngine(sslEngine, config);
    return sslEngine;
  }","  public void test2()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      String[] stringArray0 = new String[1];
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) stringArray0).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((Object) stringArray0, (Object) stringArray0).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn(1818).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(1818).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseOpenSsl();
      defaultSslEngineFactory0.init(asyncHttpClientConfig0);
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig1).isDisableHttpsEndpointIdentificationAlgorithm();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig1, ""7;w24"", 1818);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
2493,"  public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort) {
    SSLEngine sslEngine =
      config.isDisableHttpsEndpointIdentificationAlgorithm() ?
        sslContext.newEngine(ByteBufAllocator.DEFAULT) :
        sslContext.newEngine(ByteBufAllocator.DEFAULT, domain(peerHost), peerPort);
    configureSslEngine(sslEngine, config);
    return sslEngine;
  }","  public void test3()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(asyncHttpClientConfig0).isDisableHttpsEndpointIdentificationAlgorithm();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, """", 1033);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2494,"  public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort) {
    SSLEngine sslEngine =
      config.isDisableHttpsEndpointIdentificationAlgorithm() ?
        sslContext.newEngine(ByteBufAllocator.DEFAULT) :
        sslContext.newEngine(ByteBufAllocator.DEFAULT, domain(peerHost), peerPort);
    configureSslEngine(sslEngine, config);
    return sslEngine;
  }","  public void test4()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(asyncHttpClientConfig0).isDisableHttpsEndpointIdentificationAlgorithm();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig0, ""9_\""W1`'"", 361);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.asynchttpclient.netty.ssl.DefaultSslEngineFactory"", e);
      }
  }"
2495,"  public void init(AsyncHttpClientConfig config) throws SSLException {
    sslContext = buildSslContext(config);
  }","  public void test5()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn(576).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(576).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn(true).when(asyncHttpClientConfig0).isFilterInsecureCipherSuites();
      doReturn(true).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(true).when(asyncHttpClientConfig0).isUseOpenSsl();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.init(asyncHttpClientConfig0);
        fail(""Expecting exception: NoClassDefFoundError"");
      } catch(NoClassDefFoundError e) {
         //
         // io/netty/internal/tcnative/SSLPrivateKeyMethod
         //
         verifyException(""io.netty.handler.ssl.SslContext"", e);
      }
  }"
2496,"  public void init(AsyncHttpClientConfig config) throws SSLException {
    sslContext = buildSslContext(config);
  }","  public void test6()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      String[] stringArray0 = new String[2];
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((Object) stringArray0, (Object) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((Object) stringArray0, (Object) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn(194).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn((-1816)).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig0).isUseOpenSsl();
      // Undeclared exception!
      try { 
        defaultSslEngineFactory0.init(asyncHttpClientConfig0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
2497,"  public void init(AsyncHttpClientConfig config) throws SSLException {
    sslContext = buildSslContext(config);
  }","  public void test7()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      SslContext sslContext0 = mock(SslContext.class, new ViolatedAssumptionAnswer());
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(sslContext0, (SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      defaultSslEngineFactory0.init(asyncHttpClientConfig0);
  }"
2498,"  public void destroy() {
    ReferenceCountUtil.release(sslContext);
  }","  public void test8()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      defaultSslEngineFactory0.destroy();
  }"
2499,"  public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int peerPort) {
    SSLEngine sslEngine =
      config.isDisableHttpsEndpointIdentificationAlgorithm() ?
        sslContext.newEngine(ByteBufAllocator.DEFAULT) :
        sslContext.newEngine(ByteBufAllocator.DEFAULT, domain(peerHost), peerPort);
    configureSslEngine(sslEngine, config);
    return sslEngine;
  }","  public void test9()  throws Throwable  {
      DefaultSslEngineFactory defaultSslEngineFactory0 = new DefaultSslEngineFactory();
      AsyncHttpClientConfig asyncHttpClientConfig0 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledCipherSuites();
      doReturn((String[]) null).when(asyncHttpClientConfig0).getEnabledProtocols();
      doReturn((SslContext) null).when(asyncHttpClientConfig0).getSslContext();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionCacheSize();
      doReturn(0).when(asyncHttpClientConfig0).getSslSessionTimeout();
      doReturn(false).when(asyncHttpClientConfig0).isFilterInsecureCipherSuites();
      doReturn(false).when(asyncHttpClientConfig0).isUseInsecureTrustManager();
      doReturn(false).when(asyncHttpClientConfig0).isUseOpenSsl();
      defaultSslEngineFactory0.init(asyncHttpClientConfig0);
      AsyncHttpClientConfig asyncHttpClientConfig1 = mock(AsyncHttpClientConfig.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(asyncHttpClientConfig1).isDisableHttpsEndpointIdentificationAlgorithm();
      SSLEngine sSLEngine0 = defaultSslEngineFactory0.newSslEngine(asyncHttpClientConfig1, ""f]s2@Gaw).8Y}63x"", 0);
}"
