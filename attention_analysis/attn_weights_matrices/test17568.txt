17568
Test: public void testParseSourceMetaMap() throws Exception { final String INPUT1 = "file1"; final String INPUT2 = "file2"; LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap(); inputs.put(INPUT1, "var __FOO__ = 1;"); inputs.put(INPUT2, "var __BAR__ = 2;"); RunResult result1 = compile(inputs.get(INPUT1), INPUT1); RunResult result2 = compile(inputs.get(INPUT2), INPUT2); final String MAP1 = "map1"; final String MAP2 = "map2"; final LinkedHashMap<String, String> maps = Maps.newLinkedHashMap(); maps.put(MAP1, result1.sourceMapFileContent); maps.put(MAP2, result2.sourceMapFileContent); List<SourceMapSection> sections = Lists.newArrayList(); StringBuilder output = new StringBuilder(); FilePosition offset = appendAndCount(output, result1.generatedSource); sections.add(SourceMapSection.forURL(MAP1, 0, 0)); output.append(result2.generatedSource); sections.add( SourceMapSection.forURL(MAP2, offset.getLine(), offset.getColumn())); SourceMapGeneratorV3 generator = new SourceMapGeneratorV3(); StringBuilder mapContents = new StringBuilder(); generator.appendIndexMapTo(mapContents, "out.js", sections); check(inputs, output.toString(), mapContents.toString(), new SourceMapSupplier() { @Override public String getSourceMap(String url){ return maps.get(url); }}); }
Code: public String getLine(int lineNumber) { String js = ""; try { js = getCode(); } catch (IOException e) { return null; } int pos = 0; int startLine = 1; if (lineNumber >= lastLine) { pos = lastOffset; startLine = lastLine; } for (int n = startLine; n < lineNumber; n++) { int nextpos = js.indexOf('\n', pos); if (nextpos == -1) { return null; } pos = nextpos + 1; } lastOffset = pos; lastLine = lineNumber; if (js.indexOf('\n', pos) == -1) { return null; } else { return js.substring(pos, js.indexOf('\n', pos)); } }
tensor([[0.0077, 0.0097, 0.0172,  ..., 0.0532, 0.0036, 0.0036],
        [0.0076, 0.0086, 0.0218,  ..., 0.0504, 0.0031, 0.0031],
        [0.0076, 0.0126, 0.0186,  ..., 0.0421, 0.0038, 0.0038],
        ...,
        [0.0079, 0.0123, 0.0212,  ..., 0.0486, 0.0032, 0.0032],
        [0.0054, 0.0100, 0.0198,  ..., 0.0479, 0.0031, 0.0031],
        [0.0054, 0.0100, 0.0198,  ..., 0.0479, 0.0031, 0.0031]])