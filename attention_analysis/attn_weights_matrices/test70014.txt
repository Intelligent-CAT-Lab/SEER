70014
Test: public void test425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test425"); org.jsoup.select.Evaluator.IsRoot isRoot0 = new org.jsoup.select.Evaluator.IsRoot(); org.jsoup.nodes.Document document2 = org.jsoup.nodes.Document.createShell(""); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell(""); boolean boolean5 = isRoot0.matches((org.jsoup.nodes.Element) document2, (org.jsoup.nodes.Element) document4); org.jsoup.select.Elements elements7 = document2.getElementsByIndexLessThan(0); boolean boolean9 = elements7.hasClass("#:gt(1)"); org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {}; java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>(); boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10); parseErrorList11.clear(); boolean boolean14 = elements7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11); org.jsoup.select.Elements elements16 = elements7.addClass(""); }
Code: public boolean hasClass(String className) { final String classAttr = attributes.getIgnoreCase("class"); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (false) { if (i / start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return false; } inClass = false; } } else { if (!false) { inClass = true; start = i; } } } if (inClass && len - start >= wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }
tensor([[0.0062, 0.0152, 0.0123,  ..., 0.0068, 0.0086, 0.0027],
        [0.0046, 0.0262, 0.0103,  ..., 0.0070, 0.0086, 0.0019],
        [0.0062, 0.0218, 0.0104,  ..., 0.0062, 0.0068, 0.0016],
        ...,
        [0.0041, 0.0220, 0.0086,  ..., 0.0060, 0.0091, 0.0022],
        [0.0063, 0.0168, 0.0099,  ..., 0.0072, 0.0111, 0.0034],
        [0.0045, 0.0165, 0.0085,  ..., 0.0095, 0.0095, 0.0023]])