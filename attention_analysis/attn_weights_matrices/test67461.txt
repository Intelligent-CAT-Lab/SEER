67461
Test: public void testBaseTypeId1616() throws Exception { ObjectMapper mapper = new ObjectMapper(); Collection<NamedType> subtypes = new StdSubtypeResolver().collectAndResolveSubtypesByTypeId( mapper.getDeserializationConfig(), null, mapper.constructType(Base1616.class)); Set<String> ok = new HashSet<>(Arrays.asList("A", "B")); for (NamedType type : subtypes) { String id = type.getName(); if (!ok.contains(id)) { fail("Unexpected id '"+id+"' (mapping to: "+type.getType()+"), should be one of: "+ok); } } }
Code: public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config,AnnotatedMember property, JavaType baseType){final AnnotationIntrospector ai = config.getAnnotationIntrospector();Class<?> rawBase = baseType.getRawClass();Set<Class<?>> typesHandled = new HashSet<Class<?>>();Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();NamedType rootType = new NamedType(rawBase, null);AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,rawBase);_collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);Collection<NamedType> st = ai.findSubtypes(property);if (st != null) {for (NamedType nt : st) {;_collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);}}if (_registeredSubtypes != null) {for (NamedType subtype : _registeredSubtypes) {if (rawBase.isAssignableFrom(subtype.getType())) { AnnotatedClass curr = AnnotatedClassResolver.resolveWithoutSuperTypes(config,subtype.getType());;}}}return _combineNamedAndUnnamed(rawBase, typesHandled, byName);}
tensor([[0.0119, 0.0214, 0.0239,  ..., 0.0122, 0.0101, 0.0322],
        [0.0119, 0.0152, 0.0185,  ..., 0.0151, 0.0107, 0.0364],
        [0.0079, 0.0169, 0.0241,  ..., 0.0109, 0.0082, 0.0432],
        ...,
        [0.0094, 0.0190, 0.0242,  ..., 0.0108, 0.0073, 0.0419],
        [0.0109, 0.0195, 0.0246,  ..., 0.0118, 0.0120, 0.0313],
        [0.0104, 0.0172, 0.0211,  ..., 0.0123, 0.0097, 0.0330]])