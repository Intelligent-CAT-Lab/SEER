15580
Test: public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options(); boolean boolean3 = options1.hasOption("[ Options: [ short {} ] [ long {} ]"); boolean boolean5 = options1.hasOption("[ option: :: ]"); org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine7 = posixParser6.cmd; org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine(); java.lang.String str11 = commandLine8.getOptionValue('#', ""); java.util.Properties properties13 = commandLine8.getOptionProperties(""); posixParser6.processProperties(properties13); posixParser6.burstToken("", true); org.apache.commons.cli.Options options18 = null; org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine(); java.lang.String str22 = commandLine19.getOptionValue('#', ""); java.lang.String str24 = commandLine19.getOptionValue(' '); java.lang.String[] strArray25 = commandLine19.getArgs(); java.lang.String[] strArray27 = posixParser6.flatten(options18, strArray25, true); java.lang.String[] strArray29 = posixParser0.flatten(options1, strArray25, false); org.apache.commons.cli.CommandLine commandLine30 = new org.apache.commons.cli.CommandLine(); java.lang.String str33 = commandLine30.getOptionValue('#', ""); java.lang.String str35 = commandLine30.getOptionValue("hi!"); org.apache.commons.cli.Option[] optionArray36 = commandLine30.getOptions(); java.util.Properties properties38 = commandLine30.getOptionProperties("org.apache.commons.cli.MissingOptionException: hi!"); posixParser0.processProperties(properties38); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init(); this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); while (iter.hasNext()) { String token = (String) iter.next(); if (token.startsWith("--")) { int pos = token.indexOf('='); String opt = pos == -1 ? token : token.substring(0, pos); if (!options.hasOption(opt) && stopAtNonOption) { process(token); } else { tokens.add(opt); if (pos != -1) { tokens.add(token.substring(pos + 1)); } } } else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); } else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) { process(token); } else { tokens.add(token); } gobble(iter); } return (String[]) tokens.toArray(new String[tokens.size()]); }
tensor([[0.0098, 0.0024, 0.0103,  ..., 0.0096, 0.0063, 0.0021],
        [0.0088, 0.0022, 0.0098,  ..., 0.0082, 0.0067, 0.0022],
        [0.0083, 0.0036, 0.0110,  ..., 0.0098, 0.0064, 0.0028],
        ...,
        [0.0094, 0.0033, 0.0107,  ..., 0.0091, 0.0064, 0.0025],
        [0.0095, 0.0018, 0.0134,  ..., 0.0116, 0.0078, 0.0018],
        [0.0092, 0.0022, 0.0094,  ..., 0.0120, 0.0070, 0.0023]])