101005
Test: public void test506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test506"); java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null; org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName timeZoneName2 = new org.joda.time.format.DateTimeFormatterBuilder.TimeZoneName(2021, strMap1); org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.format.DateTimeFormatterBuilder.FixedNumber fixedNumber6 = new org.joda.time.format.DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType3, 125, false); org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(); java.lang.Object obj9 = null; org.joda.time.Instant instant10 = new org.joda.time.Instant(obj9); org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone(); org.joda.time.Chronology chronology12 = iSOChronology8.withZone(dateTimeZone11); org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (short) 0); org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone11, (org.joda.time.ReadableInstant) mutableDateTime14); int int16 = gJChronology15.getMinimumDaysInFirstWeek(); java.util.Locale locale17 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(40L, (org.joda.time.Chronology) gJChronology15, locale17, (java.lang.Integer) 2000); int int22 = fixedNumber6.parseInto(dateTimeParserBucket19, "", 12); try { int int25 = timeZoneName2.parseInto(dateTimeParserBucket19, "32", 26); } catch (java.lang.StringIndexOutOfBoundsException e) { } }
Code: public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, iDefaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; }
tensor([[0.0077, 0.0047, 0.0106,  ..., 0.0087, 0.0282, 0.0035],
        [0.0052, 0.0037, 0.0090,  ..., 0.0084, 0.0281, 0.0026],
        [0.0066, 0.0039, 0.0091,  ..., 0.0092, 0.0321, 0.0030],
        ...,
        [0.0050, 0.0028, 0.0097,  ..., 0.0071, 0.0331, 0.0029],
        [0.0059, 0.0031, 0.0077,  ..., 0.0075, 0.0321, 0.0019],
        [0.0056, 0.0042, 0.0105,  ..., 0.0123, 0.0209, 0.0032]])