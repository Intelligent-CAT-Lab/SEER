17976
Test: public void test37() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test37"); java.nio.charset.CharsetEncoder charsetEncoder5 = null; java.lang.String str6 = com.google.javascript.jscomp.CodeGenerator.strEscape("Not declared as a constructor", 'a', "\"46\"", "DiagnosticGroup<globalThis>", "DiagnosticGroup<globalThis>", charsetEncoder5); }
Code: static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append("\\>"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = "/script"; final String START_COMMENT = "!--"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append("<\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append("<\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); } static String identifierEscape(String s) { if (NodeUtil.isLatin(s)) { return s; } StringBuilder sb = new StringBuilder(); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 0x1F && c < 0x7F) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } return sb.toString(); } private static int getNonEmptyChildCount(Node n, int maxCount) { int i = 0; Node c = n.getFirstChild(); for (; c != null && i < maxCount; c = c.getNext()) { if (c.getType() == Token.BLOCK) { i += getNonEmptyChildCount(c, maxCount-i); } else if (c.getType() != Token.EMPTY) { i++; } } return i; } private static Node getFirstNonEmptyChild(Node n) { for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.getType() == Token.BLOCK) { Node result = getFirstNonEmptyChild(c); if (result != null) { return result; } } else if (c.getType() != Token.EMPTY) { return c; } } return null; } enum Context { STATEMENT, BEFORE_DANGLING_ELSE, START_OF_EXPR, PRESERVE_BLOCK, IN_FOR_INIT_CLAUSE, OTHER } private Context getContextForNonEmptyExpression(Context currentContext) { return currentContext == Context.BEFORE_DANGLING_ELSE ? Context.BEFORE_DANGLING_ELSE : Context.OTHER; } private Context getContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER); } private Context clearContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context); } private static void appendHexJavaScriptRepresentation( StringBuilder sb, char c) { try { appendHexJavaScriptRepresentation(c, sb); } catch (IOException ex) { throw new RuntimeException(ex); } } private static void appendHexJavaScriptRepresentation( int codePoint, Appendable out) throws IOException { if (Character.isSupplementaryCodePoint(codePoint)) { char[] surrogates = Character.toChars(codePoint); appendHexJavaScriptRepresentation(surrogates[0], out); appendHexJavaScriptRepresentation(surrogates[1], out); return; } out.append("\\u") .append(HEX_CHARS[(codePoint >>> 12) & 0xf]) .append(HEX_CHARS[(codePoint >>> 8) & 0xf]) .append(HEX_CHARS[(codePoint >>> 4) & 0xf]) .append(HEX_CHARS[codePoint & 0xf]); }}
tensor([[0.0044, 0.0026, 0.0014,  ..., 0.0018, 0.0014, 0.0057],
        [0.0048, 0.0020, 0.0014,  ..., 0.0014, 0.0015, 0.0059],
        [0.0046, 0.0021, 0.0013,  ..., 0.0014, 0.0011, 0.0059],
        ...,
        [0.0039, 0.0024, 0.0017,  ..., 0.0017, 0.0015, 0.0051],
        [0.0044, 0.0024, 0.0018,  ..., 0.0015, 0.0015, 0.0043],
        [0.0039, 0.0019, 0.0017,  ..., 0.0019, 0.0013, 0.0042]])