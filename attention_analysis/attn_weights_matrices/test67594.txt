67594
Test: public void test25() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test25"); com.fasterxml.jackson.databind.JavaType javaType0 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer2 = null; com.fasterxml.jackson.databind.ser.std.SqlDateSerializer sqlDateSerializer4 = new com.fasterxml.jackson.databind.ser.std.SqlDateSerializer((java.lang.Boolean) false); com.fasterxml.jackson.databind.SerializerProvider serializerProvider5 = null; com.fasterxml.jackson.databind.BeanProperty beanProperty6 = null; com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer7 = sqlDateSerializer4.createContextual(serializerProvider5, beanProperty6); com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer objectArraySerializer8 = new com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer(javaType0, false, typeSerializer2, (com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) wildcardJsonSerializer7); com.fasterxml.jackson.databind.cfg.BaseSettings baseSettings9 = null; com.fasterxml.jackson.databind.jsontype.SubtypeResolver subtypeResolver10 = null; com.fasterxml.jackson.databind.introspect.SimpleMixInResolver simpleMixInResolver11 = null; com.fasterxml.jackson.databind.util.RootNameLookup rootNameLookup12 = null; com.fasterxml.jackson.databind.SerializationConfig serializationConfig13 = new com.fasterxml.jackson.databind.SerializationConfig(baseSettings9, subtypeResolver10, simpleMixInResolver11, rootNameLookup12); com.fasterxml.jackson.core.FormatFeature[] formatFeatureArray14 = new com.fasterxml.jackson.core.FormatFeature[] {}; com.fasterxml.jackson.databind.SerializationConfig serializationConfig15 = serializationConfig13.withoutFeatures(formatFeatureArray14); boolean boolean16 = objectArraySerializer8.isEmpty((java.lang.Object[]) formatFeatureArray14); com.fasterxml.jackson.databind.ObjectMapper objectMapper17 = null; com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory18 = new com.fasterxml.jackson.databind.MappingJsonFactory(objectMapper17); com.fasterxml.jackson.databind.ser.DefaultSerializerProvider defaultSerializerProvider19 = null; com.fasterxml.jackson.databind.deser.DefaultDeserializationContext defaultDeserializationContext20 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper21 = new com.fasterxml.jackson.databind.ObjectMapper((com.fasterxml.jackson.core.JsonFactory) mappingJsonFactory18, defaultSerializerProvider19, defaultDeserializationContext20); com.fasterxml.jackson.databind.MapperFeature[] mapperFeatureArray22 = new com.fasterxml.jackson.databind.MapperFeature[] {}; com.fasterxml.jackson.databind.ObjectMapper objectMapper23 = objectMapper21.enable(mapperFeatureArray22); boolean boolean24 = objectArraySerializer8.isEmpty((java.lang.Object[]) mapperFeatureArray22); com.fasterxml.jackson.databind.cfg.BaseSettings baseSettings25 = null; com.fasterxml.jackson.databind.jsontype.SubtypeResolver subtypeResolver26 = null; com.fasterxml.jackson.databind.introspect.SimpleMixInResolver simpleMixInResolver27 = null; com.fasterxml.jackson.databind.util.RootNameLookup rootNameLookup28 = null; com.fasterxml.jackson.databind.SerializationConfig serializationConfig29 = new com.fasterxml.jackson.databind.SerializationConfig(baseSettings25, subtypeResolver26, simpleMixInResolver27, rootNameLookup28); com.fasterxml.jackson.core.FormatFeature[] formatFeatureArray30 = new com.fasterxml.jackson.core.FormatFeature[] {}; com.fasterxml.jackson.databind.SerializationConfig serializationConfig31 = serializationConfig29.withoutFeatures(formatFeatureArray30); com.fasterxml.jackson.databind.ObjectMapper objectMapper32 = null; com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory33 = new com.fasterxml.jackson.databind.MappingJsonFactory(objectMapper32); com.fasterxml.jackson.databind.ser.DefaultSerializerProvider defaultSerializerProvider34 = null; com.fasterxml.jackson.databind.deser.DefaultDeserializationContext defaultDeserializationContext35 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper36 = new com.fasterxml.jackson.databind.ObjectMapper((com.fasterxml.jackson.core.JsonFactory) mappingJsonFactory33, defaultSerializerProvider34, defaultDeserializationContext35); com.fasterxml.jackson.databind.MapperFeature[] mapperFeatureArray37 = new com.fasterxml.jackson.databind.MapperFeature[] {}; com.fasterxml.jackson.databind.ObjectMapper objectMapper38 = objectMapper36.enable(mapperFeatureArray37); com.fasterxml.jackson.databind.JavaType javaType39 = null; com.fasterxml.jackson.databind.ObjectWriter objectWriter40 = objectMapper36.writerFor(javaType39); com.fasterxml.jackson.databind.ObjectMapper objectMapper41 = null; com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory42 = new com.fasterxml.jackson.databind.MappingJsonFactory(objectMapper41); com.fasterxml.jackson.databind.ser.DefaultSerializerProvider defaultSerializerProvider43 = null; com.fasterxml.jackson.databind.deser.DefaultDeserializationContext defaultDeserializationContext44 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper45 = new com.fasterxml.jackson.databind.ObjectMapper((com.fasterxml.jackson.core.JsonFactory) mappingJsonFactory42, defaultSerializerProvider43, defaultDeserializationContext44); com.fasterxml.jackson.databind.ObjectMapper objectMapper46 = mappingJsonFactory42.getCodec(); com.fasterxml.jackson.core.JsonFactory jsonFactory47 = mappingJsonFactory42.copy(); byte[] byteArray52 = new byte[] { (byte) 1, (byte) 0, (byte) 100, (byte) -1 }; com.fasterxml.jackson.databind.node.BinaryNode binaryNode53 = new com.fasterxml.jackson.databind.node.BinaryNode(byteArray52); byte[] byteArray54 = binaryNode53.binaryValue(); com.fasterxml.jackson.core.JsonParser jsonParser55 = jsonFactory47.createParser(byteArray54); com.fasterxml.jackson.databind.DeserializationContext deserializationContext56 = null; com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer57 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser55, deserializationContext56); com.fasterxml.jackson.databind.SequenceWriter sequenceWriter58 = objectWriter40.writeValues((com.fasterxml.jackson.core.JsonGenerator) tokenBuffer57); com.fasterxml.jackson.core.JsonGenerator jsonGenerator59 = tokenBuffer57.useDefaultPrettyPrinter(); com.fasterxml.jackson.databind.SerializerProvider serializerProvider60 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer61 = null; try { objectArraySerializer8.serializeWithType((java.lang.Object[]) formatFeatureArray30, (com.fasterxml.jackson.core.JsonGenerator) tokenBuffer57, serializerProvider60, typeSerializer61); } catch (java.lang.NullPointerException e) { } }
Code: public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (false) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (false) { return this; } JsonFormat.Shape shape = format.getShape(); if (true) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportMappingProblem("Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { ; } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }
tensor([[0.0039, 0.0169, 0.0023,  ..., 0.0058, 0.0074, 0.0018],
        [0.0038, 0.0175, 0.0024,  ..., 0.0046, 0.0060, 0.0021],
        [0.0032, 0.0251, 0.0024,  ..., 0.0049, 0.0061, 0.0016],
        ...,
        [0.0041, 0.0170, 0.0031,  ..., 0.0052, 0.0071, 0.0020],
        [0.0048, 0.0137, 0.0033,  ..., 0.0062, 0.0064, 0.0022],
        [0.0028, 0.0185, 0.0027,  ..., 0.0055, 0.0079, 0.0016]])