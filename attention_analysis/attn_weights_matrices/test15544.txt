15544
Test: public void test1079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1079"); org.apache.commons.cli.Option option4 = new org.apache.commons.cli.Option("", "hi!", false, "hi!"); option4.setRequired(false); option4.setOptionalArg(true); boolean boolean9 = option4.hasLongOpt(); char char10 = option4.getValueSeparator(); option4.setValueSeparator(' '); java.lang.String str13 = option4.getValue(); java.lang.Object obj14 = option4.clone(); boolean boolean15 = option4.hasArgs(); java.lang.String str16 = option4.getKey(); org.apache.commons.cli.Option option18 = org.apache.commons.cli.OptionBuilder.create("arg"); int int19 = option18.getId(); int int20 = option18.getArgs(); org.apache.commons.cli.OptionBuilder optionBuilder21 = org.apache.commons.cli.OptionBuilder.withType((java.lang.Object) option18); java.lang.String str22 = option18.getLongOpt(); option18.setLongOpt("[ option: hi! :: hi! ]"); option4.setType((java.lang.Object) option18); java.lang.String str27 = option4.getValue("[ option: :: [ option: arg arg :: arg ] ]"); option4.setRequired(true); java.lang.String str30 = option4.getOpt(); }
Code: public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; }
tensor([[0.0173, 0.0538, 0.0483,  ..., 0.0192, 0.0336, 0.0076],
        [0.0186, 0.0490, 0.0420,  ..., 0.0176, 0.0368, 0.0088],
        [0.0150, 0.0578, 0.0388,  ..., 0.0218, 0.0288, 0.0064],
        ...,
        [0.0114, 0.0535, 0.0516,  ..., 0.0164, 0.0313, 0.0062],
        [0.0175, 0.0506, 0.0489,  ..., 0.0204, 0.0313, 0.0058],
        [0.0126, 0.0506, 0.0360,  ..., 0.0269, 0.0303, 0.0066]])