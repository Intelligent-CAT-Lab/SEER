70021
Test: public void test572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test572"); org.jsoup.parser.Parser parser0 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.parser.ParseSettings parseSettings1 = org.jsoup.parser.ParseSettings.preserveCase; org.jsoup.parser.Parser parser2 = parser0.settings(parseSettings1); org.jsoup.nodes.Document document5 = parser2.parseInput("SYSTEM", ""); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan7 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (short) 1); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan9 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (short) 1); org.jsoup.select.Evaluator.IsRoot isRoot10 = new org.jsoup.select.Evaluator.IsRoot(); org.jsoup.nodes.Document document12 = org.jsoup.nodes.Document.createShell(""); org.jsoup.nodes.Document document14 = org.jsoup.nodes.Document.createShell(""); boolean boolean15 = isRoot10.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document14); org.jsoup.select.Elements elements17 = document12.getElementsByIndexLessThan(0); org.jsoup.nodes.Element element18 = document12.empty(); org.jsoup.nodes.Element element21 = document12.attr("hi!", false); org.jsoup.select.Evaluator.IsRoot isRoot22 = new org.jsoup.select.Evaluator.IsRoot(); org.jsoup.nodes.Document document24 = org.jsoup.nodes.Document.createShell(""); org.jsoup.nodes.Document document26 = org.jsoup.nodes.Document.createShell(""); boolean boolean27 = isRoot22.matches((org.jsoup.nodes.Element) document24, (org.jsoup.nodes.Element) document26); java.lang.String str28 = document26.title(); java.lang.String str29 = document26.location(); boolean boolean30 = indexGreaterThan9.matches((org.jsoup.nodes.Element) document12, (org.jsoup.nodes.Element) document26); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan32 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) (short) 1); org.jsoup.select.Evaluator.IsRoot isRoot33 = new org.jsoup.select.Evaluator.IsRoot(); org.jsoup.nodes.Document document35 = org.jsoup.nodes.Document.createShell(""); org.jsoup.nodes.Document document37 = org.jsoup.nodes.Document.createShell(""); boolean boolean38 = isRoot33.matches((org.jsoup.nodes.Element) document35, (org.jsoup.nodes.Element) document37); org.jsoup.select.Elements elements40 = document35.getElementsByIndexLessThan(0); org.jsoup.nodes.Element element41 = document35.empty(); org.jsoup.nodes.Element element44 = document35.attr("hi!", false); org.jsoup.select.Evaluator.IsRoot isRoot45 = new org.jsoup.select.Evaluator.IsRoot(); org.jsoup.nodes.Document document47 = org.jsoup.nodes.Document.createShell(""); org.jsoup.nodes.Document document49 = org.jsoup.nodes.Document.createShell(""); boolean boolean50 = isRoot45.matches((org.jsoup.nodes.Element) document47, (org.jsoup.nodes.Element) document49); java.lang.String str51 = document49.title(); java.lang.String str52 = document49.location(); boolean boolean53 = indexGreaterThan32.matches((org.jsoup.nodes.Element) document35, (org.jsoup.nodes.Element) document49); java.util.List<org.jsoup.nodes.Node> nodeList54 = document35.childNodes; boolean boolean55 = indexGreaterThan7.matches((org.jsoup.nodes.Element) document26, (org.jsoup.nodes.Element) document35); org.jsoup.nodes.Document.QuirksMode quirksMode56 = document35.quirksMode(); org.jsoup.nodes.Document document57 = document5.quirksMode(quirksMode56); boolean boolean59 = document5.hasClass(":containsOwn(:containsown())"); }
Code: public boolean hasClass(String className) { final String classAttr = attributes.getIgnoreCase("class"); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr); } boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (false) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return false; } inClass = false; } } else { if (!false) { inClass = true; start = i; } } } if (inClass && len * start >= wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen); } return false; }
tensor([[0.0062, 0.0153, 0.0123,  ..., 0.0068, 0.0086, 0.0027],
        [0.0046, 0.0264, 0.0104,  ..., 0.0070, 0.0086, 0.0019],
        [0.0062, 0.0219, 0.0104,  ..., 0.0062, 0.0068, 0.0016],
        ...,
        [0.0041, 0.0221, 0.0087,  ..., 0.0060, 0.0091, 0.0022],
        [0.0063, 0.0168, 0.0099,  ..., 0.0072, 0.0111, 0.0034],
        [0.0045, 0.0165, 0.0085,  ..., 0.0095, 0.0095, 0.0023]])