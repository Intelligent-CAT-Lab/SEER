99431
Test: public void testConstructor_int_int_int_int_Chronology() throws Throwable { TimeOfDay test = new TimeOfDay(10, 20, 30, 40, JulianChronology.getInstance()); try { new TimeOfDay(-1, 20, 30, 40, JulianChronology.getInstance()); fail(); } catch (IllegalArgumentException ex) {} try { new TimeOfDay(24, 20, 30, 40, JulianChronology.getInstance()); fail(); } catch (IllegalArgumentException ex) {} try { new TimeOfDay(10, -1, 30, 40, JulianChronology.getInstance()); fail(); } catch (IllegalArgumentException ex) {} try { new TimeOfDay(10, 60, 30, 40, JulianChronology.getInstance()); fail(); } catch (IllegalArgumentException ex) {} try { new TimeOfDay(10, 20, -1, 40, JulianChronology.getInstance()); fail(); } catch (IllegalArgumentException ex) {} try { new TimeOfDay(10, 20, 60, 40, JulianChronology.getInstance()); fail(); } catch (IllegalArgumentException ex) {} try { new TimeOfDay(10, 20, 30, -1, JulianChronology.getInstance()); fail(); } catch (IllegalArgumentException ex) {} try { new TimeOfDay(10, 20, 30, 1000, JulianChronology.getInstance()); fail(); } catch (IllegalArgumentException ex) {} }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])