61599
Test: public void test0915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0915"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withCommentStart('\037'); java.lang.String str8 = cSVFormat2.toString(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withRecordSeparator(' '); java.lang.Character char13 = cSVFormat10.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withQuoteChar((java.lang.Character) ','); boolean boolean19 = cSVFormat16.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat21.validate(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withIgnoreEmptyLines(true); java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withHeader(strArray27); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat20.withHeader(strArray27); java.lang.String str30 = cSVFormat16.format((java.lang.Object[]) strArray27); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat10.withHeader(strArray27); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat10.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote34 = null; org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withQuotePolicy(quote34); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (true) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (getIgnoreSurroundingSpaces()) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0217, 0.0275, 0.0144,  ..., 0.0457, 0.0366, 0.0244],
        [0.0227, 0.0264, 0.0145,  ..., 0.0447, 0.0379, 0.0245],
        [0.0175, 0.0319, 0.0133,  ..., 0.0398, 0.0302, 0.0246],
        ...,
        [0.0209, 0.0325, 0.0169,  ..., 0.0388, 0.0331, 0.0229],
        [0.0162, 0.0284, 0.0131,  ..., 0.0421, 0.0241, 0.0169],
        [0.0219, 0.0307, 0.0145,  ..., 0.0431, 0.0269, 0.0241]])