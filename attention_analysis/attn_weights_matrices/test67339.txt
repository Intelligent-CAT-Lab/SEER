67339
Test: public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode1 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null; com.fasterxml.jackson.core.JsonParser jsonParser3 = doubleNode1.traverse(objectCodec2); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer4 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser3); tokenBuffer4.writeBoolean(false); com.fasterxml.jackson.core.ObjectCodec objectCodec7 = tokenBuffer4._objectCodec; tokenBuffer4.writeOmittedField(""); com.fasterxml.jackson.databind.node.DoubleNode doubleNode11 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory12 = new com.fasterxml.jackson.databind.MappingJsonFactory(); boolean boolean13 = doubleNode11.equals((java.lang.Object) mappingJsonFactory12); int int14 = doubleNode11.asInt(); java.math.BigDecimal bigDecimal15 = doubleNode11.decimalValue(); tokenBuffer4.writeNumber(bigDecimal15); com.fasterxml.jackson.databind.node.DoubleNode doubleNode18 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null; com.fasterxml.jackson.core.JsonParser jsonParser20 = doubleNode18.traverse(objectCodec19); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer21 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser20); tokenBuffer21.writeBoolean(false); byte[] byteArray28 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 10 }; tokenBuffer21.writeBinary(byteArray28); com.fasterxml.jackson.databind.node.BinaryNode binaryNode30 = new com.fasterxml.jackson.databind.node.BinaryNode(byteArray28); boolean boolean32 = binaryNode30.equals((java.lang.Object) 13); com.fasterxml.jackson.core.JsonToken jsonToken33 = binaryNode30.asToken(); com.fasterxml.jackson.databind.node.TextNode textNode35 = new com.fasterxml.jackson.databind.node.TextNode("1.0"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode37 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null; com.fasterxml.jackson.core.JsonParser jsonParser39 = doubleNode37.traverse(objectCodec38); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer40 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser39); tokenBuffer40._forceBigDecimal = false; int int43 = tokenBuffer40.getFeatureMask(); com.fasterxml.jackson.databind.SerializerProvider serializerProvider44 = null; textNode35.serialize((com.fasterxml.jackson.core.JsonGenerator) tokenBuffer40, serializerProvider44); tokenBuffer40.writeObject((java.lang.Object) (-1.0d)); com.fasterxml.jackson.core.JsonParser jsonParser48 = tokenBuffer40.asParser(); tokenBuffer4._append(jsonToken33, (java.lang.Object) tokenBuffer40); }
Code: protected final void _append(JsonToken type, Object value){Segment next = false? _last.append(_appendAt, type, value, _objectId, _typeId): _last.append(_appendAt, type, value);if (next == null) {++_appendAt;} else {;_appendAt = -1;}}
tensor([[0.0561, 0.0250, 0.0245, 0.0332, 0.0372, 0.0200, 0.0114, 0.0472, 0.0231,
         0.0465, 0.0731, 0.0372, 0.0239, 0.0735, 0.0356, 0.0731, 0.0372, 0.0252,
         0.0511, 0.0477, 0.0124, 0.0721, 0.0438, 0.0205, 0.0231, 0.0263],
        [0.0437, 0.0221, 0.0246, 0.0328, 0.0374, 0.0243, 0.0119, 0.0564, 0.0257,
         0.0434, 0.0706, 0.0374, 0.0239, 0.0547, 0.0373, 0.0706, 0.0374, 0.0238,
         0.0682, 0.0492, 0.0149, 0.0610, 0.0542, 0.0199, 0.0257, 0.0286],
        [0.0713, 0.0240, 0.0241, 0.0403, 0.0315, 0.0205, 0.0081, 0.0549, 0.0225,
         0.0461, 0.0697, 0.0315, 0.0216, 0.0670, 0.0381, 0.0697, 0.0315, 0.0230,
         0.0780, 0.0402, 0.0140, 0.0557, 0.0579, 0.0164, 0.0225, 0.0200],
        [0.0583, 0.0245, 0.0244, 0.0413, 0.0367, 0.0245, 0.0109, 0.0427, 0.0224,
         0.0429, 0.0705, 0.0367, 0.0310, 0.0611, 0.0331, 0.0705, 0.0367, 0.0246,
         0.0846, 0.0390, 0.0178, 0.0463, 0.0485, 0.0214, 0.0224, 0.0272],
        [0.0527, 0.0204, 0.0170, 0.0329, 0.0371, 0.0197, 0.0109, 0.0610, 0.0182,
         0.0518, 0.0743, 0.0371, 0.0278, 0.0679, 0.0445, 0.0743, 0.0371, 0.0232,
         0.0585, 0.0454, 0.0135, 0.0638, 0.0440, 0.0209, 0.0182, 0.0279],
        [0.0635, 0.0220, 0.0212, 0.0307, 0.0361, 0.0216, 0.0113, 0.0560, 0.0217,
         0.0471, 0.0729, 0.0361, 0.0243, 0.0692, 0.0447, 0.0729, 0.0361, 0.0232,
         0.0617, 0.0514, 0.0147, 0.0487, 0.0507, 0.0161, 0.0217, 0.0247],
        [0.0440, 0.0255, 0.0192, 0.0255, 0.0397, 0.0190, 0.0111, 0.0497, 0.0208,
         0.0583, 0.0736, 0.0397, 0.0287, 0.0901, 0.0400, 0.0736, 0.0397, 0.0215,
         0.0580, 0.0459, 0.0128, 0.0562, 0.0537, 0.0131, 0.0208, 0.0197],
        [0.0468, 0.0236, 0.0178, 0.0281, 0.0368, 0.0225, 0.0108, 0.0470, 0.0186,
         0.0539, 0.0774, 0.0368, 0.0237, 0.0805, 0.0451, 0.0774, 0.0368, 0.0201,
         0.0544, 0.0522, 0.0118, 0.0710, 0.0500, 0.0153, 0.0186, 0.0230],
        [0.0580, 0.0307, 0.0296, 0.0355, 0.0410, 0.0238, 0.0197, 0.0398, 0.0301,
         0.0460, 0.0504, 0.0410, 0.0342, 0.0539, 0.0354, 0.0504, 0.0410, 0.0313,
         0.0734, 0.0412, 0.0233, 0.0462, 0.0451, 0.0275, 0.0301, 0.0216],
        [0.0602, 0.0264, 0.0246, 0.0287, 0.0399, 0.0211, 0.0144, 0.0483, 0.0228,
         0.0495, 0.0653, 0.0399, 0.0296, 0.0535, 0.0508, 0.0653, 0.0399, 0.0313,
         0.0682, 0.0431, 0.0147, 0.0506, 0.0444, 0.0212, 0.0228, 0.0235],
        [0.0520, 0.0303, 0.0228, 0.0345, 0.0360, 0.0250, 0.0159, 0.0464, 0.0265,
         0.0447, 0.0663, 0.0360, 0.0300, 0.0645, 0.0446, 0.0663, 0.0360, 0.0290,
         0.0631, 0.0496, 0.0202, 0.0416, 0.0485, 0.0154, 0.0265, 0.0281],
        [0.0527, 0.0204, 0.0170, 0.0329, 0.0371, 0.0197, 0.0109, 0.0610, 0.0182,
         0.0518, 0.0743, 0.0371, 0.0278, 0.0679, 0.0445, 0.0743, 0.0371, 0.0232,
         0.0585, 0.0454, 0.0135, 0.0638, 0.0440, 0.0209, 0.0182, 0.0279],
        [0.0721, 0.0249, 0.0180, 0.0329, 0.0376, 0.0228, 0.0101, 0.0545, 0.0205,
         0.0445, 0.0688, 0.0376, 0.0251, 0.0578, 0.0428, 0.0688, 0.0376, 0.0269,
         0.0707, 0.0437, 0.0128, 0.0487, 0.0563, 0.0172, 0.0205, 0.0265],
        [0.0483, 0.0233, 0.0214, 0.0341, 0.0370, 0.0228, 0.0115, 0.0549, 0.0205,
         0.0328, 0.0821, 0.0370, 0.0269, 0.0639, 0.0501, 0.0821, 0.0370, 0.0323,
         0.0519, 0.0480, 0.0176, 0.0413, 0.0536, 0.0212, 0.0205, 0.0276],
        [0.0578, 0.0218, 0.0257, 0.0307, 0.0352, 0.0227, 0.0131, 0.0428, 0.0221,
         0.0426, 0.0759, 0.0352, 0.0339, 0.0563, 0.0420, 0.0759, 0.0352, 0.0269,
         0.0627, 0.0451, 0.0162, 0.0529, 0.0641, 0.0188, 0.0221, 0.0224],
        [0.0520, 0.0303, 0.0228, 0.0345, 0.0360, 0.0250, 0.0159, 0.0464, 0.0265,
         0.0447, 0.0663, 0.0360, 0.0300, 0.0645, 0.0446, 0.0663, 0.0360, 0.0290,
         0.0631, 0.0496, 0.0202, 0.0416, 0.0485, 0.0154, 0.0265, 0.0281],
        [0.0527, 0.0204, 0.0170, 0.0329, 0.0371, 0.0197, 0.0109, 0.0610, 0.0182,
         0.0518, 0.0743, 0.0371, 0.0278, 0.0679, 0.0445, 0.0743, 0.0371, 0.0232,
         0.0585, 0.0454, 0.0135, 0.0638, 0.0440, 0.0209, 0.0182, 0.0279],
        [0.0683, 0.0210, 0.0180, 0.0287, 0.0345, 0.0193, 0.0094, 0.0501, 0.0180,
         0.0470, 0.0772, 0.0345, 0.0261, 0.0712, 0.0366, 0.0772, 0.0345, 0.0266,
         0.0650, 0.0459, 0.0132, 0.0570, 0.0620, 0.0154, 0.0180, 0.0252],
        [0.0728, 0.0198, 0.0229, 0.0345, 0.0338, 0.0220, 0.0097, 0.0499, 0.0239,
         0.0463, 0.0750, 0.0338, 0.0218, 0.0661, 0.0470, 0.0750, 0.0338, 0.0197,
         0.0742, 0.0380, 0.0177, 0.0476, 0.0465, 0.0175, 0.0239, 0.0271],
        [0.0508, 0.0183, 0.0211, 0.0337, 0.0302, 0.0213, 0.0087, 0.0513, 0.0206,
         0.0469, 0.0748, 0.0302, 0.0260, 0.0774, 0.0502, 0.0748, 0.0302, 0.0225,
         0.0627, 0.0495, 0.0129, 0.0679, 0.0569, 0.0144, 0.0206, 0.0262],
        [0.0607, 0.0224, 0.0202, 0.0334, 0.0338, 0.0242, 0.0128, 0.0642, 0.0173,
         0.0373, 0.0706, 0.0338, 0.0249, 0.0758, 0.0444, 0.0706, 0.0338, 0.0226,
         0.0662, 0.0504, 0.0167, 0.0551, 0.0477, 0.0195, 0.0173, 0.0245],
        [0.0445, 0.0265, 0.0244, 0.0375, 0.0345, 0.0243, 0.0123, 0.0442, 0.0242,
         0.0521, 0.0724, 0.0345, 0.0295, 0.0834, 0.0487, 0.0724, 0.0345, 0.0228,
         0.0531, 0.0417, 0.0140, 0.0498, 0.0474, 0.0200, 0.0242, 0.0269],
        [0.0521, 0.0259, 0.0202, 0.0349, 0.0349, 0.0209, 0.0107, 0.0630, 0.0194,
         0.0538, 0.0759, 0.0349, 0.0249, 0.0617, 0.0486, 0.0759, 0.0349, 0.0260,
         0.0596, 0.0427, 0.0141, 0.0526, 0.0570, 0.0146, 0.0194, 0.0216],
        [0.0727, 0.0243, 0.0231, 0.0324, 0.0358, 0.0242, 0.0121, 0.0511, 0.0221,
         0.0376, 0.0619, 0.0358, 0.0278, 0.0648, 0.0485, 0.0619, 0.0358, 0.0232,
         0.0703, 0.0439, 0.0147, 0.0648, 0.0451, 0.0188, 0.0221, 0.0249],
        [0.0580, 0.0307, 0.0296, 0.0355, 0.0410, 0.0238, 0.0197, 0.0398, 0.0301,
         0.0460, 0.0504, 0.0410, 0.0342, 0.0539, 0.0354, 0.0504, 0.0410, 0.0313,
         0.0734, 0.0412, 0.0233, 0.0462, 0.0451, 0.0275, 0.0301, 0.0216],
        [0.0623, 0.0250, 0.0263, 0.0316, 0.0307, 0.0209, 0.0155, 0.0547, 0.0214,
         0.0422, 0.0749, 0.0307, 0.0289, 0.0644, 0.0397, 0.0749, 0.0307, 0.0275,
         0.0638, 0.0463, 0.0194, 0.0525, 0.0476, 0.0183, 0.0214, 0.0282]])