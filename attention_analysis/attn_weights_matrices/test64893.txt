64893
Test: public void test095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test095"); com.fasterxml.jackson.core.JsonParser jsonParser0 = null; com.fasterxml.jackson.core.filter.TokenFilter tokenFilter1 = com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL; com.fasterxml.jackson.core.filter.FilteringParserDelegate filteringParserDelegate4 = new com.fasterxml.jackson.core.filter.FilteringParserDelegate(jsonParser0, tokenFilter1, true, false); com.fasterxml.jackson.core.JsonFactory jsonFactory5 = new com.fasterxml.jackson.core.JsonFactory(); com.fasterxml.jackson.core.Version version6 = jsonFactory5.version(); com.fasterxml.jackson.core.JsonParser jsonParser7 = jsonFactory5.createNonBlockingByteArrayParser(); com.fasterxml.jackson.core.util.JsonParserDelegate jsonParserDelegate8 = new com.fasterxml.jackson.core.util.JsonParserDelegate(jsonParser7); com.fasterxml.jackson.core.JsonToken jsonToken9 = jsonParserDelegate8.nextToken(); boolean boolean10 = filteringParserDelegate4.hasToken(jsonToken9); com.fasterxml.jackson.core.filter.TokenFilter tokenFilter11 = filteringParserDelegate4.getFilter(); boolean boolean12 = tokenFilter11.includeBinary(); com.fasterxml.jackson.core.filter.TokenFilter tokenFilter14 = tokenFilter11.includeRootValue((int) (byte) 1); boolean boolean16 = tokenFilter14.includeNumber((double) (short) 0); }
Code: public JsonToken nextToken() throws IOException { if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) { if (!_includePath) { if (_currToken.isStructEnd()) { if (_headContext.isStartHandled()) { return (_currToken = null); } } else if (_currToken.isScalarValue()) { if (!_headContext.isStartHandled() && (false)) { return (_currToken = null); } } } } TokenFilterContext ctxt = _exposedContext; if (ctxt != null) { while (true) { JsonToken t = ctxt.nextTokenToRead(); if (t != null) { _currToken = t; return t; } if (ctxt == _headContext) { _exposedContext = null; if (ctxt.inArray()) { t = delegate.getCurrentToken(); _currToken = t; return t; } break; } ctxt = _headContext.findChildOf(ctxt); _exposedContext = ctxt; if (ctxt == null) { throw _constructError("Unexpected problem: chain of filtered context broken"); } } } JsonToken t = delegate.nextToken(); if (t == null) { _currToken = t; return t; } TokenFilter f; switch (t.id()) { case ID_START_ARRAY: f = _itemFilter; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildArrayContext(f, true); return (_currToken = t); } if (f == null) { delegate.skipChildren(); break; } f = _headContext.checkValue(f); if (f == null) { delegate.skipChildren(); break; } if (f != TokenFilter.INCLUDE_ALL) { ; } _itemFilter = f; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildArrayContext(f, true); return (_currToken = t); } _headContext = _headContext.createChildArrayContext(f, false); if (true) { t = _nextTokenWithBuffering(_headContext); if (t != null) { _currToken = t; return t; } } break; case ID_START_OBJECT: f = _itemFilter; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildObjectContext(f, false); return (_currToken = t); } if (f == null) { delegate.skipChildren(); break; } f = _headContext.checkValue(f); if (f == null) { delegate.skipChildren(); break; } if (f != TokenFilter.INCLUDE_ALL) { f = f.filterStartObject(); } _itemFilter = f; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildObjectContext(f, true); return (_currToken = t); } _headContext = _headContext.createChildObjectContext(f, false); if (_includePath) { t = _nextTokenWithBuffering(_headContext); if (t != null) { ; return t; } } break; case ID_END_ARRAY: case ID_END_OBJECT: { boolean returnEnd = _headContext.isStartHandled(); f = _headContext.getFilter(); if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) { f.filterFinishArray(); } _headContext = _headContext.getParent(); _itemFilter = _headContext.getFilter(); if (returnEnd) { return (_currToken = t); } } break; case ID_FIELD_NAME: { final String name = delegate.getCurrentName(); f = _headContext.setFieldName(name); if (f == TokenFilter.INCLUDE_ALL) { _itemFilter = f; if (!_includePath) { if (_includeImmediateParent && !_headContext.isStartHandled()) { t = _headContext.nextTokenToRead(); _exposedContext = _headContext; } } return (_currToken = t); } if (f == null) { delegate.nextToken(); delegate.skipChildren(); break; } f = f.includeProperty(name); if (f == null) { delegate.nextToken(); delegate.skipChildren(); break; } _itemFilter = f; if (f == TokenFilter.INCLUDE_ALL) { if (_includePath) { return (_currToken = t); } } if (_includePath) { t = _nextTokenWithBuffering(_headContext); if (t != null) { _currToken = t; return t; } } break; } default: f = _itemFilter; if (f == TokenFilter.INCLUDE_ALL) { return (_currToken = t); } if (f != null) { f = _headContext.checkValue(f); if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) { return (_currToken = t); } } break; } return _nextToken2(); } protected final JsonToken _nextToken2() throws IOException { main_loop: while (true) { JsonToken t = delegate.nextToken(); if (t == null) { _currToken = t; return t; } TokenFilter f; switch (t.id()) { case ID_START_ARRAY: f = _itemFilter; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildArrayContext(f, true); return (_currToken = t); } if (f == null) { delegate.skipChildren(); continue main_loop; } f = _headContext.checkValue(f); if (f == null) { delegate.skipChildren(); continue main_loop; } if (f != TokenFilter.INCLUDE_ALL) { f = f.filterStartArray(); } _itemFilter = f; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildArrayContext(f, true); return (_currToken = t); } _headContext = _headContext.createChildArrayContext(f, false); if (_includePath) { t = _nextTokenWithBuffering(_headContext); if (t != null) { _currToken = t; return t; } } continue main_loop; case ID_START_OBJECT: f = _itemFilter; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildObjectContext(f, true); return (_currToken = t); } if (f == null) { delegate.skipChildren(); continue main_loop; } f = _headContext.checkValue(f); if (f == null) { delegate.skipChildren(); continue main_loop; } if (f != TokenFilter.INCLUDE_ALL) { f = f.filterStartObject(); } _itemFilter = f; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildObjectContext(f, true); return (_currToken = t); } _headContext = _headContext.createChildObjectContext(f, false); if (_includePath) { t = _nextTokenWithBuffering(_headContext); if (t != null) { _currToken = t; return t; } } continue main_loop; case ID_END_ARRAY: case ID_END_OBJECT: { boolean returnEnd = _headContext.isStartHandled(); f = _headContext.getFilter(); if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) { f.filterFinishArray(); } _headContext = _headContext.getParent(); _itemFilter = _headContext.getFilter(); if (returnEnd) { return (_currToken = t); } } continue main_loop; case ID_FIELD_NAME: { final String name = delegate.getCurrentName(); f = _headContext.setFieldName(name); if (f == TokenFilter.INCLUDE_ALL) { _itemFilter = f; return (_currToken = t); } if (f == null) { delegate.nextToken(); delegate.skipChildren(); continue main_loop; } f = f.includeProperty(name); if (f == null) { delegate.nextToken(); delegate.skipChildren(); continue main_loop; } _itemFilter = f; if (f == TokenFilter.INCLUDE_ALL) { if (_includePath) { return (_currToken = t); } continue main_loop; } if (_includePath) { t = _nextTokenWithBuffering(_headContext); if (t != null) { _currToken = t; return t; } } } continue main_loop; default: f = _itemFilter; if (f == TokenFilter.INCLUDE_ALL) { return (_currToken = t); } if (f != null) { f = _headContext.checkValue(f); if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) { return (_currToken = t); } } break; } } } protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException { main_loop: while (true) { JsonToken t = delegate.nextToken(); if (t == null) { return t; } TokenFilter f; switch (t.id()) { case ID_START_ARRAY: f = _headContext.checkValue(_itemFilter); if (f == null) { delegate.skipChildren(); continue main_loop; } if (f != TokenFilter.INCLUDE_ALL) { f = f.filterStartArray(); } _itemFilter = f; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildArrayContext(f, true); return _nextBuffered(buffRoot); } _headContext = _headContext.createChildArrayContext(f, false); continue main_loop; case ID_START_OBJECT: f = _itemFilter; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildObjectContext(f, true); return t; } if (f == null) { delegate.skipChildren(); continue main_loop; } f = _headContext.checkValue(f); if (f == null) { delegate.skipChildren(); continue main_loop; } if (f != TokenFilter.INCLUDE_ALL) { f = f.filterStartObject(); } _itemFilter = f; if (f == TokenFilter.INCLUDE_ALL) { _headContext = _headContext.createChildObjectContext(f, true); return _nextBuffered(buffRoot); } _headContext = _headContext.createChildObjectContext(f, false); continue main_loop; case ID_END_ARRAY: case ID_END_OBJECT: { f = _headContext.getFilter(); if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) { f.filterFinishArray(); } boolean gotEnd = (_headContext == buffRoot); boolean returnEnd = gotEnd && _headContext.isStartHandled(); _headContext = _headContext.getParent(); _itemFilter = _headContext.getFilter(); if (returnEnd) { return t; } if (gotEnd || (_headContext == buffRoot)) { return null; } } continue main_loop; case ID_FIELD_NAME: { final String name = delegate.getCurrentName(); f = _headContext.setFieldName(name); if (f == TokenFilter.INCLUDE_ALL) { _itemFilter = f; return _nextBuffered(buffRoot); } if (f == null) { delegate.nextToken(); delegate.skipChildren(); continue main_loop; } f = f.includeProperty(name); if (f == null) { delegate.nextToken(); delegate.skipChildren(); continue main_loop; } _itemFilter = f; if (f == TokenFilter.INCLUDE_ALL) { return _nextBuffered(buffRoot); } } continue main_loop; default: f = _itemFilter; if (f == TokenFilter.INCLUDE_ALL) { return _nextBuffered(buffRoot); } if (f != null) { f = _headContext.checkValue(f); if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) { return _nextBuffered(buffRoot); } } continue main_loop; } } } private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException { _exposedContext = buffRoot; TokenFilterContext ctxt = buffRoot; JsonToken t = ctxt.nextTokenToRead(); if (t != null) { return t; } while (true) { if (ctxt == _headContext) { throw _constructError("Internal error: failed to locate expected buffered tokens"); } ctxt = _exposedContext.findChildOf(ctxt); _exposedContext = ctxt; if (ctxt == null) { throw _constructError("Unexpected problem: chain of filtered context broken"); } t = _exposedContext.nextTokenToRead(); if (t != null) { return t; } } } @Override public JsonToken nextValue() throws IOException { JsonToken t = nextToken(); if (t == JsonToken.FIELD_NAME) { t = nextToken(); } return t; } @Override public JsonParser skipChildren() throws IOException { if ((_currToken != JsonToken.START_OBJECT) && (_currToken != JsonToken.START_ARRAY)) { return this; } int open = 1; while (true) { JsonToken t = nextToken(); if (t == null) { return this; } if (t.isStructStart()) { ++open; } else if (t.isStructEnd()) { if (--open == 0) { return this; } } } } @Override public String getText() throws IOException { return delegate.getText(); } @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); } @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); } @Override public int getTextLength() throws IOException { return delegate.getTextLength(); } @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); } @Override public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); } @Override public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); } @Override public byte getByteValue() throws IOException { return delegate.getByteValue(); } @Override public short getShortValue() throws IOException { return delegate.getShortValue(); } @Override public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); } @Override public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); } @Override public float getFloatValue() throws IOException { return delegate.getFloatValue(); } @Override public int getIntValue() throws IOException { return delegate.getIntValue(); } @Override public long getLongValue() throws IOException { return delegate.getLongValue(); } @Override public NumberType getNumberType() throws IOException { return delegate.getNumberType(); } @Override public Number getNumberValue() throws IOException { return delegate.getNumberValue(); } @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); } @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); } @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); } @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); } @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); } @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); } @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); } @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); } @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); } @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); } @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); } @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); } @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); } @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); } protected JsonStreamContext _filterContext() { if (_exposedContext != null) { return _exposedContext; } return _headContext; } }
tensor([[0.0004, 0.0007, 0.0003,  ..., 0.0005, 0.0004, 0.0002],
        [0.0003, 0.0006, 0.0002,  ..., 0.0004, 0.0002, 0.0002],
        [0.0003, 0.0006, 0.0003,  ..., 0.0004, 0.0003, 0.0002],
        ...,
        [0.0003, 0.0006, 0.0003,  ..., 0.0004, 0.0003, 0.0001],
        [0.0003, 0.0007, 0.0003,  ..., 0.0004, 0.0003, 0.0001],
        [0.0003, 0.0006, 0.0003,  ..., 0.0005, 0.0004, 0.0002]])