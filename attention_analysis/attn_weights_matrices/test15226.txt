15226
Test: public void testGroovy() throws Exception { Options options = new Options(); options.addOption( OptionBuilder.withLongOpt("define"). withDescription("define a system property"). hasArg(true). withArgName("name=value"). create('D')); options.addOption( OptionBuilder.hasArg(false) .withDescription("usage information") .withLongOpt("help") .create('h')); options.addOption( OptionBuilder.hasArg(false) .withDescription("debug mode will print out full stack traces") .withLongOpt("debug") .create('d')); options.addOption( OptionBuilder.hasArg(false) .withDescription("display the Groovy and JVM versions") .withLongOpt("version") .create('v')); options.addOption( OptionBuilder.withArgName("charset") .hasArg() .withDescription("specify the encoding of the files") .withLongOpt("encoding") .create('c')); options.addOption( OptionBuilder.withArgName("script") .hasArg() .withDescription("specify a command line script") .create('e')); options.addOption( OptionBuilder.withArgName("extension") .hasOptionalArg() .withDescription("modify files in place; create backup if extension is given (e.g. \'.bak\')") .create('i')); options.addOption( OptionBuilder.hasArg(false) .withDescription("process files line by line using implicit 'line' variable") .create('n')); options.addOption( OptionBuilder.hasArg(false) .withDescription("process files line by line and print result (see also -n)") .create('p')); options.addOption( OptionBuilder.withArgName("port") .hasOptionalArg() .withDescription("listen on a port and process inbound lines") .create('l')); options.addOption( OptionBuilder.withArgName("splitPattern") .hasOptionalArg() .withDescription("split lines using splitPattern (default '\\s') using implicit 'split' variable") .withLongOpt("autosplit") .create('a')); Parser parser = new PosixParser(); CommandLine line = parser.parse(options, new String[] { "-e", "println 'hello'" }, true); }
Code: public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; }
tensor([[0.0173, 0.0538, 0.0483,  ..., 0.0192, 0.0336, 0.0076],
        [0.0186, 0.0490, 0.0420,  ..., 0.0176, 0.0368, 0.0088],
        [0.0150, 0.0578, 0.0388,  ..., 0.0218, 0.0288, 0.0064],
        ...,
        [0.0114, 0.0535, 0.0516,  ..., 0.0164, 0.0313, 0.0062],
        [0.0175, 0.0506, 0.0489,  ..., 0.0204, 0.0313, 0.0058],
        [0.0126, 0.0506, 0.0360,  ..., 0.0269, 0.0303, 0.0066]])