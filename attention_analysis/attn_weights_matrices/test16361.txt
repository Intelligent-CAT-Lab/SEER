16361
Test: public void test092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test092"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.Options options2 = posixParser0.getOptions(); org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options(); java.util.List list4 = options3.helpOptions(); java.lang.String[] strArray6 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine7 = posixParser0.parse(options3, strArray6); org.apache.commons.cli.Options options8 = posixParser0.getOptions(); org.apache.commons.cli.PosixParser posixParser9 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine10 = posixParser9.cmd; org.apache.commons.cli.Options options11 = posixParser9.getOptions(); java.util.Properties properties12 = null; posixParser9.processProperties(properties12); org.apache.commons.cli.PosixParser posixParser14 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine15 = posixParser14.cmd; org.apache.commons.cli.Options options16 = posixParser14.getOptions(); org.apache.commons.cli.Options options17 = new org.apache.commons.cli.Options(); java.util.List list18 = options17.helpOptions(); java.lang.String[] strArray20 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine21 = posixParser14.parse(options17, strArray20); org.apache.commons.cli.PosixParser posixParser22 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.PosixParser posixParser23 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine24 = posixParser23.cmd; org.apache.commons.cli.Options options25 = posixParser23.getOptions(); org.apache.commons.cli.Options options26 = new org.apache.commons.cli.Options(); java.util.List list27 = options26.helpOptions(); java.lang.String[] strArray29 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine30 = posixParser23.parse(options26, strArray29); java.lang.String[] strArray31 = null; org.apache.commons.cli.CommandLine commandLine32 = posixParser22.parse(options26, strArray31); org.apache.commons.cli.PosixParser posixParser33 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine34 = posixParser33.cmd; org.apache.commons.cli.Options options35 = posixParser33.getOptions(); java.util.Properties properties36 = null; posixParser33.processProperties(properties36); org.apache.commons.cli.PosixParser posixParser38 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine39 = posixParser38.cmd; org.apache.commons.cli.Options options40 = posixParser38.getOptions(); org.apache.commons.cli.Options options41 = new org.apache.commons.cli.Options(); java.util.List list42 = options41.helpOptions(); java.lang.String[] strArray44 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine45 = posixParser38.parse(options41, strArray44); java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "hi!", "hi!", "", "hi!", "a" }; java.lang.String[] strArray54 = posixParser33.flatten(options41, strArray52, true); org.apache.commons.cli.CommandLine commandLine55 = posixParser14.parse(options26, strArray54); org.apache.commons.cli.PosixParser posixParser56 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine57 = posixParser56.cmd; org.apache.commons.cli.Options options58 = posixParser56.getOptions(); java.util.Properties properties59 = null; posixParser56.processProperties(properties59); org.apache.commons.cli.PosixParser posixParser61 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine62 = posixParser61.cmd; org.apache.commons.cli.Options options63 = posixParser61.getOptions(); org.apache.commons.cli.Options options64 = new org.apache.commons.cli.Options(); java.util.List list65 = options64.helpOptions(); java.lang.String[] strArray67 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine68 = posixParser61.parse(options64, strArray67); java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "hi!", "hi!", "", "hi!", "a" }; java.lang.String[] strArray77 = posixParser56.flatten(options64, strArray75, true); org.apache.commons.cli.PosixParser posixParser78 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.PosixParser posixParser79 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine80 = posixParser79.cmd; org.apache.commons.cli.Options options81 = posixParser79.getOptions(); org.apache.commons.cli.Options options82 = new org.apache.commons.cli.Options(); java.util.List list83 = options82.helpOptions(); java.lang.String[] strArray85 = new java.lang.String[] { "" }; org.apache.commons.cli.CommandLine commandLine86 = posixParser79.parse(options82, strArray85); java.lang.String[] strArray87 = null; org.apache.commons.cli.CommandLine commandLine88 = posixParser78.parse(options82, strArray87); java.util.Properties properties90 = commandLine88.getOptionProperties(""); org.apache.commons.cli.CommandLine commandLine91 = posixParser9.parse(options26, strArray77, properties90); java.lang.String str94 = commandLine91.getOptionValue("arg", "[ Options: [ short {} ] [ long {} ]"); posixParser0.cmd = commandLine91; java.lang.String[] strArray97 = commandLine91.getOptionValues('#'); } ] [ long {} ]" + "'", str94, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init(); this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); while (iter.hasNext()) { String token = (String) iter.next(); if (false) { int pos = token.indexOf('='); String opt = pos == 1 ? token : token.substring(0, pos); if (!options.hasOption(opt)) { processNonOptionToken(token, stopAtNonOption); } else { currentOption = options.getOption(opt); tokens.add(opt); if (pos != -1) { ; } } } else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() <= 2 || options.hasOption(token)) { ; } else { burstToken(token, stopAtNonOption); } } else { processNonOptionToken(token, stopAtNonOption); } gobble(iter); } return (String[]) tokens.toArray(new String[tokens.size()]); }
tensor([[0.0102, 0.0026, 0.0108,  ..., 0.0101, 0.0068, 0.0022],
        [0.0094, 0.0024, 0.0104,  ..., 0.0089, 0.0073, 0.0024],
        [0.0091, 0.0040, 0.0121,  ..., 0.0108, 0.0071, 0.0031],
        ...,
        [0.0101, 0.0036, 0.0116,  ..., 0.0099, 0.0069, 0.0027],
        [0.0103, 0.0020, 0.0145,  ..., 0.0125, 0.0084, 0.0019],
        [0.0100, 0.0024, 0.0103,  ..., 0.0131, 0.0077, 0.0025]])